   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2556                     ; 54 void spi_init(void)
2556                     ; 55 {
2558                     	switch	.text
2559  cdbc               _spi_init:
2561  cdbc 88            	push	a
2562       00000001      OFST:	set	1
2565                     ; 74   PC_ODR |= (uint8_t)0x02;    // 0b00000010 SI=0, SCK=0, -CS=1
2567  cdbd 7212500a      	bset	_PC_ODR,#1
2568                     ; 75   PE_ODR &= (uint8_t)(~0x20); // 0b00100000 -RESET=0
2570  cdc1 721b5014      	bres	_PE_ODR,#5
2571                     ; 78   for(i=0; i<5; i++) wait_timer((uint16_t)50000); // wait 250ms
2573  cdc5 0f01          	clr	(OFST+0,sp)
2575  cdc7               L1461:
2578  cdc7 aec350        	ldw	x,#50000
2579  cdca cdcf6b        	call	_wait_timer
2583  cdcd 0c01          	inc	(OFST+0,sp)
2587  cdcf 7b01          	ld	a,(OFST+0,sp)
2588  cdd1 a105          	cp	a,#5
2589  cdd3 25f2          	jrult	L1461
2590                     ; 81   PE_ODR |= (uint8_t)0x20; // 0b00100000 -RESET=1
2592  cdd5 721a5014      	bset	_PE_ODR,#5
2593                     ; 84   wait_timer((uint16_t)50000); // Wait 50ms
2595  cdd9 aec350        	ldw	x,#50000
2596  cddc cdcf6b        	call	_wait_timer
2598                     ; 99 }
2601  cddf 84            	pop	a
2602  cde0 81            	ret	
2644                     ; 102 void SpiWriteByte(uint8_t nByte)
2644                     ; 103 {
2645                     	switch	.text
2646  cde1               _SpiWriteByte:
2648  cde1 88            	push	a
2649  cde2 88            	push	a
2650       00000001      OFST:	set	1
2653                     ; 106   uint8_t bitnum = (uint8_t)0x80;                // Point at MSB
2655  cde3 a680          	ld	a,#128
2656  cde5 6b01          	ld	(OFST+0,sp),a
2658  cde7               L5661:
2659                     ; 108     if (nByte & bitnum) PC_ODR |= (uint8_t)0x08; // If bit is 1 then 
2661  cde7 7b02          	ld	a,(OFST+1,sp)
2662  cde9 1501          	bcp	a,(OFST+0,sp)
2663  cdeb 2706          	jreq	L3761
2666  cded 7216500a      	bset	_PC_ODR,#3
2668  cdf1 2004          	jra	L5761
2669  cdf3               L3761:
2670                     ; 110     else PC_ODR &= (uint8_t)(~0x08);             // else SPI SO low
2672  cdf3 7217500a      	bres	_PC_ODR,#3
2673  cdf7               L5761:
2674                     ; 112     nop();
2677  cdf7 9d            	nop	
2679                     ; 113     PC_ODR |= (uint8_t)0x04;                     // SCK high
2682  cdf8 7214500a      	bset	_PC_ODR,#2
2683                     ; 114     nop();
2686  cdfc 9d            	nop	
2688                     ; 115     PC_ODR &= (uint8_t)(~0x04);                  // SCK low
2691  cdfd 7215500a      	bres	_PC_ODR,#2
2692                     ; 117     bitnum = (uint8_t)(bitnum >> 1);             // Shift bitnum right one place
2694  ce01 0401          	srl	(OFST+0,sp)
2696                     ; 107   while(bitnum != 0) {
2698  ce03 26e2          	jrne	L5661
2699                     ; 121   PC_ODR &= (uint8_t)(~0x08);                    // SPI SO low on exit
2701  ce05 7217500a      	bres	_PC_ODR,#3
2702                     ; 122 }
2705  ce09 85            	popw	x
2706  ce0a 81            	ret	
2765                     ; 125 void SpiWriteChunk(const uint8_t* pChunk, uint16_t nBytes)
2765                     ; 126 {
2766                     	switch	.text
2767  ce0b               _SpiWriteChunk:
2769  ce0b 89            	pushw	x
2770  ce0c 89            	pushw	x
2771       00000002      OFST:	set	2
2774  ce0d 202c          	jra	L5271
2775  ce0f               L3271:
2776                     ; 131     bitnum = (uint8_t)0x80;                          // Point at MSB
2778  ce0f a680          	ld	a,#128
2779  ce11 6b02          	ld	(OFST+0,sp),a
2781                     ; 132     OutByte = *pChunk++;
2783  ce13 1e03          	ldw	x,(OFST+1,sp)
2784  ce15 f6            	ld	a,(x)
2785  ce16 5c            	incw	x
2786  ce17 1f03          	ldw	(OFST+1,sp),x
2787  ce19 6b01          	ld	(OFST-1,sp),a
2790  ce1b 201a          	jra	L5371
2791  ce1d               L1371:
2792                     ; 135       if (OutByte & bitnum) PC_ODR |= (uint8_t)0x08; // If bit is 1 then
2794  ce1d 1502          	bcp	a,(OFST+0,sp)
2795  ce1f 2706          	jreq	L1471
2798  ce21 7216500a      	bset	_PC_ODR,#3
2800  ce25 2004          	jra	L3471
2801  ce27               L1471:
2802                     ; 137       else PC_ODR &= (uint8_t)(~0x08);               // else SPI SO low
2804  ce27 7217500a      	bres	_PC_ODR,#3
2805  ce2b               L3471:
2806                     ; 139       nop();
2809  ce2b 9d            	nop	
2811                     ; 140       PC_ODR |= (uint8_t)0x04;                       // SCK high
2814  ce2c 7214500a      	bset	_PC_ODR,#2
2815                     ; 141       nop();
2818  ce30 9d            	nop	
2820                     ; 142       PC_ODR &= (uint8_t)(~0x04);                    // SCK low
2823  ce31 7215500a      	bres	_PC_ODR,#2
2824                     ; 144       bitnum = (uint8_t)(bitnum >> 1);               // Shift bitnum right one place
2826  ce35 0402          	srl	(OFST+0,sp)
2828  ce37               L5371:
2829                     ; 134     while(bitnum != 0) {
2831  ce37 0d02          	tnz	(OFST+0,sp)
2832  ce39 26e2          	jrne	L1371
2833  ce3b               L5271:
2834                     ; 130   while (nBytes--) {
2836  ce3b 1e07          	ldw	x,(OFST+5,sp)
2837  ce3d 5a            	decw	x
2838  ce3e 1f07          	ldw	(OFST+5,sp),x
2839  ce40 5c            	incw	x
2840  ce41 26cc          	jrne	L3271
2841                     ; 149   PC_ODR &= (uint8_t)(~0x08);                        // SPI SO low on exit
2843  ce43 7217500a      	bres	_PC_ODR,#3
2844                     ; 150 }
2847  ce47 5b04          	addw	sp,#4
2848  ce49 81            	ret	
2890                     ; 153 uint8_t SpiReadByte(void)
2890                     ; 154 {
2891                     	switch	.text
2892  ce4a               _SpiReadByte:
2894  ce4a 89            	pushw	x
2895       00000002      OFST:	set	2
2898                     ; 159   uint8_t bitnum = (uint8_t)0x80;                 // Point at MSB
2900  ce4b a680          	ld	a,#128
2901  ce4d 6b02          	ld	(OFST+0,sp),a
2903                     ; 160   uint8_t InByte = 0;
2905  ce4f 0f01          	clr	(OFST-1,sp)
2908  ce51 2019          	jra	L7671
2909  ce53               L3671:
2910                     ; 164     if (PC_IDR & (uint8_t)0x10) InByte |= bitnum; // SPI incoming bit = 1
2912  ce53 7209500b04    	btjf	_PC_IDR,#4,L3771
2915  ce58 1a01          	or	a,(OFST-1,sp)
2917  ce5a 2003          	jra	L5771
2918  ce5c               L3771:
2919                     ; 165     else InByte &= (uint8_t)(~bitnum);            // SPI incoming bit = 0
2921  ce5c 43            	cpl	a
2922  ce5d 1401          	and	a,(OFST-1,sp)
2923  ce5f               L5771:
2924  ce5f 6b01          	ld	(OFST-1,sp),a
2926                     ; 167     PC_ODR |= (uint8_t)0x04;                      // SCK high
2928  ce61 7214500a      	bset	_PC_ODR,#2
2929                     ; 168     nop();
2932  ce65 9d            	nop	
2934                     ; 169     PC_ODR &= (uint8_t)(~0x04);                   // SCK low
2937  ce66 7215500a      	bres	_PC_ODR,#2
2938                     ; 171     bitnum = (uint8_t)(bitnum >> 1);              // Shift bitnum right one place
2940  ce6a 0402          	srl	(OFST+0,sp)
2942  ce6c               L7671:
2943                     ; 161   while(bitnum != 0) {
2945  ce6c 7b02          	ld	a,(OFST+0,sp)
2946  ce6e 26e3          	jrne	L3671
2947                     ; 175   return InByte;
2949  ce70 7b01          	ld	a,(OFST-1,sp)
2952  ce72 85            	popw	x
2953  ce73 81            	ret	
3012                     ; 179 void SpiReadChunk(uint8_t* pChunk, uint16_t nBytes)
3012                     ; 180 {
3013                     	switch	.text
3014  ce74               _SpiReadChunk:
3016  ce74 89            	pushw	x
3017  ce75 89            	pushw	x
3018       00000002      OFST:	set	2
3021                     ; 188   PC_ODR &= (uint8_t)(~0x08);                        // SO low
3023  ce76 7217500a      	bres	_PC_ODR,#3
3025  ce7a 202d          	jra	L5202
3026  ce7c               L3202:
3027                     ; 191     bitnum = (uint8_t)0x80;                          // Point at MSB
3029  ce7c a680          	ld	a,#128
3030  ce7e 6b02          	ld	(OFST+0,sp),a
3032                     ; 192     InByte = 0;
3034  ce80 0f01          	clr	(OFST-1,sp)
3037  ce82 2019          	jra	L5302
3038  ce84               L1302:
3039                     ; 197       if (PC_IDR & (uint8_t)0x10) InByte |= bitnum;  // SPI incoming bit = 1
3041  ce84 7209500b04    	btjf	_PC_IDR,#4,L1402
3044  ce89 1a01          	or	a,(OFST-1,sp)
3046  ce8b 2003          	jra	L3402
3047  ce8d               L1402:
3048                     ; 198       else InByte &= (uint8_t)(~bitnum);             // SPI incoming bit = 0
3050  ce8d 43            	cpl	a
3051  ce8e 1401          	and	a,(OFST-1,sp)
3052  ce90               L3402:
3053  ce90 6b01          	ld	(OFST-1,sp),a
3055                     ; 200       PC_ODR |= (uint8_t)0x04;                       // SCK high
3057  ce92 7214500a      	bset	_PC_ODR,#2
3058                     ; 201       nop();
3061  ce96 9d            	nop	
3063                     ; 202       PC_ODR &= (uint8_t)(~0x04);                    // SCK low
3066  ce97 7215500a      	bres	_PC_ODR,#2
3067                     ; 204       bitnum = (uint8_t)(bitnum >> 1);               // Shift bitnum right one place
3069  ce9b 0402          	srl	(OFST+0,sp)
3071  ce9d               L5302:
3072                     ; 193     while(bitnum != 0) {
3074  ce9d 7b02          	ld	a,(OFST+0,sp)
3075  ce9f 26e3          	jrne	L1302
3076                     ; 208   *pChunk++ = InByte;                                // Save byte in the buffer
3078  cea1 1e03          	ldw	x,(OFST+1,sp)
3079  cea3 7b01          	ld	a,(OFST-1,sp)
3080  cea5 f7            	ld	(x),a
3081  cea6 5c            	incw	x
3082  cea7 1f03          	ldw	(OFST+1,sp),x
3083  cea9               L5202:
3084                     ; 190   while (nBytes--) {
3086  cea9 1e07          	ldw	x,(OFST+5,sp)
3087  ceab 5a            	decw	x
3088  ceac 1f07          	ldw	(OFST+5,sp),x
3089  ceae 5c            	incw	x
3090  ceaf 26cb          	jrne	L3202
3091                     ; 210 }
3094  ceb1 5b04          	addw	sp,#4
3095  ceb3 81            	ret	
3108                     	xref	_wait_timer
3109                     	xdef	_SpiReadChunk
3110                     	xdef	_SpiReadByte
3111                     	xdef	_SpiWriteChunk
3112                     	xdef	_SpiWriteByte
3113                     	xdef	_spi_init
3132                     	end
