   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2556                     ; 54 void spi_init(void)
2556                     ; 55 {
2558                     	switch	.text
2559  e290               _spi_init:
2561  e290 88            	push	a
2562       00000001      OFST:	set	1
2565                     ; 74   PC_ODR |= (uint8_t)0x02;    // 0b00000010 SI=0, SCK=0, -CS=1
2567  e291 7212500a      	bset	_PC_ODR,#1
2568                     ; 75   PE_ODR &= (uint8_t)(~0x20); // 0b00100000 -RESET=0
2570  e295 721b5014      	bres	_PE_ODR,#5
2571                     ; 78   for(i=0; i<5; i++) wait_timer((uint16_t)50000); // wait 250ms
2573  e299 0f01          	clr	(OFST+0,sp)
2575  e29b               L1461:
2578  e29b aec350        	ldw	x,#50000
2579  e29e cde43f        	call	_wait_timer
2583  e2a1 0c01          	inc	(OFST+0,sp)
2587  e2a3 7b01          	ld	a,(OFST+0,sp)
2588  e2a5 a105          	cp	a,#5
2589  e2a7 25f2          	jrult	L1461
2590                     ; 81   PE_ODR |= (uint8_t)0x20; // 0b00100000 -RESET=1
2592  e2a9 721a5014      	bset	_PE_ODR,#5
2593                     ; 84   wait_timer((uint16_t)50000); // Wait 50ms
2595  e2ad aec350        	ldw	x,#50000
2596  e2b0 cde43f        	call	_wait_timer
2598                     ; 99 }
2601  e2b3 84            	pop	a
2602  e2b4 81            	ret	
2644                     ; 102 void SpiWriteByte(uint8_t nByte)
2644                     ; 103 {
2645                     	switch	.text
2646  e2b5               _SpiWriteByte:
2648  e2b5 88            	push	a
2649  e2b6 88            	push	a
2650       00000001      OFST:	set	1
2653                     ; 106   uint8_t bitnum = (uint8_t)0x80;                // Point at MSB
2655  e2b7 a680          	ld	a,#128
2656  e2b9 6b01          	ld	(OFST+0,sp),a
2658  e2bb               L5661:
2659                     ; 108     if (nByte & bitnum) PC_ODR |= (uint8_t)0x08; // If bit is 1 then 
2661  e2bb 7b02          	ld	a,(OFST+1,sp)
2662  e2bd 1501          	bcp	a,(OFST+0,sp)
2663  e2bf 2706          	jreq	L3761
2666  e2c1 7216500a      	bset	_PC_ODR,#3
2668  e2c5 2004          	jra	L5761
2669  e2c7               L3761:
2670                     ; 110     else PC_ODR &= (uint8_t)(~0x08);             // else SPI SO low
2672  e2c7 7217500a      	bres	_PC_ODR,#3
2673  e2cb               L5761:
2674                     ; 112     nop();
2677  e2cb 9d            	nop	
2679                     ; 113     PC_ODR |= (uint8_t)0x04;                     // SCK high
2682  e2cc 7214500a      	bset	_PC_ODR,#2
2683                     ; 114     nop();
2686  e2d0 9d            	nop	
2688                     ; 115     PC_ODR &= (uint8_t)(~0x04);                  // SCK low
2691  e2d1 7215500a      	bres	_PC_ODR,#2
2692                     ; 117     bitnum = (uint8_t)(bitnum >> 1);             // Shift bitnum right one place
2694  e2d5 0401          	srl	(OFST+0,sp)
2696                     ; 107   while(bitnum != 0) {
2698  e2d7 26e2          	jrne	L5661
2699                     ; 121   PC_ODR &= (uint8_t)(~0x08);                    // SPI SO low on exit
2701  e2d9 7217500a      	bres	_PC_ODR,#3
2702                     ; 122 }
2705  e2dd 85            	popw	x
2706  e2de 81            	ret	
2765                     ; 125 void SpiWriteChunk(const uint8_t* pChunk, uint16_t nBytes)
2765                     ; 126 {
2766                     	switch	.text
2767  e2df               _SpiWriteChunk:
2769  e2df 89            	pushw	x
2770  e2e0 89            	pushw	x
2771       00000002      OFST:	set	2
2774  e2e1 202c          	jra	L5271
2775  e2e3               L3271:
2776                     ; 131     bitnum = (uint8_t)0x80;                          // Point at MSB
2778  e2e3 a680          	ld	a,#128
2779  e2e5 6b02          	ld	(OFST+0,sp),a
2781                     ; 132     OutByte = *pChunk++;
2783  e2e7 1e03          	ldw	x,(OFST+1,sp)
2784  e2e9 f6            	ld	a,(x)
2785  e2ea 5c            	incw	x
2786  e2eb 1f03          	ldw	(OFST+1,sp),x
2787  e2ed 6b01          	ld	(OFST-1,sp),a
2790  e2ef 201a          	jra	L5371
2791  e2f1               L1371:
2792                     ; 135       if (OutByte & bitnum) PC_ODR |= (uint8_t)0x08; // If bit is 1 then
2794  e2f1 1502          	bcp	a,(OFST+0,sp)
2795  e2f3 2706          	jreq	L1471
2798  e2f5 7216500a      	bset	_PC_ODR,#3
2800  e2f9 2004          	jra	L3471
2801  e2fb               L1471:
2802                     ; 137       else PC_ODR &= (uint8_t)(~0x08);               // else SPI SO low
2804  e2fb 7217500a      	bres	_PC_ODR,#3
2805  e2ff               L3471:
2806                     ; 139       nop();
2809  e2ff 9d            	nop	
2811                     ; 140       PC_ODR |= (uint8_t)0x04;                       // SCK high
2814  e300 7214500a      	bset	_PC_ODR,#2
2815                     ; 141       nop();
2818  e304 9d            	nop	
2820                     ; 142       PC_ODR &= (uint8_t)(~0x04);                    // SCK low
2823  e305 7215500a      	bres	_PC_ODR,#2
2824                     ; 144       bitnum = (uint8_t)(bitnum >> 1);               // Shift bitnum right one place
2826  e309 0402          	srl	(OFST+0,sp)
2828  e30b               L5371:
2829                     ; 134     while(bitnum != 0) {
2831  e30b 0d02          	tnz	(OFST+0,sp)
2832  e30d 26e2          	jrne	L1371
2833  e30f               L5271:
2834                     ; 130   while (nBytes--) {
2836  e30f 1e07          	ldw	x,(OFST+5,sp)
2837  e311 5a            	decw	x
2838  e312 1f07          	ldw	(OFST+5,sp),x
2839  e314 5c            	incw	x
2840  e315 26cc          	jrne	L3271
2841                     ; 149   PC_ODR &= (uint8_t)(~0x08);                        // SPI SO low on exit
2843  e317 7217500a      	bres	_PC_ODR,#3
2844                     ; 150 }
2847  e31b 5b04          	addw	sp,#4
2848  e31d 81            	ret	
2890                     ; 153 uint8_t SpiReadByte(void)
2890                     ; 154 {
2891                     	switch	.text
2892  e31e               _SpiReadByte:
2894  e31e 89            	pushw	x
2895       00000002      OFST:	set	2
2898                     ; 159   uint8_t bitnum = (uint8_t)0x80;                 // Point at MSB
2900  e31f a680          	ld	a,#128
2901  e321 6b02          	ld	(OFST+0,sp),a
2903                     ; 160   uint8_t InByte = 0;
2905  e323 0f01          	clr	(OFST-1,sp)
2908  e325 2019          	jra	L7671
2909  e327               L3671:
2910                     ; 164     if (PC_IDR & (uint8_t)0x10) InByte |= bitnum; // SPI incoming bit = 1
2912  e327 7209500b04    	btjf	_PC_IDR,#4,L3771
2915  e32c 1a01          	or	a,(OFST-1,sp)
2917  e32e 2003          	jra	L5771
2918  e330               L3771:
2919                     ; 165     else InByte &= (uint8_t)(~bitnum);            // SPI incoming bit = 0
2921  e330 43            	cpl	a
2922  e331 1401          	and	a,(OFST-1,sp)
2923  e333               L5771:
2924  e333 6b01          	ld	(OFST-1,sp),a
2926                     ; 167     PC_ODR |= (uint8_t)0x04;                      // SCK high
2928  e335 7214500a      	bset	_PC_ODR,#2
2929                     ; 168     nop();
2932  e339 9d            	nop	
2934                     ; 169     PC_ODR &= (uint8_t)(~0x04);                   // SCK low
2937  e33a 7215500a      	bres	_PC_ODR,#2
2938                     ; 171     bitnum = (uint8_t)(bitnum >> 1);              // Shift bitnum right one place
2940  e33e 0402          	srl	(OFST+0,sp)
2942  e340               L7671:
2943                     ; 161   while(bitnum != 0) {
2945  e340 7b02          	ld	a,(OFST+0,sp)
2946  e342 26e3          	jrne	L3671
2947                     ; 175   return InByte;
2949  e344 7b01          	ld	a,(OFST-1,sp)
2952  e346 85            	popw	x
2953  e347 81            	ret	
3012                     ; 179 void SpiReadChunk(uint8_t* pChunk, uint16_t nBytes)
3012                     ; 180 {
3013                     	switch	.text
3014  e348               _SpiReadChunk:
3016  e348 89            	pushw	x
3017  e349 89            	pushw	x
3018       00000002      OFST:	set	2
3021                     ; 188   PC_ODR &= (uint8_t)(~0x08);                        // SO low
3023  e34a 7217500a      	bres	_PC_ODR,#3
3025  e34e 202d          	jra	L5202
3026  e350               L3202:
3027                     ; 191     bitnum = (uint8_t)0x80;                          // Point at MSB
3029  e350 a680          	ld	a,#128
3030  e352 6b02          	ld	(OFST+0,sp),a
3032                     ; 192     InByte = 0;
3034  e354 0f01          	clr	(OFST-1,sp)
3037  e356 2019          	jra	L5302
3038  e358               L1302:
3039                     ; 197       if (PC_IDR & (uint8_t)0x10) InByte |= bitnum;  // SPI incoming bit = 1
3041  e358 7209500b04    	btjf	_PC_IDR,#4,L1402
3044  e35d 1a01          	or	a,(OFST-1,sp)
3046  e35f 2003          	jra	L3402
3047  e361               L1402:
3048                     ; 198       else InByte &= (uint8_t)(~bitnum);             // SPI incoming bit = 0
3050  e361 43            	cpl	a
3051  e362 1401          	and	a,(OFST-1,sp)
3052  e364               L3402:
3053  e364 6b01          	ld	(OFST-1,sp),a
3055                     ; 200       PC_ODR |= (uint8_t)0x04;                       // SCK high
3057  e366 7214500a      	bset	_PC_ODR,#2
3058                     ; 201       nop();
3061  e36a 9d            	nop	
3063                     ; 202       PC_ODR &= (uint8_t)(~0x04);                    // SCK low
3066  e36b 7215500a      	bres	_PC_ODR,#2
3067                     ; 204       bitnum = (uint8_t)(bitnum >> 1);               // Shift bitnum right one place
3069  e36f 0402          	srl	(OFST+0,sp)
3071  e371               L5302:
3072                     ; 193     while(bitnum != 0) {
3074  e371 7b02          	ld	a,(OFST+0,sp)
3075  e373 26e3          	jrne	L1302
3076                     ; 208   *pChunk++ = InByte;                                // Save byte in the buffer
3078  e375 1e03          	ldw	x,(OFST+1,sp)
3079  e377 7b01          	ld	a,(OFST-1,sp)
3080  e379 f7            	ld	(x),a
3081  e37a 5c            	incw	x
3082  e37b 1f03          	ldw	(OFST+1,sp),x
3083  e37d               L5202:
3084                     ; 190   while (nBytes--) {
3086  e37d 1e07          	ldw	x,(OFST+5,sp)
3087  e37f 5a            	decw	x
3088  e380 1f07          	ldw	(OFST+5,sp),x
3089  e382 5c            	incw	x
3090  e383 26cb          	jrne	L3202
3091                     ; 210 }
3094  e385 5b04          	addw	sp,#4
3095  e387 81            	ret	
3108                     	xref	_wait_timer
3109                     	xdef	_SpiReadChunk
3110                     	xdef	_SpiReadByte
3111                     	xdef	_SpiWriteChunk
3112                     	xdef	_SpiWriteByte
3113                     	xdef	_spi_init
3132                     	end
