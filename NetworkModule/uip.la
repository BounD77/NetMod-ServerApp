   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     	switch	.data
  18  000a               _uip_ethaddr:
  19  000a 01            	dc.b	1
  20  000b 02            	dc.b	2
  21  000c 03            	dc.b	3
  22  000d 04            	dc.b	4
  23  000e 05            	dc.b	5
  24  000f 06            	dc.b	6
  63                     ; 158 void uip_setipid(uint16_t id)
  63                     ; 159 {
  65                     	switch	.text
  66  cf8e               _uip_setipid:
  70                     ; 160   ipid = id;
  72  cf8e cf006c        	ldw	L31_ipid,x
  73                     ; 161 }
  76  cf91 81            	ret	
 119                     ; 212 void uip_add32(uint8_t *op32, uint16_t op16)
 119                     ; 213 {
 120                     	switch	.text
 121  cf92               _uip_add32:
 123  cf92 89            	pushw	x
 124  cf93 89            	pushw	x
 125       00000002      OFST:	set	2
 128                     ; 214   uip_acc32[3] = (uint8_t)(op32[3] + (op16 & 0xff));
 130  cf94 7b08          	ld	a,(OFST+6,sp)
 131  cf96 eb03          	add	a,(3,x)
 132  cf98 c700e4        	ld	_uip_acc32+3,a
 133                     ; 215   uip_acc32[2] = (uint8_t)(op32[2] + (op16 >> 8));
 135  cf9b e602          	ld	a,(2,x)
 136  cf9d 1b07          	add	a,(OFST+5,sp)
 137  cf9f c700e3        	ld	_uip_acc32+2,a
 138                     ; 216   uip_acc32[1] = op32[1];
 140  cfa2 e601          	ld	a,(1,x)
 141  cfa4 c700e2        	ld	_uip_acc32+1,a
 142                     ; 217   uip_acc32[0] = op32[0];
 144  cfa7 f6            	ld	a,(x)
 145  cfa8 c700e1        	ld	_uip_acc32,a
 146                     ; 219   if (uip_acc32[2] < (op16 >> 8)) {
 148  cfab 4f            	clr	a
 149  cfac 1e07          	ldw	x,(OFST+5,sp)
 150  cfae 01            	rrwa	x,a
 151  cfaf c600e3        	ld	a,_uip_acc32+2
 152  cfb2 905f          	clrw	y
 153  cfb4 9097          	ld	yl,a
 154  cfb6 90bf07        	ldw	c_y,y
 155  cfb9 b307          	cpw	x,c_y
 156  cfbb 230a          	jrule	L76
 157                     ; 220     ++uip_acc32[1];
 159  cfbd 725c00e2      	inc	_uip_acc32+1
 160                     ; 221     if (uip_acc32[1] == 0) {
 162  cfc1 2604          	jrne	L76
 163                     ; 222       ++uip_acc32[0];
 165  cfc3 725c00e1      	inc	_uip_acc32
 166  cfc7               L76:
 167                     ; 226   if (uip_acc32[3] < (op16 & 0xff)) {
 169  cfc7 c600e4        	ld	a,_uip_acc32+3
 170  cfca 5f            	clrw	x
 171  cfcb 97            	ld	xl,a
 172  cfcc 1f01          	ldw	(OFST-1,sp),x
 174  cfce 5f            	clrw	x
 175  cfcf 7b08          	ld	a,(OFST+6,sp)
 176  cfd1 02            	rlwa	x,a
 177  cfd2 1301          	cpw	x,(OFST-1,sp)
 178  cfd4 2310          	jrule	L37
 179                     ; 227     ++uip_acc32[2];
 181  cfd6 725c00e3      	inc	_uip_acc32+2
 182                     ; 228     if (uip_acc32[2] == 0) {
 184  cfda 260a          	jrne	L37
 185                     ; 229       ++uip_acc32[1];
 187  cfdc 725c00e2      	inc	_uip_acc32+1
 188                     ; 230       if (uip_acc32[1] == 0) {
 190  cfe0 2604          	jrne	L37
 191                     ; 231         ++uip_acc32[0];
 193  cfe2 725c00e1      	inc	_uip_acc32
 194  cfe6               L37:
 195                     ; 235 }
 198  cfe6 5b04          	addw	sp,#4
 199  cfe8 81            	ret	
 275                     ; 242 static uint16_t chksum(uint16_t sum, const uint8_t *data, uint16_t len)
 275                     ; 243 {
 276                     	switch	.text
 277  cfe9               L101_chksum:
 279  cfe9 89            	pushw	x
 280  cfea 5206          	subw	sp,#6
 281       00000006      OFST:	set	6
 284                     ; 248   dataptr = data;
 286  cfec 1e0b          	ldw	x,(OFST+5,sp)
 287  cfee 1f05          	ldw	(OFST-1,sp),x
 289                     ; 249   last_byte = data + len - 1;
 291  cff0 72fb0d        	addw	x,(OFST+7,sp)
 292  cff3 5a            	decw	x
 293  cff4 1f01          	ldw	(OFST-5,sp),x
 296  cff6 1e05          	ldw	x,(OFST-1,sp)
 297  cff8 2020          	jra	L341
 298  cffa               L731:
 299                     ; 252     t = (dataptr[0] << 8) + dataptr[1];
 301  cffa f6            	ld	a,(x)
 302  cffb 5f            	clrw	x
 303  cffc 97            	ld	xl,a
 304  cffd 1605          	ldw	y,(OFST-1,sp)
 305  cfff 4f            	clr	a
 306  d000 90eb01        	add	a,(1,y)
 307  d003 2401          	jrnc	L21
 308  d005 5c            	incw	x
 309  d006               L21:
 310  d006 02            	rlwa	x,a
 311  d007 1f03          	ldw	(OFST-3,sp),x
 313                     ; 253     sum += t;
 315  d009 72fb07        	addw	x,(OFST+1,sp)
 316                     ; 254     if (sum < t) sum++; /* carry */
 318  d00c 1303          	cpw	x,(OFST-3,sp)
 319  d00e 2401          	jruge	L741
 322  d010 5c            	incw	x
 323  d011               L741:
 324  d011 1f07          	ldw	(OFST+1,sp),x
 325                     ; 255     dataptr += 2;
 327  d013 1e05          	ldw	x,(OFST-1,sp)
 328  d015 1c0002        	addw	x,#2
 329  d018 1f05          	ldw	(OFST-1,sp),x
 331  d01a               L341:
 332                     ; 251   while (dataptr < last_byte) { /* At least two more bytes */
 334  d01a 1301          	cpw	x,(OFST-5,sp)
 335  d01c 25dc          	jrult	L731
 336                     ; 258   if (dataptr == last_byte) {
 338  d01e 2612          	jrne	L151
 339                     ; 259     t = (dataptr[0] << 8) + 0;
 341  d020 f6            	ld	a,(x)
 342  d021 97            	ld	xl,a
 343  d022 4f            	clr	a
 344  d023 02            	rlwa	x,a
 345  d024 1f03          	ldw	(OFST-3,sp),x
 347                     ; 260     sum += t;
 349  d026 72fb07        	addw	x,(OFST+1,sp)
 350  d029 1f07          	ldw	(OFST+1,sp),x
 351                     ; 261     if (sum < t) sum++; /* carry */
 353  d02b 1303          	cpw	x,(OFST-3,sp)
 354  d02d 2403          	jruge	L151
 357  d02f 5c            	incw	x
 358  d030 1f07          	ldw	(OFST+1,sp),x
 359  d032               L151:
 360                     ; 264   return sum;
 362  d032 1e07          	ldw	x,(OFST+1,sp)
 365  d034 5b08          	addw	sp,#8
 366  d036 81            	ret	
 410                     ; 269 uint16_t uip_chksum(uint16_t *data, uint16_t len)
 410                     ; 270 {
 411                     	switch	.text
 412  d037               _uip_chksum:
 414  d037 89            	pushw	x
 415       00000000      OFST:	set	0
 418                     ; 271   return htons(chksum(0, (uint8_t *)data, len));
 420  d038 1e05          	ldw	x,(OFST+5,sp)
 421  d03a 89            	pushw	x
 422  d03b 1e03          	ldw	x,(OFST+3,sp)
 423  d03d 89            	pushw	x
 424  d03e 5f            	clrw	x
 425  d03f ada8          	call	L101_chksum
 427  d041 5b04          	addw	sp,#4
 428  d043 cddace        	call	_htons
 432  d046 5b02          	addw	sp,#2
 433  d048 81            	ret	
 468                     ; 277 uint16_t uip_ipchksum(void)
 468                     ; 278 {
 469                     	switch	.text
 470  d049               _uip_ipchksum:
 472  d049 89            	pushw	x
 473       00000002      OFST:	set	2
 476                     ; 281   sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 478  d04a ae0014        	ldw	x,#20
 479  d04d 89            	pushw	x
 480  d04e ae01e9        	ldw	x,#_uip_buf+14
 481  d051 89            	pushw	x
 482  d052 5f            	clrw	x
 483  d053 ad94          	call	L101_chksum
 485  d055 5b04          	addw	sp,#4
 486  d057 1f01          	ldw	(OFST-1,sp),x
 488                     ; 283   return (sum == 0) ? 0xffff : htons(sum);
 490  d059 2603          	jrne	L62
 491  d05b 5a            	decw	x
 492  d05c 2003          	jra	L03
 493  d05e               L62:
 494  d05e cddace        	call	_htons
 496  d061               L03:
 499  d061 5b02          	addw	sp,#2
 500  d063 81            	ret	
 549                     ; 289 static uint16_t upper_layer_chksum(uint8_t proto)
 549                     ; 290 {
 550                     	switch	.text
 551  d064               L112_upper_layer_chksum:
 553  d064 88            	push	a
 554  d065 5204          	subw	sp,#4
 555       00000004      OFST:	set	4
 558                     ; 294   upper_layer_len = (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 560  d067 c601eb        	ld	a,_uip_buf+16
 561  d06a 5f            	clrw	x
 562  d06b 97            	ld	xl,a
 563  d06c 4f            	clr	a
 564  d06d cb01ec        	add	a,_uip_buf+17
 565  d070 2401          	jrnc	L63
 566  d072 5c            	incw	x
 567  d073               L63:
 568  d073 02            	rlwa	x,a
 569  d074 1d0014        	subw	x,#20
 570  d077 1f01          	ldw	(OFST-3,sp),x
 572                     ; 299   sum = upper_layer_len + proto;
 574  d079 5f            	clrw	x
 575  d07a 7b05          	ld	a,(OFST+1,sp)
 576  d07c 97            	ld	xl,a
 577  d07d 72fb01        	addw	x,(OFST-3,sp)
 578  d080 1f03          	ldw	(OFST-1,sp),x
 580                     ; 301   sum = chksum(sum, (uint8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 582  d082 ae0008        	ldw	x,#8
 583  d085 89            	pushw	x
 584  d086 ae01f5        	ldw	x,#_uip_buf+26
 585  d089 89            	pushw	x
 586  d08a 1e07          	ldw	x,(OFST+3,sp)
 587  d08c cdcfe9        	call	L101_chksum
 589  d08f 5b04          	addw	sp,#4
 590  d091 1f03          	ldw	(OFST-1,sp),x
 592                     ; 304   sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN], upper_layer_len);
 594  d093 1e01          	ldw	x,(OFST-3,sp)
 595  d095 89            	pushw	x
 596  d096 ae01fd        	ldw	x,#_uip_buf+34
 597  d099 89            	pushw	x
 598  d09a 1e07          	ldw	x,(OFST+3,sp)
 599  d09c cdcfe9        	call	L101_chksum
 601  d09f 5b04          	addw	sp,#4
 602  d0a1 1f03          	ldw	(OFST-1,sp),x
 604                     ; 306   return (sum == 0) ? 0xffff : htons(sum);
 606  d0a3 2603          	jrne	L44
 607  d0a5 5a            	decw	x
 608  d0a6 2003          	jra	L64
 609  d0a8               L44:
 610  d0a8 cddace        	call	_htons
 612  d0ab               L64:
 615  d0ab 5b05          	addw	sp,#5
 616  d0ad 81            	ret	
 640                     ; 311 uint16_t uip_tcpchksum(void)
 640                     ; 312 {
 641                     	switch	.text
 642  d0ae               _uip_tcpchksum:
 646                     ; 313   return upper_layer_chksum(UIP_PROTO_TCP);
 648  d0ae a606          	ld	a,#6
 652  d0b0 20b2          	jp	L112_upper_layer_chksum
 679                     ; 319 void uip_init(void)
 679                     ; 320 {
 680                     	switch	.text
 681  d0b2               _uip_init:
 685                     ; 321   for (c = 0; c < UIP_LISTENPORTS; ++c) uip_listenports[c] = 0;
 687  d0b2 4f            	clr	a
 688  d0b3 c70067        	ld	L14_c,a
 689  d0b6               L352:
 692  d0b6 5f            	clrw	x
 693  d0b7 97            	ld	xl,a
 694  d0b8 58            	sllw	x
 695  d0b9 905f          	clrw	y
 696  d0bb df006e        	ldw	(_uip_listenports,x),y
 699  d0be 725c0067      	inc	L14_c
 702  d0c2 c60067        	ld	a,L14_c
 703  d0c5 a105          	cp	a,#5
 704  d0c7 25ed          	jrult	L352
 705                     ; 322   for (c = 0; c < UIP_CONNS; ++c) uip_conns[c].tcpstateflags = UIP_CLOSED;
 707  d0c9 4f            	clr	a
 708  d0ca c70067        	ld	L14_c,a
 709  d0cd               L162:
 712  d0cd 97            	ld	xl,a
 713  d0ce a628          	ld	a,#40
 714  d0d0 42            	mul	x,a
 715  d0d1 724f00fe      	clr	(_uip_conns+25,x)
 718  d0d5 725c0067      	inc	L14_c
 721  d0d9 c60067        	ld	a,L14_c
 722  d0dc a106          	cp	a,#6
 723  d0de 25ed          	jrult	L162
 724                     ; 327   uip_init_stats();
 727                     ; 329 }
 730  d0e0 2000          	jp	_uip_init_stats
 754                     ; 333 void uip_init_stats(void)
 754                     ; 334 {
 755                     	switch	.text
 756  d0e2               _uip_init_stats:
 760                     ; 337   uip_stat.ip.drop = 0;
 762  d0e2 5f            	clrw	x
 763  d0e3 cf008b        	ldw	_uip_stat+2,x
 764  d0e6 cf0089        	ldw	_uip_stat,x
 765                     ; 338   uip_stat.ip.recv = 0;
 767  d0e9 cf008f        	ldw	_uip_stat+6,x
 768  d0ec cf008d        	ldw	_uip_stat+4,x
 769                     ; 339   uip_stat.ip.sent = 0;
 771  d0ef cf0093        	ldw	_uip_stat+10,x
 772  d0f2 cf0091        	ldw	_uip_stat+8,x
 773                     ; 340   uip_stat.ip.vhlerr = 0;
 775  d0f5 cf0097        	ldw	_uip_stat+14,x
 776  d0f8 cf0095        	ldw	_uip_stat+12,x
 777                     ; 341   uip_stat.ip.hblenerr = 0;
 779  d0fb cf009b        	ldw	_uip_stat+18,x
 780  d0fe cf0099        	ldw	_uip_stat+16,x
 781                     ; 342   uip_stat.ip.lblenerr = 0;
 783  d101 cf009f        	ldw	_uip_stat+22,x
 784  d104 cf009d        	ldw	_uip_stat+20,x
 785                     ; 343   uip_stat.ip.fragerr = 0;
 787  d107 cf00a3        	ldw	_uip_stat+26,x
 788  d10a cf00a1        	ldw	_uip_stat+24,x
 789                     ; 344   uip_stat.ip.chkerr = 0;
 791  d10d cf00a7        	ldw	_uip_stat+30,x
 792  d110 cf00a5        	ldw	_uip_stat+28,x
 793                     ; 345   uip_stat.ip.protoerr = 0;
 795  d113 cf00ab        	ldw	_uip_stat+34,x
 796  d116 cf00a9        	ldw	_uip_stat+32,x
 797                     ; 346   uip_stat.icmp.drop = 0;
 799  d119 cf00af        	ldw	_uip_stat+38,x
 800  d11c cf00ad        	ldw	_uip_stat+36,x
 801                     ; 347   uip_stat.icmp.recv = 0;
 803  d11f cf00b3        	ldw	_uip_stat+42,x
 804  d122 cf00b1        	ldw	_uip_stat+40,x
 805                     ; 348   uip_stat.icmp.sent = 0;
 807  d125 cf00b7        	ldw	_uip_stat+46,x
 808  d128 cf00b5        	ldw	_uip_stat+44,x
 809                     ; 349   uip_stat.icmp.typeerr = 0;
 811  d12b cf00bb        	ldw	_uip_stat+50,x
 812  d12e cf00b9        	ldw	_uip_stat+48,x
 813                     ; 350   uip_stat.tcp.drop = 0;
 815  d131 cf00bf        	ldw	_uip_stat+54,x
 816  d134 cf00bd        	ldw	_uip_stat+52,x
 817                     ; 351   uip_stat.tcp.recv = 0;
 819  d137 cf00c3        	ldw	_uip_stat+58,x
 820  d13a cf00c1        	ldw	_uip_stat+56,x
 821                     ; 352   uip_stat.tcp.sent = 0;
 823  d13d cf00c7        	ldw	_uip_stat+62,x
 824  d140 cf00c5        	ldw	_uip_stat+60,x
 825                     ; 353   uip_stat.tcp.chkerr = 0;
 827  d143 cf00cb        	ldw	_uip_stat+66,x
 828  d146 cf00c9        	ldw	_uip_stat+64,x
 829                     ; 354   uip_stat.tcp.ackerr = 0;
 831  d149 cf00cf        	ldw	_uip_stat+70,x
 832  d14c cf00cd        	ldw	_uip_stat+68,x
 833                     ; 355   uip_stat.tcp.rst = 0;
 835  d14f cf00d3        	ldw	_uip_stat+74,x
 836  d152 cf00d1        	ldw	_uip_stat+72,x
 837                     ; 356   uip_stat.tcp.rexmit = 0;
 839  d155 cf00d7        	ldw	_uip_stat+78,x
 840  d158 cf00d5        	ldw	_uip_stat+76,x
 841                     ; 357   uip_stat.tcp.syndrop = 0;
 843  d15b cf00db        	ldw	_uip_stat+82,x
 844  d15e cf00d9        	ldw	_uip_stat+80,x
 845                     ; 358   uip_stat.tcp.synrst = 0;
 847  d161 cf00df        	ldw	_uip_stat+86,x
 848  d164 cf00dd        	ldw	_uip_stat+84,x
 849                     ; 360 }
 852  d167 81            	ret	
 886                     ; 364 void uip_unlisten(uint16_t port)
 886                     ; 365 {
 887                     	switch	.text
 888  d168               _uip_unlisten:
 890  d168 89            	pushw	x
 891       00000000      OFST:	set	0
 894                     ; 366   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 896  d169 4f            	clr	a
 897  d16a c70067        	ld	L14_c,a
 898  d16d               L313:
 899                     ; 367     if (uip_listenports[c] == port) {
 901  d16d 5f            	clrw	x
 902  d16e 97            	ld	xl,a
 903  d16f 58            	sllw	x
 904  d170 de006e        	ldw	x,(_uip_listenports,x)
 905  d173 1301          	cpw	x,(OFST+1,sp)
 906  d175 260a          	jrne	L123
 907                     ; 368       uip_listenports[c] = 0;
 909  d177 5f            	clrw	x
 910  d178 97            	ld	xl,a
 911  d179 58            	sllw	x
 912  d17a 905f          	clrw	y
 913  d17c df006e        	ldw	(_uip_listenports,x),y
 914                     ; 369       return;
 916  d17f 200b          	jra	L66
 917  d181               L123:
 918                     ; 366   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 920  d181 725c0067      	inc	L14_c
 923  d185 c60067        	ld	a,L14_c
 924  d188 a105          	cp	a,#5
 925  d18a 25e1          	jrult	L313
 926                     ; 372 }
 927  d18c               L66:
 930  d18c 85            	popw	x
 931  d18d 81            	ret	
 965                     ; 376 void uip_listen(uint16_t port)
 965                     ; 377 {
 966                     	switch	.text
 967  d18e               _uip_listen:
 969  d18e 89            	pushw	x
 970       00000000      OFST:	set	0
 973                     ; 378   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 975  d18f 4f            	clr	a
 976  d190 c70067        	ld	L14_c,a
 977  d193               L733:
 978                     ; 379     if (uip_listenports[c] == 0) {
 980  d193 5f            	clrw	x
 981  d194 97            	ld	xl,a
 982  d195 58            	sllw	x
 983  d196 d6006f        	ld	a,(_uip_listenports+1,x)
 984  d199 da006e        	or	a,(_uip_listenports,x)
 985  d19c 2607          	jrne	L543
 986                     ; 380       uip_listenports[c] = port;
 988  d19e 1601          	ldw	y,(OFST+1,sp)
 989  d1a0 df006e        	ldw	(_uip_listenports,x),y
 990                     ; 381       return;
 992  d1a3 200b          	jra	L27
 993  d1a5               L543:
 994                     ; 378   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 996  d1a5 725c0067      	inc	L14_c
 999  d1a9 c60067        	ld	a,L14_c
1000  d1ac a105          	cp	a,#5
1001  d1ae 25e3          	jrult	L733
1002                     ; 384 }
1003  d1b0               L27:
1006  d1b0 85            	popw	x
1007  d1b1 81            	ret	
1042                     ; 388 static void uip_add_rcv_nxt(uint16_t n)
1042                     ; 389 {
1043                     	switch	.text
1044  d1b2               L743_uip_add_rcv_nxt:
1048                     ; 390   uip_add32(uip_conn->rcv_nxt, n);
1050  d1b2 89            	pushw	x
1051  d1b3 ce01d5        	ldw	x,_uip_conn
1052  d1b6 1c0008        	addw	x,#8
1053  d1b9 cdcf92        	call	_uip_add32
1055  d1bc 85            	popw	x
1056                     ; 391   uip_conn->rcv_nxt[0] = uip_acc32[0];
1058  d1bd ce01d5        	ldw	x,_uip_conn
1059  d1c0 c600e1        	ld	a,_uip_acc32
1060  d1c3 e708          	ld	(8,x),a
1061                     ; 392   uip_conn->rcv_nxt[1] = uip_acc32[1];
1063  d1c5 c600e2        	ld	a,_uip_acc32+1
1064  d1c8 e709          	ld	(9,x),a
1065                     ; 393   uip_conn->rcv_nxt[2] = uip_acc32[2];
1067  d1ca c600e3        	ld	a,_uip_acc32+2
1068  d1cd e70a          	ld	(10,x),a
1069                     ; 394   uip_conn->rcv_nxt[3] = uip_acc32[3];
1071  d1cf c600e4        	ld	a,_uip_acc32+3
1072  d1d2 e70b          	ld	(11,x),a
1073                     ; 395 }
1076  d1d4 81            	ret	
1363                     ; 399 void uip_process(uint8_t flag)
1363                     ; 400 {
1364                     	switch	.text
1365  d1d5               _uip_process:
1367  d1d5 88            	push	a
1368  d1d6 5205          	subw	sp,#5
1369       00000005      OFST:	set	5
1372                     ; 401   register struct uip_conn *uip_connr = uip_conn;
1374  d1d8 ce01d5        	ldw	x,_uip_conn
1375  d1db 1f04          	ldw	(OFST-1,sp),x
1377                     ; 403   uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
1379  d1dd ae0211        	ldw	x,#_uip_buf+54
1380  d1e0 cf01d9        	ldw	_uip_appdata,x
1381  d1e3 cf007a        	ldw	_uip_sappdata,x
1382                     ; 406   if (flag == UIP_POLL_REQUEST) {
1384  d1e6 a103          	cp	a,#3
1385  d1e8 2614          	jrne	L706
1386                     ; 407     if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED && !uip_outstanding(uip_connr)) {
1388  d1ea 1e04          	ldw	x,(OFST-1,sp)
1389  d1ec e619          	ld	a,(25,x)
1390  d1ee a40f          	and	a,#15
1391  d1f0 a103          	cp	a,#3
1392  d1f2 2703ccdac3    	jrne	L744
1394  d1f7 e611          	ld	a,(17,x)
1395  d1f9 ea10          	or	a,(16,x)
1396                     ; 408       uip_flags = UIP_POLL;
1397                     ; 409       UIP_APPCALL();
1399                     ; 410       goto appsend;
1401  d1fb ccd2c9        	jp	LC001
1402  d1fe               L706:
1403                     ; 416   else if (flag == UIP_TIMER) {
1405  d1fe 7b06          	ld	a,(OFST+1,sp)
1406  d200 a102          	cp	a,#2
1407  d202 2703ccd2e9    	jrne	L316
1408                     ; 418     if (++iss[3] == 0) {
1410  d207 725c006b      	inc	L73_iss+3
1411  d20b 2610          	jrne	L716
1412                     ; 419       if (++iss[2] == 0) {
1414  d20d 725c006a      	inc	L73_iss+2
1415  d211 260a          	jrne	L716
1416                     ; 420         if (++iss[1] == 0) {
1418  d213 725c0069      	inc	L73_iss+1
1419  d217 2604          	jrne	L716
1420                     ; 421           ++iss[0];
1422  d219 725c0068      	inc	L73_iss
1423  d21d               L716:
1424                     ; 427     uip_len = 0;
1426  d21d 5f            	clrw	x
1427  d21e cf01d7        	ldw	_uip_len,x
1428                     ; 428     uip_slen = 0;
1430  d221 cf0078        	ldw	_uip_slen,x
1431                     ; 434     if (uip_connr->tcpstateflags == UIP_TIME_WAIT || uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
1433  d224 1e04          	ldw	x,(OFST-1,sp)
1434  d226 e619          	ld	a,(25,x)
1435  d228 a107          	cp	a,#7
1436  d22a 2704          	jreq	L726
1438  d22c a105          	cp	a,#5
1439  d22e 260d          	jrne	L526
1440  d230               L726:
1441                     ; 435       ++(uip_connr->timer);
1443  d230 6c1a          	inc	(26,x)
1444                     ; 436       if (uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
1446  d232 e61a          	ld	a,(26,x)
1447  d234 a178          	cp	a,#120
1448  d236 26bc          	jrne	L744
1449                     ; 437         uip_connr->tcpstateflags = UIP_CLOSED;
1451  d238 6f19          	clr	(25,x)
1452  d23a ccdac3        	jra	L744
1453  d23d               L526:
1454                     ; 440     else if (uip_connr->tcpstateflags != UIP_CLOSED) {
1456  d23d e619          	ld	a,(25,x)
1457  d23f 27f9          	jreq	L744
1458                     ; 444       if (uip_outstanding(uip_connr)) {
1460  d241 e611          	ld	a,(17,x)
1461  d243 ea10          	or	a,(16,x)
1462  d245 277c          	jreq	L736
1463                     ; 445         if (uip_connr->timer-- == 0) {
1465  d247 e61a          	ld	a,(26,x)
1466  d249 6a1a          	dec	(26,x)
1467  d24b 4d            	tnz	a
1468  d24c 26ec          	jrne	L744
1469                     ; 446           if (uip_connr->nrtx == UIP_MAXRTX
1469                     ; 447 	    || ((uip_connr->tcpstateflags == UIP_SYN_SENT
1469                     ; 448             || uip_connr->tcpstateflags == UIP_SYN_RCVD)
1469                     ; 449             && uip_connr->nrtx == UIP_MAXSYNRTX)) {
1471  d24e e61b          	ld	a,(27,x)
1472  d250 a108          	cp	a,#8
1473  d252 270f          	jreq	L546
1475  d254 e619          	ld	a,(25,x)
1476  d256 a102          	cp	a,#2
1477  d258 2703          	jreq	L746
1479  d25a 4a            	dec	a
1480  d25b 2616          	jrne	L346
1481  d25d               L746:
1483  d25d e61b          	ld	a,(27,x)
1484  d25f a105          	cp	a,#5
1485  d261 2610          	jrne	L346
1486  d263               L546:
1487                     ; 450             uip_connr->tcpstateflags = UIP_CLOSED;
1489  d263 6f19          	clr	(25,x)
1490                     ; 455             uip_flags = UIP_TIMEDOUT;
1492  d265 35800088      	mov	_uip_flags,#128
1493                     ; 456             UIP_APPCALL();
1495  d269 cdde67        	call	_uip_TcpAppHubCall
1497                     ; 459             BUF->flags = TCP_RST | TCP_ACK;
1499  d26c 3514020a      	mov	_uip_buf+47,#20
1500                     ; 460             goto tcp_send_nodata;
1502  d270 ccd8f6        	jra	L334
1503  d273               L346:
1504                     ; 464 	  if (uip_connr->nrtx > 4) uip_connr->nrtx = 4;
1506  d273 1e04          	ldw	x,(OFST-1,sp)
1507  d275 e61b          	ld	a,(27,x)
1508  d277 a105          	cp	a,#5
1509  d279 2504          	jrult	L156
1512  d27b a604          	ld	a,#4
1513  d27d e71b          	ld	(27,x),a
1514  d27f               L156:
1515                     ; 465 	  uip_connr->timer = (uint8_t)(UIP_RTO << uip_connr->nrtx);
1517  d27f 5f            	clrw	x
1518  d280 97            	ld	xl,a
1519  d281 a603          	ld	a,#3
1520  d283 5d            	tnzw	x
1521  d284 2704          	jreq	L601
1522  d286               L011:
1523  d286 48            	sll	a
1524  d287 5a            	decw	x
1525  d288 26fc          	jrne	L011
1526  d28a               L601:
1527  d28a 1e04          	ldw	x,(OFST-1,sp)
1528  d28c e71a          	ld	(26,x),a
1529                     ; 466 	  ++(uip_connr->nrtx);
1531  d28e 6c1b          	inc	(27,x)
1532                     ; 474           UIP_STAT(++uip_stat.tcp.rexmit);
1534  d290 ae00d5        	ldw	x,#_uip_stat+76
1535  d293 a601          	ld	a,#1
1536  d295 cddf6a        	call	c_lgadc
1538                     ; 475           switch (uip_connr->tcpstateflags & UIP_TS_MASK) {
1540  d298 1e04          	ldw	x,(OFST-1,sp)
1541  d29a e619          	ld	a,(25,x)
1542  d29c a40f          	and	a,#15
1544                     ; 489             case UIP_FIN_WAIT_1:
1544                     ; 490             case UIP_CLOSING:
1544                     ; 491             case UIP_LAST_ACK:
1544                     ; 492               /* In all these states we should retransmit a FINACK. */
1544                     ; 493               goto tcp_send_finack;
1545  d29e 4a            	dec	a
1546  d29f 2603ccd6a5    	jreq	L104
1547  d2a4 a002          	sub	a,#2
1548  d2a6 2711          	jreq	L763
1549  d2a8 4a            	dec	a
1550  d2a9 2603ccd8f2    	jreq	LC003
1551  d2ae a002          	sub	a,#2
1552  d2b0 27f9          	jreq	LC003
1553  d2b2 a002          	sub	a,#2
1554  d2b4 27f5          	jreq	LC003
1555  d2b6 ccdac3        	jra	L744
1556  d2b9               L763:
1557                     ; 480             case UIP_ESTABLISHED:
1557                     ; 481               /* In the ESTABLISHED state, we call upon the application
1557                     ; 482                  to do the actual retransmit after which we jump into
1557                     ; 483                  the code for sending out the packet (the apprexmit
1557                     ; 484                  label). */
1557                     ; 485               uip_flags = UIP_REXMIT;
1559  d2b9 35040088      	mov	_uip_flags,#4
1560                     ; 486               UIP_APPCALL();
1562  d2bd cdde67        	call	_uip_TcpAppHubCall
1564                     ; 487               goto apprexmit;
1566  d2c0 ccd939        	jra	L514
1567                     ; 489             case UIP_FIN_WAIT_1:
1567                     ; 490             case UIP_CLOSING:
1567                     ; 491             case UIP_LAST_ACK:
1567                     ; 492               /* In all these states we should retransmit a FINACK. */
1567                     ; 493               goto tcp_send_finack;
1569  d2c3               L736:
1570                     ; 498       else if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
1572  d2c3 e619          	ld	a,(25,x)
1573  d2c5 a40f          	and	a,#15
1574  d2c7 a103          	cp	a,#3
1575                     ; 500         uip_flags = UIP_POLL;
1577  d2c9               LC001:
1578  d2c9 26eb          	jrne	L744
1580  d2cb 35080088      	mov	_uip_flags,#8
1581                     ; 501         UIP_APPCALL();
1584                     ; 502         goto appsend;
1585  d2cf               L314:
1589  d2cf cdde67        	call	_uip_TcpAppHubCall
1590                     ; 972         appsend:
1590                     ; 973 
1590                     ; 974         if (uip_flags & UIP_ABORT) {
1592  d2d2 720a008803cc  	btjf	_uip_flags,#5,L7211
1593                     ; 975           uip_slen = 0;
1595  d2da 5f            	clrw	x
1596  d2db cf0078        	ldw	_uip_slen,x
1597                     ; 976           uip_connr->tcpstateflags = UIP_CLOSED;
1599  d2de 1e04          	ldw	x,(OFST-1,sp)
1600                     ; 977           BUF->flags = TCP_RST | TCP_ACK;
1602  d2e0 3514020a      	mov	_uip_buf+47,#20
1603  d2e4 6f19          	clr	(25,x)
1604                     ; 978           goto tcp_send_nodata;
1606  d2e6 ccd8f6        	jra	L334
1607  d2e9               L316:
1608                     ; 512   UIP_STAT(++uip_stat.ip.recv);
1610  d2e9 ae008d        	ldw	x,#_uip_stat+4
1611  d2ec a601          	ld	a,#1
1612  d2ee cddf6a        	call	c_lgadc
1614                     ; 517   if (BUF->vhl != 0x45) { /* IP version and header length. */
1616  d2f1 c601e9        	ld	a,_uip_buf+14
1617  d2f4 a145          	cp	a,#69
1618  d2f6 2713          	jreq	L366
1619                     ; 518     UIP_STAT(++uip_stat.ip.drop);
1621  d2f8 ae0089        	ldw	x,#_uip_stat
1622  d2fb a601          	ld	a,#1
1623  d2fd cddf6a        	call	c_lgadc
1625                     ; 519     UIP_STAT(++uip_stat.ip.vhlerr);
1627  d300 ae0095        	ldw	x,#_uip_stat+12
1628  d303 a601          	ld	a,#1
1629  d305 cddf6a        	call	c_lgadc
1631                     ; 520     goto drop;
1633  d308 ccdac3        	jra	L744
1634  d30b               L366:
1635                     ; 529   if ((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
1637  d30b c601eb        	ld	a,_uip_buf+16
1638  d30e 5f            	clrw	x
1639  d30f 97            	ld	xl,a
1640  d310 4f            	clr	a
1641  d311 cb01ec        	add	a,_uip_buf+17
1642  d314 2401          	jrnc	L611
1643  d316 5c            	incw	x
1644  d317               L611:
1645  d317 02            	rlwa	x,a
1646  d318 c301d7        	cpw	x,_uip_len
1647  d31b 22eb          	jrugt	L744
1648                     ; 530     uip_len = (BUF->len[0] << 8) + BUF->len[1];
1650  d31d c601eb        	ld	a,_uip_buf+16
1651  d320 5f            	clrw	x
1652  d321 97            	ld	xl,a
1653  d322 4f            	clr	a
1654  d323 cb01ec        	add	a,_uip_buf+17
1655  d326 2401          	jrnc	L021
1656  d328 5c            	incw	x
1657  d329               L021:
1658  d329 c701d8        	ld	_uip_len+1,a
1659  d32c 9f            	ld	a,xl
1660  d32d c701d7        	ld	_uip_len,a
1662                     ; 535   if ((BUF->ipoffset[0] & 0x3f) != 0 || BUF->ipoffset[1] != 0) {
1664  d330 c601ef        	ld	a,_uip_buf+20
1665  d333 a53f          	bcp	a,#63
1666  d335 2605          	jrne	L376
1668  d337 c601f0        	ld	a,_uip_buf+21
1669  d33a 2713          	jreq	L176
1670  d33c               L376:
1671                     ; 536     UIP_STAT(++uip_stat.ip.drop);
1673  d33c ae0089        	ldw	x,#_uip_stat
1674  d33f a601          	ld	a,#1
1675  d341 cddf6a        	call	c_lgadc
1677                     ; 537     UIP_STAT(++uip_stat.ip.fragerr);
1679  d344 ae00a1        	ldw	x,#_uip_stat+24
1680  d347 a601          	ld	a,#1
1681  d349 cddf6a        	call	c_lgadc
1683                     ; 538     goto drop;
1685  d34c ccdac3        	jra	L744
1686  d34f               L176:
1687                     ; 542   if (!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
1689  d34f ce01f9        	ldw	x,_uip_buf+30
1690  d352 c30084        	cpw	x,_uip_hostaddr
1691  d355 2608          	jrne	L776
1693  d357 ce01fb        	ldw	x,_uip_buf+32
1694  d35a c30086        	cpw	x,_uip_hostaddr+2
1695  d35d 270b          	jreq	L576
1696  d35f               L776:
1697                     ; 543     UIP_STAT(++uip_stat.ip.drop);
1699  d35f ae0089        	ldw	x,#_uip_stat
1700  d362 a601          	ld	a,#1
1701  d364 cddf6a        	call	c_lgadc
1703                     ; 544     goto drop;
1705  d367 ccdac3        	jra	L744
1706  d36a               L576:
1707                     ; 547   if (uip_ipchksum() != 0xffff) { /* Compute and check the IP header checksum. */
1709  d36a cdd049        	call	_uip_ipchksum
1711  d36d 5c            	incw	x
1712  d36e 2713          	jreq	L107
1713                     ; 548     UIP_STAT(++uip_stat.ip.drop);
1715  d370 ae0089        	ldw	x,#_uip_stat
1716  d373 a601          	ld	a,#1
1717  d375 cddf6a        	call	c_lgadc
1719                     ; 549     UIP_STAT(++uip_stat.ip.chkerr);
1721  d378 ae00a5        	ldw	x,#_uip_stat+28
1722  d37b a601          	ld	a,#1
1723  d37d cddf6a        	call	c_lgadc
1725                     ; 550     goto drop;
1727  d380 ccdac3        	jra	L744
1728  d383               L107:
1729                     ; 553   if (BUF->proto == UIP_PROTO_TCP) {
1731  d383 c601f2        	ld	a,_uip_buf+23
1732  d386 a106          	cp	a,#6
1733  d388 2624          	jrne	L307
1734                     ; 555     goto tcp_input;
1735                     ; 600   tcp_input:
1735                     ; 601   UIP_STAT(++uip_stat.tcp.recv);
1737  d38a ae00c1        	ldw	x,#_uip_stat+56
1738  d38d a601          	ld	a,#1
1739  d38f cddf6a        	call	c_lgadc
1741                     ; 605   if (uip_tcpchksum() != 0xffff) { /* Compute and check the TCP checksum. */
1743  d392 cdd0ae        	call	_uip_tcpchksum
1745  d395 5c            	incw	x
1746  d396 2603ccd427    	jreq	L527
1747                     ; 606     UIP_STAT(++uip_stat.tcp.drop);
1749  d39b ae00bd        	ldw	x,#_uip_stat+52
1750  d39e a601          	ld	a,#1
1751  d3a0 cddf6a        	call	c_lgadc
1753                     ; 607     UIP_STAT(++uip_stat.tcp.chkerr);
1755  d3a3 ae00c9        	ldw	x,#_uip_stat+64
1756  d3a6 a601          	ld	a,#1
1757  d3a8 cddf6a        	call	c_lgadc
1759                     ; 608     goto drop;
1761  d3ab ccdac3        	jra	L744
1762  d3ae               L307:
1763                     ; 562   if (BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from here. */
1765  d3ae 4a            	dec	a
1766  d3af 2713          	jreq	L507
1767                     ; 563     UIP_STAT(++uip_stat.ip.drop);
1769  d3b1 ae0089        	ldw	x,#_uip_stat
1770  d3b4 a601          	ld	a,#1
1771  d3b6 cddf6a        	call	c_lgadc
1773                     ; 564     UIP_STAT(++uip_stat.ip.protoerr);
1775  d3b9 ae00a9        	ldw	x,#_uip_stat+32
1776  d3bc a601          	ld	a,#1
1777  d3be cddf6a        	call	c_lgadc
1779                     ; 565     goto drop;
1781  d3c1 ccdac3        	jra	L744
1782  d3c4               L507:
1783                     ; 568   UIP_STAT(++uip_stat.icmp.recv);
1785  d3c4 ae00b1        	ldw	x,#_uip_stat+40
1786  d3c7 4c            	inc	a
1787  d3c8 cddf6a        	call	c_lgadc
1789                     ; 573   if (ICMPBUF->type != ICMP_ECHO) {
1791  d3cb c601fd        	ld	a,_uip_buf+34
1792  d3ce a108          	cp	a,#8
1793  d3d0 2713          	jreq	L707
1794                     ; 574     UIP_STAT(++uip_stat.icmp.drop);
1796  d3d2 ae00ad        	ldw	x,#_uip_stat+36
1797  d3d5 a601          	ld	a,#1
1798  d3d7 cddf6a        	call	c_lgadc
1800                     ; 575     UIP_STAT(++uip_stat.icmp.typeerr);
1802  d3da ae00b9        	ldw	x,#_uip_stat+48
1803  d3dd a601          	ld	a,#1
1804  d3df cddf6a        	call	c_lgadc
1806                     ; 576     goto drop;
1808  d3e2 ccdac3        	jra	L744
1809  d3e5               L707:
1810                     ; 579   ICMPBUF->type = ICMP_ECHO_REPLY;
1812  d3e5 725f01fd      	clr	_uip_buf+34
1813                     ; 581   if (ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
1815  d3e9 ce01ff        	ldw	x,_uip_buf+36
1816  d3ec a3f7ff        	cpw	x,#63487
1817  d3ef 2505          	jrult	L117
1818                     ; 582     ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
1820  d3f1 1c0801        	addw	x,#2049
1822  d3f4 2003          	jra	L517
1823  d3f6               L117:
1824                     ; 585     ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
1826  d3f6 1c0800        	addw	x,#2048
1827  d3f9               L517:
1828  d3f9 cf01ff        	ldw	_uip_buf+36,x
1829                     ; 589   uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
1831  d3fc ce01f5        	ldw	x,_uip_buf+26
1832  d3ff cf01f9        	ldw	_uip_buf+30,x
1835  d402 ce01f7        	ldw	x,_uip_buf+28
1836  d405 cf01fb        	ldw	_uip_buf+32,x
1837                     ; 590   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
1839  d408 ce0084        	ldw	x,_uip_hostaddr
1840  d40b cf01f5        	ldw	_uip_buf+26,x
1843  d40e ce0086        	ldw	x,_uip_hostaddr+2
1844  d411 cf01f7        	ldw	_uip_buf+28,x
1845                     ; 592   UIP_STAT(++uip_stat.icmp.sent);
1847  d414 ae00b5        	ldw	x,#_uip_stat+44
1849                     ; 593   goto send;
1850  d417               L544:
1851  d417 a601          	ld	a,#1
1852  d419 cddf6a        	call	c_lgadc
1853                     ; 1189   send:
1853                     ; 1190 
1853                     ; 1191   UIP_STAT(++uip_stat.ip.sent);
1855  d41c ae0091        	ldw	x,#_uip_stat+8
1856  d41f a601          	ld	a,#1
1857  d421 cddf6a        	call	c_lgadc
1859                     ; 1193   uip_flags = 0;
1860                     ; 1195   return;
1862  d424 ccdac7        	jra	L602
1863  d427               L527:
1864                     ; 613   for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1]; ++uip_connr) {
1866  d427 ae00e5        	ldw	x,#_uip_conns
1868  d42a 204d          	jra	L337
1869  d42c               L727:
1870                     ; 614     if (uip_connr->tcpstateflags != UIP_CLOSED
1870                     ; 615       && BUF->destport == uip_connr->lport
1870                     ; 616       && BUF->srcport == uip_connr->rport
1870                     ; 617       && uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
1872  d42c e619          	ld	a,(25,x)
1873  d42e 2746          	jreq	L737
1875  d430 9093          	ldw	y,x
1876  d432 90ee04        	ldw	y,(4,y)
1877  d435 90c301ff      	cpw	y,_uip_buf+36
1878  d439 263b          	jrne	L737
1880  d43b 9093          	ldw	y,x
1881  d43d 90ee06        	ldw	y,(6,y)
1882  d440 90c301fd      	cpw	y,_uip_buf+34
1883  d444 2630          	jrne	L737
1885  d446 9093          	ldw	y,x
1886  d448 90fe          	ldw	y,(y)
1887  d44a 90c301f5      	cpw	y,_uip_buf+26
1888  d44e 2626          	jrne	L737
1890  d450 9093          	ldw	y,x
1891  d452 90ee02        	ldw	y,(2,y)
1892  d455 90c301f7      	cpw	y,_uip_buf+28
1893  d459 261b          	jrne	L737
1894                     ; 618       goto found;
1895                     ; 800   found:
1895                     ; 801   /* found will be jumped to if we found an active connection. */
1895                     ; 802   uip_conn = uip_connr;
1897  d45b cf01d5        	ldw	_uip_conn,x
1898                     ; 803   uip_flags = 0;
1900  d45e 725f0088      	clr	_uip_flags
1901                     ; 808   if (BUF->flags & TCP_RST) {
1903  d462 7204020a03cc  	btjf	_uip_buf+47,#2,L7401
1904                     ; 809     uip_connr->tcpstateflags = UIP_CLOSED;
1906  d46a 6f19          	clr	(25,x)
1907                     ; 810     uip_flags = UIP_ABORT;
1909  d46c 35200088      	mov	_uip_flags,#32
1910                     ; 811     UIP_APPCALL();
1912  d470 cdde67        	call	_uip_TcpAppHubCall
1914                     ; 812     goto drop;
1916  d473 ccdac3        	jra	L744
1917  d476               L737:
1918                     ; 613   for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1]; ++uip_connr) {
1920  d476 1c0028        	addw	x,#40
1921  d479               L337:
1922  d479 1f04          	ldw	(OFST-1,sp),x
1926  d47b a301ad        	cpw	x,#_uip_conns+200
1927  d47e 23ac          	jrule	L727
1928                     ; 626   if ((BUF->flags & TCP_CTL) != TCP_SYN) {
1930  d480 c6020a        	ld	a,_uip_buf+47
1931  d483 a43f          	and	a,#63
1932  d485 a102          	cp	a,#2
1933  d487 2647          	jrne	L573
1934                     ; 627     goto reset;
1936                     ; 630   tmp16 = BUF->destport;
1938  d489 ce01ff        	ldw	x,_uip_buf+36
1939  d48c cf0064        	ldw	L54_tmp16,x
1940                     ; 632   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1942  d48f 4f            	clr	a
1943  d490 c70067        	ld	L14_c,a
1944  d493               L347:
1945                     ; 633     if (tmp16 == uip_listenports[c]) goto found_listen;
1947  d493 5f            	clrw	x
1948  d494 97            	ld	xl,a
1949  d495 58            	sllw	x
1950  d496 9093          	ldw	y,x
1951  d498 90de006e      	ldw	y,(_uip_listenports,y)
1952  d49c 90c30064      	cpw	y,L54_tmp16
1953  d4a0 261b          	jrne	L157
1955                     ; 695   found_listen:
1955                     ; 696   /* found_listen will be jumped to if we matched the incoming packet
1955                     ; 697      with a connection in LISTEN. In that case, we should create a new
1955                     ; 698      connection and send a SYNACK in return. */
1955                     ; 699   /* First we check if there are any connections avaliable. Unused
1955                     ; 700      connections are kept in the same table as used connections, but
1955                     ; 701      unused ones have the tcpstate set to CLOSED. Also, connections in
1955                     ; 702      TIME_WAIT are kept track of and we'll use the oldest one if no
1955                     ; 703      CLOSED connections are found. Thanks to Eddie C. Dost for a very
1955                     ; 704      nice algorithm for the TIME_WAIT search. */
1955                     ; 705   uip_connr = 0;
1957  d4a2 5f            	clrw	x
1958  d4a3 1f04          	ldw	(OFST-1,sp),x
1960                     ; 706   for (c = 0; c < UIP_CONNS; ++c) {
1962  d4a5 4f            	clr	a
1963  d4a6 c70067        	ld	L14_c,a
1964  d4a9               L377:
1965                     ; 707     if (uip_conns[c].tcpstateflags == UIP_CLOSED) {
1967  d4a9 97            	ld	xl,a
1968  d4aa a628          	ld	a,#40
1969  d4ac 42            	mul	x,a
1970  d4ad d600fe        	ld	a,(_uip_conns+25,x)
1971  d4b0 2703ccd56a    	jrne	L1001
1972                     ; 708       uip_connr = &uip_conns[c];
1974  d4b5 1c00e5        	addw	x,#_uip_conns
1975  d4b8 1f04          	ldw	(OFST-1,sp),x
1977                     ; 709       break;
1979  d4ba ccd59c        	jra	L777
1980  d4bd               L157:
1981                     ; 632   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1983  d4bd 725c0067      	inc	L14_c
1986  d4c1 c60067        	ld	a,L14_c
1987  d4c4 a105          	cp	a,#5
1988  d4c6 25cb          	jrult	L347
1989                     ; 637   UIP_STAT(++uip_stat.tcp.synrst);
1991  d4c8 ae00dd        	ldw	x,#_uip_stat+84
1992  d4cb a601          	ld	a,#1
1993  d4cd cddf6a        	call	c_lgadc
1995  d4d0               L573:
1996                     ; 642   reset:
1996                     ; 643   /* We do not send resets in response to resets. */
1996                     ; 644   if (BUF->flags & TCP_RST) goto drop;
1998  d4d0 7204020a9e    	btjt	_uip_buf+47,#2,L744
2001                     ; 646   UIP_STAT(++uip_stat.tcp.rst);
2003  d4d5 ae00d1        	ldw	x,#_uip_stat+72
2004  d4d8 a601          	ld	a,#1
2005  d4da cddf6a        	call	c_lgadc
2007                     ; 648   BUF->flags = TCP_RST | TCP_ACK;
2009  d4dd 3514020a      	mov	_uip_buf+47,#20
2010                     ; 649   uip_len = UIP_IPTCPH_LEN;
2012  d4e1 ae0028        	ldw	x,#40
2013  d4e4 cf01d7        	ldw	_uip_len,x
2014                     ; 650   BUF->tcpoffset = 5 << 4;
2016  d4e7 35500209      	mov	_uip_buf+46,#80
2017                     ; 653   c = BUF->seqno[3];
2019  d4eb 5502040067    	mov	L14_c,_uip_buf+41
2020                     ; 654   BUF->seqno[3] = BUF->ackno[3];
2022  d4f0 5502080204    	mov	_uip_buf+41,_uip_buf+45
2023                     ; 655   BUF->ackno[3] = c;
2025  d4f5 5500670208    	mov	_uip_buf+45,L14_c
2026                     ; 657   c = BUF->seqno[2];
2028  d4fa 5502030067    	mov	L14_c,_uip_buf+40
2029                     ; 658   BUF->seqno[2] = BUF->ackno[2];
2031  d4ff 5502070203    	mov	_uip_buf+40,_uip_buf+44
2032                     ; 659   BUF->ackno[2] = c;
2034  d504 5500670207    	mov	_uip_buf+44,L14_c
2035                     ; 661   c = BUF->seqno[1];
2037  d509 5502020067    	mov	L14_c,_uip_buf+39
2038                     ; 662   BUF->seqno[1] = BUF->ackno[1];
2040  d50e 5502060202    	mov	_uip_buf+39,_uip_buf+43
2041                     ; 663   BUF->ackno[1] = c;
2043  d513 5500670206    	mov	_uip_buf+43,L14_c
2044                     ; 665   c = BUF->seqno[0];
2046  d518 5502010067    	mov	L14_c,_uip_buf+38
2047                     ; 666   BUF->seqno[0] = BUF->ackno[0];
2049  d51d 5502050201    	mov	_uip_buf+38,_uip_buf+42
2050                     ; 667   BUF->ackno[0] = c;
2052  d522 5500670205    	mov	_uip_buf+42,L14_c
2053                     ; 672   if (++BUF->ackno[3] == 0) {
2055  d527 725c0208      	inc	_uip_buf+45
2056  d52b 2610          	jrne	L557
2057                     ; 673     if (++BUF->ackno[2] == 0) {
2059  d52d 725c0207      	inc	_uip_buf+44
2060  d531 260a          	jrne	L557
2061                     ; 674       if (++BUF->ackno[1] == 0) {
2063  d533 725c0206      	inc	_uip_buf+43
2064  d537 2604          	jrne	L557
2065                     ; 675         ++BUF->ackno[0];
2067  d539 725c0205      	inc	_uip_buf+42
2068  d53d               L557:
2069                     ; 681   tmp16 = BUF->srcport;
2071  d53d ce01fd        	ldw	x,_uip_buf+34
2072  d540 cf0064        	ldw	L54_tmp16,x
2073                     ; 682   BUF->srcport = BUF->destport;
2075  d543 ce01ff        	ldw	x,_uip_buf+36
2076  d546 cf01fd        	ldw	_uip_buf+34,x
2077                     ; 683   BUF->destport = tmp16;
2079  d549 ce0064        	ldw	x,L54_tmp16
2080  d54c cf01ff        	ldw	_uip_buf+36,x
2081                     ; 686   uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
2083  d54f ce01f5        	ldw	x,_uip_buf+26
2084  d552 cf01f9        	ldw	_uip_buf+30,x
2087  d555 ce01f7        	ldw	x,_uip_buf+28
2088  d558 cf01fb        	ldw	_uip_buf+32,x
2089                     ; 687   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
2091  d55b ce0084        	ldw	x,_uip_hostaddr
2092  d55e cf01f5        	ldw	_uip_buf+26,x
2095  d561 ce0086        	ldw	x,_uip_hostaddr+2
2096  d564 cf01f7        	ldw	_uip_buf+28,x
2097                     ; 690   goto tcp_send_noconn;
2099  d567 ccda70        	jra	L144
2100  d56a               L1001:
2101                     ; 711     if (uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
2103  d56a a107          	cp	a,#7
2104  d56c 2620          	jrne	L3001
2105                     ; 712       if (uip_connr == 0 || uip_conns[c].timer > uip_connr->timer) {
2107  d56e 1e04          	ldw	x,(OFST-1,sp)
2108  d570 2710          	jreq	L7001
2110  d572 c60067        	ld	a,L14_c
2111  d575 97            	ld	xl,a
2112  d576 a628          	ld	a,#40
2113  d578 42            	mul	x,a
2114  d579 d600ff        	ld	a,(_uip_conns+26,x)
2115  d57c 1e04          	ldw	x,(OFST-1,sp)
2116  d57e e11a          	cp	a,(26,x)
2117  d580 230c          	jrule	L3001
2118  d582               L7001:
2119                     ; 713         uip_connr = &uip_conns[c];
2121  d582 c60067        	ld	a,L14_c
2122  d585 97            	ld	xl,a
2123  d586 a628          	ld	a,#40
2124  d588 42            	mul	x,a
2125  d589 1c00e5        	addw	x,#_uip_conns
2126  d58c 1f04          	ldw	(OFST-1,sp),x
2128  d58e               L3001:
2129                     ; 706   for (c = 0; c < UIP_CONNS; ++c) {
2131  d58e 725c0067      	inc	L14_c
2134  d592 c60067        	ld	a,L14_c
2135  d595 a106          	cp	a,#6
2136  d597 2403ccd4a9    	jrult	L377
2137  d59c               L777:
2138                     ; 718   if (uip_connr == 0) {
2140  d59c 1e04          	ldw	x,(OFST-1,sp)
2141  d59e 260b          	jrne	L1101
2142                     ; 722     UIP_STAT(++uip_stat.tcp.syndrop);
2144  d5a0 ae00d9        	ldw	x,#_uip_stat+80
2145  d5a3 a601          	ld	a,#1
2146  d5a5 cddf6a        	call	c_lgadc
2148                     ; 723     goto drop;
2150  d5a8 ccdac3        	jra	L744
2151  d5ab               L1101:
2152                     ; 725   uip_conn = uip_connr;
2154  d5ab cf01d5        	ldw	_uip_conn,x
2155                     ; 728   uip_connr->rto = uip_connr->timer = UIP_RTO;
2157  d5ae a603          	ld	a,#3
2158  d5b0 e71a          	ld	(26,x),a
2159  d5b2 e718          	ld	(24,x),a
2160                     ; 729   uip_connr->sa = 0;
2162  d5b4 6f16          	clr	(22,x)
2163                     ; 730   uip_connr->sv = 4;
2165  d5b6 4c            	inc	a
2166  d5b7 e717          	ld	(23,x),a
2167                     ; 731   uip_connr->nrtx = 0;
2169  d5b9 6f1b          	clr	(27,x)
2170                     ; 732   uip_connr->lport = BUF->destport;
2172  d5bb 90ce01ff      	ldw	y,_uip_buf+36
2173  d5bf ef04          	ldw	(4,x),y
2174                     ; 733   uip_connr->rport = BUF->srcport;
2176  d5c1 90ce01fd      	ldw	y,_uip_buf+34
2177  d5c5 ef06          	ldw	(6,x),y
2178                     ; 734   uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
2180  d5c7 90ce01f5      	ldw	y,_uip_buf+26
2181  d5cb ff            	ldw	(x),y
2184  d5cc 90ce01f7      	ldw	y,_uip_buf+28
2185  d5d0 ef02          	ldw	(2,x),y
2186                     ; 735   uip_connr->tcpstateflags = UIP_SYN_RCVD;
2188  d5d2 a601          	ld	a,#1
2189  d5d4 e719          	ld	(25,x),a
2190                     ; 737   uip_connr->snd_nxt[0] = iss[0];
2192  d5d6 c60068        	ld	a,L73_iss
2193  d5d9 e70c          	ld	(12,x),a
2194                     ; 738   uip_connr->snd_nxt[1] = iss[1];
2196  d5db c60069        	ld	a,L73_iss+1
2197  d5de e70d          	ld	(13,x),a
2198                     ; 739   uip_connr->snd_nxt[2] = iss[2];
2200  d5e0 c6006a        	ld	a,L73_iss+2
2201  d5e3 e70e          	ld	(14,x),a
2202                     ; 740   uip_connr->snd_nxt[3] = iss[3];
2204  d5e5 c6006b        	ld	a,L73_iss+3
2205  d5e8 e70f          	ld	(15,x),a
2206                     ; 741   uip_connr->len = 1;
2208  d5ea 90ae0001      	ldw	y,#1
2209  d5ee ef10          	ldw	(16,x),y
2210                     ; 744   uip_connr->rcv_nxt[3] = BUF->seqno[3];
2212  d5f0 c60204        	ld	a,_uip_buf+41
2213  d5f3 e70b          	ld	(11,x),a
2214                     ; 745   uip_connr->rcv_nxt[2] = BUF->seqno[2];
2216  d5f5 c60203        	ld	a,_uip_buf+40
2217  d5f8 e70a          	ld	(10,x),a
2218                     ; 746   uip_connr->rcv_nxt[1] = BUF->seqno[1];
2220  d5fa c60202        	ld	a,_uip_buf+39
2221  d5fd e709          	ld	(9,x),a
2222                     ; 747   uip_connr->rcv_nxt[0] = BUF->seqno[0];
2224  d5ff c60201        	ld	a,_uip_buf+38
2225  d602 e708          	ld	(8,x),a
2226                     ; 748   uip_add_rcv_nxt(1);
2228  d604 ae0001        	ldw	x,#1
2229  d607 cdd1b2        	call	L743_uip_add_rcv_nxt
2231                     ; 751   if ((BUF->tcpoffset & 0xf0) > 0x50) {
2233  d60a c60209        	ld	a,_uip_buf+46
2234  d60d a4f0          	and	a,#240
2235  d60f a151          	cp	a,#81
2236  d611 2403ccd6a5    	jrult	L104
2237                     ; 752     for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2;) {
2239  d616 725f0067      	clr	L14_c
2241  d61a 206b          	jra	L5201
2242  d61c               L1201:
2243                     ; 753       opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
2245  d61c 5f            	clrw	x
2246  d61d 97            	ld	xl,a
2247  d61e d60211        	ld	a,(_uip_buf+54,x)
2248  d621 c70066        	ld	L34_opt,a
2249                     ; 754       if (opt == TCP_OPT_END) {
2251  d624 277f          	jreq	L104
2252                     ; 756         break;
2254                     ; 758       else if (opt == TCP_OPT_NOOP) {
2256  d626 a101          	cp	a,#1
2257  d628 2606          	jrne	L5301
2258                     ; 759         ++c;
2260  d62a 725c0067      	inc	L14_c
2262  d62e 2057          	jra	L5201
2263  d630               L5301:
2264                     ; 762       else if (opt == TCP_OPT_MSS
2264                     ; 763         && uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
2266  d630 a102          	cp	a,#2
2267  d632 2640          	jrne	L1401
2269  d634 c60067        	ld	a,L14_c
2270  d637 5f            	clrw	x
2271  d638 97            	ld	xl,a
2272  d639 d60212        	ld	a,(_uip_buf+55,x)
2273  d63c a104          	cp	a,#4
2274  d63e 2634          	jrne	L1401
2275                     ; 765         tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8)
2275                     ; 766 	        | (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
2277  d640 c60067        	ld	a,L14_c
2278  d643 5f            	clrw	x
2279  d644 97            	ld	xl,a
2280  d645 d60214        	ld	a,(_uip_buf+57,x)
2281  d648 5f            	clrw	x
2282  d649 97            	ld	xl,a
2283  d64a 1f01          	ldw	(OFST-4,sp),x
2285  d64c 5f            	clrw	x
2286  d64d c60067        	ld	a,L14_c
2287  d650 97            	ld	xl,a
2288  d651 d60213        	ld	a,(_uip_buf+56,x)
2289  d654 5f            	clrw	x
2290  d655 97            	ld	xl,a
2291  d656 7b02          	ld	a,(OFST-3,sp)
2292  d658 01            	rrwa	x,a
2293  d659 1a01          	or	a,(OFST-4,sp)
2294  d65b 01            	rrwa	x,a
2295  d65c cf0064        	ldw	L54_tmp16,x
2296                     ; 767         uip_connr->initialmss = uip_connr->mss = tmp16 > UIP_TCP_MSS ? UIP_TCP_MSS : tmp16;
2298  d65f a3034f        	cpw	x,#847
2299  d662 2503          	jrult	L031
2300  d664 ae034e        	ldw	x,#846
2301  d667               L031:
2302  d667 1604          	ldw	y,(OFST-1,sp)
2303  d669 90ef12        	ldw	(18,y),x
2304  d66c 93            	ldw	x,y
2305  d66d 90ee12        	ldw	y,(18,y)
2306  d670 ef14          	ldw	(20,x),y
2307                     ; 770         break;
2309  d672 2031          	jra	L104
2310  d674               L1401:
2311                     ; 774         if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
2313  d674 c60067        	ld	a,L14_c
2314  d677 5f            	clrw	x
2315  d678 97            	ld	xl,a
2316  d679 724d0212      	tnz	(_uip_buf+55,x)
2317  d67d 2726          	jreq	L104
2318                     ; 777           break;
2320                     ; 779         c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
2322  d67f 5f            	clrw	x
2323  d680 97            	ld	xl,a
2324  d681 db0212        	add	a,(_uip_buf+55,x)
2325  d684 c70067        	ld	L14_c,a
2326  d687               L5201:
2327                     ; 752     for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2;) {
2329  d687 c60209        	ld	a,_uip_buf+46
2330  d68a 4e            	swap	a
2331  d68b a40f          	and	a,#15
2332  d68d 5f            	clrw	x
2333  d68e 97            	ld	xl,a
2334  d68f 58            	sllw	x
2335  d690 58            	sllw	x
2336  d691 1d0014        	subw	x,#20
2337  d694 c60067        	ld	a,L14_c
2338  d697 905f          	clrw	y
2339  d699 9097          	ld	yl,a
2340  d69b 90bf07        	ldw	c_y,y
2341  d69e b307          	cpw	x,c_y
2342  d6a0 2d03ccd61c    	jrsgt	L1201
2343  d6a5               L104:
2344                     ; 785   tcp_send_synack:
2344                     ; 786   BUF->flags = TCP_SYN | TCP_ACK;
2346  d6a5 3512020a      	mov	_uip_buf+47,#18
2347                     ; 789   BUF->optdata[0] = TCP_OPT_MSS;
2349  d6a9 35020211      	mov	_uip_buf+54,#2
2350                     ; 790   BUF->optdata[1] = TCP_OPT_MSS_LEN;
2352  d6ad 35040212      	mov	_uip_buf+55,#4
2353                     ; 791   BUF->optdata[2] = (UIP_TCP_MSS) / 256;
2355  d6b1 35030213      	mov	_uip_buf+56,#3
2356                     ; 792   BUF->optdata[3] = (UIP_TCP_MSS) & 255;
2358  d6b5 354e0214      	mov	_uip_buf+57,#78
2359                     ; 793   uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
2361  d6b9 ae002c        	ldw	x,#44
2362  d6bc cf01d7        	ldw	_uip_len,x
2363                     ; 794   BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
2365  d6bf 35600209      	mov	_uip_buf+46,#96
2366                     ; 795   goto tcp_send;
2368  d6c3 ccd970        	jra	L734
2369  d6c6               L7401:
2370                     ; 815   c = (uint8_t)((BUF->tcpoffset >> 4) << 2);
2372  d6c6 c60209        	ld	a,_uip_buf+46
2373  d6c9 4e            	swap	a
2374  d6ca a40f          	and	a,#15
2375  d6cc 48            	sll	a
2376  d6cd 48            	sll	a
2377  d6ce c70067        	ld	L14_c,a
2378                     ; 819   uip_len = uip_len - c - UIP_IPH_LEN;
2380  d6d1 c601d7        	ld	a,_uip_len
2381  d6d4 97            	ld	xl,a
2382  d6d5 c601d8        	ld	a,_uip_len+1
2383  d6d8 c00067        	sub	a,L14_c
2384  d6db 2401          	jrnc	L631
2385  d6dd 5a            	decw	x
2386  d6de               L631:
2387  d6de 02            	rlwa	x,a
2388  d6df 1d0014        	subw	x,#20
2389  d6e2 cf01d7        	ldw	_uip_len,x
2390                     ; 824   if (!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT)
2390                     ; 825     && ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
2392  d6e5 1e04          	ldw	x,(OFST-1,sp)
2393  d6e7 e619          	ld	a,(25,x)
2394  d6e9 a40f          	and	a,#15
2395  d6eb a102          	cp	a,#2
2396  d6ed 2609          	jrne	L3501
2398  d6ef c6020a        	ld	a,_uip_buf+47
2399  d6f2 a43f          	and	a,#63
2400  d6f4 a112          	cp	a,#18
2401  d6f6 272d          	jreq	L1501
2402  d6f8               L3501:
2403                     ; 826     if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0))
2403                     ; 827       && (BUF->seqno[0] != uip_connr->rcv_nxt[0]
2403                     ; 828       || BUF->seqno[1] != uip_connr->rcv_nxt[1]
2403                     ; 829       || BUF->seqno[2] != uip_connr->rcv_nxt[2]
2403                     ; 830       || BUF->seqno[3] != uip_connr->rcv_nxt[3])) {
2405  d6f8 ce01d7        	ldw	x,_uip_len
2406  d6fb 2607          	jrne	L7501
2408  d6fd c6020a        	ld	a,_uip_buf+47
2409  d700 a503          	bcp	a,#3
2410  d702 2721          	jreq	L1501
2411  d704               L7501:
2413  d704 1e04          	ldw	x,(OFST-1,sp)
2414  d706 e608          	ld	a,(8,x)
2415  d708 c10201        	cp	a,_uip_buf+38
2416  d70b 2703ccda61    	jrne	L134
2418  d710 e609          	ld	a,(9,x)
2419  d712 c10202        	cp	a,_uip_buf+39
2420  d715 26f6          	jrne	L134
2422  d717 e60a          	ld	a,(10,x)
2423  d719 c10203        	cp	a,_uip_buf+40
2424  d71c 26ef          	jrne	L134
2426  d71e e60b          	ld	a,(11,x)
2427  d720 c10204        	cp	a,_uip_buf+41
2428  d723 26e8          	jrne	L134
2429  d725               L1501:
2430                     ; 839   if ((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
2432  d725 7208020a03cc  	btjf	_uip_buf+47,#4,L7601
2434  d72d 1e04          	ldw	x,(OFST-1,sp)
2435  d72f e611          	ld	a,(17,x)
2436  d731 ea10          	or	a,(16,x)
2437  d733 27f5          	jreq	L7601
2438                     ; 840     uip_add32(uip_connr->snd_nxt, uip_connr->len);
2440  d735 ee10          	ldw	x,(16,x)
2441  d737 89            	pushw	x
2442  d738 1e06          	ldw	x,(OFST+1,sp)
2443  d73a 1c000c        	addw	x,#12
2444  d73d cdcf92        	call	_uip_add32
2446  d740 c60205        	ld	a,_uip_buf+42
2447  d743 c100e1        	cp	a,_uip_acc32
2448  d746 85            	popw	x
2449                     ; 842     if (BUF->ackno[0] == uip_acc32[0]
2449                     ; 843       && BUF->ackno[1] == uip_acc32[1]
2449                     ; 844       && BUF->ackno[2] == uip_acc32[2]
2449                     ; 845       && BUF->ackno[3] == uip_acc32[3]) {
2451  d747 26e1          	jrne	L7601
2453  d749 c60206        	ld	a,_uip_buf+43
2454  d74c c100e2        	cp	a,_uip_acc32+1
2455  d74f 26d9          	jrne	L7601
2457  d751 c60207        	ld	a,_uip_buf+44
2458  d754 c100e3        	cp	a,_uip_acc32+2
2459  d757 26d1          	jrne	L7601
2461  d759 c60208        	ld	a,_uip_buf+45
2462  d75c c100e4        	cp	a,_uip_acc32+3
2463  d75f 2679          	jrne	L7601
2464                     ; 847       uip_connr->snd_nxt[0] = uip_acc32[0];
2466  d761 1e04          	ldw	x,(OFST-1,sp)
2467  d763 c600e1        	ld	a,_uip_acc32
2468  d766 e70c          	ld	(12,x),a
2469                     ; 848       uip_connr->snd_nxt[1] = uip_acc32[1];
2471  d768 c600e2        	ld	a,_uip_acc32+1
2472  d76b e70d          	ld	(13,x),a
2473                     ; 849       uip_connr->snd_nxt[2] = uip_acc32[2];
2475  d76d c600e3        	ld	a,_uip_acc32+2
2476  d770 e70e          	ld	(14,x),a
2477                     ; 850       uip_connr->snd_nxt[3] = uip_acc32[3];
2479  d772 c600e4        	ld	a,_uip_acc32+3
2480  d775 e70f          	ld	(15,x),a
2481                     ; 853       if (uip_connr->nrtx == 0) {
2483  d777 e61b          	ld	a,(27,x)
2484  d779 2653          	jrne	L3701
2485                     ; 855         m = (int8_t)(uip_connr->rto - uip_connr->timer);
2487  d77b e61a          	ld	a,(26,x)
2488  d77d e018          	sub	a,(24,x)
2489  d77f 40            	neg	a
2490  d780 6b03          	ld	(OFST-2,sp),a
2492                     ; 857         m = (int8_t)(m - (uip_connr->sa >> 3));
2494  d782 e616          	ld	a,(22,x)
2495  d784 44            	srl	a
2496  d785 44            	srl	a
2497  d786 44            	srl	a
2498  d787 5f            	clrw	x
2499  d788 97            	ld	xl,a
2500  d789 1f01          	ldw	(OFST-4,sp),x
2502  d78b 5f            	clrw	x
2503  d78c 7b03          	ld	a,(OFST-2,sp)
2504  d78e 4d            	tnz	a
2505  d78f 2a01          	jrpl	L241
2506  d791 53            	cplw	x
2507  d792               L241:
2508  d792 97            	ld	xl,a
2509  d793 72f001        	subw	x,(OFST-4,sp)
2510  d796 01            	rrwa	x,a
2511  d797 6b03          	ld	(OFST-2,sp),a
2513                     ; 858         uip_connr->sa += m;
2515  d799 1e04          	ldw	x,(OFST-1,sp)
2516  d79b e616          	ld	a,(22,x)
2517  d79d 1b03          	add	a,(OFST-2,sp)
2518  d79f e716          	ld	(22,x),a
2519                     ; 859         if (m < 0) m = (int8_t)(-m);
2521  d7a1 7b03          	ld	a,(OFST-2,sp)
2522  d7a3 2a02          	jrpl	L5701
2525  d7a5 0003          	neg	(OFST-2,sp)
2527  d7a7               L5701:
2528                     ; 860         m = (int8_t)(m - (uip_connr->sv >> 2));
2530  d7a7 e617          	ld	a,(23,x)
2531  d7a9 44            	srl	a
2532  d7aa 44            	srl	a
2533  d7ab 5f            	clrw	x
2534  d7ac 97            	ld	xl,a
2535  d7ad 1f01          	ldw	(OFST-4,sp),x
2537  d7af 5f            	clrw	x
2538  d7b0 7b03          	ld	a,(OFST-2,sp)
2539  d7b2 4d            	tnz	a
2540  d7b3 2a01          	jrpl	L441
2541  d7b5 53            	cplw	x
2542  d7b6               L441:
2543  d7b6 97            	ld	xl,a
2544  d7b7 72f001        	subw	x,(OFST-4,sp)
2545  d7ba 01            	rrwa	x,a
2546  d7bb 6b03          	ld	(OFST-2,sp),a
2548                     ; 861         uip_connr->sv += m;
2550  d7bd 1e04          	ldw	x,(OFST-1,sp)
2551  d7bf e617          	ld	a,(23,x)
2552  d7c1 1b03          	add	a,(OFST-2,sp)
2553  d7c3 e717          	ld	(23,x),a
2554                     ; 862         uip_connr->rto = (uint8_t)((uip_connr->sa >> 3) + uip_connr->sv);
2556  d7c5 e616          	ld	a,(22,x)
2557  d7c7 44            	srl	a
2558  d7c8 44            	srl	a
2559  d7c9 44            	srl	a
2560  d7ca eb17          	add	a,(23,x)
2561  d7cc e718          	ld	(24,x),a
2562  d7ce               L3701:
2563                     ; 865       uip_flags = UIP_ACKDATA;
2565  d7ce 35010088      	mov	_uip_flags,#1
2566                     ; 867       uip_connr->timer = uip_connr->rto;
2568  d7d2 e618          	ld	a,(24,x)
2569  d7d4 e71a          	ld	(26,x),a
2570                     ; 870       uip_connr->len = 0;
2572  d7d6 905f          	clrw	y
2573  d7d8 ef10          	ldw	(16,x),y
2574  d7da               L7601:
2575                     ; 875   switch (uip_connr->tcpstateflags & UIP_TS_MASK) {
2577  d7da 1e04          	ldw	x,(OFST-1,sp)
2578  d7dc e619          	ld	a,(25,x)
2579  d7de a40f          	and	a,#15
2581                     ; 1103 	uip_connr->timer = 0;
2582  d7e0 4a            	dec	a
2583  d7e1 2725          	jreq	L504
2584  d7e3 a002          	sub	a,#2
2585  d7e5 2745          	jreq	L704
2586  d7e7 4a            	dec	a
2587  d7e8 2603ccd9ea    	jreq	L124
2588  d7ed 4a            	dec	a
2589  d7ee 2603ccda29    	jreq	L324
2590  d7f3 4a            	dec	a
2591  d7f4 2603ccda54    	jreq	L724
2592  d7f9 4a            	dec	a
2593  d7fa 2603ccda61    	jreq	L134
2594  d7ff 4a            	dec	a
2595  d800 2603ccd9d9    	jreq	L714
2596  d805 ccdac3        	jra	L744
2597  d808               L504:
2598                     ; 879     case UIP_SYN_RCVD:
2598                     ; 880       /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and we are waiting
2598                     ; 881          for an ACK that acknowledges the data we sent out the last time. Therefore, we
2598                     ; 882 	 want to have the UIP_ACKDATA flag set. If so, we enter the ESTABLISHED state. */
2598                     ; 883       if (uip_flags & UIP_ACKDATA) {
2600  d808 72010088f8    	btjf	_uip_flags,#0,L744
2601                     ; 884         uip_connr->tcpstateflags = UIP_ESTABLISHED;
2603  d80d a603          	ld	a,#3
2604  d80f e719          	ld	(25,x),a
2605                     ; 885         uip_flags = UIP_CONNECTED;
2607  d811 35400088      	mov	_uip_flags,#64
2608                     ; 886         uip_connr->len = 0;
2610  d815 905f          	clrw	y
2611  d817 ef10          	ldw	(16,x),y
2612                     ; 887         if (uip_len > 0) {
2614  d819 ce01d7        	ldw	x,_uip_len
2615  d81c 2707          	jreq	L5011
2616                     ; 888           uip_flags |= UIP_NEWDATA;
2618  d81e 72120088      	bset	_uip_flags,#1
2619                     ; 889           uip_add_rcv_nxt(uip_len);
2621  d822 cdd1b2        	call	L743_uip_add_rcv_nxt
2623  d825               L5011:
2624                     ; 891         uip_slen = 0;
2627  d825 5f            	clrw	x
2628  d826 cf0078        	ldw	_uip_slen,x
2629                     ; 892         UIP_APPCALL();
2631                     ; 893         goto appsend;
2633  d829 ccd2cf        	jra	L314
2634  d82c               L704:
2635                     ; 897     case UIP_ESTABLISHED:
2635                     ; 898       /* In the ESTABLISHED state, we call upon the application to feed data into the
2635                     ; 899          uip_buf. If the UIP_ACKDATA flag is set, the application should put new data
2635                     ; 900 	 into the buffer, otherwise we are retransmitting an old segment, and the
2635                     ; 901 	 application should put that data into the buffer.
2635                     ; 902 	 
2635                     ; 903 	 If the incoming packet is a FIN, we should close the connection on this side
2635                     ; 904 	 as well, and we send out a FIN and enter the LAST_ACK state. We require that
2635                     ; 905 	 there is no outstanding data; otherwise the sequence numbers will be screwed
2635                     ; 906 	 up. */
2635                     ; 907       if (BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
2637  d82c 7201020a30    	btjf	_uip_buf+47,#0,L7011
2639  d831 e619          	ld	a,(25,x)
2640  d833 a510          	bcp	a,#16
2641  d835 262a          	jrne	L7011
2642                     ; 908         if (uip_outstanding(uip_connr)) {
2644  d837 e611          	ld	a,(17,x)
2645  d839 ea10          	or	a,(16,x)
2646  d83b 26c8          	jrne	L744
2647                     ; 909           goto drop;
2649                     ; 911         uip_add_rcv_nxt(1 + uip_len);
2651  d83d ce01d7        	ldw	x,_uip_len
2652  d840 5c            	incw	x
2653  d841 cdd1b2        	call	L743_uip_add_rcv_nxt
2655                     ; 912         uip_flags |= UIP_CLOSE;
2657  d844 72180088      	bset	_uip_flags,#4
2658                     ; 913         if (uip_len > 0) {
2660  d848 ce01d7        	ldw	x,_uip_len
2661  d84b 2704          	jreq	L3111
2662                     ; 914           uip_flags |= UIP_NEWDATA;
2664  d84d 72120088      	bset	_uip_flags,#1
2665  d851               L3111:
2666                     ; 916         UIP_APPCALL();
2668  d851 cdde67        	call	_uip_TcpAppHubCall
2670                     ; 917         uip_connr->len = 1;
2672  d854 1e04          	ldw	x,(OFST-1,sp)
2673  d856 90ae0001      	ldw	y,#1
2674  d85a ef10          	ldw	(16,x),y
2675                     ; 918         uip_connr->tcpstateflags = UIP_LAST_ACK;
2677  d85c a608          	ld	a,#8
2678                     ; 919         uip_connr->nrtx = 0;
2679                     ; 920         tcp_send_finack: BUF->flags = TCP_FIN | TCP_ACK;
2680                     ; 921         goto tcp_send_nodata;
2682  d85e ccd8ee        	jp	LC005
2683  d861               L7011:
2684                     ; 926       if ((BUF->flags & TCP_URG) != 0) {
2686  d861 720b020a1f    	btjf	_uip_buf+47,#5,L5111
2687                     ; 927         uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
2689  d866 c6020f        	ld	a,_uip_buf+52
2690  d869 97            	ld	xl,a
2691  d86a c60210        	ld	a,_uip_buf+53
2692  d86d 02            	rlwa	x,a
2693  d86e 72bb01d9      	addw	x,_uip_appdata
2694  d872 cf01d9        	ldw	_uip_appdata,x
2695                     ; 928         uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
2697  d875 c6020f        	ld	a,_uip_buf+52
2698  d878 97            	ld	xl,a
2699  d879 c60210        	ld	a,_uip_buf+53
2700  d87c 02            	rlwa	x,a
2701  d87d 72b001d7      	subw	x,_uip_len
2702  d881 50            	negw	x
2703  d882 cf01d7        	ldw	_uip_len,x
2704  d885               L5111:
2705                     ; 935       if (uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
2707  d885 ce01d7        	ldw	x,_uip_len
2708  d888 2712          	jreq	L7111
2710  d88a 1e04          	ldw	x,(OFST-1,sp)
2711  d88c e619          	ld	a,(25,x)
2712  d88e a510          	bcp	a,#16
2713  d890 260a          	jrne	L7111
2714                     ; 936         uip_flags |= UIP_NEWDATA;
2716  d892 72120088      	bset	_uip_flags,#1
2717                     ; 937         uip_add_rcv_nxt(uip_len);
2719  d896 ce01d7        	ldw	x,_uip_len
2720  d899 cdd1b2        	call	L743_uip_add_rcv_nxt
2722  d89c               L7111:
2723                     ; 949       tmp16 = ((uint16_t)BUF->wnd[0] << 8) + (uint16_t)BUF->wnd[1];
2725  d89c c6020c        	ld	a,_uip_buf+49
2726  d89f 5f            	clrw	x
2727  d8a0 97            	ld	xl,a
2728  d8a1 1f01          	ldw	(OFST-4,sp),x
2730  d8a3 c6020b        	ld	a,_uip_buf+48
2731  d8a6 97            	ld	xl,a
2732  d8a7 4f            	clr	a
2733  d8a8 02            	rlwa	x,a
2734  d8a9 72fb01        	addw	x,(OFST-4,sp)
2735  d8ac cf0064        	ldw	L54_tmp16,x
2736                     ; 950       if (tmp16 > uip_connr->initialmss || tmp16 == 0) {
2738  d8af 1604          	ldw	y,(OFST-1,sp)
2739  d8b1 90ee14        	ldw	y,(20,y)
2740  d8b4 90c30064      	cpw	y,L54_tmp16
2741  d8b8 2505          	jrult	L3211
2743  d8ba ce0064        	ldw	x,L54_tmp16
2744  d8bd 2607          	jrne	L1211
2745  d8bf               L3211:
2746                     ; 951         tmp16 = uip_connr->initialmss;
2748  d8bf 1e04          	ldw	x,(OFST-1,sp)
2749  d8c1 ee14          	ldw	x,(20,x)
2750  d8c3 cf0064        	ldw	L54_tmp16,x
2751  d8c6               L1211:
2752                     ; 953       uip_connr->mss = tmp16;
2754  d8c6 1e04          	ldw	x,(OFST-1,sp)
2755  d8c8 90ce0064      	ldw	y,L54_tmp16
2756  d8cc ef12          	ldw	(18,x),y
2757                     ; 968       if (uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
2759  d8ce c60088        	ld	a,_uip_flags
2760  d8d1 a503          	bcp	a,#3
2761  d8d3 2603ccdac3    	jreq	L744
2762                     ; 969         uip_slen = 0;
2763                     ; 970         UIP_APPCALL();
2765  d8d8 ccd825        	jp	L5011
2766  d8db               L7211:
2767                     ; 981         if (uip_flags & UIP_CLOSE) {
2769  d8db 720900881e    	btjf	_uip_flags,#4,L1311
2770                     ; 982           uip_slen = 0;
2772  d8e0 5f            	clrw	x
2773  d8e1 cf0078        	ldw	_uip_slen,x
2774                     ; 983 	  uip_connr->len = 1;
2776  d8e4 1e04          	ldw	x,(OFST-1,sp)
2777  d8e6 90ae0001      	ldw	y,#1
2778  d8ea ef10          	ldw	(16,x),y
2779                     ; 984 	  uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
2781  d8ec a604          	ld	a,#4
2782                     ; 985 	  uip_connr->nrtx = 0;
2784  d8ee               LC005:
2785  d8ee e719          	ld	(25,x),a
2787  d8f0 6f1b          	clr	(27,x)
2788                     ; 986 	  BUF->flags = TCP_FIN | TCP_ACK;
2790  d8f2               LC003:
2792  d8f2 3511020a      	mov	_uip_buf+47,#17
2793                     ; 987 	  goto tcp_send_nodata;
2794  d8f6               L334:
2795                     ; 1116   tcp_send_nodata: uip_len = UIP_IPTCPH_LEN;
2797  d8f6 ae0028        	ldw	x,#40
2798  d8f9 cf01d7        	ldw	_uip_len,x
2799  d8fc 206e          	jra	L534
2800  d8fe               L1311:
2801                     ; 991         if (uip_slen > 0) {
2803  d8fe ce0078        	ldw	x,_uip_slen
2804  d901 2732          	jreq	L3311
2805                     ; 994 	  if ((uip_flags & UIP_ACKDATA) != 0) {
2807  d903 7201008806    	btjf	_uip_flags,#0,L5311
2808                     ; 995 	    uip_connr->len = 0;
2810  d908 1e04          	ldw	x,(OFST-1,sp)
2811  d90a 905f          	clrw	y
2812  d90c ef10          	ldw	(16,x),y
2813  d90e               L5311:
2814                     ; 1000 	  if (uip_connr->len == 0) {
2816  d90e 1e04          	ldw	x,(OFST-1,sp)
2817  d910 e611          	ld	a,(17,x)
2818  d912 ea10          	or	a,(16,x)
2819  d914 261a          	jrne	L7311
2820                     ; 1003 	    if (uip_slen > uip_connr->mss) {
2822  d916 9093          	ldw	y,x
2823  d918 90ee12        	ldw	y,(18,y)
2824  d91b 90c30078      	cpw	y,_uip_slen
2825  d91f 2407          	jruge	L1411
2826                     ; 1004 	      uip_slen = uip_connr->mss;
2828  d921 ee12          	ldw	x,(18,x)
2829  d923 cf0078        	ldw	_uip_slen,x
2830  d926 1e04          	ldw	x,(OFST-1,sp)
2831  d928               L1411:
2832                     ; 1009             uip_connr->len = uip_slen;
2834  d928 90ce0078      	ldw	y,_uip_slen
2835  d92c ef10          	ldw	(16,x),y
2837  d92e 2005          	jra	L3311
2838  d930               L7311:
2839                     ; 1015 	    uip_slen = uip_connr->len;
2841  d930 ee10          	ldw	x,(16,x)
2842  d932 cf0078        	ldw	_uip_slen,x
2843  d935               L3311:
2844                     ; 1018 	uip_connr->nrtx = 0;
2846  d935 1e04          	ldw	x,(OFST-1,sp)
2847  d937 6f1b          	clr	(27,x)
2848  d939               L514:
2849                     ; 1019 	apprexmit: uip_appdata = uip_sappdata;
2851  d939 ce007a        	ldw	x,_uip_sappdata
2852  d93c cf01d9        	ldw	_uip_appdata,x
2853                     ; 1023 	if (uip_slen > 0 && uip_connr->len > 0) {
2855  d93f ce0078        	ldw	x,_uip_slen
2856  d942 2716          	jreq	L5411
2858  d944 1e04          	ldw	x,(OFST-1,sp)
2859  d946 e611          	ld	a,(17,x)
2860  d948 ea10          	or	a,(16,x)
2861  d94a 270e          	jreq	L5411
2862                     ; 1025 	  uip_len = uip_connr->len + UIP_TCPIP_HLEN;
2864  d94c ee10          	ldw	x,(16,x)
2865  d94e 1c0028        	addw	x,#40
2866  d951 cf01d7        	ldw	_uip_len,x
2867                     ; 1027 	  BUF->flags = TCP_ACK | TCP_PSH;
2869  d954 3518020a      	mov	_uip_buf+47,#24
2870                     ; 1029 	  goto tcp_send_noopts;
2872  d958 2012          	jra	L534
2873  d95a               L5411:
2874                     ; 1032 	if (uip_flags & UIP_NEWDATA) {
2876  d95a 7202008803cc  	btjf	_uip_flags,#1,L744
2877                     ; 1033 	  uip_len = UIP_TCPIP_HLEN;
2879  d962 ae0028        	ldw	x,#40
2880  d965 cf01d7        	ldw	_uip_len,x
2881                     ; 1034 	  BUF->flags = TCP_ACK;
2883  d968 3510020a      	mov	_uip_buf+47,#16
2884                     ; 1035 	  goto tcp_send_noopts;
2885  d96c               L534:
2886                     ; 1117   tcp_send_noopts: BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
2888  d96c 35500209      	mov	_uip_buf+46,#80
2889  d970               L734:
2890                     ; 1123   tcp_send:
2890                     ; 1124   /* We're done with the input processing. We are now ready to send a reply. Our job is to
2890                     ; 1125      fill in all the fields of the TCP and IP headers before calculating the checksum and
2890                     ; 1126      finally send the packet. */
2890                     ; 1127   BUF->ackno[0] = uip_connr->rcv_nxt[0];
2892  d970 1e04          	ldw	x,(OFST-1,sp)
2893  d972 e608          	ld	a,(8,x)
2894  d974 c70205        	ld	_uip_buf+42,a
2895                     ; 1128   BUF->ackno[1] = uip_connr->rcv_nxt[1];
2897  d977 e609          	ld	a,(9,x)
2898  d979 c70206        	ld	_uip_buf+43,a
2899                     ; 1129   BUF->ackno[2] = uip_connr->rcv_nxt[2];
2901  d97c e60a          	ld	a,(10,x)
2902  d97e c70207        	ld	_uip_buf+44,a
2903                     ; 1130   BUF->ackno[3] = uip_connr->rcv_nxt[3];
2905  d981 e60b          	ld	a,(11,x)
2906  d983 c70208        	ld	_uip_buf+45,a
2907                     ; 1132   BUF->seqno[0] = uip_connr->snd_nxt[0];
2909  d986 e60c          	ld	a,(12,x)
2910  d988 c70201        	ld	_uip_buf+38,a
2911                     ; 1133   BUF->seqno[1] = uip_connr->snd_nxt[1];
2913  d98b e60d          	ld	a,(13,x)
2914  d98d c70202        	ld	_uip_buf+39,a
2915                     ; 1134   BUF->seqno[2] = uip_connr->snd_nxt[2];
2917  d990 e60e          	ld	a,(14,x)
2918  d992 c70203        	ld	_uip_buf+40,a
2919                     ; 1135   BUF->seqno[3] = uip_connr->snd_nxt[3];
2921  d995 e60f          	ld	a,(15,x)
2922  d997 c70204        	ld	_uip_buf+41,a
2923                     ; 1137   BUF->proto = UIP_PROTO_TCP;
2925  d99a 350601f2      	mov	_uip_buf+23,#6
2926                     ; 1139   BUF->srcport = uip_connr->lport;
2928  d99e ee04          	ldw	x,(4,x)
2929  d9a0 cf01fd        	ldw	_uip_buf+34,x
2930                     ; 1140   BUF->destport = uip_connr->rport;
2932  d9a3 1e04          	ldw	x,(OFST-1,sp)
2933  d9a5 ee06          	ldw	x,(6,x)
2934  d9a7 cf01ff        	ldw	_uip_buf+36,x
2935                     ; 1142   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
2937  d9aa ce0084        	ldw	x,_uip_hostaddr
2938  d9ad cf01f5        	ldw	_uip_buf+26,x
2941  d9b0 ce0086        	ldw	x,_uip_hostaddr+2
2942  d9b3 cf01f7        	ldw	_uip_buf+28,x
2943                     ; 1143   uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
2945  d9b6 1e04          	ldw	x,(OFST-1,sp)
2946  d9b8 fe            	ldw	x,(x)
2947  d9b9 cf01f9        	ldw	_uip_buf+30,x
2950  d9bc 1e04          	ldw	x,(OFST-1,sp)
2951  d9be ee02          	ldw	x,(2,x)
2952  d9c0 cf01fb        	ldw	_uip_buf+32,x
2953                     ; 1145   if (uip_connr->tcpstateflags & UIP_STOPPED) {
2955  d9c3 1e04          	ldw	x,(OFST-1,sp)
2956  d9c5 e619          	ld	a,(25,x)
2957  d9c7 a510          	bcp	a,#16
2958  d9c9 2603ccda68    	jreq	L1121
2959                     ; 1148     BUF->wnd[0] = BUF->wnd[1] = 0;
2961  d9ce 725f020c      	clr	_uip_buf+49
2962  d9d2 725f020b      	clr	_uip_buf+48
2964  d9d6 ccda70        	jra	L144
2965  d9d9               L714:
2966                     ; 1040     case UIP_LAST_ACK:
2966                     ; 1041       /* We can close this connection if the peer has acknowledged our FIN. This is
2966                     ; 1042          indicated by the UIP_ACKDATA flag. */
2966                     ; 1043       if (uip_flags & UIP_ACKDATA) {
2968  d9d9 7201008881    	btjf	_uip_flags,#0,L744
2969                     ; 1044         uip_connr->tcpstateflags = UIP_CLOSED;
2971  d9de e719          	ld	(25,x),a
2972                     ; 1045 	uip_flags = UIP_CLOSE;
2974  d9e0 35100088      	mov	_uip_flags,#16
2975                     ; 1046 	UIP_APPCALL();
2977  d9e4 cdde67        	call	_uip_TcpAppHubCall
2979  d9e7 ccdac3        	jra	L744
2980  d9ea               L124:
2981                     ; 1050     case UIP_FIN_WAIT_1:
2981                     ; 1051       /* The application has closed the connection, but the remote host hasn't closed
2981                     ; 1052          its end yet. Thus we do nothing but wait for a FIN from the other side. */
2981                     ; 1053       if (uip_len > 0) {
2983  d9ea ce01d7        	ldw	x,_uip_len
2984  d9ed 2703          	jreq	L3511
2985                     ; 1054         uip_add_rcv_nxt(uip_len);
2987  d9ef cdd1b2        	call	L743_uip_add_rcv_nxt
2989  d9f2               L3511:
2990                     ; 1056       if (BUF->flags & TCP_FIN) {
2992  d9f2 7201020a19    	btjf	_uip_buf+47,#0,L5511
2993                     ; 1057         if (uip_flags & UIP_ACKDATA) {
2995  d9f7 1e04          	ldw	x,(OFST-1,sp)
2996  d9f9 720100880c    	btjf	_uip_flags,#0,L7511
2997                     ; 1058 	  uip_connr->tcpstateflags = UIP_TIME_WAIT;
2999  d9fe a607          	ld	a,#7
3000  da00 e719          	ld	(25,x),a
3001                     ; 1059 	  uip_connr->timer = 0;
3003  da02 6f1a          	clr	(26,x)
3004                     ; 1060 	  uip_connr->len = 0;
3006  da04 905f          	clrw	y
3007  da06 ef10          	ldw	(16,x),y
3009  da08 2034          	jra	LC004
3010  da0a               L7511:
3011                     ; 1063           uip_connr->tcpstateflags = UIP_CLOSING;
3013  da0a a606          	ld	a,#6
3014  da0c e719          	ld	(25,x),a
3015                     ; 1065         uip_add_rcv_nxt(1);
3017                     ; 1066         uip_flags = UIP_CLOSE;
3018                     ; 1067         UIP_APPCALL();
3020                     ; 1068         goto tcp_send_ack;
3022  da0e 202e          	jp	LC004
3023  da10               L5511:
3024                     ; 1070       else if (uip_flags & UIP_ACKDATA) {
3026  da10 720100880d    	btjf	_uip_flags,#0,L3611
3027                     ; 1071         uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
3029  da15 1e04          	ldw	x,(OFST-1,sp)
3030  da17 a605          	ld	a,#5
3031  da19 e719          	ld	(25,x),a
3032                     ; 1072         uip_connr->len = 0;
3034  da1b 905f          	clrw	y
3035  da1d ef10          	ldw	(16,x),y
3036                     ; 1073         goto drop;
3038  da1f ccdac3        	jra	L744
3039  da22               L3611:
3040                     ; 1075       if (uip_len > 0) {
3042  da22 ce01d7        	ldw	x,_uip_len
3043  da25 27f8          	jreq	L744
3044                     ; 1076         goto tcp_send_ack;
3046  da27 2038          	jra	L134
3047  da29               L324:
3048                     ; 1080     case UIP_FIN_WAIT_2:
3048                     ; 1081       if (uip_len > 0) {
3050  da29 ce01d7        	ldw	x,_uip_len
3051  da2c 2703          	jreq	L1711
3052                     ; 1082 	uip_add_rcv_nxt(uip_len);
3054  da2e cdd1b2        	call	L743_uip_add_rcv_nxt
3056  da31               L1711:
3057                     ; 1084       if (BUF->flags & TCP_FIN) {
3059  da31 7201020a17    	btjf	_uip_buf+47,#0,L3711
3060                     ; 1085 	uip_connr->tcpstateflags = UIP_TIME_WAIT;
3062  da36 1e04          	ldw	x,(OFST-1,sp)
3063  da38 a607          	ld	a,#7
3064  da3a e719          	ld	(25,x),a
3065                     ; 1086 	uip_connr->timer = 0;
3067  da3c 6f1a          	clr	(26,x)
3068                     ; 1087 	uip_add_rcv_nxt(1);
3071                     ; 1088 	uip_flags = UIP_CLOSE;
3073                     ; 1089 	UIP_APPCALL();
3075  da3e               LC004:
3077  da3e ae0001        	ldw	x,#1
3078  da41 cdd1b2        	call	L743_uip_add_rcv_nxt
3080  da44 35100088      	mov	_uip_flags,#16
3082  da48 cdde67        	call	_uip_TcpAppHubCall
3084                     ; 1090 	goto tcp_send_ack;
3086  da4b 2014          	jra	L134
3087  da4d               L3711:
3088                     ; 1092       if (uip_len > 0) {
3090  da4d ce01d7        	ldw	x,_uip_len
3091  da50 2771          	jreq	L744
3092                     ; 1093 	goto tcp_send_ack;
3094  da52 200d          	jra	L134
3095  da54               L724:
3096                     ; 1100     case UIP_CLOSING:
3096                     ; 1101       if (uip_flags & UIP_ACKDATA) {
3098  da54 720100886a    	btjf	_uip_flags,#0,L744
3099                     ; 1102 	uip_connr->tcpstateflags = UIP_TIME_WAIT;
3101  da59 a607          	ld	a,#7
3102  da5b e719          	ld	(25,x),a
3103                     ; 1103 	uip_connr->timer = 0;
3105  da5d 6f1a          	clr	(26,x)
3106  da5f 2062          	jra	L744
3107                     ; 1106   goto drop;
3109  da61               L134:
3110                     ; 1112   tcp_send_ack:
3110                     ; 1113   /* We jump here when we are ready to send the packet, and just want to set the
3110                     ; 1114      appropriate TCP sequence numbers in the TCP header. */
3110                     ; 1115   BUF->flags = TCP_ACK;
3112  da61 3510020a      	mov	_uip_buf+47,#16
3113  da65 ccd8f6        	jra	L334
3114  da68               L1121:
3115                     ; 1151     BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
3117  da68 3503020b      	mov	_uip_buf+48,#3
3118                     ; 1152     BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
3120  da6c 354e020c      	mov	_uip_buf+49,#78
3121  da70               L144:
3122                     ; 1158   tcp_send_noconn:
3122                     ; 1159   BUF->ttl = UIP_TTL;
3124  da70 354001f1      	mov	_uip_buf+22,#64
3125                     ; 1160   BUF->len[0] = (uint8_t)(uip_len >> 8);
3127  da74 5501d701eb    	mov	_uip_buf+16,_uip_len
3128                     ; 1161   BUF->len[1] = (uint8_t)(uip_len & 0xff);
3130  da79 5501d801ec    	mov	_uip_buf+17,_uip_len+1
3131                     ; 1163   BUF->urgp[0] = BUF->urgp[1] = 0;
3133  da7e 725f0210      	clr	_uip_buf+53
3134  da82 725f020f      	clr	_uip_buf+52
3135                     ; 1166   BUF->tcpchksum = 0;
3137  da86 5f            	clrw	x
3138  da87 cf020d        	ldw	_uip_buf+50,x
3139                     ; 1167   BUF->tcpchksum = ~(uip_tcpchksum());
3141  da8a cdd0ae        	call	_uip_tcpchksum
3143  da8d 53            	cplw	x
3144  da8e cf020d        	ldw	_uip_buf+50,x
3145                     ; 1172   ip_send_nolen:
3145                     ; 1173 
3145                     ; 1174   BUF->vhl = 0x45;
3147  da91 354501e9      	mov	_uip_buf+14,#69
3148                     ; 1175   BUF->tos = 0;
3150  da95 725f01ea      	clr	_uip_buf+15
3151                     ; 1176   BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
3153  da99 725f01f0      	clr	_uip_buf+21
3154  da9d 725f01ef      	clr	_uip_buf+20
3155                     ; 1177   ++ipid;
3157  daa1 ce006c        	ldw	x,L31_ipid
3158  daa4 5c            	incw	x
3159  daa5 cf006c        	ldw	L31_ipid,x
3160                     ; 1178   BUF->ipid[0] = (uint8_t)(ipid >> 8);
3162  daa8 55006c01ed    	mov	_uip_buf+18,L31_ipid
3163                     ; 1179   BUF->ipid[1] = (uint8_t)(ipid & 0xff);
3165  daad 55006d01ee    	mov	_uip_buf+19,L31_ipid+1
3166                     ; 1181   BUF->ipchksum = 0;
3168  dab2 5f            	clrw	x
3169  dab3 cf01f3        	ldw	_uip_buf+24,x
3170                     ; 1182   BUF->ipchksum = ~(uip_ipchksum());
3172  dab6 cdd049        	call	_uip_ipchksum
3174  dab9 53            	cplw	x
3175  daba cf01f3        	ldw	_uip_buf+24,x
3176                     ; 1184   UIP_STAT(++uip_stat.tcp.sent);
3178  dabd ae00c5        	ldw	x,#_uip_stat+60
3180  dac0 ccd417        	jra	L544
3181  dac3               L744:
3182                     ; 1199   drop:
3182                     ; 1200   uip_len = 0;
3184  dac3 5f            	clrw	x
3185  dac4 cf01d7        	ldw	_uip_len,x
3186                     ; 1201   uip_flags = 0;
3188                     ; 1202   return;
3189  dac7               L602:
3191  dac7 725f0088      	clr	_uip_flags
3194  dacb 5b06          	addw	sp,#6
3195  dacd 81            	ret	
3227                     ; 1207 uint16_t htons(uint16_t val)
3227                     ; 1208 {
3228                     	switch	.text
3229  dace               _htons:
3233                     ; 1209   return HTONS(val);
3237  dace 81            	ret	
3282                     ; 1215 void uip_send(const char *data, int len)
3282                     ; 1216 {
3283                     	switch	.text
3284  dacf               _uip_send:
3286  dacf 89            	pushw	x
3287       00000000      OFST:	set	0
3290                     ; 1217   if (len > 0) {
3292  dad0 9c            	rvf	
3293  dad1 1e05          	ldw	x,(OFST+5,sp)
3294  dad3 2d1c          	jrsle	L412
3295                     ; 1218     uip_slen = len;
3297  dad5 cf0078        	ldw	_uip_slen,x
3298                     ; 1219     if (data != uip_sappdata) {
3300  dad8 1e01          	ldw	x,(OFST+1,sp)
3301  dada c3007a        	cpw	x,_uip_sappdata
3302  dadd 2712          	jreq	L412
3303                     ; 1220       memcpy(uip_sappdata, (data), uip_slen);
3305  dadf bf04          	ldw	c_x,x
3306  dae1 ce0078        	ldw	x,_uip_slen
3307  dae4 270b          	jreq	L412
3308  dae6               L612:
3309  dae6 5a            	decw	x
3310  dae7 92d604        	ld	a,([c_x.w],x)
3311  daea 72d7007a      	ld	([_uip_sappdata.w],x),a
3312  daee 5d            	tnzw	x
3313  daef 26f5          	jrne	L612
3314  daf1               L412:
3315                     ; 1223 }
3318  daf1 85            	popw	x
3319  daf2 81            	ret	
3746                     	switch	.bss
3747  0064               L54_tmp16:
3748  0064 0000          	ds.b	2
3749  0066               L34_opt:
3750  0066 00            	ds.b	1
3751  0067               L14_c:
3752  0067 00            	ds.b	1
3753  0068               L73_iss:
3754  0068 00000000      	ds.b	4
3755  006c               L31_ipid:
3756  006c 0000          	ds.b	2
3757  006e               _uip_listenports:
3758  006e 000000000000  	ds.b	10
3759                     	xdef	_uip_listenports
3760  0078               _uip_slen:
3761  0078 0000          	ds.b	2
3762                     	xdef	_uip_slen
3763  007a               _uip_sappdata:
3764  007a 0000          	ds.b	2
3765                     	xdef	_uip_sappdata
3766                     	xdef	_uip_ethaddr
3767                     	xdef	_uip_add32
3768                     	xdef	_uip_tcpchksum
3769                     	xdef	_uip_ipchksum
3770                     	xdef	_uip_chksum
3771  007c               _uip_draddr:
3772  007c 00000000      	ds.b	4
3773                     	xdef	_uip_draddr
3774  0080               _uip_netmask:
3775  0080 00000000      	ds.b	4
3776                     	xdef	_uip_netmask
3777  0084               _uip_hostaddr:
3778  0084 00000000      	ds.b	4
3779                     	xdef	_uip_hostaddr
3780                     	xdef	_uip_process
3781  0088               _uip_flags:
3782  0088 00            	ds.b	1
3783                     	xdef	_uip_flags
3784  0089               _uip_stat:
3785  0089 000000000000  	ds.b	88
3786                     	xdef	_uip_stat
3787  00e1               _uip_acc32:
3788  00e1 00000000      	ds.b	4
3789                     	xdef	_uip_acc32
3790  00e5               _uip_conns:
3791  00e5 000000000000  	ds.b	240
3792                     	xdef	_uip_conns
3793  01d5               _uip_conn:
3794  01d5 0000          	ds.b	2
3795                     	xdef	_uip_conn
3796  01d7               _uip_len:
3797  01d7 0000          	ds.b	2
3798                     	xdef	_uip_len
3799  01d9               _uip_appdata:
3800  01d9 0000          	ds.b	2
3801                     	xdef	_uip_appdata
3802                     	xdef	_htons
3803                     	xdef	_uip_send
3804                     	xdef	_uip_unlisten
3805                     	xdef	_uip_listen
3806  01db               _uip_buf:
3807  01db 000000000000  	ds.b	902
3808                     	xdef	_uip_buf
3809                     	xdef	_uip_setipid
3810                     	xdef	_uip_init_stats
3811                     	xdef	_uip_init
3812                     	xref	_uip_TcpAppHubCall
3813                     	xref.b	c_x
3814                     	xref.b	c_y
3834                     	xref	c_lgadc
3835                     	end
