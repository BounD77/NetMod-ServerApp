   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     	switch	.data
  18  000a               _uip_ethaddr:
  19  000a 01            	dc.b	1
  20  000b 02            	dc.b	2
  21  000c 03            	dc.b	3
  22  000d 04            	dc.b	4
  23  000e 05            	dc.b	5
  24  000f 06            	dc.b	6
  63                     ; 158 void uip_setipid(uint16_t id)
  63                     ; 159 {
  65                     	switch	.text
  66  e9c0               _uip_setipid:
  70                     ; 160   ipid = id;
  72  e9c0 cf006c        	ldw	L31_ipid,x
  73                     ; 161 }
  76  e9c3 81            	ret	
 119                     ; 212 void uip_add32(uint8_t *op32, uint16_t op16)
 119                     ; 213 {
 120                     	switch	.text
 121  e9c4               _uip_add32:
 123  e9c4 89            	pushw	x
 124  e9c5 89            	pushw	x
 125       00000002      OFST:	set	2
 128                     ; 214   uip_acc32[3] = (uint8_t)(op32[3] + (op16 & 0xff));
 130  e9c6 7b08          	ld	a,(OFST+6,sp)
 131  e9c8 eb03          	add	a,(3,x)
 132  e9ca c700e4        	ld	_uip_acc32+3,a
 133                     ; 215   uip_acc32[2] = (uint8_t)(op32[2] + (op16 >> 8));
 135  e9cd e602          	ld	a,(2,x)
 136  e9cf 1b07          	add	a,(OFST+5,sp)
 137  e9d1 c700e3        	ld	_uip_acc32+2,a
 138                     ; 216   uip_acc32[1] = op32[1];
 140  e9d4 e601          	ld	a,(1,x)
 141  e9d6 c700e2        	ld	_uip_acc32+1,a
 142                     ; 217   uip_acc32[0] = op32[0];
 144  e9d9 f6            	ld	a,(x)
 145  e9da c700e1        	ld	_uip_acc32,a
 146                     ; 219   if (uip_acc32[2] < (op16 >> 8)) {
 148  e9dd 4f            	clr	a
 149  e9de 1e07          	ldw	x,(OFST+5,sp)
 150  e9e0 01            	rrwa	x,a
 151  e9e1 c600e3        	ld	a,_uip_acc32+2
 152  e9e4 905f          	clrw	y
 153  e9e6 9097          	ld	yl,a
 154  e9e8 90bf07        	ldw	c_y,y
 155  e9eb b307          	cpw	x,c_y
 156  e9ed 230a          	jrule	L76
 157                     ; 220     ++uip_acc32[1];
 159  e9ef 725c00e2      	inc	_uip_acc32+1
 160                     ; 221     if (uip_acc32[1] == 0) {
 162  e9f3 2604          	jrne	L76
 163                     ; 222       ++uip_acc32[0];
 165  e9f5 725c00e1      	inc	_uip_acc32
 166  e9f9               L76:
 167                     ; 226   if (uip_acc32[3] < (op16 & 0xff)) {
 169  e9f9 c600e4        	ld	a,_uip_acc32+3
 170  e9fc 5f            	clrw	x
 171  e9fd 97            	ld	xl,a
 172  e9fe 1f01          	ldw	(OFST-1,sp),x
 174  ea00 5f            	clrw	x
 175  ea01 7b08          	ld	a,(OFST+6,sp)
 176  ea03 02            	rlwa	x,a
 177  ea04 1301          	cpw	x,(OFST-1,sp)
 178  ea06 2310          	jrule	L37
 179                     ; 227     ++uip_acc32[2];
 181  ea08 725c00e3      	inc	_uip_acc32+2
 182                     ; 228     if (uip_acc32[2] == 0) {
 184  ea0c 260a          	jrne	L37
 185                     ; 229       ++uip_acc32[1];
 187  ea0e 725c00e2      	inc	_uip_acc32+1
 188                     ; 230       if (uip_acc32[1] == 0) {
 190  ea12 2604          	jrne	L37
 191                     ; 231         ++uip_acc32[0];
 193  ea14 725c00e1      	inc	_uip_acc32
 194  ea18               L37:
 195                     ; 235 }
 198  ea18 5b04          	addw	sp,#4
 199  ea1a 81            	ret	
 275                     ; 242 static uint16_t chksum(uint16_t sum, const uint8_t *data, uint16_t len)
 275                     ; 243 {
 276                     	switch	.text
 277  ea1b               L101_chksum:
 279  ea1b 89            	pushw	x
 280  ea1c 5206          	subw	sp,#6
 281       00000006      OFST:	set	6
 284                     ; 248   dataptr = data;
 286  ea1e 1e0b          	ldw	x,(OFST+5,sp)
 287  ea20 1f05          	ldw	(OFST-1,sp),x
 289                     ; 249   last_byte = data + len - 1;
 291  ea22 72fb0d        	addw	x,(OFST+7,sp)
 292  ea25 5a            	decw	x
 293  ea26 1f01          	ldw	(OFST-5,sp),x
 296  ea28 1e05          	ldw	x,(OFST-1,sp)
 297  ea2a 2020          	jra	L341
 298  ea2c               L731:
 299                     ; 252     t = (dataptr[0] << 8) + dataptr[1];
 301  ea2c f6            	ld	a,(x)
 302  ea2d 5f            	clrw	x
 303  ea2e 97            	ld	xl,a
 304  ea2f 1605          	ldw	y,(OFST-1,sp)
 305  ea31 4f            	clr	a
 306  ea32 90eb01        	add	a,(1,y)
 307  ea35 2401          	jrnc	L21
 308  ea37 5c            	incw	x
 309  ea38               L21:
 310  ea38 02            	rlwa	x,a
 311  ea39 1f03          	ldw	(OFST-3,sp),x
 313                     ; 253     sum += t;
 315  ea3b 72fb07        	addw	x,(OFST+1,sp)
 316                     ; 254     if (sum < t) {
 318  ea3e 1303          	cpw	x,(OFST-3,sp)
 319  ea40 2401          	jruge	L741
 320                     ; 255       sum++; /* carry */
 322  ea42 5c            	incw	x
 323  ea43               L741:
 324  ea43 1f07          	ldw	(OFST+1,sp),x
 325                     ; 257     dataptr += 2;
 327  ea45 1e05          	ldw	x,(OFST-1,sp)
 328  ea47 1c0002        	addw	x,#2
 329  ea4a 1f05          	ldw	(OFST-1,sp),x
 331  ea4c               L341:
 332                     ; 251   while (dataptr < last_byte) { /* At least two more bytes */
 334  ea4c 1301          	cpw	x,(OFST-5,sp)
 335  ea4e 25dc          	jrult	L731
 336                     ; 260   if (dataptr == last_byte) {
 338  ea50 2612          	jrne	L151
 339                     ; 261     t = (dataptr[0] << 8) + 0;
 341  ea52 f6            	ld	a,(x)
 342  ea53 97            	ld	xl,a
 343  ea54 4f            	clr	a
 344  ea55 02            	rlwa	x,a
 345  ea56 1f03          	ldw	(OFST-3,sp),x
 347                     ; 262     sum += t;
 349  ea58 72fb07        	addw	x,(OFST+1,sp)
 350  ea5b 1f07          	ldw	(OFST+1,sp),x
 351                     ; 263     if (sum < t) {
 353  ea5d 1303          	cpw	x,(OFST-3,sp)
 354  ea5f 2403          	jruge	L151
 355                     ; 264       sum++; /* carry */
 357  ea61 5c            	incw	x
 358  ea62 1f07          	ldw	(OFST+1,sp),x
 359  ea64               L151:
 360                     ; 268   return sum;
 362  ea64 1e07          	ldw	x,(OFST+1,sp)
 365  ea66 5b08          	addw	sp,#8
 366  ea68 81            	ret	
 410                     ; 273 uint16_t uip_chksum(uint16_t *data, uint16_t len)
 410                     ; 274 {
 411                     	switch	.text
 412  ea69               _uip_chksum:
 414  ea69 89            	pushw	x
 415       00000000      OFST:	set	0
 418                     ; 275   return htons(chksum(0, (uint8_t *)data, len));
 420  ea6a 1e05          	ldw	x,(OFST+5,sp)
 421  ea6c 89            	pushw	x
 422  ea6d 1e03          	ldw	x,(OFST+3,sp)
 423  ea6f 89            	pushw	x
 424  ea70 5f            	clrw	x
 425  ea71 ada8          	call	L101_chksum
 427  ea73 5b04          	addw	sp,#4
 428  ea75 cdf4fe        	call	_htons
 432  ea78 5b02          	addw	sp,#2
 433  ea7a 81            	ret	
 468                     ; 281 uint16_t uip_ipchksum(void)
 468                     ; 282 {
 469                     	switch	.text
 470  ea7b               _uip_ipchksum:
 472  ea7b 89            	pushw	x
 473       00000002      OFST:	set	2
 476                     ; 285   sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 478  ea7c ae0014        	ldw	x,#20
 479  ea7f 89            	pushw	x
 480  ea80 ae01e9        	ldw	x,#_uip_buf+14
 481  ea83 89            	pushw	x
 482  ea84 5f            	clrw	x
 483  ea85 ad94          	call	L101_chksum
 485  ea87 5b04          	addw	sp,#4
 486  ea89 1f01          	ldw	(OFST-1,sp),x
 488                     ; 287   return (sum == 0) ? 0xffff : htons(sum);
 490  ea8b 2603          	jrne	L62
 491  ea8d 5a            	decw	x
 492  ea8e 2003          	jra	L03
 493  ea90               L62:
 494  ea90 cdf4fe        	call	_htons
 496  ea93               L03:
 499  ea93 5b02          	addw	sp,#2
 500  ea95 81            	ret	
 549                     ; 293 static uint16_t upper_layer_chksum(uint8_t proto)
 549                     ; 294 {
 550                     	switch	.text
 551  ea96               L112_upper_layer_chksum:
 553  ea96 88            	push	a
 554  ea97 5204          	subw	sp,#4
 555       00000004      OFST:	set	4
 558                     ; 298   upper_layer_len = (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 560  ea99 c601eb        	ld	a,_uip_buf+16
 561  ea9c 5f            	clrw	x
 562  ea9d 97            	ld	xl,a
 563  ea9e 4f            	clr	a
 564  ea9f cb01ec        	add	a,_uip_buf+17
 565  eaa2 2401          	jrnc	L63
 566  eaa4 5c            	incw	x
 567  eaa5               L63:
 568  eaa5 02            	rlwa	x,a
 569  eaa6 1d0014        	subw	x,#20
 570  eaa9 1f01          	ldw	(OFST-3,sp),x
 572                     ; 303   sum = upper_layer_len + proto;
 574  eaab 5f            	clrw	x
 575  eaac 7b05          	ld	a,(OFST+1,sp)
 576  eaae 97            	ld	xl,a
 577  eaaf 72fb01        	addw	x,(OFST-3,sp)
 578  eab2 1f03          	ldw	(OFST-1,sp),x
 580                     ; 305   sum = chksum(sum, (uint8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 582  eab4 ae0008        	ldw	x,#8
 583  eab7 89            	pushw	x
 584  eab8 ae01f5        	ldw	x,#_uip_buf+26
 585  eabb 89            	pushw	x
 586  eabc 1e07          	ldw	x,(OFST+3,sp)
 587  eabe cdea1b        	call	L101_chksum
 589  eac1 5b04          	addw	sp,#4
 590  eac3 1f03          	ldw	(OFST-1,sp),x
 592                     ; 308   sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN], upper_layer_len);
 594  eac5 1e01          	ldw	x,(OFST-3,sp)
 595  eac7 89            	pushw	x
 596  eac8 ae01fd        	ldw	x,#_uip_buf+34
 597  eacb 89            	pushw	x
 598  eacc 1e07          	ldw	x,(OFST+3,sp)
 599  eace cdea1b        	call	L101_chksum
 601  ead1 5b04          	addw	sp,#4
 602  ead3 1f03          	ldw	(OFST-1,sp),x
 604                     ; 310   return (sum == 0) ? 0xffff : htons(sum);
 606  ead5 2603          	jrne	L44
 607  ead7 5a            	decw	x
 608  ead8 2003          	jra	L64
 609  eada               L44:
 610  eada cdf4fe        	call	_htons
 612  eadd               L64:
 615  eadd 5b05          	addw	sp,#5
 616  eadf 81            	ret	
 640                     ; 315 uint16_t uip_tcpchksum(void)
 640                     ; 316 {
 641                     	switch	.text
 642  eae0               _uip_tcpchksum:
 646                     ; 317   return upper_layer_chksum(UIP_PROTO_TCP);
 648  eae0 a606          	ld	a,#6
 652  eae2 20b2          	jp	L112_upper_layer_chksum
 679                     ; 323 void uip_init(void)
 679                     ; 324 {
 680                     	switch	.text
 681  eae4               _uip_init:
 685                     ; 325   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 687  eae4 4f            	clr	a
 688  eae5 c70067        	ld	L14_c,a
 689  eae8               L352:
 690                     ; 326     uip_listenports[c] = 0;
 692  eae8 5f            	clrw	x
 693  eae9 97            	ld	xl,a
 694  eaea 58            	sllw	x
 695  eaeb 905f          	clrw	y
 696  eaed df006e        	ldw	(_uip_listenports,x),y
 697                     ; 325   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 699  eaf0 725c0067      	inc	L14_c
 702  eaf4 c60067        	ld	a,L14_c
 703  eaf7 a105          	cp	a,#5
 704  eaf9 25ed          	jrult	L352
 705                     ; 328   for (c = 0; c < UIP_CONNS; ++c) {
 707  eafb 4f            	clr	a
 708  eafc c70067        	ld	L14_c,a
 709  eaff               L162:
 710                     ; 329     uip_conns[c].tcpstateflags = UIP_CLOSED;
 712  eaff 97            	ld	xl,a
 713  eb00 a628          	ld	a,#40
 714  eb02 42            	mul	x,a
 715  eb03 724f00fe      	clr	(_uip_conns+25,x)
 716                     ; 328   for (c = 0; c < UIP_CONNS; ++c) {
 718  eb07 725c0067      	inc	L14_c
 721  eb0b c60067        	ld	a,L14_c
 722  eb0e a106          	cp	a,#6
 723  eb10 25ed          	jrult	L162
 724                     ; 335   uip_stat.ip.drop = 0;
 726  eb12 5f            	clrw	x
 727  eb13 cf008b        	ldw	_uip_stat+2,x
 728  eb16 cf0089        	ldw	_uip_stat,x
 729                     ; 336   uip_stat.ip.recv = 0;
 731  eb19 cf008f        	ldw	_uip_stat+6,x
 732  eb1c cf008d        	ldw	_uip_stat+4,x
 733                     ; 337   uip_stat.ip.sent = 0;
 735  eb1f cf0093        	ldw	_uip_stat+10,x
 736  eb22 cf0091        	ldw	_uip_stat+8,x
 737                     ; 338   uip_stat.ip.vhlerr = 0;
 739  eb25 cf0097        	ldw	_uip_stat+14,x
 740  eb28 cf0095        	ldw	_uip_stat+12,x
 741                     ; 339   uip_stat.ip.hblenerr = 0;
 743  eb2b cf009b        	ldw	_uip_stat+18,x
 744  eb2e cf0099        	ldw	_uip_stat+16,x
 745                     ; 340   uip_stat.ip.lblenerr = 0;
 747  eb31 cf009f        	ldw	_uip_stat+22,x
 748  eb34 cf009d        	ldw	_uip_stat+20,x
 749                     ; 341   uip_stat.ip.fragerr = 0;
 751  eb37 cf00a3        	ldw	_uip_stat+26,x
 752  eb3a cf00a1        	ldw	_uip_stat+24,x
 753                     ; 342   uip_stat.ip.chkerr = 0;
 755  eb3d cf00a7        	ldw	_uip_stat+30,x
 756  eb40 cf00a5        	ldw	_uip_stat+28,x
 757                     ; 343   uip_stat.ip.protoerr = 0;
 759  eb43 cf00ab        	ldw	_uip_stat+34,x
 760  eb46 cf00a9        	ldw	_uip_stat+32,x
 761                     ; 344   uip_stat.icmp.drop = 0;
 763  eb49 cf00af        	ldw	_uip_stat+38,x
 764  eb4c cf00ad        	ldw	_uip_stat+36,x
 765                     ; 345   uip_stat.icmp.recv = 0;
 767  eb4f cf00b3        	ldw	_uip_stat+42,x
 768  eb52 cf00b1        	ldw	_uip_stat+40,x
 769                     ; 346   uip_stat.icmp.sent = 0;
 771  eb55 cf00b7        	ldw	_uip_stat+46,x
 772  eb58 cf00b5        	ldw	_uip_stat+44,x
 773                     ; 347   uip_stat.icmp.typeerr = 0;
 775  eb5b cf00bb        	ldw	_uip_stat+50,x
 776  eb5e cf00b9        	ldw	_uip_stat+48,x
 777                     ; 348   uip_stat.tcp.drop = 0;
 779  eb61 cf00bf        	ldw	_uip_stat+54,x
 780  eb64 cf00bd        	ldw	_uip_stat+52,x
 781                     ; 349   uip_stat.tcp.recv = 0;
 783  eb67 cf00c3        	ldw	_uip_stat+58,x
 784  eb6a cf00c1        	ldw	_uip_stat+56,x
 785                     ; 350   uip_stat.tcp.sent = 0;
 787  eb6d cf00c7        	ldw	_uip_stat+62,x
 788  eb70 cf00c5        	ldw	_uip_stat+60,x
 789                     ; 351   uip_stat.tcp.chkerr = 0;
 791  eb73 cf00cb        	ldw	_uip_stat+66,x
 792  eb76 cf00c9        	ldw	_uip_stat+64,x
 793                     ; 352   uip_stat.tcp.ackerr = 0;
 795  eb79 cf00cf        	ldw	_uip_stat+70,x
 796  eb7c cf00cd        	ldw	_uip_stat+68,x
 797                     ; 353   uip_stat.tcp.rst = 0;
 799  eb7f cf00d3        	ldw	_uip_stat+74,x
 800  eb82 cf00d1        	ldw	_uip_stat+72,x
 801                     ; 354   uip_stat.tcp.rexmit = 0;
 803  eb85 cf00d7        	ldw	_uip_stat+78,x
 804  eb88 cf00d5        	ldw	_uip_stat+76,x
 805                     ; 355   uip_stat.tcp.syndrop = 0;
 807  eb8b cf00db        	ldw	_uip_stat+82,x
 808  eb8e cf00d9        	ldw	_uip_stat+80,x
 809                     ; 356   uip_stat.tcp.synrst = 0;
 811  eb91 cf00df        	ldw	_uip_stat+86,x
 812  eb94 cf00dd        	ldw	_uip_stat+84,x
 813                     ; 358 }
 816  eb97 81            	ret	
 850                     ; 362 void uip_unlisten(uint16_t port)
 850                     ; 363 {
 851                     	switch	.text
 852  eb98               _uip_unlisten:
 854  eb98 89            	pushw	x
 855       00000000      OFST:	set	0
 858                     ; 364   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 860  eb99 4f            	clr	a
 861  eb9a c70067        	ld	L14_c,a
 862  eb9d               L303:
 863                     ; 365     if (uip_listenports[c] == port) {
 865  eb9d 5f            	clrw	x
 866  eb9e 97            	ld	xl,a
 867  eb9f 58            	sllw	x
 868  eba0 de006e        	ldw	x,(_uip_listenports,x)
 869  eba3 1301          	cpw	x,(OFST+1,sp)
 870  eba5 260a          	jrne	L113
 871                     ; 366       uip_listenports[c] = 0;
 873  eba7 5f            	clrw	x
 874  eba8 97            	ld	xl,a
 875  eba9 58            	sllw	x
 876  ebaa 905f          	clrw	y
 877  ebac df006e        	ldw	(_uip_listenports,x),y
 878                     ; 367       return;
 880  ebaf 200b          	jra	L26
 881  ebb1               L113:
 882                     ; 364   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 884  ebb1 725c0067      	inc	L14_c
 887  ebb5 c60067        	ld	a,L14_c
 888  ebb8 a105          	cp	a,#5
 889  ebba 25e1          	jrult	L303
 890                     ; 370 }
 891  ebbc               L26:
 894  ebbc 85            	popw	x
 895  ebbd 81            	ret	
 929                     ; 374 void uip_listen(uint16_t port)
 929                     ; 375 {
 930                     	switch	.text
 931  ebbe               _uip_listen:
 933  ebbe 89            	pushw	x
 934       00000000      OFST:	set	0
 937                     ; 376   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 939  ebbf 4f            	clr	a
 940  ebc0 c70067        	ld	L14_c,a
 941  ebc3               L723:
 942                     ; 377     if (uip_listenports[c] == 0) {
 944  ebc3 5f            	clrw	x
 945  ebc4 97            	ld	xl,a
 946  ebc5 58            	sllw	x
 947  ebc6 d6006f        	ld	a,(_uip_listenports+1,x)
 948  ebc9 da006e        	or	a,(_uip_listenports,x)
 949  ebcc 2607          	jrne	L533
 950                     ; 378       uip_listenports[c] = port;
 952  ebce 1601          	ldw	y,(OFST+1,sp)
 953  ebd0 df006e        	ldw	(_uip_listenports,x),y
 954                     ; 379       return;
 956  ebd3 200b          	jra	L66
 957  ebd5               L533:
 958                     ; 376   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 960  ebd5 725c0067      	inc	L14_c
 963  ebd9 c60067        	ld	a,L14_c
 964  ebdc a105          	cp	a,#5
 965  ebde 25e3          	jrult	L723
 966                     ; 382 }
 967  ebe0               L66:
 970  ebe0 85            	popw	x
 971  ebe1 81            	ret	
1006                     ; 386 static void uip_add_rcv_nxt(uint16_t n)
1006                     ; 387 {
1007                     	switch	.text
1008  ebe2               L733_uip_add_rcv_nxt:
1012                     ; 388   uip_add32(uip_conn->rcv_nxt, n);
1014  ebe2 89            	pushw	x
1015  ebe3 ce01d5        	ldw	x,_uip_conn
1016  ebe6 1c0008        	addw	x,#8
1017  ebe9 cde9c4        	call	_uip_add32
1019  ebec 85            	popw	x
1020                     ; 389   uip_conn->rcv_nxt[0] = uip_acc32[0];
1022  ebed ce01d5        	ldw	x,_uip_conn
1023  ebf0 c600e1        	ld	a,_uip_acc32
1024  ebf3 e708          	ld	(8,x),a
1025                     ; 390   uip_conn->rcv_nxt[1] = uip_acc32[1];
1027  ebf5 c600e2        	ld	a,_uip_acc32+1
1028  ebf8 e709          	ld	(9,x),a
1029                     ; 391   uip_conn->rcv_nxt[2] = uip_acc32[2];
1031  ebfa c600e3        	ld	a,_uip_acc32+2
1032  ebfd e70a          	ld	(10,x),a
1033                     ; 392   uip_conn->rcv_nxt[3] = uip_acc32[3];
1035  ebff c600e4        	ld	a,_uip_acc32+3
1036  ec02 e70b          	ld	(11,x),a
1037                     ; 393 }
1040  ec04 81            	ret	
1327                     ; 397 void uip_process(uint8_t flag)
1327                     ; 398 {
1328                     	switch	.text
1329  ec05               _uip_process:
1331  ec05 88            	push	a
1332  ec06 5205          	subw	sp,#5
1333       00000005      OFST:	set	5
1336                     ; 399   register struct uip_conn *uip_connr = uip_conn;
1338  ec08 ce01d5        	ldw	x,_uip_conn
1339  ec0b 1f04          	ldw	(OFST-1,sp),x
1341                     ; 401   uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
1343  ec0d ae0211        	ldw	x,#_uip_buf+54
1344  ec10 cf01d9        	ldw	_uip_appdata,x
1345  ec13 cf007a        	ldw	_uip_sappdata,x
1346                     ; 405   if (flag == UIP_POLL_REQUEST) {
1348  ec16 a103          	cp	a,#3
1349  ec18 2614          	jrne	L775
1350                     ; 406     if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED && !uip_outstanding(uip_connr)) {
1352  ec1a 1e04          	ldw	x,(OFST-1,sp)
1353  ec1c e619          	ld	a,(25,x)
1354  ec1e a40f          	and	a,#15
1355  ec20 a103          	cp	a,#3
1356  ec22 2703ccf4f3    	jrne	L734
1358  ec27 e611          	ld	a,(17,x)
1359  ec29 ea10          	or	a,(16,x)
1360                     ; 407       uip_flags = UIP_POLL;
1361                     ; 408       UIP_APPCALL();
1363                     ; 409       goto appsend;
1365  ec2b ccecf9        	jp	LC001
1366  ec2e               L775:
1367                     ; 415   else if (flag == UIP_TIMER) {
1369  ec2e 7b06          	ld	a,(OFST+1,sp)
1370  ec30 a102          	cp	a,#2
1371  ec32 2703cced19    	jrne	L306
1372                     ; 417     if (++iss[3] == 0) {
1374  ec37 725c006b      	inc	L73_iss+3
1375  ec3b 2610          	jrne	L706
1376                     ; 418       if (++iss[2] == 0) {
1378  ec3d 725c006a      	inc	L73_iss+2
1379  ec41 260a          	jrne	L706
1380                     ; 419         if (++iss[1] == 0) {
1382  ec43 725c0069      	inc	L73_iss+1
1383  ec47 2604          	jrne	L706
1384                     ; 420           ++iss[0];
1386  ec49 725c0068      	inc	L73_iss
1387  ec4d               L706:
1388                     ; 426     uip_len = 0;
1390  ec4d 5f            	clrw	x
1391  ec4e cf01d7        	ldw	_uip_len,x
1392                     ; 427     uip_slen = 0;
1394  ec51 cf0078        	ldw	_uip_slen,x
1395                     ; 433     if (uip_connr->tcpstateflags == UIP_TIME_WAIT || uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
1397  ec54 1e04          	ldw	x,(OFST-1,sp)
1398  ec56 e619          	ld	a,(25,x)
1399  ec58 a107          	cp	a,#7
1400  ec5a 2704          	jreq	L716
1402  ec5c a105          	cp	a,#5
1403  ec5e 260d          	jrne	L516
1404  ec60               L716:
1405                     ; 434       ++(uip_connr->timer);
1407  ec60 6c1a          	inc	(26,x)
1408                     ; 435       if (uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
1410  ec62 e61a          	ld	a,(26,x)
1411  ec64 a178          	cp	a,#120
1412  ec66 26bc          	jrne	L734
1413                     ; 436         uip_connr->tcpstateflags = UIP_CLOSED;
1415  ec68 6f19          	clr	(25,x)
1416  ec6a ccf4f3        	jra	L734
1417  ec6d               L516:
1418                     ; 439     else if (uip_connr->tcpstateflags != UIP_CLOSED) {
1420  ec6d e619          	ld	a,(25,x)
1421  ec6f 27f9          	jreq	L734
1422                     ; 443       if (uip_outstanding(uip_connr)) {
1424  ec71 e611          	ld	a,(17,x)
1425  ec73 ea10          	or	a,(16,x)
1426  ec75 277c          	jreq	L726
1427                     ; 444         if (uip_connr->timer-- == 0) {
1429  ec77 e61a          	ld	a,(26,x)
1430  ec79 6a1a          	dec	(26,x)
1431  ec7b 4d            	tnz	a
1432  ec7c 26ec          	jrne	L734
1433                     ; 445           if (uip_connr->nrtx == UIP_MAXRTX
1433                     ; 446 	    || ((uip_connr->tcpstateflags == UIP_SYN_SENT
1433                     ; 447             || uip_connr->tcpstateflags == UIP_SYN_RCVD)
1433                     ; 448             && uip_connr->nrtx == UIP_MAXSYNRTX)) {
1435  ec7e e61b          	ld	a,(27,x)
1436  ec80 a108          	cp	a,#8
1437  ec82 270f          	jreq	L536
1439  ec84 e619          	ld	a,(25,x)
1440  ec86 a102          	cp	a,#2
1441  ec88 2703          	jreq	L736
1443  ec8a 4a            	dec	a
1444  ec8b 2616          	jrne	L336
1445  ec8d               L736:
1447  ec8d e61b          	ld	a,(27,x)
1448  ec8f a105          	cp	a,#5
1449  ec91 2610          	jrne	L336
1450  ec93               L536:
1451                     ; 449             uip_connr->tcpstateflags = UIP_CLOSED;
1453  ec93 6f19          	clr	(25,x)
1454                     ; 454             uip_flags = UIP_TIMEDOUT;
1456  ec95 35800088      	mov	_uip_flags,#128
1457                     ; 455             UIP_APPCALL();
1459  ec99 cdf897        	call	_uip_TcpAppHubCall
1461                     ; 458             BUF->flags = TCP_RST | TCP_ACK;
1463  ec9c 3514020a      	mov	_uip_buf+47,#20
1464                     ; 459             goto tcp_send_nodata;
1466  eca0 ccf326        	jra	L324
1467  eca3               L336:
1468                     ; 463 	  if(uip_connr->nrtx > 4) uip_connr->nrtx = 4;
1470  eca3 1e04          	ldw	x,(OFST-1,sp)
1471  eca5 e61b          	ld	a,(27,x)
1472  eca7 a105          	cp	a,#5
1473  eca9 2504          	jrult	L146
1476  ecab a604          	ld	a,#4
1477  ecad e71b          	ld	(27,x),a
1478  ecaf               L146:
1479                     ; 464 	  uip_connr->timer = (uint8_t)(UIP_RTO << uip_connr->nrtx);
1481  ecaf 5f            	clrw	x
1482  ecb0 97            	ld	xl,a
1483  ecb1 a603          	ld	a,#3
1484  ecb3 5d            	tnzw	x
1485  ecb4 2704          	jreq	L201
1486  ecb6               L401:
1487  ecb6 48            	sll	a
1488  ecb7 5a            	decw	x
1489  ecb8 26fc          	jrne	L401
1490  ecba               L201:
1491  ecba 1e04          	ldw	x,(OFST-1,sp)
1492  ecbc e71a          	ld	(26,x),a
1493                     ; 465 	  ++(uip_connr->nrtx);
1495  ecbe 6c1b          	inc	(27,x)
1496                     ; 473           UIP_STAT(++uip_stat.tcp.rexmit);
1498  ecc0 ae00d5        	ldw	x,#_uip_stat+76
1499  ecc3 a601          	ld	a,#1
1500  ecc5 cdf99a        	call	c_lgadc
1502                     ; 474           switch (uip_connr->tcpstateflags & UIP_TS_MASK) {
1504  ecc8 1e04          	ldw	x,(OFST-1,sp)
1505  ecca e619          	ld	a,(25,x)
1506  eccc a40f          	and	a,#15
1508                     ; 488             case UIP_FIN_WAIT_1:
1508                     ; 489             case UIP_CLOSING:
1508                     ; 490             case UIP_LAST_ACK:
1508                     ; 491               /* In all these states we should retransmit a FINACK. */
1508                     ; 492               goto tcp_send_finack;
1509  ecce 4a            	dec	a
1510  eccf 2603ccf0d5    	jreq	L173
1511  ecd4 a002          	sub	a,#2
1512  ecd6 2711          	jreq	L753
1513  ecd8 4a            	dec	a
1514  ecd9 2603ccf322    	jreq	LC003
1515  ecde a002          	sub	a,#2
1516  ece0 27f9          	jreq	LC003
1517  ece2 a002          	sub	a,#2
1518  ece4 27f5          	jreq	LC003
1519  ece6 ccf4f3        	jra	L734
1520  ece9               L753:
1521                     ; 479             case UIP_ESTABLISHED:
1521                     ; 480               /* In the ESTABLISHED state, we call upon the application
1521                     ; 481                  to do the actual retransmit after which we jump into
1521                     ; 482                  the code for sending out the packet (the apprexmit
1521                     ; 483                  label). */
1521                     ; 484               uip_flags = UIP_REXMIT;
1523  ece9 35040088      	mov	_uip_flags,#4
1524                     ; 485               UIP_APPCALL();
1526  eced cdf897        	call	_uip_TcpAppHubCall
1528                     ; 486               goto apprexmit;
1530  ecf0 ccf369        	jra	L504
1531                     ; 488             case UIP_FIN_WAIT_1:
1531                     ; 489             case UIP_CLOSING:
1531                     ; 490             case UIP_LAST_ACK:
1531                     ; 491               /* In all these states we should retransmit a FINACK. */
1531                     ; 492               goto tcp_send_finack;
1533  ecf3               L726:
1534                     ; 497       else if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
1536  ecf3 e619          	ld	a,(25,x)
1537  ecf5 a40f          	and	a,#15
1538  ecf7 a103          	cp	a,#3
1539                     ; 499         uip_flags = UIP_POLL;
1541  ecf9               LC001:
1542  ecf9 26eb          	jrne	L734
1544  ecfb 35080088      	mov	_uip_flags,#8
1545                     ; 500         UIP_APPCALL();
1548                     ; 501         goto appsend;
1549  ecff               L304:
1553  ecff cdf897        	call	_uip_TcpAppHubCall
1554                     ; 970         appsend:
1554                     ; 971 
1554                     ; 972         if (uip_flags & UIP_ABORT) {
1556  ed02 720a008803cc  	btjf	_uip_flags,#5,L7111
1557                     ; 973           uip_slen = 0;
1559  ed0a 5f            	clrw	x
1560  ed0b cf0078        	ldw	_uip_slen,x
1561                     ; 974           uip_connr->tcpstateflags = UIP_CLOSED;
1563  ed0e 1e04          	ldw	x,(OFST-1,sp)
1564                     ; 975           BUF->flags = TCP_RST | TCP_ACK;
1566  ed10 3514020a      	mov	_uip_buf+47,#20
1567  ed14 6f19          	clr	(25,x)
1568                     ; 976           goto tcp_send_nodata;
1570  ed16 ccf326        	jra	L324
1571  ed19               L306:
1572                     ; 508   UIP_STAT(++uip_stat.ip.recv);
1574  ed19 ae008d        	ldw	x,#_uip_stat+4
1575  ed1c a601          	ld	a,#1
1576  ed1e cdf99a        	call	c_lgadc
1578                     ; 513   if (BUF->vhl != 0x45) { /* IP version and header length. */
1580  ed21 c601e9        	ld	a,_uip_buf+14
1581  ed24 a145          	cp	a,#69
1582  ed26 2713          	jreq	L356
1583                     ; 514     UIP_STAT(++uip_stat.ip.drop);
1585  ed28 ae0089        	ldw	x,#_uip_stat
1586  ed2b a601          	ld	a,#1
1587  ed2d cdf99a        	call	c_lgadc
1589                     ; 515     UIP_STAT(++uip_stat.ip.vhlerr);
1591  ed30 ae0095        	ldw	x,#_uip_stat+12
1592  ed33 a601          	ld	a,#1
1593  ed35 cdf99a        	call	c_lgadc
1595                     ; 516     goto drop;
1597  ed38 ccf4f3        	jra	L734
1598  ed3b               L356:
1599                     ; 526   if ((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
1601  ed3b c601eb        	ld	a,_uip_buf+16
1602  ed3e 5f            	clrw	x
1603  ed3f 97            	ld	xl,a
1604  ed40 4f            	clr	a
1605  ed41 cb01ec        	add	a,_uip_buf+17
1606  ed44 2401          	jrnc	L211
1607  ed46 5c            	incw	x
1608  ed47               L211:
1609  ed47 02            	rlwa	x,a
1610  ed48 c301d7        	cpw	x,_uip_len
1611  ed4b 22eb          	jrugt	L734
1612                     ; 527     uip_len = (BUF->len[0] << 8) + BUF->len[1];
1614  ed4d c601eb        	ld	a,_uip_buf+16
1615  ed50 5f            	clrw	x
1616  ed51 97            	ld	xl,a
1617  ed52 4f            	clr	a
1618  ed53 cb01ec        	add	a,_uip_buf+17
1619  ed56 2401          	jrnc	L411
1620  ed58 5c            	incw	x
1621  ed59               L411:
1622  ed59 c701d8        	ld	_uip_len+1,a
1623  ed5c 9f            	ld	a,xl
1624  ed5d c701d7        	ld	_uip_len,a
1626                     ; 534   if ((BUF->ipoffset[0] & 0x3f) != 0 || BUF->ipoffset[1] != 0) {
1628  ed60 c601ef        	ld	a,_uip_buf+20
1629  ed63 a53f          	bcp	a,#63
1630  ed65 2605          	jrne	L366
1632  ed67 c601f0        	ld	a,_uip_buf+21
1633  ed6a 2713          	jreq	L166
1634  ed6c               L366:
1635                     ; 535     UIP_STAT(++uip_stat.ip.drop);
1637  ed6c ae0089        	ldw	x,#_uip_stat
1638  ed6f a601          	ld	a,#1
1639  ed71 cdf99a        	call	c_lgadc
1641                     ; 536     UIP_STAT(++uip_stat.ip.fragerr);
1643  ed74 ae00a1        	ldw	x,#_uip_stat+24
1644  ed77 a601          	ld	a,#1
1645  ed79 cdf99a        	call	c_lgadc
1647                     ; 537     goto drop;
1649  ed7c ccf4f3        	jra	L734
1650  ed7f               L166:
1651                     ; 541     if (!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
1653  ed7f ce01f9        	ldw	x,_uip_buf+30
1654  ed82 c30084        	cpw	x,_uip_hostaddr
1655  ed85 2608          	jrne	L766
1657  ed87 ce01fb        	ldw	x,_uip_buf+32
1658  ed8a c30086        	cpw	x,_uip_hostaddr+2
1659  ed8d 270b          	jreq	L566
1660  ed8f               L766:
1661                     ; 542       UIP_STAT(++uip_stat.ip.drop);
1663  ed8f ae0089        	ldw	x,#_uip_stat
1664  ed92 a601          	ld	a,#1
1665  ed94 cdf99a        	call	c_lgadc
1667                     ; 543       goto drop;
1669  ed97 ccf4f3        	jra	L734
1670  ed9a               L566:
1671                     ; 546   if (uip_ipchksum() != 0xffff) { /* Compute and check the IP header checksum. */
1673  ed9a cdea7b        	call	_uip_ipchksum
1675  ed9d 5c            	incw	x
1676  ed9e 2713          	jreq	L176
1677                     ; 547     UIP_STAT(++uip_stat.ip.drop);
1679  eda0 ae0089        	ldw	x,#_uip_stat
1680  eda3 a601          	ld	a,#1
1681  eda5 cdf99a        	call	c_lgadc
1683                     ; 548     UIP_STAT(++uip_stat.ip.chkerr);
1685  eda8 ae00a5        	ldw	x,#_uip_stat+28
1686  edab a601          	ld	a,#1
1687  edad cdf99a        	call	c_lgadc
1689                     ; 549     goto drop;
1691  edb0 ccf4f3        	jra	L734
1692  edb3               L176:
1693                     ; 552   if (BUF->proto == UIP_PROTO_TCP) {
1695  edb3 c601f2        	ld	a,_uip_buf+23
1696  edb6 a106          	cp	a,#6
1697  edb8 2624          	jrne	L376
1698                     ; 554     goto tcp_input;
1699                     ; 601   tcp_input:
1699                     ; 602   UIP_STAT(++uip_stat.tcp.recv);
1701  edba ae00c1        	ldw	x,#_uip_stat+56
1702  edbd a601          	ld	a,#1
1703  edbf cdf99a        	call	c_lgadc
1705                     ; 606   if (uip_tcpchksum() != 0xffff) { /* Compute and check the TCP checksum. */
1707  edc2 cdeae0        	call	_uip_tcpchksum
1709  edc5 5c            	incw	x
1710  edc6 2603ccee57    	jreq	L517
1711                     ; 607     UIP_STAT(++uip_stat.tcp.drop);
1713  edcb ae00bd        	ldw	x,#_uip_stat+52
1714  edce a601          	ld	a,#1
1715  edd0 cdf99a        	call	c_lgadc
1717                     ; 608     UIP_STAT(++uip_stat.tcp.chkerr);
1719  edd3 ae00c9        	ldw	x,#_uip_stat+64
1720  edd6 a601          	ld	a,#1
1721  edd8 cdf99a        	call	c_lgadc
1723                     ; 609     goto drop;
1725  eddb ccf4f3        	jra	L734
1726  edde               L376:
1727                     ; 563   if (BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from here. */
1729  edde 4a            	dec	a
1730  eddf 2713          	jreq	L576
1731                     ; 564     UIP_STAT(++uip_stat.ip.drop);
1733  ede1 ae0089        	ldw	x,#_uip_stat
1734  ede4 a601          	ld	a,#1
1735  ede6 cdf99a        	call	c_lgadc
1737                     ; 565     UIP_STAT(++uip_stat.ip.protoerr);
1739  ede9 ae00a9        	ldw	x,#_uip_stat+32
1740  edec a601          	ld	a,#1
1741  edee cdf99a        	call	c_lgadc
1743                     ; 566     goto drop;
1745  edf1 ccf4f3        	jra	L734
1746  edf4               L576:
1747                     ; 569   UIP_STAT(++uip_stat.icmp.recv);
1749  edf4 ae00b1        	ldw	x,#_uip_stat+40
1750  edf7 4c            	inc	a
1751  edf8 cdf99a        	call	c_lgadc
1753                     ; 574   if (ICMPBUF->type != ICMP_ECHO) {
1755  edfb c601fd        	ld	a,_uip_buf+34
1756  edfe a108          	cp	a,#8
1757  ee00 2713          	jreq	L776
1758                     ; 575     UIP_STAT(++uip_stat.icmp.drop);
1760  ee02 ae00ad        	ldw	x,#_uip_stat+36
1761  ee05 a601          	ld	a,#1
1762  ee07 cdf99a        	call	c_lgadc
1764                     ; 576     UIP_STAT(++uip_stat.icmp.typeerr);
1766  ee0a ae00b9        	ldw	x,#_uip_stat+48
1767  ee0d a601          	ld	a,#1
1768  ee0f cdf99a        	call	c_lgadc
1770                     ; 577     goto drop;
1772  ee12 ccf4f3        	jra	L734
1773  ee15               L776:
1774                     ; 580   ICMPBUF->type = ICMP_ECHO_REPLY;
1776  ee15 725f01fd      	clr	_uip_buf+34
1777                     ; 582   if (ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
1779  ee19 ce01ff        	ldw	x,_uip_buf+36
1780  ee1c a3f7ff        	cpw	x,#63487
1781  ee1f 2505          	jrult	L107
1782                     ; 583     ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
1784  ee21 1c0801        	addw	x,#2049
1786  ee24 2003          	jra	L507
1787  ee26               L107:
1788                     ; 586     ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
1790  ee26 1c0800        	addw	x,#2048
1791  ee29               L507:
1792  ee29 cf01ff        	ldw	_uip_buf+36,x
1793                     ; 590   uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
1795  ee2c ce01f5        	ldw	x,_uip_buf+26
1796  ee2f cf01f9        	ldw	_uip_buf+30,x
1799  ee32 ce01f7        	ldw	x,_uip_buf+28
1800  ee35 cf01fb        	ldw	_uip_buf+32,x
1801                     ; 591   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
1803  ee38 ce0084        	ldw	x,_uip_hostaddr
1804  ee3b cf01f5        	ldw	_uip_buf+26,x
1807  ee3e ce0086        	ldw	x,_uip_hostaddr+2
1808  ee41 cf01f7        	ldw	_uip_buf+28,x
1809                     ; 593   UIP_STAT(++uip_stat.icmp.sent);
1811  ee44 ae00b5        	ldw	x,#_uip_stat+44
1813                     ; 594   goto send;
1814  ee47               L534:
1815  ee47 a601          	ld	a,#1
1816  ee49 cdf99a        	call	c_lgadc
1817                     ; 1175   send:
1817                     ; 1176 
1817                     ; 1177   UIP_STAT(++uip_stat.ip.sent);
1819  ee4c ae0091        	ldw	x,#_uip_stat+8
1820  ee4f a601          	ld	a,#1
1821  ee51 cdf99a        	call	c_lgadc
1823                     ; 1179   uip_flags = 0;
1824                     ; 1181   return;
1826  ee54 ccf4f7        	jra	L202
1827  ee57               L517:
1828                     ; 614   for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1]; ++uip_connr) {
1830  ee57 ae00e5        	ldw	x,#_uip_conns
1832  ee5a 204d          	jra	L327
1833  ee5c               L717:
1834                     ; 615     if (uip_connr->tcpstateflags != UIP_CLOSED
1834                     ; 616       && BUF->destport == uip_connr->lport
1834                     ; 617       && BUF->srcport == uip_connr->rport
1834                     ; 618       && uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
1836  ee5c e619          	ld	a,(25,x)
1837  ee5e 2746          	jreq	L727
1839  ee60 9093          	ldw	y,x
1840  ee62 90ee04        	ldw	y,(4,y)
1841  ee65 90c301ff      	cpw	y,_uip_buf+36
1842  ee69 263b          	jrne	L727
1844  ee6b 9093          	ldw	y,x
1845  ee6d 90ee06        	ldw	y,(6,y)
1846  ee70 90c301fd      	cpw	y,_uip_buf+34
1847  ee74 2630          	jrne	L727
1849  ee76 9093          	ldw	y,x
1850  ee78 90fe          	ldw	y,(y)
1851  ee7a 90c301f5      	cpw	y,_uip_buf+26
1852  ee7e 2626          	jrne	L727
1854  ee80 9093          	ldw	y,x
1855  ee82 90ee02        	ldw	y,(2,y)
1856  ee85 90c301f7      	cpw	y,_uip_buf+28
1857  ee89 261b          	jrne	L727
1858                     ; 619       goto found;
1859                     ; 799   found:
1859                     ; 800   uip_conn = uip_connr;
1861  ee8b cf01d5        	ldw	_uip_conn,x
1862                     ; 801   uip_flags = 0;
1864  ee8e 725f0088      	clr	_uip_flags
1865                     ; 806   if (BUF->flags & TCP_RST) {
1867  ee92 7204020a03cc  	btjf	_uip_buf+47,#2,L7301
1868                     ; 807     uip_connr->tcpstateflags = UIP_CLOSED;
1870  ee9a 6f19          	clr	(25,x)
1871                     ; 808     uip_flags = UIP_ABORT;
1873  ee9c 35200088      	mov	_uip_flags,#32
1874                     ; 809     UIP_APPCALL();
1876  eea0 cdf897        	call	_uip_TcpAppHubCall
1878                     ; 810     goto drop;
1880  eea3 ccf4f3        	jra	L734
1881  eea6               L727:
1882                     ; 614   for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1]; ++uip_connr) {
1884  eea6 1c0028        	addw	x,#40
1885  eea9               L327:
1886  eea9 1f04          	ldw	(OFST-1,sp),x
1890  eeab a301ad        	cpw	x,#_uip_conns+200
1891  eeae 23ac          	jrule	L717
1892                     ; 627   if ((BUF->flags & TCP_CTL) != TCP_SYN) {
1894  eeb0 c6020a        	ld	a,_uip_buf+47
1895  eeb3 a43f          	and	a,#63
1896  eeb5 a102          	cp	a,#2
1897  eeb7 2647          	jrne	L563
1898                     ; 628     goto reset;
1900                     ; 631   tmp16 = BUF->destport;
1902  eeb9 ce01ff        	ldw	x,_uip_buf+36
1903  eebc cf0064        	ldw	L54_tmp16,x
1904                     ; 633   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1906  eebf 4f            	clr	a
1907  eec0 c70067        	ld	L14_c,a
1908  eec3               L337:
1909                     ; 634     if (tmp16 == uip_listenports[c]) goto found_listen;
1911  eec3 5f            	clrw	x
1912  eec4 97            	ld	xl,a
1913  eec5 58            	sllw	x
1914  eec6 9093          	ldw	y,x
1915  eec8 90de006e      	ldw	y,(_uip_listenports,y)
1916  eecc 90c30064      	cpw	y,L54_tmp16
1917  eed0 261b          	jrne	L147
1919                     ; 699   found_listen:
1919                     ; 700   /* First we check if there are any connections avaliable. Unused
1919                     ; 701      connections are kept in the same table as used connections, but
1919                     ; 702      unused ones have the tcpstate set to CLOSED. Also, connections in
1919                     ; 703      TIME_WAIT are kept track of and we'll use the oldest one if no
1919                     ; 704      CLOSED connections are found. Thanks to Eddie C. Dost for a very
1919                     ; 705      nice algorithm for the TIME_WAIT search. */
1919                     ; 706   uip_connr = 0;
1921  eed2 5f            	clrw	x
1922  eed3 1f04          	ldw	(OFST-1,sp),x
1924                     ; 707   for (c = 0; c < UIP_CONNS; ++c) {
1926  eed5 4f            	clr	a
1927  eed6 c70067        	ld	L14_c,a
1928  eed9               L367:
1929                     ; 708     if (uip_conns[c].tcpstateflags == UIP_CLOSED) {
1931  eed9 97            	ld	xl,a
1932  eeda a628          	ld	a,#40
1933  eedc 42            	mul	x,a
1934  eedd d600fe        	ld	a,(_uip_conns+25,x)
1935  eee0 2703ccef9a    	jrne	L177
1936                     ; 709       uip_connr = &uip_conns[c];
1938  eee5 1c00e5        	addw	x,#_uip_conns
1939  eee8 1f04          	ldw	(OFST-1,sp),x
1941                     ; 710       break;
1943  eeea ccefcc        	jra	L767
1944  eeed               L147:
1945                     ; 633   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1947  eeed 725c0067      	inc	L14_c
1950  eef1 c60067        	ld	a,L14_c
1951  eef4 a105          	cp	a,#5
1952  eef6 25cb          	jrult	L337
1953                     ; 638   UIP_STAT(++uip_stat.tcp.synrst);
1955  eef8 ae00dd        	ldw	x,#_uip_stat+84
1956  eefb a601          	ld	a,#1
1957  eefd cdf99a        	call	c_lgadc
1959  ef00               L563:
1960                     ; 639   reset:
1960                     ; 640 
1960                     ; 641   /* We do not send resets in response to resets. */
1960                     ; 642   if (BUF->flags & TCP_RST) {
1962  ef00 7204020a9e    	btjt	_uip_buf+47,#2,L734
1963                     ; 643     goto drop;
1965                     ; 646   UIP_STAT(++uip_stat.tcp.rst);
1967  ef05 ae00d1        	ldw	x,#_uip_stat+72
1968  ef08 a601          	ld	a,#1
1969  ef0a cdf99a        	call	c_lgadc
1971                     ; 648   BUF->flags = TCP_RST | TCP_ACK;
1973  ef0d 3514020a      	mov	_uip_buf+47,#20
1974                     ; 649   uip_len = UIP_IPTCPH_LEN;
1976  ef11 ae0028        	ldw	x,#40
1977  ef14 cf01d7        	ldw	_uip_len,x
1978                     ; 650   BUF->tcpoffset = 5 << 4;
1980  ef17 35500209      	mov	_uip_buf+46,#80
1981                     ; 653   c = BUF->seqno[3];
1983  ef1b 5502040067    	mov	L14_c,_uip_buf+41
1984                     ; 654   BUF->seqno[3] = BUF->ackno[3];
1986  ef20 5502080204    	mov	_uip_buf+41,_uip_buf+45
1987                     ; 655   BUF->ackno[3] = c;
1989  ef25 5500670208    	mov	_uip_buf+45,L14_c
1990                     ; 657   c = BUF->seqno[2];
1992  ef2a 5502030067    	mov	L14_c,_uip_buf+40
1993                     ; 658   BUF->seqno[2] = BUF->ackno[2];
1995  ef2f 5502070203    	mov	_uip_buf+40,_uip_buf+44
1996                     ; 659   BUF->ackno[2] = c;
1998  ef34 5500670207    	mov	_uip_buf+44,L14_c
1999                     ; 661   c = BUF->seqno[1];
2001  ef39 5502020067    	mov	L14_c,_uip_buf+39
2002                     ; 662   BUF->seqno[1] = BUF->ackno[1];
2004  ef3e 5502060202    	mov	_uip_buf+39,_uip_buf+43
2005                     ; 663   BUF->ackno[1] = c;
2007  ef43 5500670206    	mov	_uip_buf+43,L14_c
2008                     ; 665   c = BUF->seqno[0];
2010  ef48 5502010067    	mov	L14_c,_uip_buf+38
2011                     ; 666   BUF->seqno[0] = BUF->ackno[0];
2013  ef4d 5502050201    	mov	_uip_buf+38,_uip_buf+42
2014                     ; 667   BUF->ackno[0] = c;
2016  ef52 5500670205    	mov	_uip_buf+42,L14_c
2017                     ; 672   if (++BUF->ackno[3] == 0) {
2019  ef57 725c0208      	inc	_uip_buf+45
2020  ef5b 2610          	jrne	L547
2021                     ; 673     if (++BUF->ackno[2] == 0) {
2023  ef5d 725c0207      	inc	_uip_buf+44
2024  ef61 260a          	jrne	L547
2025                     ; 674       if (++BUF->ackno[1] == 0) {
2027  ef63 725c0206      	inc	_uip_buf+43
2028  ef67 2604          	jrne	L547
2029                     ; 675         ++BUF->ackno[0];
2031  ef69 725c0205      	inc	_uip_buf+42
2032  ef6d               L547:
2033                     ; 681   tmp16 = BUF->srcport;
2035  ef6d ce01fd        	ldw	x,_uip_buf+34
2036  ef70 cf0064        	ldw	L54_tmp16,x
2037                     ; 682   BUF->srcport = BUF->destport;
2039  ef73 ce01ff        	ldw	x,_uip_buf+36
2040  ef76 cf01fd        	ldw	_uip_buf+34,x
2041                     ; 683   BUF->destport = tmp16;
2043  ef79 ce0064        	ldw	x,L54_tmp16
2044  ef7c cf01ff        	ldw	_uip_buf+36,x
2045                     ; 686   uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
2047  ef7f ce01f5        	ldw	x,_uip_buf+26
2048  ef82 cf01f9        	ldw	_uip_buf+30,x
2051  ef85 ce01f7        	ldw	x,_uip_buf+28
2052  ef88 cf01fb        	ldw	_uip_buf+32,x
2053                     ; 687   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
2055  ef8b ce0084        	ldw	x,_uip_hostaddr
2056  ef8e cf01f5        	ldw	_uip_buf+26,x
2059  ef91 ce0086        	ldw	x,_uip_hostaddr+2
2060  ef94 cf01f7        	ldw	_uip_buf+28,x
2061                     ; 690   goto tcp_send_noconn;
2063  ef97 ccf4a0        	jra	L134
2064  ef9a               L177:
2065                     ; 712     if (uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
2067  ef9a a107          	cp	a,#7
2068  ef9c 2620          	jrne	L377
2069                     ; 713       if (uip_connr == 0 || uip_conns[c].timer > uip_connr->timer) {
2071  ef9e 1e04          	ldw	x,(OFST-1,sp)
2072  efa0 2710          	jreq	L777
2074  efa2 c60067        	ld	a,L14_c
2075  efa5 97            	ld	xl,a
2076  efa6 a628          	ld	a,#40
2077  efa8 42            	mul	x,a
2078  efa9 d600ff        	ld	a,(_uip_conns+26,x)
2079  efac 1e04          	ldw	x,(OFST-1,sp)
2080  efae e11a          	cp	a,(26,x)
2081  efb0 230c          	jrule	L377
2082  efb2               L777:
2083                     ; 714         uip_connr = &uip_conns[c];
2085  efb2 c60067        	ld	a,L14_c
2086  efb5 97            	ld	xl,a
2087  efb6 a628          	ld	a,#40
2088  efb8 42            	mul	x,a
2089  efb9 1c00e5        	addw	x,#_uip_conns
2090  efbc 1f04          	ldw	(OFST-1,sp),x
2092  efbe               L377:
2093                     ; 707   for (c = 0; c < UIP_CONNS; ++c) {
2095  efbe 725c0067      	inc	L14_c
2098  efc2 c60067        	ld	a,L14_c
2099  efc5 a106          	cp	a,#6
2100  efc7 2403cceed9    	jrult	L367
2101  efcc               L767:
2102                     ; 719   if (uip_connr == 0) {
2104  efcc 1e04          	ldw	x,(OFST-1,sp)
2105  efce 260b          	jrne	L1001
2106                     ; 723     UIP_STAT(++uip_stat.tcp.syndrop);
2108  efd0 ae00d9        	ldw	x,#_uip_stat+80
2109  efd3 a601          	ld	a,#1
2110  efd5 cdf99a        	call	c_lgadc
2112                     ; 724     goto drop;
2114  efd8 ccf4f3        	jra	L734
2115  efdb               L1001:
2116                     ; 726   uip_conn = uip_connr;
2118  efdb cf01d5        	ldw	_uip_conn,x
2119                     ; 729   uip_connr->rto = uip_connr->timer = UIP_RTO;
2121  efde a603          	ld	a,#3
2122  efe0 e71a          	ld	(26,x),a
2123  efe2 e718          	ld	(24,x),a
2124                     ; 730   uip_connr->sa = 0;
2126  efe4 6f16          	clr	(22,x)
2127                     ; 731   uip_connr->sv = 4;
2129  efe6 4c            	inc	a
2130  efe7 e717          	ld	(23,x),a
2131                     ; 732   uip_connr->nrtx = 0;
2133  efe9 6f1b          	clr	(27,x)
2134                     ; 733   uip_connr->lport = BUF->destport;
2136  efeb 90ce01ff      	ldw	y,_uip_buf+36
2137  efef ef04          	ldw	(4,x),y
2138                     ; 734   uip_connr->rport = BUF->srcport;
2140  eff1 90ce01fd      	ldw	y,_uip_buf+34
2141  eff5 ef06          	ldw	(6,x),y
2142                     ; 735   uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
2144  eff7 90ce01f5      	ldw	y,_uip_buf+26
2145  effb ff            	ldw	(x),y
2148  effc 90ce01f7      	ldw	y,_uip_buf+28
2149  f000 ef02          	ldw	(2,x),y
2150                     ; 736   uip_connr->tcpstateflags = UIP_SYN_RCVD;
2152  f002 a601          	ld	a,#1
2153  f004 e719          	ld	(25,x),a
2154                     ; 738   uip_connr->snd_nxt[0] = iss[0];
2156  f006 c60068        	ld	a,L73_iss
2157  f009 e70c          	ld	(12,x),a
2158                     ; 739   uip_connr->snd_nxt[1] = iss[1];
2160  f00b c60069        	ld	a,L73_iss+1
2161  f00e e70d          	ld	(13,x),a
2162                     ; 740   uip_connr->snd_nxt[2] = iss[2];
2164  f010 c6006a        	ld	a,L73_iss+2
2165  f013 e70e          	ld	(14,x),a
2166                     ; 741   uip_connr->snd_nxt[3] = iss[3];
2168  f015 c6006b        	ld	a,L73_iss+3
2169  f018 e70f          	ld	(15,x),a
2170                     ; 742   uip_connr->len = 1;
2172  f01a 90ae0001      	ldw	y,#1
2173  f01e ef10          	ldw	(16,x),y
2174                     ; 745   uip_connr->rcv_nxt[3] = BUF->seqno[3];
2176  f020 c60204        	ld	a,_uip_buf+41
2177  f023 e70b          	ld	(11,x),a
2178                     ; 746   uip_connr->rcv_nxt[2] = BUF->seqno[2];
2180  f025 c60203        	ld	a,_uip_buf+40
2181  f028 e70a          	ld	(10,x),a
2182                     ; 747   uip_connr->rcv_nxt[1] = BUF->seqno[1];
2184  f02a c60202        	ld	a,_uip_buf+39
2185  f02d e709          	ld	(9,x),a
2186                     ; 748   uip_connr->rcv_nxt[0] = BUF->seqno[0];
2188  f02f c60201        	ld	a,_uip_buf+38
2189  f032 e708          	ld	(8,x),a
2190                     ; 749   uip_add_rcv_nxt(1);
2192  f034 ae0001        	ldw	x,#1
2193  f037 cdebe2        	call	L733_uip_add_rcv_nxt
2195                     ; 752   if ((BUF->tcpoffset & 0xf0) > 0x50) {
2197  f03a c60209        	ld	a,_uip_buf+46
2198  f03d a4f0          	and	a,#240
2199  f03f a151          	cp	a,#81
2200  f041 2403ccf0d5    	jrult	L173
2201                     ; 753     for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2;) {
2203  f046 725f0067      	clr	L14_c
2205  f04a 206b          	jra	L5101
2206  f04c               L1101:
2207                     ; 754       opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
2209  f04c 5f            	clrw	x
2210  f04d 97            	ld	xl,a
2211  f04e d60211        	ld	a,(_uip_buf+54,x)
2212  f051 c70066        	ld	L34_opt,a
2213                     ; 755       if (opt == TCP_OPT_END) {
2215  f054 277f          	jreq	L173
2216                     ; 757         break;
2218                     ; 759       else if (opt == TCP_OPT_NOOP) {
2220  f056 a101          	cp	a,#1
2221  f058 2606          	jrne	L5201
2222                     ; 760         ++c;
2224  f05a 725c0067      	inc	L14_c
2226  f05e 2057          	jra	L5101
2227  f060               L5201:
2228                     ; 763       else if (opt == TCP_OPT_MSS
2228                     ; 764         && uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
2230  f060 a102          	cp	a,#2
2231  f062 2640          	jrne	L1301
2233  f064 c60067        	ld	a,L14_c
2234  f067 5f            	clrw	x
2235  f068 97            	ld	xl,a
2236  f069 d60212        	ld	a,(_uip_buf+55,x)
2237  f06c a104          	cp	a,#4
2238  f06e 2634          	jrne	L1301
2239                     ; 766         tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8)
2239                     ; 767 	        | (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
2241  f070 c60067        	ld	a,L14_c
2242  f073 5f            	clrw	x
2243  f074 97            	ld	xl,a
2244  f075 d60214        	ld	a,(_uip_buf+57,x)
2245  f078 5f            	clrw	x
2246  f079 97            	ld	xl,a
2247  f07a 1f01          	ldw	(OFST-4,sp),x
2249  f07c 5f            	clrw	x
2250  f07d c60067        	ld	a,L14_c
2251  f080 97            	ld	xl,a
2252  f081 d60213        	ld	a,(_uip_buf+56,x)
2253  f084 5f            	clrw	x
2254  f085 97            	ld	xl,a
2255  f086 7b02          	ld	a,(OFST-3,sp)
2256  f088 01            	rrwa	x,a
2257  f089 1a01          	or	a,(OFST-4,sp)
2258  f08b 01            	rrwa	x,a
2259  f08c cf0064        	ldw	L54_tmp16,x
2260                     ; 768         uip_connr->initialmss = uip_connr->mss = tmp16 > UIP_TCP_MSS ? UIP_TCP_MSS : tmp16;
2262  f08f a30223        	cpw	x,#547
2263  f092 2503          	jrult	L421
2264  f094 ae0222        	ldw	x,#546
2265  f097               L421:
2266  f097 1604          	ldw	y,(OFST-1,sp)
2267  f099 90ef12        	ldw	(18,y),x
2268  f09c 93            	ldw	x,y
2269  f09d 90ee12        	ldw	y,(18,y)
2270  f0a0 ef14          	ldw	(20,x),y
2271                     ; 771         break;
2273  f0a2 2031          	jra	L173
2274  f0a4               L1301:
2275                     ; 775         if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
2277  f0a4 c60067        	ld	a,L14_c
2278  f0a7 5f            	clrw	x
2279  f0a8 97            	ld	xl,a
2280  f0a9 724d0212      	tnz	(_uip_buf+55,x)
2281  f0ad 2726          	jreq	L173
2282                     ; 778           break;
2284                     ; 780         c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
2286  f0af 5f            	clrw	x
2287  f0b0 97            	ld	xl,a
2288  f0b1 db0212        	add	a,(_uip_buf+55,x)
2289  f0b4 c70067        	ld	L14_c,a
2290  f0b7               L5101:
2291                     ; 753     for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2;) {
2293  f0b7 c60209        	ld	a,_uip_buf+46
2294  f0ba 4e            	swap	a
2295  f0bb a40f          	and	a,#15
2296  f0bd 5f            	clrw	x
2297  f0be 97            	ld	xl,a
2298  f0bf 58            	sllw	x
2299  f0c0 58            	sllw	x
2300  f0c1 1d0014        	subw	x,#20
2301  f0c4 c60067        	ld	a,L14_c
2302  f0c7 905f          	clrw	y
2303  f0c9 9097          	ld	yl,a
2304  f0cb 90bf07        	ldw	c_y,y
2305  f0ce b307          	cpw	x,c_y
2306  f0d0 2d03ccf04c    	jrsgt	L1101
2307  f0d5               L173:
2308                     ; 786   tcp_send_synack:
2308                     ; 787   BUF->flags = TCP_SYN | TCP_ACK;
2310  f0d5 3512020a      	mov	_uip_buf+47,#18
2311                     ; 790   BUF->optdata[0] = TCP_OPT_MSS;
2313  f0d9 35020211      	mov	_uip_buf+54,#2
2314                     ; 791   BUF->optdata[1] = TCP_OPT_MSS_LEN;
2316  f0dd 35040212      	mov	_uip_buf+55,#4
2317                     ; 792   BUF->optdata[2] = (UIP_TCP_MSS) / 256;
2319  f0e1 35020213      	mov	_uip_buf+56,#2
2320                     ; 793   BUF->optdata[3] = (UIP_TCP_MSS) & 255;
2322  f0e5 35220214      	mov	_uip_buf+57,#34
2323                     ; 794   uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
2325  f0e9 ae002c        	ldw	x,#44
2326  f0ec cf01d7        	ldw	_uip_len,x
2327                     ; 795   BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
2329  f0ef 35600209      	mov	_uip_buf+46,#96
2330                     ; 796   goto tcp_send;
2332  f0f3 ccf3a0        	jra	L724
2333  f0f6               L7301:
2334                     ; 813   c = (uint8_t)((BUF->tcpoffset >> 4) << 2);
2336  f0f6 c60209        	ld	a,_uip_buf+46
2337  f0f9 4e            	swap	a
2338  f0fa a40f          	and	a,#15
2339  f0fc 48            	sll	a
2340  f0fd 48            	sll	a
2341  f0fe c70067        	ld	L14_c,a
2342                     ; 817   uip_len = uip_len - c - UIP_IPH_LEN;
2344  f101 c601d7        	ld	a,_uip_len
2345  f104 97            	ld	xl,a
2346  f105 c601d8        	ld	a,_uip_len+1
2347  f108 c00067        	sub	a,L14_c
2348  f10b 2401          	jrnc	L231
2349  f10d 5a            	decw	x
2350  f10e               L231:
2351  f10e 02            	rlwa	x,a
2352  f10f 1d0014        	subw	x,#20
2353  f112 cf01d7        	ldw	_uip_len,x
2354                     ; 822   if (!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT)
2354                     ; 823     && ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
2356  f115 1e04          	ldw	x,(OFST-1,sp)
2357  f117 e619          	ld	a,(25,x)
2358  f119 a40f          	and	a,#15
2359  f11b a102          	cp	a,#2
2360  f11d 2609          	jrne	L3401
2362  f11f c6020a        	ld	a,_uip_buf+47
2363  f122 a43f          	and	a,#63
2364  f124 a112          	cp	a,#18
2365  f126 272d          	jreq	L1401
2366  f128               L3401:
2367                     ; 824     if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0))
2367                     ; 825       && (BUF->seqno[0] != uip_connr->rcv_nxt[0]
2367                     ; 826       || BUF->seqno[1] != uip_connr->rcv_nxt[1]
2367                     ; 827       || BUF->seqno[2] != uip_connr->rcv_nxt[2]
2367                     ; 828       || BUF->seqno[3] != uip_connr->rcv_nxt[3])) {
2369  f128 ce01d7        	ldw	x,_uip_len
2370  f12b 2607          	jrne	L7401
2372  f12d c6020a        	ld	a,_uip_buf+47
2373  f130 a503          	bcp	a,#3
2374  f132 2721          	jreq	L1401
2375  f134               L7401:
2377  f134 1e04          	ldw	x,(OFST-1,sp)
2378  f136 e608          	ld	a,(8,x)
2379  f138 c10201        	cp	a,_uip_buf+38
2380  f13b 2703ccf491    	jrne	L124
2382  f140 e609          	ld	a,(9,x)
2383  f142 c10202        	cp	a,_uip_buf+39
2384  f145 26f6          	jrne	L124
2386  f147 e60a          	ld	a,(10,x)
2387  f149 c10203        	cp	a,_uip_buf+40
2388  f14c 26ef          	jrne	L124
2390  f14e e60b          	ld	a,(11,x)
2391  f150 c10204        	cp	a,_uip_buf+41
2392  f153 26e8          	jrne	L124
2393  f155               L1401:
2394                     ; 837   if ((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
2396  f155 7208020a03cc  	btjf	_uip_buf+47,#4,L7501
2398  f15d 1e04          	ldw	x,(OFST-1,sp)
2399  f15f e611          	ld	a,(17,x)
2400  f161 ea10          	or	a,(16,x)
2401  f163 27f5          	jreq	L7501
2402                     ; 838     uip_add32(uip_connr->snd_nxt, uip_connr->len);
2404  f165 ee10          	ldw	x,(16,x)
2405  f167 89            	pushw	x
2406  f168 1e06          	ldw	x,(OFST+1,sp)
2407  f16a 1c000c        	addw	x,#12
2408  f16d cde9c4        	call	_uip_add32
2410  f170 c60205        	ld	a,_uip_buf+42
2411  f173 c100e1        	cp	a,_uip_acc32
2412  f176 85            	popw	x
2413                     ; 840     if (BUF->ackno[0] == uip_acc32[0]
2413                     ; 841       && BUF->ackno[1] == uip_acc32[1]
2413                     ; 842       && BUF->ackno[2] == uip_acc32[2]
2413                     ; 843       && BUF->ackno[3] == uip_acc32[3]) {
2415  f177 26e1          	jrne	L7501
2417  f179 c60206        	ld	a,_uip_buf+43
2418  f17c c100e2        	cp	a,_uip_acc32+1
2419  f17f 26d9          	jrne	L7501
2421  f181 c60207        	ld	a,_uip_buf+44
2422  f184 c100e3        	cp	a,_uip_acc32+2
2423  f187 26d1          	jrne	L7501
2425  f189 c60208        	ld	a,_uip_buf+45
2426  f18c c100e4        	cp	a,_uip_acc32+3
2427  f18f 2679          	jrne	L7501
2428                     ; 845       uip_connr->snd_nxt[0] = uip_acc32[0];
2430  f191 1e04          	ldw	x,(OFST-1,sp)
2431  f193 c600e1        	ld	a,_uip_acc32
2432  f196 e70c          	ld	(12,x),a
2433                     ; 846       uip_connr->snd_nxt[1] = uip_acc32[1];
2435  f198 c600e2        	ld	a,_uip_acc32+1
2436  f19b e70d          	ld	(13,x),a
2437                     ; 847       uip_connr->snd_nxt[2] = uip_acc32[2];
2439  f19d c600e3        	ld	a,_uip_acc32+2
2440  f1a0 e70e          	ld	(14,x),a
2441                     ; 848       uip_connr->snd_nxt[3] = uip_acc32[3];
2443  f1a2 c600e4        	ld	a,_uip_acc32+3
2444  f1a5 e70f          	ld	(15,x),a
2445                     ; 851       if (uip_connr->nrtx == 0) {
2447  f1a7 e61b          	ld	a,(27,x)
2448  f1a9 2653          	jrne	L3601
2449                     ; 853         m = (int8_t)(uip_connr->rto - uip_connr->timer);
2451  f1ab e61a          	ld	a,(26,x)
2452  f1ad e018          	sub	a,(24,x)
2453  f1af 40            	neg	a
2454  f1b0 6b03          	ld	(OFST-2,sp),a
2456                     ; 855         m = (int8_t)(m - (uip_connr->sa >> 3));
2458  f1b2 e616          	ld	a,(22,x)
2459  f1b4 44            	srl	a
2460  f1b5 44            	srl	a
2461  f1b6 44            	srl	a
2462  f1b7 5f            	clrw	x
2463  f1b8 97            	ld	xl,a
2464  f1b9 1f01          	ldw	(OFST-4,sp),x
2466  f1bb 5f            	clrw	x
2467  f1bc 7b03          	ld	a,(OFST-2,sp)
2468  f1be 4d            	tnz	a
2469  f1bf 2a01          	jrpl	L631
2470  f1c1 53            	cplw	x
2471  f1c2               L631:
2472  f1c2 97            	ld	xl,a
2473  f1c3 72f001        	subw	x,(OFST-4,sp)
2474  f1c6 01            	rrwa	x,a
2475  f1c7 6b03          	ld	(OFST-2,sp),a
2477                     ; 856         uip_connr->sa += m;
2479  f1c9 1e04          	ldw	x,(OFST-1,sp)
2480  f1cb e616          	ld	a,(22,x)
2481  f1cd 1b03          	add	a,(OFST-2,sp)
2482  f1cf e716          	ld	(22,x),a
2483                     ; 857         if (m < 0) m = (int8_t)(-m);
2485  f1d1 7b03          	ld	a,(OFST-2,sp)
2486  f1d3 2a02          	jrpl	L5601
2489  f1d5 0003          	neg	(OFST-2,sp)
2491  f1d7               L5601:
2492                     ; 858         m = (int8_t)(m - (uip_connr->sv >> 2));
2494  f1d7 e617          	ld	a,(23,x)
2495  f1d9 44            	srl	a
2496  f1da 44            	srl	a
2497  f1db 5f            	clrw	x
2498  f1dc 97            	ld	xl,a
2499  f1dd 1f01          	ldw	(OFST-4,sp),x
2501  f1df 5f            	clrw	x
2502  f1e0 7b03          	ld	a,(OFST-2,sp)
2503  f1e2 4d            	tnz	a
2504  f1e3 2a01          	jrpl	L041
2505  f1e5 53            	cplw	x
2506  f1e6               L041:
2507  f1e6 97            	ld	xl,a
2508  f1e7 72f001        	subw	x,(OFST-4,sp)
2509  f1ea 01            	rrwa	x,a
2510  f1eb 6b03          	ld	(OFST-2,sp),a
2512                     ; 859         uip_connr->sv += m;
2514  f1ed 1e04          	ldw	x,(OFST-1,sp)
2515  f1ef e617          	ld	a,(23,x)
2516  f1f1 1b03          	add	a,(OFST-2,sp)
2517  f1f3 e717          	ld	(23,x),a
2518                     ; 860         uip_connr->rto = (uint8_t)((uip_connr->sa >> 3) + uip_connr->sv);
2520  f1f5 e616          	ld	a,(22,x)
2521  f1f7 44            	srl	a
2522  f1f8 44            	srl	a
2523  f1f9 44            	srl	a
2524  f1fa eb17          	add	a,(23,x)
2525  f1fc e718          	ld	(24,x),a
2526  f1fe               L3601:
2527                     ; 863       uip_flags = UIP_ACKDATA;
2529  f1fe 35010088      	mov	_uip_flags,#1
2530                     ; 865       uip_connr->timer = uip_connr->rto;
2532  f202 e618          	ld	a,(24,x)
2533  f204 e71a          	ld	(26,x),a
2534                     ; 868       uip_connr->len = 0;
2536  f206 905f          	clrw	y
2537  f208 ef10          	ldw	(16,x),y
2538  f20a               L7501:
2539                     ; 873   switch (uip_connr->tcpstateflags & UIP_TS_MASK) {
2541  f20a 1e04          	ldw	x,(OFST-1,sp)
2542  f20c e619          	ld	a,(25,x)
2543  f20e a40f          	and	a,#15
2545                     ; 1101 	uip_connr->timer = 0;
2546  f210 4a            	dec	a
2547  f211 2725          	jreq	L573
2548  f213 a002          	sub	a,#2
2549  f215 2745          	jreq	L773
2550  f217 4a            	dec	a
2551  f218 2603ccf41a    	jreq	L114
2552  f21d 4a            	dec	a
2553  f21e 2603ccf459    	jreq	L314
2554  f223 4a            	dec	a
2555  f224 2603ccf484    	jreq	L714
2556  f229 4a            	dec	a
2557  f22a 2603ccf491    	jreq	L124
2558  f22f 4a            	dec	a
2559  f230 2603ccf409    	jreq	L704
2560  f235 ccf4f3        	jra	L734
2561  f238               L573:
2562                     ; 877     case UIP_SYN_RCVD:
2562                     ; 878       /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and we are waiting
2562                     ; 879          for an ACK that acknowledges the data we sent out the last time. Therefore, we
2562                     ; 880 	 want to have the UIP_ACKDATA flag set. If so, we enter the ESTABLISHED state. */
2562                     ; 881       if (uip_flags & UIP_ACKDATA) {
2564  f238 72010088f8    	btjf	_uip_flags,#0,L734
2565                     ; 882         uip_connr->tcpstateflags = UIP_ESTABLISHED;
2567  f23d a603          	ld	a,#3
2568  f23f e719          	ld	(25,x),a
2569                     ; 883         uip_flags = UIP_CONNECTED;
2571  f241 35400088      	mov	_uip_flags,#64
2572                     ; 884         uip_connr->len = 0;
2574  f245 905f          	clrw	y
2575  f247 ef10          	ldw	(16,x),y
2576                     ; 885         if (uip_len > 0) {
2578  f249 ce01d7        	ldw	x,_uip_len
2579  f24c 2707          	jreq	L5701
2580                     ; 886           uip_flags |= UIP_NEWDATA;
2582  f24e 72120088      	bset	_uip_flags,#1
2583                     ; 887           uip_add_rcv_nxt(uip_len);
2585  f252 cdebe2        	call	L733_uip_add_rcv_nxt
2587  f255               L5701:
2588                     ; 889         uip_slen = 0;
2591  f255 5f            	clrw	x
2592  f256 cf0078        	ldw	_uip_slen,x
2593                     ; 890         UIP_APPCALL();
2595                     ; 891         goto appsend;
2597  f259 ccecff        	jra	L304
2598  f25c               L773:
2599                     ; 895     case UIP_ESTABLISHED:
2599                     ; 896       /* In the ESTABLISHED state, we call upon the application to feed data into the
2599                     ; 897          uip_buf. If the UIP_ACKDATA flag is set, the application should put new data
2599                     ; 898 	 into the buffer, otherwise we are retransmitting an old segment, and the
2599                     ; 899 	 application should put that data into the buffer.
2599                     ; 900 	 
2599                     ; 901 	 If the incoming packet is a FIN, we should close the connection on this side
2599                     ; 902 	 as well, and we send out a FIN and enter the LAST_ACK state. We require that
2599                     ; 903 	 there is no outstanding data; otherwise the sequence numbers will be screwed
2599                     ; 904 	 up. */
2599                     ; 905       if (BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
2601  f25c 7201020a30    	btjf	_uip_buf+47,#0,L7701
2603  f261 e619          	ld	a,(25,x)
2604  f263 a510          	bcp	a,#16
2605  f265 262a          	jrne	L7701
2606                     ; 906         if (uip_outstanding(uip_connr)) {
2608  f267 e611          	ld	a,(17,x)
2609  f269 ea10          	or	a,(16,x)
2610  f26b 26c8          	jrne	L734
2611                     ; 907           goto drop;
2613                     ; 909         uip_add_rcv_nxt(1 + uip_len);
2615  f26d ce01d7        	ldw	x,_uip_len
2616  f270 5c            	incw	x
2617  f271 cdebe2        	call	L733_uip_add_rcv_nxt
2619                     ; 910         uip_flags |= UIP_CLOSE;
2621  f274 72180088      	bset	_uip_flags,#4
2622                     ; 911         if (uip_len > 0) {
2624  f278 ce01d7        	ldw	x,_uip_len
2625  f27b 2704          	jreq	L3011
2626                     ; 912           uip_flags |= UIP_NEWDATA;
2628  f27d 72120088      	bset	_uip_flags,#1
2629  f281               L3011:
2630                     ; 914         UIP_APPCALL();
2632  f281 cdf897        	call	_uip_TcpAppHubCall
2634                     ; 915         uip_connr->len = 1;
2636  f284 1e04          	ldw	x,(OFST-1,sp)
2637  f286 90ae0001      	ldw	y,#1
2638  f28a ef10          	ldw	(16,x),y
2639                     ; 916         uip_connr->tcpstateflags = UIP_LAST_ACK;
2641  f28c a608          	ld	a,#8
2642                     ; 917         uip_connr->nrtx = 0;
2643                     ; 918         tcp_send_finack: BUF->flags = TCP_FIN | TCP_ACK;
2644                     ; 919         goto tcp_send_nodata;
2646  f28e ccf31e        	jp	LC005
2647  f291               L7701:
2648                     ; 924       if ((BUF->flags & TCP_URG) != 0) {
2650  f291 720b020a1f    	btjf	_uip_buf+47,#5,L5011
2651                     ; 925         uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
2653  f296 c6020f        	ld	a,_uip_buf+52
2654  f299 97            	ld	xl,a
2655  f29a c60210        	ld	a,_uip_buf+53
2656  f29d 02            	rlwa	x,a
2657  f29e 72bb01d9      	addw	x,_uip_appdata
2658  f2a2 cf01d9        	ldw	_uip_appdata,x
2659                     ; 926         uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
2661  f2a5 c6020f        	ld	a,_uip_buf+52
2662  f2a8 97            	ld	xl,a
2663  f2a9 c60210        	ld	a,_uip_buf+53
2664  f2ac 02            	rlwa	x,a
2665  f2ad 72b001d7      	subw	x,_uip_len
2666  f2b1 50            	negw	x
2667  f2b2 cf01d7        	ldw	_uip_len,x
2668  f2b5               L5011:
2669                     ; 933       if (uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
2671  f2b5 ce01d7        	ldw	x,_uip_len
2672  f2b8 2712          	jreq	L7011
2674  f2ba 1e04          	ldw	x,(OFST-1,sp)
2675  f2bc e619          	ld	a,(25,x)
2676  f2be a510          	bcp	a,#16
2677  f2c0 260a          	jrne	L7011
2678                     ; 934         uip_flags |= UIP_NEWDATA;
2680  f2c2 72120088      	bset	_uip_flags,#1
2681                     ; 935         uip_add_rcv_nxt(uip_len);
2683  f2c6 ce01d7        	ldw	x,_uip_len
2684  f2c9 cdebe2        	call	L733_uip_add_rcv_nxt
2686  f2cc               L7011:
2687                     ; 947       tmp16 = ((uint16_t)BUF->wnd[0] << 8) + (uint16_t)BUF->wnd[1];
2689  f2cc c6020c        	ld	a,_uip_buf+49
2690  f2cf 5f            	clrw	x
2691  f2d0 97            	ld	xl,a
2692  f2d1 1f01          	ldw	(OFST-4,sp),x
2694  f2d3 c6020b        	ld	a,_uip_buf+48
2695  f2d6 97            	ld	xl,a
2696  f2d7 4f            	clr	a
2697  f2d8 02            	rlwa	x,a
2698  f2d9 72fb01        	addw	x,(OFST-4,sp)
2699  f2dc cf0064        	ldw	L54_tmp16,x
2700                     ; 948       if (tmp16 > uip_connr->initialmss || tmp16 == 0) {
2702  f2df 1604          	ldw	y,(OFST-1,sp)
2703  f2e1 90ee14        	ldw	y,(20,y)
2704  f2e4 90c30064      	cpw	y,L54_tmp16
2705  f2e8 2505          	jrult	L3111
2707  f2ea ce0064        	ldw	x,L54_tmp16
2708  f2ed 2607          	jrne	L1111
2709  f2ef               L3111:
2710                     ; 949         tmp16 = uip_connr->initialmss;
2712  f2ef 1e04          	ldw	x,(OFST-1,sp)
2713  f2f1 ee14          	ldw	x,(20,x)
2714  f2f3 cf0064        	ldw	L54_tmp16,x
2715  f2f6               L1111:
2716                     ; 951       uip_connr->mss = tmp16;
2718  f2f6 1e04          	ldw	x,(OFST-1,sp)
2719  f2f8 90ce0064      	ldw	y,L54_tmp16
2720  f2fc ef12          	ldw	(18,x),y
2721                     ; 966       if (uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
2723  f2fe c60088        	ld	a,_uip_flags
2724  f301 a503          	bcp	a,#3
2725  f303 2603ccf4f3    	jreq	L734
2726                     ; 967         uip_slen = 0;
2727                     ; 968         UIP_APPCALL();
2729  f308 ccf255        	jp	L5701
2730  f30b               L7111:
2731                     ; 979         if (uip_flags & UIP_CLOSE) {
2733  f30b 720900881e    	btjf	_uip_flags,#4,L1211
2734                     ; 980           uip_slen = 0;
2736  f310 5f            	clrw	x
2737  f311 cf0078        	ldw	_uip_slen,x
2738                     ; 981 	  uip_connr->len = 1;
2740  f314 1e04          	ldw	x,(OFST-1,sp)
2741  f316 90ae0001      	ldw	y,#1
2742  f31a ef10          	ldw	(16,x),y
2743                     ; 982 	  uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
2745  f31c a604          	ld	a,#4
2746                     ; 983 	  uip_connr->nrtx = 0;
2748  f31e               LC005:
2749  f31e e719          	ld	(25,x),a
2751  f320 6f1b          	clr	(27,x)
2752                     ; 984 	  BUF->flags = TCP_FIN | TCP_ACK;
2754  f322               LC003:
2756  f322 3511020a      	mov	_uip_buf+47,#17
2757                     ; 985 	  goto tcp_send_nodata;
2758  f326               L324:
2759                     ; 1111   tcp_send_nodata: uip_len = UIP_IPTCPH_LEN;
2761  f326 ae0028        	ldw	x,#40
2762  f329 cf01d7        	ldw	_uip_len,x
2763  f32c 206e          	jra	L524
2764  f32e               L1211:
2765                     ; 989         if (uip_slen > 0) {
2767  f32e ce0078        	ldw	x,_uip_slen
2768  f331 2732          	jreq	L3211
2769                     ; 992 	  if ((uip_flags & UIP_ACKDATA) != 0) {
2771  f333 7201008806    	btjf	_uip_flags,#0,L5211
2772                     ; 993 	    uip_connr->len = 0;
2774  f338 1e04          	ldw	x,(OFST-1,sp)
2775  f33a 905f          	clrw	y
2776  f33c ef10          	ldw	(16,x),y
2777  f33e               L5211:
2778                     ; 998 	  if (uip_connr->len == 0) {
2780  f33e 1e04          	ldw	x,(OFST-1,sp)
2781  f340 e611          	ld	a,(17,x)
2782  f342 ea10          	or	a,(16,x)
2783  f344 261a          	jrne	L7211
2784                     ; 1001 	    if (uip_slen > uip_connr->mss) {
2786  f346 9093          	ldw	y,x
2787  f348 90ee12        	ldw	y,(18,y)
2788  f34b 90c30078      	cpw	y,_uip_slen
2789  f34f 2407          	jruge	L1311
2790                     ; 1002 	      uip_slen = uip_connr->mss;
2792  f351 ee12          	ldw	x,(18,x)
2793  f353 cf0078        	ldw	_uip_slen,x
2794  f356 1e04          	ldw	x,(OFST-1,sp)
2795  f358               L1311:
2796                     ; 1007             uip_connr->len = uip_slen;
2798  f358 90ce0078      	ldw	y,_uip_slen
2799  f35c ef10          	ldw	(16,x),y
2801  f35e 2005          	jra	L3211
2802  f360               L7211:
2803                     ; 1013 	    uip_slen = uip_connr->len;
2805  f360 ee10          	ldw	x,(16,x)
2806  f362 cf0078        	ldw	_uip_slen,x
2807  f365               L3211:
2808                     ; 1016 	uip_connr->nrtx = 0;
2810  f365 1e04          	ldw	x,(OFST-1,sp)
2811  f367 6f1b          	clr	(27,x)
2812  f369               L504:
2813                     ; 1017 	apprexmit: uip_appdata = uip_sappdata;
2815  f369 ce007a        	ldw	x,_uip_sappdata
2816  f36c cf01d9        	ldw	_uip_appdata,x
2817                     ; 1021 	if (uip_slen > 0 && uip_connr->len > 0) {
2819  f36f ce0078        	ldw	x,_uip_slen
2820  f372 2716          	jreq	L5311
2822  f374 1e04          	ldw	x,(OFST-1,sp)
2823  f376 e611          	ld	a,(17,x)
2824  f378 ea10          	or	a,(16,x)
2825  f37a 270e          	jreq	L5311
2826                     ; 1023 	  uip_len = uip_connr->len + UIP_TCPIP_HLEN;
2828  f37c ee10          	ldw	x,(16,x)
2829  f37e 1c0028        	addw	x,#40
2830  f381 cf01d7        	ldw	_uip_len,x
2831                     ; 1025 	  BUF->flags = TCP_ACK | TCP_PSH;
2833  f384 3518020a      	mov	_uip_buf+47,#24
2834                     ; 1027 	  goto tcp_send_noopts;
2836  f388 2012          	jra	L524
2837  f38a               L5311:
2838                     ; 1030 	if (uip_flags & UIP_NEWDATA) {
2840  f38a 7202008803cc  	btjf	_uip_flags,#1,L734
2841                     ; 1031 	  uip_len = UIP_TCPIP_HLEN;
2843  f392 ae0028        	ldw	x,#40
2844  f395 cf01d7        	ldw	_uip_len,x
2845                     ; 1032 	  BUF->flags = TCP_ACK;
2847  f398 3510020a      	mov	_uip_buf+47,#16
2848                     ; 1033 	  goto tcp_send_noopts;
2849  f39c               L524:
2850                     ; 1112   tcp_send_noopts: BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
2852  f39c 35500209      	mov	_uip_buf+46,#80
2853  f3a0               L724:
2854                     ; 1115   tcp_send:
2854                     ; 1116   /* We're done with the input processing. We are now ready to send a reply. Our job is to
2854                     ; 1117      fill in all the fields of the TCP and IP headers before calculating the checksum and
2854                     ; 1118      finally send the packet. */
2854                     ; 1119   BUF->ackno[0] = uip_connr->rcv_nxt[0];
2856  f3a0 1e04          	ldw	x,(OFST-1,sp)
2857  f3a2 e608          	ld	a,(8,x)
2858  f3a4 c70205        	ld	_uip_buf+42,a
2859                     ; 1120   BUF->ackno[1] = uip_connr->rcv_nxt[1];
2861  f3a7 e609          	ld	a,(9,x)
2862  f3a9 c70206        	ld	_uip_buf+43,a
2863                     ; 1121   BUF->ackno[2] = uip_connr->rcv_nxt[2];
2865  f3ac e60a          	ld	a,(10,x)
2866  f3ae c70207        	ld	_uip_buf+44,a
2867                     ; 1122   BUF->ackno[3] = uip_connr->rcv_nxt[3];
2869  f3b1 e60b          	ld	a,(11,x)
2870  f3b3 c70208        	ld	_uip_buf+45,a
2871                     ; 1124   BUF->seqno[0] = uip_connr->snd_nxt[0];
2873  f3b6 e60c          	ld	a,(12,x)
2874  f3b8 c70201        	ld	_uip_buf+38,a
2875                     ; 1125   BUF->seqno[1] = uip_connr->snd_nxt[1];
2877  f3bb e60d          	ld	a,(13,x)
2878  f3bd c70202        	ld	_uip_buf+39,a
2879                     ; 1126   BUF->seqno[2] = uip_connr->snd_nxt[2];
2881  f3c0 e60e          	ld	a,(14,x)
2882  f3c2 c70203        	ld	_uip_buf+40,a
2883                     ; 1127   BUF->seqno[3] = uip_connr->snd_nxt[3];
2885  f3c5 e60f          	ld	a,(15,x)
2886  f3c7 c70204        	ld	_uip_buf+41,a
2887                     ; 1129   BUF->proto = UIP_PROTO_TCP;
2889  f3ca 350601f2      	mov	_uip_buf+23,#6
2890                     ; 1131   BUF->srcport = uip_connr->lport;
2892  f3ce ee04          	ldw	x,(4,x)
2893  f3d0 cf01fd        	ldw	_uip_buf+34,x
2894                     ; 1132   BUF->destport = uip_connr->rport;
2896  f3d3 1e04          	ldw	x,(OFST-1,sp)
2897  f3d5 ee06          	ldw	x,(6,x)
2898  f3d7 cf01ff        	ldw	_uip_buf+36,x
2899                     ; 1134   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
2901  f3da ce0084        	ldw	x,_uip_hostaddr
2902  f3dd cf01f5        	ldw	_uip_buf+26,x
2905  f3e0 ce0086        	ldw	x,_uip_hostaddr+2
2906  f3e3 cf01f7        	ldw	_uip_buf+28,x
2907                     ; 1135   uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
2909  f3e6 1e04          	ldw	x,(OFST-1,sp)
2910  f3e8 fe            	ldw	x,(x)
2911  f3e9 cf01f9        	ldw	_uip_buf+30,x
2914  f3ec 1e04          	ldw	x,(OFST-1,sp)
2915  f3ee ee02          	ldw	x,(2,x)
2916  f3f0 cf01fb        	ldw	_uip_buf+32,x
2917                     ; 1137   if (uip_connr->tcpstateflags & UIP_STOPPED) {
2919  f3f3 1e04          	ldw	x,(OFST-1,sp)
2920  f3f5 e619          	ld	a,(25,x)
2921  f3f7 a510          	bcp	a,#16
2922  f3f9 2603ccf498    	jreq	L1021
2923                     ; 1140     BUF->wnd[0] = BUF->wnd[1] = 0;
2925  f3fe 725f020c      	clr	_uip_buf+49
2926  f402 725f020b      	clr	_uip_buf+48
2928  f406 ccf4a0        	jra	L134
2929  f409               L704:
2930                     ; 1038     case UIP_LAST_ACK:
2930                     ; 1039       /* We can close this connection if the peer has acknowledged our FIN. This is
2930                     ; 1040          indicated by the UIP_ACKDATA flag. */
2930                     ; 1041       if (uip_flags & UIP_ACKDATA) {
2932  f409 7201008881    	btjf	_uip_flags,#0,L734
2933                     ; 1042         uip_connr->tcpstateflags = UIP_CLOSED;
2935  f40e e719          	ld	(25,x),a
2936                     ; 1043 	uip_flags = UIP_CLOSE;
2938  f410 35100088      	mov	_uip_flags,#16
2939                     ; 1044 	UIP_APPCALL();
2941  f414 cdf897        	call	_uip_TcpAppHubCall
2943  f417 ccf4f3        	jra	L734
2944  f41a               L114:
2945                     ; 1048     case UIP_FIN_WAIT_1:
2945                     ; 1049       /* The application has closed the connection, but the remote host hasn't closed
2945                     ; 1050          its end yet. Thus we do nothing but wait for a FIN from the other side. */
2945                     ; 1051       if (uip_len > 0) {
2947  f41a ce01d7        	ldw	x,_uip_len
2948  f41d 2703          	jreq	L3411
2949                     ; 1052         uip_add_rcv_nxt(uip_len);
2951  f41f cdebe2        	call	L733_uip_add_rcv_nxt
2953  f422               L3411:
2954                     ; 1054       if (BUF->flags & TCP_FIN) {
2956  f422 7201020a19    	btjf	_uip_buf+47,#0,L5411
2957                     ; 1055         if (uip_flags & UIP_ACKDATA) {
2959  f427 1e04          	ldw	x,(OFST-1,sp)
2960  f429 720100880c    	btjf	_uip_flags,#0,L7411
2961                     ; 1056 	  uip_connr->tcpstateflags = UIP_TIME_WAIT;
2963  f42e a607          	ld	a,#7
2964  f430 e719          	ld	(25,x),a
2965                     ; 1057 	  uip_connr->timer = 0;
2967  f432 6f1a          	clr	(26,x)
2968                     ; 1058 	  uip_connr->len = 0;
2970  f434 905f          	clrw	y
2971  f436 ef10          	ldw	(16,x),y
2973  f438 2034          	jra	LC004
2974  f43a               L7411:
2975                     ; 1061           uip_connr->tcpstateflags = UIP_CLOSING;
2977  f43a a606          	ld	a,#6
2978  f43c e719          	ld	(25,x),a
2979                     ; 1063         uip_add_rcv_nxt(1);
2981                     ; 1064         uip_flags = UIP_CLOSE;
2982                     ; 1065         UIP_APPCALL();
2984                     ; 1066         goto tcp_send_ack;
2986  f43e 202e          	jp	LC004
2987  f440               L5411:
2988                     ; 1068       else if (uip_flags & UIP_ACKDATA) {
2990  f440 720100880d    	btjf	_uip_flags,#0,L3511
2991                     ; 1069         uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
2993  f445 1e04          	ldw	x,(OFST-1,sp)
2994  f447 a605          	ld	a,#5
2995  f449 e719          	ld	(25,x),a
2996                     ; 1070         uip_connr->len = 0;
2998  f44b 905f          	clrw	y
2999  f44d ef10          	ldw	(16,x),y
3000                     ; 1071         goto drop;
3002  f44f ccf4f3        	jra	L734
3003  f452               L3511:
3004                     ; 1073       if (uip_len > 0) {
3006  f452 ce01d7        	ldw	x,_uip_len
3007  f455 27f8          	jreq	L734
3008                     ; 1074         goto tcp_send_ack;
3010  f457 2038          	jra	L124
3011  f459               L314:
3012                     ; 1078     case UIP_FIN_WAIT_2:
3012                     ; 1079       if (uip_len > 0) {
3014  f459 ce01d7        	ldw	x,_uip_len
3015  f45c 2703          	jreq	L1611
3016                     ; 1080 	uip_add_rcv_nxt(uip_len);
3018  f45e cdebe2        	call	L733_uip_add_rcv_nxt
3020  f461               L1611:
3021                     ; 1082       if (BUF->flags & TCP_FIN) {
3023  f461 7201020a17    	btjf	_uip_buf+47,#0,L3611
3024                     ; 1083 	uip_connr->tcpstateflags = UIP_TIME_WAIT;
3026  f466 1e04          	ldw	x,(OFST-1,sp)
3027  f468 a607          	ld	a,#7
3028  f46a e719          	ld	(25,x),a
3029                     ; 1084 	uip_connr->timer = 0;
3031  f46c 6f1a          	clr	(26,x)
3032                     ; 1085 	uip_add_rcv_nxt(1);
3035                     ; 1086 	uip_flags = UIP_CLOSE;
3037                     ; 1087 	UIP_APPCALL();
3039  f46e               LC004:
3041  f46e ae0001        	ldw	x,#1
3042  f471 cdebe2        	call	L733_uip_add_rcv_nxt
3044  f474 35100088      	mov	_uip_flags,#16
3046  f478 cdf897        	call	_uip_TcpAppHubCall
3048                     ; 1088 	goto tcp_send_ack;
3050  f47b 2014          	jra	L124
3051  f47d               L3611:
3052                     ; 1090       if (uip_len > 0) {
3054  f47d ce01d7        	ldw	x,_uip_len
3055  f480 2771          	jreq	L734
3056                     ; 1091 	goto tcp_send_ack;
3058  f482 200d          	jra	L124
3059  f484               L714:
3060                     ; 1098     case UIP_CLOSING:
3060                     ; 1099       if (uip_flags & UIP_ACKDATA) {
3062  f484 720100886a    	btjf	_uip_flags,#0,L734
3063                     ; 1100 	uip_connr->tcpstateflags = UIP_TIME_WAIT;
3065  f489 a607          	ld	a,#7
3066  f48b e719          	ld	(25,x),a
3067                     ; 1101 	uip_connr->timer = 0;
3069  f48d 6f1a          	clr	(26,x)
3070  f48f 2062          	jra	L734
3071                     ; 1104   goto drop;
3073  f491               L124:
3074                     ; 1109   tcp_send_ack:
3074                     ; 1110   BUF->flags = TCP_ACK;
3076  f491 3510020a      	mov	_uip_buf+47,#16
3077  f495 ccf326        	jra	L324
3078  f498               L1021:
3079                     ; 1143     BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
3081  f498 3502020b      	mov	_uip_buf+48,#2
3082                     ; 1144     BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
3084  f49c 3522020c      	mov	_uip_buf+49,#34
3085  f4a0               L134:
3086                     ; 1148   tcp_send_noconn:
3086                     ; 1149   BUF->ttl = UIP_TTL;
3088  f4a0 354001f1      	mov	_uip_buf+22,#64
3089                     ; 1150   BUF->len[0] = (uint8_t)(uip_len >> 8);
3091  f4a4 5501d701eb    	mov	_uip_buf+16,_uip_len
3092                     ; 1151   BUF->len[1] = (uint8_t)(uip_len & 0xff);
3094  f4a9 5501d801ec    	mov	_uip_buf+17,_uip_len+1
3095                     ; 1153   BUF->urgp[0] = BUF->urgp[1] = 0;
3097  f4ae 725f0210      	clr	_uip_buf+53
3098  f4b2 725f020f      	clr	_uip_buf+52
3099                     ; 1156   BUF->tcpchksum = 0;
3101  f4b6 5f            	clrw	x
3102  f4b7 cf020d        	ldw	_uip_buf+50,x
3103                     ; 1157   BUF->tcpchksum = ~(uip_tcpchksum());
3105  f4ba cdeae0        	call	_uip_tcpchksum
3107  f4bd 53            	cplw	x
3108  f4be cf020d        	ldw	_uip_buf+50,x
3109                     ; 1160   ip_send_nolen:
3109                     ; 1161 
3109                     ; 1162   BUF->vhl = 0x45;
3111  f4c1 354501e9      	mov	_uip_buf+14,#69
3112                     ; 1163   BUF->tos = 0;
3114  f4c5 725f01ea      	clr	_uip_buf+15
3115                     ; 1164   BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
3117  f4c9 725f01f0      	clr	_uip_buf+21
3118  f4cd 725f01ef      	clr	_uip_buf+20
3119                     ; 1165   ++ipid;
3121  f4d1 ce006c        	ldw	x,L31_ipid
3122  f4d4 5c            	incw	x
3123  f4d5 cf006c        	ldw	L31_ipid,x
3124                     ; 1166   BUF->ipid[0] = (uint8_t)(ipid >> 8);
3126  f4d8 55006c01ed    	mov	_uip_buf+18,L31_ipid
3127                     ; 1167   BUF->ipid[1] = (uint8_t)(ipid & 0xff);
3129  f4dd 55006d01ee    	mov	_uip_buf+19,L31_ipid+1
3130                     ; 1169   BUF->ipchksum = 0;
3132  f4e2 5f            	clrw	x
3133  f4e3 cf01f3        	ldw	_uip_buf+24,x
3134                     ; 1170   BUF->ipchksum = ~(uip_ipchksum());
3136  f4e6 cdea7b        	call	_uip_ipchksum
3138  f4e9 53            	cplw	x
3139  f4ea cf01f3        	ldw	_uip_buf+24,x
3140                     ; 1172   UIP_STAT(++uip_stat.tcp.sent);
3142  f4ed ae00c5        	ldw	x,#_uip_stat+60
3144  f4f0 ccee47        	jra	L534
3145  f4f3               L734:
3146                     ; 1183   drop:
3146                     ; 1184   uip_len = 0;
3148  f4f3 5f            	clrw	x
3149  f4f4 cf01d7        	ldw	_uip_len,x
3150                     ; 1185   uip_flags = 0;
3152                     ; 1186   return;
3153  f4f7               L202:
3155  f4f7 725f0088      	clr	_uip_flags
3158  f4fb 5b06          	addw	sp,#6
3159  f4fd 81            	ret	
3191                     ; 1191 uint16_t htons(uint16_t val)
3191                     ; 1192 {
3192                     	switch	.text
3193  f4fe               _htons:
3197                     ; 1193   return HTONS(val);
3201  f4fe 81            	ret	
3246                     ; 1199 void uip_send(const char *data, int len)
3246                     ; 1200 {
3247                     	switch	.text
3248  f4ff               _uip_send:
3250  f4ff 89            	pushw	x
3251       00000000      OFST:	set	0
3254                     ; 1201   if (len > 0) {
3256  f500 9c            	rvf	
3257  f501 1e05          	ldw	x,(OFST+5,sp)
3258  f503 2d1c          	jrsle	L012
3259                     ; 1202     uip_slen = len;
3261  f505 cf0078        	ldw	_uip_slen,x
3262                     ; 1203     if (data != uip_sappdata) {
3264  f508 1e01          	ldw	x,(OFST+1,sp)
3265  f50a c3007a        	cpw	x,_uip_sappdata
3266  f50d 2712          	jreq	L012
3267                     ; 1204       memcpy(uip_sappdata, (data), uip_slen);
3269  f50f bf04          	ldw	c_x,x
3270  f511 ce0078        	ldw	x,_uip_slen
3271  f514 270b          	jreq	L012
3272  f516               L212:
3273  f516 5a            	decw	x
3274  f517 92d604        	ld	a,([c_x.w],x)
3275  f51a 72d7007a      	ld	([_uip_sappdata.w],x),a
3276  f51e 5d            	tnzw	x
3277  f51f 26f5          	jrne	L212
3278  f521               L012:
3279                     ; 1207 }
3282  f521 85            	popw	x
3283  f522 81            	ret	
3710                     	switch	.bss
3711  0064               L54_tmp16:
3712  0064 0000          	ds.b	2
3713  0066               L34_opt:
3714  0066 00            	ds.b	1
3715  0067               L14_c:
3716  0067 00            	ds.b	1
3717  0068               L73_iss:
3718  0068 00000000      	ds.b	4
3719  006c               L31_ipid:
3720  006c 0000          	ds.b	2
3721  006e               _uip_listenports:
3722  006e 000000000000  	ds.b	10
3723                     	xdef	_uip_listenports
3724  0078               _uip_slen:
3725  0078 0000          	ds.b	2
3726                     	xdef	_uip_slen
3727  007a               _uip_sappdata:
3728  007a 0000          	ds.b	2
3729                     	xdef	_uip_sappdata
3730                     	xdef	_uip_ethaddr
3731                     	xdef	_uip_add32
3732                     	xdef	_uip_tcpchksum
3733                     	xdef	_uip_ipchksum
3734                     	xdef	_uip_chksum
3735  007c               _uip_draddr:
3736  007c 00000000      	ds.b	4
3737                     	xdef	_uip_draddr
3738  0080               _uip_netmask:
3739  0080 00000000      	ds.b	4
3740                     	xdef	_uip_netmask
3741  0084               _uip_hostaddr:
3742  0084 00000000      	ds.b	4
3743                     	xdef	_uip_hostaddr
3744                     	xdef	_uip_process
3745  0088               _uip_flags:
3746  0088 00            	ds.b	1
3747                     	xdef	_uip_flags
3748  0089               _uip_stat:
3749  0089 000000000000  	ds.b	88
3750                     	xdef	_uip_stat
3751  00e1               _uip_acc32:
3752  00e1 00000000      	ds.b	4
3753                     	xdef	_uip_acc32
3754  00e5               _uip_conns:
3755  00e5 000000000000  	ds.b	240
3756                     	xdef	_uip_conns
3757  01d5               _uip_conn:
3758  01d5 0000          	ds.b	2
3759                     	xdef	_uip_conn
3760  01d7               _uip_len:
3761  01d7 0000          	ds.b	2
3762                     	xdef	_uip_len
3763  01d9               _uip_appdata:
3764  01d9 0000          	ds.b	2
3765                     	xdef	_uip_appdata
3766                     	xdef	_htons
3767                     	xdef	_uip_send
3768                     	xdef	_uip_unlisten
3769                     	xdef	_uip_listen
3770  01db               _uip_buf:
3771  01db 000000000000  	ds.b	602
3772                     	xdef	_uip_buf
3773                     	xdef	_uip_setipid
3774                     	xdef	_uip_init
3775                     	xref	_uip_TcpAppHubCall
3776                     	xref.b	c_x
3777                     	xref.b	c_y
3797                     	xref	c_lgadc
3798                     	end
