   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     	switch	.data
  18  000a               _uip_ethaddr:
  19  000a 01            	dc.b	1
  20  000b 02            	dc.b	2
  21  000c 03            	dc.b	3
  22  000d 04            	dc.b	4
  23  000e 05            	dc.b	5
  24  000f 06            	dc.b	6
  63                     ; 158 void uip_setipid(uint16_t id)
  63                     ; 159 {
  65                     	switch	.text
  66  e425               _uip_setipid:
  70                     ; 160   ipid = id;
  72  e425 cf006c        	ldw	L31_ipid,x
  73                     ; 161 }
  76  e428 81            	ret	
 119                     ; 212 void uip_add32(uint8_t *op32, uint16_t op16)
 119                     ; 213 {
 120                     	switch	.text
 121  e429               _uip_add32:
 123  e429 89            	pushw	x
 124  e42a 89            	pushw	x
 125       00000002      OFST:	set	2
 128                     ; 214   uip_acc32[3] = (uint8_t)(op32[3] + (op16 & 0xff));
 130  e42b 7b08          	ld	a,(OFST+6,sp)
 131  e42d eb03          	add	a,(3,x)
 132  e42f c700e4        	ld	_uip_acc32+3,a
 133                     ; 215   uip_acc32[2] = (uint8_t)(op32[2] + (op16 >> 8));
 135  e432 e602          	ld	a,(2,x)
 136  e434 1b07          	add	a,(OFST+5,sp)
 137  e436 c700e3        	ld	_uip_acc32+2,a
 138                     ; 216   uip_acc32[1] = op32[1];
 140  e439 e601          	ld	a,(1,x)
 141  e43b c700e2        	ld	_uip_acc32+1,a
 142                     ; 217   uip_acc32[0] = op32[0];
 144  e43e f6            	ld	a,(x)
 145  e43f c700e1        	ld	_uip_acc32,a
 146                     ; 219   if (uip_acc32[2] < (op16 >> 8)) {
 148  e442 4f            	clr	a
 149  e443 1e07          	ldw	x,(OFST+5,sp)
 150  e445 01            	rrwa	x,a
 151  e446 c600e3        	ld	a,_uip_acc32+2
 152  e449 905f          	clrw	y
 153  e44b 9097          	ld	yl,a
 154  e44d 90bf07        	ldw	c_y,y
 155  e450 b307          	cpw	x,c_y
 156  e452 230a          	jrule	L76
 157                     ; 220     ++uip_acc32[1];
 159  e454 725c00e2      	inc	_uip_acc32+1
 160                     ; 221     if (uip_acc32[1] == 0) {
 162  e458 2604          	jrne	L76
 163                     ; 222       ++uip_acc32[0];
 165  e45a 725c00e1      	inc	_uip_acc32
 166  e45e               L76:
 167                     ; 226   if (uip_acc32[3] < (op16 & 0xff)) {
 169  e45e c600e4        	ld	a,_uip_acc32+3
 170  e461 5f            	clrw	x
 171  e462 97            	ld	xl,a
 172  e463 1f01          	ldw	(OFST-1,sp),x
 174  e465 5f            	clrw	x
 175  e466 7b08          	ld	a,(OFST+6,sp)
 176  e468 02            	rlwa	x,a
 177  e469 1301          	cpw	x,(OFST-1,sp)
 178  e46b 2310          	jrule	L37
 179                     ; 227     ++uip_acc32[2];
 181  e46d 725c00e3      	inc	_uip_acc32+2
 182                     ; 228     if (uip_acc32[2] == 0) {
 184  e471 260a          	jrne	L37
 185                     ; 229       ++uip_acc32[1];
 187  e473 725c00e2      	inc	_uip_acc32+1
 188                     ; 230       if (uip_acc32[1] == 0) {
 190  e477 2604          	jrne	L37
 191                     ; 231         ++uip_acc32[0];
 193  e479 725c00e1      	inc	_uip_acc32
 194  e47d               L37:
 195                     ; 235 }
 198  e47d 5b04          	addw	sp,#4
 199  e47f 81            	ret	
 275                     ; 242 static uint16_t chksum(uint16_t sum, const uint8_t *data, uint16_t len)
 275                     ; 243 {
 276                     	switch	.text
 277  e480               L101_chksum:
 279  e480 89            	pushw	x
 280  e481 5206          	subw	sp,#6
 281       00000006      OFST:	set	6
 284                     ; 248   dataptr = data;
 286  e483 1e0b          	ldw	x,(OFST+5,sp)
 287  e485 1f05          	ldw	(OFST-1,sp),x
 289                     ; 249   last_byte = data + len - 1;
 291  e487 72fb0d        	addw	x,(OFST+7,sp)
 292  e48a 5a            	decw	x
 293  e48b 1f01          	ldw	(OFST-5,sp),x
 296  e48d 1e05          	ldw	x,(OFST-1,sp)
 297  e48f 2020          	jra	L341
 298  e491               L731:
 299                     ; 252     t = (dataptr[0] << 8) + dataptr[1];
 301  e491 f6            	ld	a,(x)
 302  e492 5f            	clrw	x
 303  e493 97            	ld	xl,a
 304  e494 1605          	ldw	y,(OFST-1,sp)
 305  e496 4f            	clr	a
 306  e497 90eb01        	add	a,(1,y)
 307  e49a 2401          	jrnc	L21
 308  e49c 5c            	incw	x
 309  e49d               L21:
 310  e49d 02            	rlwa	x,a
 311  e49e 1f03          	ldw	(OFST-3,sp),x
 313                     ; 253     sum += t;
 315  e4a0 72fb07        	addw	x,(OFST+1,sp)
 316                     ; 254     if (sum < t) {
 318  e4a3 1303          	cpw	x,(OFST-3,sp)
 319  e4a5 2401          	jruge	L741
 320                     ; 255       sum++; /* carry */
 322  e4a7 5c            	incw	x
 323  e4a8               L741:
 324  e4a8 1f07          	ldw	(OFST+1,sp),x
 325                     ; 257     dataptr += 2;
 327  e4aa 1e05          	ldw	x,(OFST-1,sp)
 328  e4ac 1c0002        	addw	x,#2
 329  e4af 1f05          	ldw	(OFST-1,sp),x
 331  e4b1               L341:
 332                     ; 251   while (dataptr < last_byte) { /* At least two more bytes */
 334  e4b1 1301          	cpw	x,(OFST-5,sp)
 335  e4b3 25dc          	jrult	L731
 336                     ; 260   if (dataptr == last_byte) {
 338  e4b5 2612          	jrne	L151
 339                     ; 261     t = (dataptr[0] << 8) + 0;
 341  e4b7 f6            	ld	a,(x)
 342  e4b8 97            	ld	xl,a
 343  e4b9 4f            	clr	a
 344  e4ba 02            	rlwa	x,a
 345  e4bb 1f03          	ldw	(OFST-3,sp),x
 347                     ; 262     sum += t;
 349  e4bd 72fb07        	addw	x,(OFST+1,sp)
 350  e4c0 1f07          	ldw	(OFST+1,sp),x
 351                     ; 263     if (sum < t) {
 353  e4c2 1303          	cpw	x,(OFST-3,sp)
 354  e4c4 2403          	jruge	L151
 355                     ; 264       sum++; /* carry */
 357  e4c6 5c            	incw	x
 358  e4c7 1f07          	ldw	(OFST+1,sp),x
 359  e4c9               L151:
 360                     ; 268   return sum;
 362  e4c9 1e07          	ldw	x,(OFST+1,sp)
 365  e4cb 5b08          	addw	sp,#8
 366  e4cd 81            	ret	
 410                     ; 273 uint16_t uip_chksum(uint16_t *data, uint16_t len)
 410                     ; 274 {
 411                     	switch	.text
 412  e4ce               _uip_chksum:
 414  e4ce 89            	pushw	x
 415       00000000      OFST:	set	0
 418                     ; 275   return htons(chksum(0, (uint8_t *)data, len));
 420  e4cf 1e05          	ldw	x,(OFST+5,sp)
 421  e4d1 89            	pushw	x
 422  e4d2 1e03          	ldw	x,(OFST+3,sp)
 423  e4d4 89            	pushw	x
 424  e4d5 5f            	clrw	x
 425  e4d6 ada8          	call	L101_chksum
 427  e4d8 5b04          	addw	sp,#4
 428  e4da cdef63        	call	_htons
 432  e4dd 5b02          	addw	sp,#2
 433  e4df 81            	ret	
 468                     ; 281 uint16_t uip_ipchksum(void)
 468                     ; 282 {
 469                     	switch	.text
 470  e4e0               _uip_ipchksum:
 472  e4e0 89            	pushw	x
 473       00000002      OFST:	set	2
 476                     ; 285   sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 478  e4e1 ae0014        	ldw	x,#20
 479  e4e4 89            	pushw	x
 480  e4e5 ae01e9        	ldw	x,#_uip_buf+14
 481  e4e8 89            	pushw	x
 482  e4e9 5f            	clrw	x
 483  e4ea ad94          	call	L101_chksum
 485  e4ec 5b04          	addw	sp,#4
 486  e4ee 1f01          	ldw	(OFST-1,sp),x
 488                     ; 287   return (sum == 0) ? 0xffff : htons(sum);
 490  e4f0 2603          	jrne	L62
 491  e4f2 5a            	decw	x
 492  e4f3 2003          	jra	L03
 493  e4f5               L62:
 494  e4f5 cdef63        	call	_htons
 496  e4f8               L03:
 499  e4f8 5b02          	addw	sp,#2
 500  e4fa 81            	ret	
 549                     ; 293 static uint16_t upper_layer_chksum(uint8_t proto)
 549                     ; 294 {
 550                     	switch	.text
 551  e4fb               L112_upper_layer_chksum:
 553  e4fb 88            	push	a
 554  e4fc 5204          	subw	sp,#4
 555       00000004      OFST:	set	4
 558                     ; 298   upper_layer_len = (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 560  e4fe c601eb        	ld	a,_uip_buf+16
 561  e501 5f            	clrw	x
 562  e502 97            	ld	xl,a
 563  e503 4f            	clr	a
 564  e504 cb01ec        	add	a,_uip_buf+17
 565  e507 2401          	jrnc	L63
 566  e509 5c            	incw	x
 567  e50a               L63:
 568  e50a 02            	rlwa	x,a
 569  e50b 1d0014        	subw	x,#20
 570  e50e 1f01          	ldw	(OFST-3,sp),x
 572                     ; 303   sum = upper_layer_len + proto;
 574  e510 5f            	clrw	x
 575  e511 7b05          	ld	a,(OFST+1,sp)
 576  e513 97            	ld	xl,a
 577  e514 72fb01        	addw	x,(OFST-3,sp)
 578  e517 1f03          	ldw	(OFST-1,sp),x
 580                     ; 305   sum = chksum(sum, (uint8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 582  e519 ae0008        	ldw	x,#8
 583  e51c 89            	pushw	x
 584  e51d ae01f5        	ldw	x,#_uip_buf+26
 585  e520 89            	pushw	x
 586  e521 1e07          	ldw	x,(OFST+3,sp)
 587  e523 cde480        	call	L101_chksum
 589  e526 5b04          	addw	sp,#4
 590  e528 1f03          	ldw	(OFST-1,sp),x
 592                     ; 308   sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN], upper_layer_len);
 594  e52a 1e01          	ldw	x,(OFST-3,sp)
 595  e52c 89            	pushw	x
 596  e52d ae01fd        	ldw	x,#_uip_buf+34
 597  e530 89            	pushw	x
 598  e531 1e07          	ldw	x,(OFST+3,sp)
 599  e533 cde480        	call	L101_chksum
 601  e536 5b04          	addw	sp,#4
 602  e538 1f03          	ldw	(OFST-1,sp),x
 604                     ; 310   return (sum == 0) ? 0xffff : htons(sum);
 606  e53a 2603          	jrne	L44
 607  e53c 5a            	decw	x
 608  e53d 2003          	jra	L64
 609  e53f               L44:
 610  e53f cdef63        	call	_htons
 612  e542               L64:
 615  e542 5b05          	addw	sp,#5
 616  e544 81            	ret	
 640                     ; 315 uint16_t uip_tcpchksum(void)
 640                     ; 316 {
 641                     	switch	.text
 642  e545               _uip_tcpchksum:
 646                     ; 317   return upper_layer_chksum(UIP_PROTO_TCP);
 648  e545 a606          	ld	a,#6
 652  e547 20b2          	jp	L112_upper_layer_chksum
 679                     ; 323 void uip_init(void)
 679                     ; 324 {
 680                     	switch	.text
 681  e549               _uip_init:
 685                     ; 325   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 687  e549 4f            	clr	a
 688  e54a c70067        	ld	L14_c,a
 689  e54d               L352:
 690                     ; 326     uip_listenports[c] = 0;
 692  e54d 5f            	clrw	x
 693  e54e 97            	ld	xl,a
 694  e54f 58            	sllw	x
 695  e550 905f          	clrw	y
 696  e552 df006e        	ldw	(_uip_listenports,x),y
 697                     ; 325   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 699  e555 725c0067      	inc	L14_c
 702  e559 c60067        	ld	a,L14_c
 703  e55c a105          	cp	a,#5
 704  e55e 25ed          	jrult	L352
 705                     ; 328   for (c = 0; c < UIP_CONNS; ++c) {
 707  e560 4f            	clr	a
 708  e561 c70067        	ld	L14_c,a
 709  e564               L162:
 710                     ; 329     uip_conns[c].tcpstateflags = UIP_CLOSED;
 712  e564 97            	ld	xl,a
 713  e565 a628          	ld	a,#40
 714  e567 42            	mul	x,a
 715  e568 724f00fe      	clr	(_uip_conns+25,x)
 716                     ; 328   for (c = 0; c < UIP_CONNS; ++c) {
 718  e56c 725c0067      	inc	L14_c
 721  e570 c60067        	ld	a,L14_c
 722  e573 a106          	cp	a,#6
 723  e575 25ed          	jrult	L162
 724                     ; 335   uip_stat.ip.drop = 0;
 726  e577 5f            	clrw	x
 727  e578 cf008b        	ldw	_uip_stat+2,x
 728  e57b cf0089        	ldw	_uip_stat,x
 729                     ; 336   uip_stat.ip.recv = 0;
 731  e57e cf008f        	ldw	_uip_stat+6,x
 732  e581 cf008d        	ldw	_uip_stat+4,x
 733                     ; 337   uip_stat.ip.sent = 0;
 735  e584 cf0093        	ldw	_uip_stat+10,x
 736  e587 cf0091        	ldw	_uip_stat+8,x
 737                     ; 338   uip_stat.ip.vhlerr = 0;
 739  e58a cf0097        	ldw	_uip_stat+14,x
 740  e58d cf0095        	ldw	_uip_stat+12,x
 741                     ; 339   uip_stat.ip.hblenerr = 0;
 743  e590 cf009b        	ldw	_uip_stat+18,x
 744  e593 cf0099        	ldw	_uip_stat+16,x
 745                     ; 340   uip_stat.ip.lblenerr = 0;
 747  e596 cf009f        	ldw	_uip_stat+22,x
 748  e599 cf009d        	ldw	_uip_stat+20,x
 749                     ; 341   uip_stat.ip.fragerr = 0;
 751  e59c cf00a3        	ldw	_uip_stat+26,x
 752  e59f cf00a1        	ldw	_uip_stat+24,x
 753                     ; 342   uip_stat.ip.chkerr = 0;
 755  e5a2 cf00a7        	ldw	_uip_stat+30,x
 756  e5a5 cf00a5        	ldw	_uip_stat+28,x
 757                     ; 343   uip_stat.ip.protoerr = 0;
 759  e5a8 cf00ab        	ldw	_uip_stat+34,x
 760  e5ab cf00a9        	ldw	_uip_stat+32,x
 761                     ; 344   uip_stat.icmp.drop = 0;
 763  e5ae cf00af        	ldw	_uip_stat+38,x
 764  e5b1 cf00ad        	ldw	_uip_stat+36,x
 765                     ; 345   uip_stat.icmp.recv = 0;
 767  e5b4 cf00b3        	ldw	_uip_stat+42,x
 768  e5b7 cf00b1        	ldw	_uip_stat+40,x
 769                     ; 346   uip_stat.icmp.sent = 0;
 771  e5ba cf00b7        	ldw	_uip_stat+46,x
 772  e5bd cf00b5        	ldw	_uip_stat+44,x
 773                     ; 347   uip_stat.icmp.typeerr = 0;
 775  e5c0 cf00bb        	ldw	_uip_stat+50,x
 776  e5c3 cf00b9        	ldw	_uip_stat+48,x
 777                     ; 348   uip_stat.tcp.drop = 0;
 779  e5c6 cf00bf        	ldw	_uip_stat+54,x
 780  e5c9 cf00bd        	ldw	_uip_stat+52,x
 781                     ; 349   uip_stat.tcp.recv = 0;
 783  e5cc cf00c3        	ldw	_uip_stat+58,x
 784  e5cf cf00c1        	ldw	_uip_stat+56,x
 785                     ; 350   uip_stat.tcp.sent = 0;
 787  e5d2 cf00c7        	ldw	_uip_stat+62,x
 788  e5d5 cf00c5        	ldw	_uip_stat+60,x
 789                     ; 351   uip_stat.tcp.chkerr = 0;
 791  e5d8 cf00cb        	ldw	_uip_stat+66,x
 792  e5db cf00c9        	ldw	_uip_stat+64,x
 793                     ; 352   uip_stat.tcp.ackerr = 0;
 795  e5de cf00cf        	ldw	_uip_stat+70,x
 796  e5e1 cf00cd        	ldw	_uip_stat+68,x
 797                     ; 353   uip_stat.tcp.rst = 0;
 799  e5e4 cf00d3        	ldw	_uip_stat+74,x
 800  e5e7 cf00d1        	ldw	_uip_stat+72,x
 801                     ; 354   uip_stat.tcp.rexmit = 0;
 803  e5ea cf00d7        	ldw	_uip_stat+78,x
 804  e5ed cf00d5        	ldw	_uip_stat+76,x
 805                     ; 355   uip_stat.tcp.syndrop = 0;
 807  e5f0 cf00db        	ldw	_uip_stat+82,x
 808  e5f3 cf00d9        	ldw	_uip_stat+80,x
 809                     ; 356   uip_stat.tcp.synrst = 0;
 811  e5f6 cf00df        	ldw	_uip_stat+86,x
 812  e5f9 cf00dd        	ldw	_uip_stat+84,x
 813                     ; 358 }
 816  e5fc 81            	ret	
 850                     ; 362 void uip_unlisten(uint16_t port)
 850                     ; 363 {
 851                     	switch	.text
 852  e5fd               _uip_unlisten:
 854  e5fd 89            	pushw	x
 855       00000000      OFST:	set	0
 858                     ; 364   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 860  e5fe 4f            	clr	a
 861  e5ff c70067        	ld	L14_c,a
 862  e602               L303:
 863                     ; 365     if (uip_listenports[c] == port) {
 865  e602 5f            	clrw	x
 866  e603 97            	ld	xl,a
 867  e604 58            	sllw	x
 868  e605 de006e        	ldw	x,(_uip_listenports,x)
 869  e608 1301          	cpw	x,(OFST+1,sp)
 870  e60a 260a          	jrne	L113
 871                     ; 366       uip_listenports[c] = 0;
 873  e60c 5f            	clrw	x
 874  e60d 97            	ld	xl,a
 875  e60e 58            	sllw	x
 876  e60f 905f          	clrw	y
 877  e611 df006e        	ldw	(_uip_listenports,x),y
 878                     ; 367       return;
 880  e614 200b          	jra	L26
 881  e616               L113:
 882                     ; 364   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 884  e616 725c0067      	inc	L14_c
 887  e61a c60067        	ld	a,L14_c
 888  e61d a105          	cp	a,#5
 889  e61f 25e1          	jrult	L303
 890                     ; 370 }
 891  e621               L26:
 894  e621 85            	popw	x
 895  e622 81            	ret	
 929                     ; 374 void uip_listen(uint16_t port)
 929                     ; 375 {
 930                     	switch	.text
 931  e623               _uip_listen:
 933  e623 89            	pushw	x
 934       00000000      OFST:	set	0
 937                     ; 376   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 939  e624 4f            	clr	a
 940  e625 c70067        	ld	L14_c,a
 941  e628               L723:
 942                     ; 377     if (uip_listenports[c] == 0) {
 944  e628 5f            	clrw	x
 945  e629 97            	ld	xl,a
 946  e62a 58            	sllw	x
 947  e62b d6006f        	ld	a,(_uip_listenports+1,x)
 948  e62e da006e        	or	a,(_uip_listenports,x)
 949  e631 2607          	jrne	L533
 950                     ; 378       uip_listenports[c] = port;
 952  e633 1601          	ldw	y,(OFST+1,sp)
 953  e635 df006e        	ldw	(_uip_listenports,x),y
 954                     ; 379       return;
 956  e638 200b          	jra	L66
 957  e63a               L533:
 958                     ; 376   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 960  e63a 725c0067      	inc	L14_c
 963  e63e c60067        	ld	a,L14_c
 964  e641 a105          	cp	a,#5
 965  e643 25e3          	jrult	L723
 966                     ; 382 }
 967  e645               L66:
 970  e645 85            	popw	x
 971  e646 81            	ret	
1006                     ; 386 static void uip_add_rcv_nxt(uint16_t n)
1006                     ; 387 {
1007                     	switch	.text
1008  e647               L733_uip_add_rcv_nxt:
1012                     ; 388   uip_add32(uip_conn->rcv_nxt, n);
1014  e647 89            	pushw	x
1015  e648 ce01d5        	ldw	x,_uip_conn
1016  e64b 1c0008        	addw	x,#8
1017  e64e cde429        	call	_uip_add32
1019  e651 85            	popw	x
1020                     ; 389   uip_conn->rcv_nxt[0] = uip_acc32[0];
1022  e652 ce01d5        	ldw	x,_uip_conn
1023  e655 c600e1        	ld	a,_uip_acc32
1024  e658 e708          	ld	(8,x),a
1025                     ; 390   uip_conn->rcv_nxt[1] = uip_acc32[1];
1027  e65a c600e2        	ld	a,_uip_acc32+1
1028  e65d e709          	ld	(9,x),a
1029                     ; 391   uip_conn->rcv_nxt[2] = uip_acc32[2];
1031  e65f c600e3        	ld	a,_uip_acc32+2
1032  e662 e70a          	ld	(10,x),a
1033                     ; 392   uip_conn->rcv_nxt[3] = uip_acc32[3];
1035  e664 c600e4        	ld	a,_uip_acc32+3
1036  e667 e70b          	ld	(11,x),a
1037                     ; 393 }
1040  e669 81            	ret	
1327                     ; 397 void uip_process(uint8_t flag)
1327                     ; 398 {
1328                     	switch	.text
1329  e66a               _uip_process:
1331  e66a 88            	push	a
1332  e66b 5205          	subw	sp,#5
1333       00000005      OFST:	set	5
1336                     ; 399   register struct uip_conn *uip_connr = uip_conn;
1338  e66d ce01d5        	ldw	x,_uip_conn
1339  e670 1f04          	ldw	(OFST-1,sp),x
1341                     ; 401   uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
1343  e672 ae0211        	ldw	x,#_uip_buf+54
1344  e675 cf01d9        	ldw	_uip_appdata,x
1345  e678 cf007a        	ldw	_uip_sappdata,x
1346                     ; 405   if (flag == UIP_POLL_REQUEST) {
1348  e67b a103          	cp	a,#3
1349  e67d 2614          	jrne	L775
1350                     ; 406     if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED && !uip_outstanding(uip_connr)) {
1352  e67f 1e04          	ldw	x,(OFST-1,sp)
1353  e681 e619          	ld	a,(25,x)
1354  e683 a40f          	and	a,#15
1355  e685 a103          	cp	a,#3
1356  e687 2703ccef58    	jrne	L734
1358  e68c e611          	ld	a,(17,x)
1359  e68e ea10          	or	a,(16,x)
1360                     ; 407       uip_flags = UIP_POLL;
1361                     ; 408       UIP_APPCALL();
1363                     ; 409       goto appsend;
1365  e690 cce75e        	jp	LC001
1366  e693               L775:
1367                     ; 415   else if (flag == UIP_TIMER) {
1369  e693 7b06          	ld	a,(OFST+1,sp)
1370  e695 a102          	cp	a,#2
1371  e697 2703cce77e    	jrne	L306
1372                     ; 417     if (++iss[3] == 0) {
1374  e69c 725c006b      	inc	L73_iss+3
1375  e6a0 2610          	jrne	L706
1376                     ; 418       if (++iss[2] == 0) {
1378  e6a2 725c006a      	inc	L73_iss+2
1379  e6a6 260a          	jrne	L706
1380                     ; 419         if (++iss[1] == 0) {
1382  e6a8 725c0069      	inc	L73_iss+1
1383  e6ac 2604          	jrne	L706
1384                     ; 420           ++iss[0];
1386  e6ae 725c0068      	inc	L73_iss
1387  e6b2               L706:
1388                     ; 426     uip_len = 0;
1390  e6b2 5f            	clrw	x
1391  e6b3 cf01d7        	ldw	_uip_len,x
1392                     ; 427     uip_slen = 0;
1394  e6b6 cf0078        	ldw	_uip_slen,x
1395                     ; 433     if (uip_connr->tcpstateflags == UIP_TIME_WAIT || uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
1397  e6b9 1e04          	ldw	x,(OFST-1,sp)
1398  e6bb e619          	ld	a,(25,x)
1399  e6bd a107          	cp	a,#7
1400  e6bf 2704          	jreq	L716
1402  e6c1 a105          	cp	a,#5
1403  e6c3 260d          	jrne	L516
1404  e6c5               L716:
1405                     ; 434       ++(uip_connr->timer);
1407  e6c5 6c1a          	inc	(26,x)
1408                     ; 435       if (uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
1410  e6c7 e61a          	ld	a,(26,x)
1411  e6c9 a178          	cp	a,#120
1412  e6cb 26bc          	jrne	L734
1413                     ; 436         uip_connr->tcpstateflags = UIP_CLOSED;
1415  e6cd 6f19          	clr	(25,x)
1416  e6cf ccef58        	jra	L734
1417  e6d2               L516:
1418                     ; 439     else if (uip_connr->tcpstateflags != UIP_CLOSED) {
1420  e6d2 e619          	ld	a,(25,x)
1421  e6d4 27f9          	jreq	L734
1422                     ; 443       if (uip_outstanding(uip_connr)) {
1424  e6d6 e611          	ld	a,(17,x)
1425  e6d8 ea10          	or	a,(16,x)
1426  e6da 277c          	jreq	L726
1427                     ; 444         if (uip_connr->timer-- == 0) {
1429  e6dc e61a          	ld	a,(26,x)
1430  e6de 6a1a          	dec	(26,x)
1431  e6e0 4d            	tnz	a
1432  e6e1 26ec          	jrne	L734
1433                     ; 445           if (uip_connr->nrtx == UIP_MAXRTX
1433                     ; 446 	    || ((uip_connr->tcpstateflags == UIP_SYN_SENT
1433                     ; 447             || uip_connr->tcpstateflags == UIP_SYN_RCVD)
1433                     ; 448             && uip_connr->nrtx == UIP_MAXSYNRTX)) {
1435  e6e3 e61b          	ld	a,(27,x)
1436  e6e5 a108          	cp	a,#8
1437  e6e7 270f          	jreq	L536
1439  e6e9 e619          	ld	a,(25,x)
1440  e6eb a102          	cp	a,#2
1441  e6ed 2703          	jreq	L736
1443  e6ef 4a            	dec	a
1444  e6f0 2616          	jrne	L336
1445  e6f2               L736:
1447  e6f2 e61b          	ld	a,(27,x)
1448  e6f4 a105          	cp	a,#5
1449  e6f6 2610          	jrne	L336
1450  e6f8               L536:
1451                     ; 449             uip_connr->tcpstateflags = UIP_CLOSED;
1453  e6f8 6f19          	clr	(25,x)
1454                     ; 454             uip_flags = UIP_TIMEDOUT;
1456  e6fa 35800088      	mov	_uip_flags,#128
1457                     ; 455             UIP_APPCALL();
1459  e6fe cdf2fc        	call	_uip_TcpAppHubCall
1461                     ; 458             BUF->flags = TCP_RST | TCP_ACK;
1463  e701 3514020a      	mov	_uip_buf+47,#20
1464                     ; 459             goto tcp_send_nodata;
1466  e705 cced8b        	jra	L324
1467  e708               L336:
1468                     ; 463 	  if(uip_connr->nrtx > 4) uip_connr->nrtx = 4;
1470  e708 1e04          	ldw	x,(OFST-1,sp)
1471  e70a e61b          	ld	a,(27,x)
1472  e70c a105          	cp	a,#5
1473  e70e 2504          	jrult	L146
1476  e710 a604          	ld	a,#4
1477  e712 e71b          	ld	(27,x),a
1478  e714               L146:
1479                     ; 464 	  uip_connr->timer = (uint8_t)(UIP_RTO << uip_connr->nrtx);
1481  e714 5f            	clrw	x
1482  e715 97            	ld	xl,a
1483  e716 a603          	ld	a,#3
1484  e718 5d            	tnzw	x
1485  e719 2704          	jreq	L201
1486  e71b               L401:
1487  e71b 48            	sll	a
1488  e71c 5a            	decw	x
1489  e71d 26fc          	jrne	L401
1490  e71f               L201:
1491  e71f 1e04          	ldw	x,(OFST-1,sp)
1492  e721 e71a          	ld	(26,x),a
1493                     ; 465 	  ++(uip_connr->nrtx);
1495  e723 6c1b          	inc	(27,x)
1496                     ; 473           UIP_STAT(++uip_stat.tcp.rexmit);
1498  e725 ae00d5        	ldw	x,#_uip_stat+76
1499  e728 a601          	ld	a,#1
1500  e72a cdf3ff        	call	c_lgadc
1502                     ; 474           switch (uip_connr->tcpstateflags & UIP_TS_MASK) {
1504  e72d 1e04          	ldw	x,(OFST-1,sp)
1505  e72f e619          	ld	a,(25,x)
1506  e731 a40f          	and	a,#15
1508                     ; 488             case UIP_FIN_WAIT_1:
1508                     ; 489             case UIP_CLOSING:
1508                     ; 490             case UIP_LAST_ACK:
1508                     ; 491               /* In all these states we should retransmit a FINACK. */
1508                     ; 492               goto tcp_send_finack;
1509  e733 4a            	dec	a
1510  e734 2603cceb3a    	jreq	L173
1511  e739 a002          	sub	a,#2
1512  e73b 2711          	jreq	L753
1513  e73d 4a            	dec	a
1514  e73e 2603cced87    	jreq	LC003
1515  e743 a002          	sub	a,#2
1516  e745 27f9          	jreq	LC003
1517  e747 a002          	sub	a,#2
1518  e749 27f5          	jreq	LC003
1519  e74b ccef58        	jra	L734
1520  e74e               L753:
1521                     ; 479             case UIP_ESTABLISHED:
1521                     ; 480               /* In the ESTABLISHED state, we call upon the application
1521                     ; 481                  to do the actual retransmit after which we jump into
1521                     ; 482                  the code for sending out the packet (the apprexmit
1521                     ; 483                  label). */
1521                     ; 484               uip_flags = UIP_REXMIT;
1523  e74e 35040088      	mov	_uip_flags,#4
1524                     ; 485               UIP_APPCALL();
1526  e752 cdf2fc        	call	_uip_TcpAppHubCall
1528                     ; 486               goto apprexmit;
1530  e755 ccedce        	jra	L504
1531                     ; 488             case UIP_FIN_WAIT_1:
1531                     ; 489             case UIP_CLOSING:
1531                     ; 490             case UIP_LAST_ACK:
1531                     ; 491               /* In all these states we should retransmit a FINACK. */
1531                     ; 492               goto tcp_send_finack;
1533  e758               L726:
1534                     ; 497       else if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
1536  e758 e619          	ld	a,(25,x)
1537  e75a a40f          	and	a,#15
1538  e75c a103          	cp	a,#3
1539                     ; 499         uip_flags = UIP_POLL;
1541  e75e               LC001:
1542  e75e 26eb          	jrne	L734
1544  e760 35080088      	mov	_uip_flags,#8
1545                     ; 500         UIP_APPCALL();
1548                     ; 501         goto appsend;
1549  e764               L304:
1553  e764 cdf2fc        	call	_uip_TcpAppHubCall
1554                     ; 970         appsend:
1554                     ; 971 
1554                     ; 972         if (uip_flags & UIP_ABORT) {
1556  e767 720a008803cc  	btjf	_uip_flags,#5,L7111
1557                     ; 973           uip_slen = 0;
1559  e76f 5f            	clrw	x
1560  e770 cf0078        	ldw	_uip_slen,x
1561                     ; 974           uip_connr->tcpstateflags = UIP_CLOSED;
1563  e773 1e04          	ldw	x,(OFST-1,sp)
1564                     ; 975           BUF->flags = TCP_RST | TCP_ACK;
1566  e775 3514020a      	mov	_uip_buf+47,#20
1567  e779 6f19          	clr	(25,x)
1568                     ; 976           goto tcp_send_nodata;
1570  e77b cced8b        	jra	L324
1571  e77e               L306:
1572                     ; 508   UIP_STAT(++uip_stat.ip.recv);
1574  e77e ae008d        	ldw	x,#_uip_stat+4
1575  e781 a601          	ld	a,#1
1576  e783 cdf3ff        	call	c_lgadc
1578                     ; 513   if (BUF->vhl != 0x45) { /* IP version and header length. */
1580  e786 c601e9        	ld	a,_uip_buf+14
1581  e789 a145          	cp	a,#69
1582  e78b 2713          	jreq	L356
1583                     ; 514     UIP_STAT(++uip_stat.ip.drop);
1585  e78d ae0089        	ldw	x,#_uip_stat
1586  e790 a601          	ld	a,#1
1587  e792 cdf3ff        	call	c_lgadc
1589                     ; 515     UIP_STAT(++uip_stat.ip.vhlerr);
1591  e795 ae0095        	ldw	x,#_uip_stat+12
1592  e798 a601          	ld	a,#1
1593  e79a cdf3ff        	call	c_lgadc
1595                     ; 516     goto drop;
1597  e79d ccef58        	jra	L734
1598  e7a0               L356:
1599                     ; 526   if ((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
1601  e7a0 c601eb        	ld	a,_uip_buf+16
1602  e7a3 5f            	clrw	x
1603  e7a4 97            	ld	xl,a
1604  e7a5 4f            	clr	a
1605  e7a6 cb01ec        	add	a,_uip_buf+17
1606  e7a9 2401          	jrnc	L211
1607  e7ab 5c            	incw	x
1608  e7ac               L211:
1609  e7ac 02            	rlwa	x,a
1610  e7ad c301d7        	cpw	x,_uip_len
1611  e7b0 22eb          	jrugt	L734
1612                     ; 527     uip_len = (BUF->len[0] << 8) + BUF->len[1];
1614  e7b2 c601eb        	ld	a,_uip_buf+16
1615  e7b5 5f            	clrw	x
1616  e7b6 97            	ld	xl,a
1617  e7b7 4f            	clr	a
1618  e7b8 cb01ec        	add	a,_uip_buf+17
1619  e7bb 2401          	jrnc	L411
1620  e7bd 5c            	incw	x
1621  e7be               L411:
1622  e7be c701d8        	ld	_uip_len+1,a
1623  e7c1 9f            	ld	a,xl
1624  e7c2 c701d7        	ld	_uip_len,a
1626                     ; 534   if ((BUF->ipoffset[0] & 0x3f) != 0 || BUF->ipoffset[1] != 0) {
1628  e7c5 c601ef        	ld	a,_uip_buf+20
1629  e7c8 a53f          	bcp	a,#63
1630  e7ca 2605          	jrne	L366
1632  e7cc c601f0        	ld	a,_uip_buf+21
1633  e7cf 2713          	jreq	L166
1634  e7d1               L366:
1635                     ; 535     UIP_STAT(++uip_stat.ip.drop);
1637  e7d1 ae0089        	ldw	x,#_uip_stat
1638  e7d4 a601          	ld	a,#1
1639  e7d6 cdf3ff        	call	c_lgadc
1641                     ; 536     UIP_STAT(++uip_stat.ip.fragerr);
1643  e7d9 ae00a1        	ldw	x,#_uip_stat+24
1644  e7dc a601          	ld	a,#1
1645  e7de cdf3ff        	call	c_lgadc
1647                     ; 537     goto drop;
1649  e7e1 ccef58        	jra	L734
1650  e7e4               L166:
1651                     ; 541     if (!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
1653  e7e4 ce01f9        	ldw	x,_uip_buf+30
1654  e7e7 c30084        	cpw	x,_uip_hostaddr
1655  e7ea 2608          	jrne	L766
1657  e7ec ce01fb        	ldw	x,_uip_buf+32
1658  e7ef c30086        	cpw	x,_uip_hostaddr+2
1659  e7f2 270b          	jreq	L566
1660  e7f4               L766:
1661                     ; 542       UIP_STAT(++uip_stat.ip.drop);
1663  e7f4 ae0089        	ldw	x,#_uip_stat
1664  e7f7 a601          	ld	a,#1
1665  e7f9 cdf3ff        	call	c_lgadc
1667                     ; 543       goto drop;
1669  e7fc ccef58        	jra	L734
1670  e7ff               L566:
1671                     ; 546   if (uip_ipchksum() != 0xffff) { /* Compute and check the IP header checksum. */
1673  e7ff cde4e0        	call	_uip_ipchksum
1675  e802 5c            	incw	x
1676  e803 2713          	jreq	L176
1677                     ; 547     UIP_STAT(++uip_stat.ip.drop);
1679  e805 ae0089        	ldw	x,#_uip_stat
1680  e808 a601          	ld	a,#1
1681  e80a cdf3ff        	call	c_lgadc
1683                     ; 548     UIP_STAT(++uip_stat.ip.chkerr);
1685  e80d ae00a5        	ldw	x,#_uip_stat+28
1686  e810 a601          	ld	a,#1
1687  e812 cdf3ff        	call	c_lgadc
1689                     ; 549     goto drop;
1691  e815 ccef58        	jra	L734
1692  e818               L176:
1693                     ; 552   if (BUF->proto == UIP_PROTO_TCP) {
1695  e818 c601f2        	ld	a,_uip_buf+23
1696  e81b a106          	cp	a,#6
1697  e81d 2624          	jrne	L376
1698                     ; 554     goto tcp_input;
1699                     ; 601   tcp_input:
1699                     ; 602   UIP_STAT(++uip_stat.tcp.recv);
1701  e81f ae00c1        	ldw	x,#_uip_stat+56
1702  e822 a601          	ld	a,#1
1703  e824 cdf3ff        	call	c_lgadc
1705                     ; 606   if (uip_tcpchksum() != 0xffff) { /* Compute and check the TCP checksum. */
1707  e827 cde545        	call	_uip_tcpchksum
1709  e82a 5c            	incw	x
1710  e82b 2603cce8bc    	jreq	L517
1711                     ; 607     UIP_STAT(++uip_stat.tcp.drop);
1713  e830 ae00bd        	ldw	x,#_uip_stat+52
1714  e833 a601          	ld	a,#1
1715  e835 cdf3ff        	call	c_lgadc
1717                     ; 608     UIP_STAT(++uip_stat.tcp.chkerr);
1719  e838 ae00c9        	ldw	x,#_uip_stat+64
1720  e83b a601          	ld	a,#1
1721  e83d cdf3ff        	call	c_lgadc
1723                     ; 609     goto drop;
1725  e840 ccef58        	jra	L734
1726  e843               L376:
1727                     ; 563   if (BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from here. */
1729  e843 4a            	dec	a
1730  e844 2713          	jreq	L576
1731                     ; 564     UIP_STAT(++uip_stat.ip.drop);
1733  e846 ae0089        	ldw	x,#_uip_stat
1734  e849 a601          	ld	a,#1
1735  e84b cdf3ff        	call	c_lgadc
1737                     ; 565     UIP_STAT(++uip_stat.ip.protoerr);
1739  e84e ae00a9        	ldw	x,#_uip_stat+32
1740  e851 a601          	ld	a,#1
1741  e853 cdf3ff        	call	c_lgadc
1743                     ; 566     goto drop;
1745  e856 ccef58        	jra	L734
1746  e859               L576:
1747                     ; 569   UIP_STAT(++uip_stat.icmp.recv);
1749  e859 ae00b1        	ldw	x,#_uip_stat+40
1750  e85c 4c            	inc	a
1751  e85d cdf3ff        	call	c_lgadc
1753                     ; 574   if (ICMPBUF->type != ICMP_ECHO) {
1755  e860 c601fd        	ld	a,_uip_buf+34
1756  e863 a108          	cp	a,#8
1757  e865 2713          	jreq	L776
1758                     ; 575     UIP_STAT(++uip_stat.icmp.drop);
1760  e867 ae00ad        	ldw	x,#_uip_stat+36
1761  e86a a601          	ld	a,#1
1762  e86c cdf3ff        	call	c_lgadc
1764                     ; 576     UIP_STAT(++uip_stat.icmp.typeerr);
1766  e86f ae00b9        	ldw	x,#_uip_stat+48
1767  e872 a601          	ld	a,#1
1768  e874 cdf3ff        	call	c_lgadc
1770                     ; 577     goto drop;
1772  e877 ccef58        	jra	L734
1773  e87a               L776:
1774                     ; 580   ICMPBUF->type = ICMP_ECHO_REPLY;
1776  e87a 725f01fd      	clr	_uip_buf+34
1777                     ; 582   if (ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
1779  e87e ce01ff        	ldw	x,_uip_buf+36
1780  e881 a3f7ff        	cpw	x,#63487
1781  e884 2505          	jrult	L107
1782                     ; 583     ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
1784  e886 1c0801        	addw	x,#2049
1786  e889 2003          	jra	L507
1787  e88b               L107:
1788                     ; 586     ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
1790  e88b 1c0800        	addw	x,#2048
1791  e88e               L507:
1792  e88e cf01ff        	ldw	_uip_buf+36,x
1793                     ; 590   uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
1795  e891 ce01f5        	ldw	x,_uip_buf+26
1796  e894 cf01f9        	ldw	_uip_buf+30,x
1799  e897 ce01f7        	ldw	x,_uip_buf+28
1800  e89a cf01fb        	ldw	_uip_buf+32,x
1801                     ; 591   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
1803  e89d ce0084        	ldw	x,_uip_hostaddr
1804  e8a0 cf01f5        	ldw	_uip_buf+26,x
1807  e8a3 ce0086        	ldw	x,_uip_hostaddr+2
1808  e8a6 cf01f7        	ldw	_uip_buf+28,x
1809                     ; 593   UIP_STAT(++uip_stat.icmp.sent);
1811  e8a9 ae00b5        	ldw	x,#_uip_stat+44
1813                     ; 594   goto send;
1814  e8ac               L534:
1815  e8ac a601          	ld	a,#1
1816  e8ae cdf3ff        	call	c_lgadc
1817                     ; 1175   send:
1817                     ; 1176 
1817                     ; 1177   UIP_STAT(++uip_stat.ip.sent);
1819  e8b1 ae0091        	ldw	x,#_uip_stat+8
1820  e8b4 a601          	ld	a,#1
1821  e8b6 cdf3ff        	call	c_lgadc
1823                     ; 1179   uip_flags = 0;
1824                     ; 1181   return;
1826  e8b9 ccef5c        	jra	L202
1827  e8bc               L517:
1828                     ; 614   for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1]; ++uip_connr) {
1830  e8bc ae00e5        	ldw	x,#_uip_conns
1832  e8bf 204d          	jra	L327
1833  e8c1               L717:
1834                     ; 615     if (uip_connr->tcpstateflags != UIP_CLOSED
1834                     ; 616       && BUF->destport == uip_connr->lport
1834                     ; 617       && BUF->srcport == uip_connr->rport
1834                     ; 618       && uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
1836  e8c1 e619          	ld	a,(25,x)
1837  e8c3 2746          	jreq	L727
1839  e8c5 9093          	ldw	y,x
1840  e8c7 90ee04        	ldw	y,(4,y)
1841  e8ca 90c301ff      	cpw	y,_uip_buf+36
1842  e8ce 263b          	jrne	L727
1844  e8d0 9093          	ldw	y,x
1845  e8d2 90ee06        	ldw	y,(6,y)
1846  e8d5 90c301fd      	cpw	y,_uip_buf+34
1847  e8d9 2630          	jrne	L727
1849  e8db 9093          	ldw	y,x
1850  e8dd 90fe          	ldw	y,(y)
1851  e8df 90c301f5      	cpw	y,_uip_buf+26
1852  e8e3 2626          	jrne	L727
1854  e8e5 9093          	ldw	y,x
1855  e8e7 90ee02        	ldw	y,(2,y)
1856  e8ea 90c301f7      	cpw	y,_uip_buf+28
1857  e8ee 261b          	jrne	L727
1858                     ; 619       goto found;
1859                     ; 799   found:
1859                     ; 800   uip_conn = uip_connr;
1861  e8f0 cf01d5        	ldw	_uip_conn,x
1862                     ; 801   uip_flags = 0;
1864  e8f3 725f0088      	clr	_uip_flags
1865                     ; 806   if (BUF->flags & TCP_RST) {
1867  e8f7 7204020a03cc  	btjf	_uip_buf+47,#2,L7301
1868                     ; 807     uip_connr->tcpstateflags = UIP_CLOSED;
1870  e8ff 6f19          	clr	(25,x)
1871                     ; 808     uip_flags = UIP_ABORT;
1873  e901 35200088      	mov	_uip_flags,#32
1874                     ; 809     UIP_APPCALL();
1876  e905 cdf2fc        	call	_uip_TcpAppHubCall
1878                     ; 810     goto drop;
1880  e908 ccef58        	jra	L734
1881  e90b               L727:
1882                     ; 614   for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1]; ++uip_connr) {
1884  e90b 1c0028        	addw	x,#40
1885  e90e               L327:
1886  e90e 1f04          	ldw	(OFST-1,sp),x
1890  e910 a301ad        	cpw	x,#_uip_conns+200
1891  e913 23ac          	jrule	L717
1892                     ; 627   if ((BUF->flags & TCP_CTL) != TCP_SYN) {
1894  e915 c6020a        	ld	a,_uip_buf+47
1895  e918 a43f          	and	a,#63
1896  e91a a102          	cp	a,#2
1897  e91c 2647          	jrne	L563
1898                     ; 628     goto reset;
1900                     ; 631   tmp16 = BUF->destport;
1902  e91e ce01ff        	ldw	x,_uip_buf+36
1903  e921 cf0064        	ldw	L54_tmp16,x
1904                     ; 633   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1906  e924 4f            	clr	a
1907  e925 c70067        	ld	L14_c,a
1908  e928               L337:
1909                     ; 634     if (tmp16 == uip_listenports[c]) goto found_listen;
1911  e928 5f            	clrw	x
1912  e929 97            	ld	xl,a
1913  e92a 58            	sllw	x
1914  e92b 9093          	ldw	y,x
1915  e92d 90de006e      	ldw	y,(_uip_listenports,y)
1916  e931 90c30064      	cpw	y,L54_tmp16
1917  e935 261b          	jrne	L147
1919                     ; 699   found_listen:
1919                     ; 700   /* First we check if there are any connections avaliable. Unused
1919                     ; 701      connections are kept in the same table as used connections, but
1919                     ; 702      unused ones have the tcpstate set to CLOSED. Also, connections in
1919                     ; 703      TIME_WAIT are kept track of and we'll use the oldest one if no
1919                     ; 704      CLOSED connections are found. Thanks to Eddie C. Dost for a very
1919                     ; 705      nice algorithm for the TIME_WAIT search. */
1919                     ; 706   uip_connr = 0;
1921  e937 5f            	clrw	x
1922  e938 1f04          	ldw	(OFST-1,sp),x
1924                     ; 707   for (c = 0; c < UIP_CONNS; ++c) {
1926  e93a 4f            	clr	a
1927  e93b c70067        	ld	L14_c,a
1928  e93e               L367:
1929                     ; 708     if (uip_conns[c].tcpstateflags == UIP_CLOSED) {
1931  e93e 97            	ld	xl,a
1932  e93f a628          	ld	a,#40
1933  e941 42            	mul	x,a
1934  e942 d600fe        	ld	a,(_uip_conns+25,x)
1935  e945 2703cce9ff    	jrne	L177
1936                     ; 709       uip_connr = &uip_conns[c];
1938  e94a 1c00e5        	addw	x,#_uip_conns
1939  e94d 1f04          	ldw	(OFST-1,sp),x
1941                     ; 710       break;
1943  e94f ccea31        	jra	L767
1944  e952               L147:
1945                     ; 633   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1947  e952 725c0067      	inc	L14_c
1950  e956 c60067        	ld	a,L14_c
1951  e959 a105          	cp	a,#5
1952  e95b 25cb          	jrult	L337
1953                     ; 638   UIP_STAT(++uip_stat.tcp.synrst);
1955  e95d ae00dd        	ldw	x,#_uip_stat+84
1956  e960 a601          	ld	a,#1
1957  e962 cdf3ff        	call	c_lgadc
1959  e965               L563:
1960                     ; 639   reset:
1960                     ; 640 
1960                     ; 641   /* We do not send resets in response to resets. */
1960                     ; 642   if (BUF->flags & TCP_RST) {
1962  e965 7204020a9e    	btjt	_uip_buf+47,#2,L734
1963                     ; 643     goto drop;
1965                     ; 646   UIP_STAT(++uip_stat.tcp.rst);
1967  e96a ae00d1        	ldw	x,#_uip_stat+72
1968  e96d a601          	ld	a,#1
1969  e96f cdf3ff        	call	c_lgadc
1971                     ; 648   BUF->flags = TCP_RST | TCP_ACK;
1973  e972 3514020a      	mov	_uip_buf+47,#20
1974                     ; 649   uip_len = UIP_IPTCPH_LEN;
1976  e976 ae0028        	ldw	x,#40
1977  e979 cf01d7        	ldw	_uip_len,x
1978                     ; 650   BUF->tcpoffset = 5 << 4;
1980  e97c 35500209      	mov	_uip_buf+46,#80
1981                     ; 653   c = BUF->seqno[3];
1983  e980 5502040067    	mov	L14_c,_uip_buf+41
1984                     ; 654   BUF->seqno[3] = BUF->ackno[3];
1986  e985 5502080204    	mov	_uip_buf+41,_uip_buf+45
1987                     ; 655   BUF->ackno[3] = c;
1989  e98a 5500670208    	mov	_uip_buf+45,L14_c
1990                     ; 657   c = BUF->seqno[2];
1992  e98f 5502030067    	mov	L14_c,_uip_buf+40
1993                     ; 658   BUF->seqno[2] = BUF->ackno[2];
1995  e994 5502070203    	mov	_uip_buf+40,_uip_buf+44
1996                     ; 659   BUF->ackno[2] = c;
1998  e999 5500670207    	mov	_uip_buf+44,L14_c
1999                     ; 661   c = BUF->seqno[1];
2001  e99e 5502020067    	mov	L14_c,_uip_buf+39
2002                     ; 662   BUF->seqno[1] = BUF->ackno[1];
2004  e9a3 5502060202    	mov	_uip_buf+39,_uip_buf+43
2005                     ; 663   BUF->ackno[1] = c;
2007  e9a8 5500670206    	mov	_uip_buf+43,L14_c
2008                     ; 665   c = BUF->seqno[0];
2010  e9ad 5502010067    	mov	L14_c,_uip_buf+38
2011                     ; 666   BUF->seqno[0] = BUF->ackno[0];
2013  e9b2 5502050201    	mov	_uip_buf+38,_uip_buf+42
2014                     ; 667   BUF->ackno[0] = c;
2016  e9b7 5500670205    	mov	_uip_buf+42,L14_c
2017                     ; 672   if (++BUF->ackno[3] == 0) {
2019  e9bc 725c0208      	inc	_uip_buf+45
2020  e9c0 2610          	jrne	L547
2021                     ; 673     if (++BUF->ackno[2] == 0) {
2023  e9c2 725c0207      	inc	_uip_buf+44
2024  e9c6 260a          	jrne	L547
2025                     ; 674       if (++BUF->ackno[1] == 0) {
2027  e9c8 725c0206      	inc	_uip_buf+43
2028  e9cc 2604          	jrne	L547
2029                     ; 675         ++BUF->ackno[0];
2031  e9ce 725c0205      	inc	_uip_buf+42
2032  e9d2               L547:
2033                     ; 681   tmp16 = BUF->srcport;
2035  e9d2 ce01fd        	ldw	x,_uip_buf+34
2036  e9d5 cf0064        	ldw	L54_tmp16,x
2037                     ; 682   BUF->srcport = BUF->destport;
2039  e9d8 ce01ff        	ldw	x,_uip_buf+36
2040  e9db cf01fd        	ldw	_uip_buf+34,x
2041                     ; 683   BUF->destport = tmp16;
2043  e9de ce0064        	ldw	x,L54_tmp16
2044  e9e1 cf01ff        	ldw	_uip_buf+36,x
2045                     ; 686   uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
2047  e9e4 ce01f5        	ldw	x,_uip_buf+26
2048  e9e7 cf01f9        	ldw	_uip_buf+30,x
2051  e9ea ce01f7        	ldw	x,_uip_buf+28
2052  e9ed cf01fb        	ldw	_uip_buf+32,x
2053                     ; 687   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
2055  e9f0 ce0084        	ldw	x,_uip_hostaddr
2056  e9f3 cf01f5        	ldw	_uip_buf+26,x
2059  e9f6 ce0086        	ldw	x,_uip_hostaddr+2
2060  e9f9 cf01f7        	ldw	_uip_buf+28,x
2061                     ; 690   goto tcp_send_noconn;
2063  e9fc ccef05        	jra	L134
2064  e9ff               L177:
2065                     ; 712     if (uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
2067  e9ff a107          	cp	a,#7
2068  ea01 2620          	jrne	L377
2069                     ; 713       if (uip_connr == 0 || uip_conns[c].timer > uip_connr->timer) {
2071  ea03 1e04          	ldw	x,(OFST-1,sp)
2072  ea05 2710          	jreq	L777
2074  ea07 c60067        	ld	a,L14_c
2075  ea0a 97            	ld	xl,a
2076  ea0b a628          	ld	a,#40
2077  ea0d 42            	mul	x,a
2078  ea0e d600ff        	ld	a,(_uip_conns+26,x)
2079  ea11 1e04          	ldw	x,(OFST-1,sp)
2080  ea13 e11a          	cp	a,(26,x)
2081  ea15 230c          	jrule	L377
2082  ea17               L777:
2083                     ; 714         uip_connr = &uip_conns[c];
2085  ea17 c60067        	ld	a,L14_c
2086  ea1a 97            	ld	xl,a
2087  ea1b a628          	ld	a,#40
2088  ea1d 42            	mul	x,a
2089  ea1e 1c00e5        	addw	x,#_uip_conns
2090  ea21 1f04          	ldw	(OFST-1,sp),x
2092  ea23               L377:
2093                     ; 707   for (c = 0; c < UIP_CONNS; ++c) {
2095  ea23 725c0067      	inc	L14_c
2098  ea27 c60067        	ld	a,L14_c
2099  ea2a a106          	cp	a,#6
2100  ea2c 2403cce93e    	jrult	L367
2101  ea31               L767:
2102                     ; 719   if (uip_connr == 0) {
2104  ea31 1e04          	ldw	x,(OFST-1,sp)
2105  ea33 260b          	jrne	L1001
2106                     ; 723     UIP_STAT(++uip_stat.tcp.syndrop);
2108  ea35 ae00d9        	ldw	x,#_uip_stat+80
2109  ea38 a601          	ld	a,#1
2110  ea3a cdf3ff        	call	c_lgadc
2112                     ; 724     goto drop;
2114  ea3d ccef58        	jra	L734
2115  ea40               L1001:
2116                     ; 726   uip_conn = uip_connr;
2118  ea40 cf01d5        	ldw	_uip_conn,x
2119                     ; 729   uip_connr->rto = uip_connr->timer = UIP_RTO;
2121  ea43 a603          	ld	a,#3
2122  ea45 e71a          	ld	(26,x),a
2123  ea47 e718          	ld	(24,x),a
2124                     ; 730   uip_connr->sa = 0;
2126  ea49 6f16          	clr	(22,x)
2127                     ; 731   uip_connr->sv = 4;
2129  ea4b 4c            	inc	a
2130  ea4c e717          	ld	(23,x),a
2131                     ; 732   uip_connr->nrtx = 0;
2133  ea4e 6f1b          	clr	(27,x)
2134                     ; 733   uip_connr->lport = BUF->destport;
2136  ea50 90ce01ff      	ldw	y,_uip_buf+36
2137  ea54 ef04          	ldw	(4,x),y
2138                     ; 734   uip_connr->rport = BUF->srcport;
2140  ea56 90ce01fd      	ldw	y,_uip_buf+34
2141  ea5a ef06          	ldw	(6,x),y
2142                     ; 735   uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
2144  ea5c 90ce01f5      	ldw	y,_uip_buf+26
2145  ea60 ff            	ldw	(x),y
2148  ea61 90ce01f7      	ldw	y,_uip_buf+28
2149  ea65 ef02          	ldw	(2,x),y
2150                     ; 736   uip_connr->tcpstateflags = UIP_SYN_RCVD;
2152  ea67 a601          	ld	a,#1
2153  ea69 e719          	ld	(25,x),a
2154                     ; 738   uip_connr->snd_nxt[0] = iss[0];
2156  ea6b c60068        	ld	a,L73_iss
2157  ea6e e70c          	ld	(12,x),a
2158                     ; 739   uip_connr->snd_nxt[1] = iss[1];
2160  ea70 c60069        	ld	a,L73_iss+1
2161  ea73 e70d          	ld	(13,x),a
2162                     ; 740   uip_connr->snd_nxt[2] = iss[2];
2164  ea75 c6006a        	ld	a,L73_iss+2
2165  ea78 e70e          	ld	(14,x),a
2166                     ; 741   uip_connr->snd_nxt[3] = iss[3];
2168  ea7a c6006b        	ld	a,L73_iss+3
2169  ea7d e70f          	ld	(15,x),a
2170                     ; 742   uip_connr->len = 1;
2172  ea7f 90ae0001      	ldw	y,#1
2173  ea83 ef10          	ldw	(16,x),y
2174                     ; 745   uip_connr->rcv_nxt[3] = BUF->seqno[3];
2176  ea85 c60204        	ld	a,_uip_buf+41
2177  ea88 e70b          	ld	(11,x),a
2178                     ; 746   uip_connr->rcv_nxt[2] = BUF->seqno[2];
2180  ea8a c60203        	ld	a,_uip_buf+40
2181  ea8d e70a          	ld	(10,x),a
2182                     ; 747   uip_connr->rcv_nxt[1] = BUF->seqno[1];
2184  ea8f c60202        	ld	a,_uip_buf+39
2185  ea92 e709          	ld	(9,x),a
2186                     ; 748   uip_connr->rcv_nxt[0] = BUF->seqno[0];
2188  ea94 c60201        	ld	a,_uip_buf+38
2189  ea97 e708          	ld	(8,x),a
2190                     ; 749   uip_add_rcv_nxt(1);
2192  ea99 ae0001        	ldw	x,#1
2193  ea9c cde647        	call	L733_uip_add_rcv_nxt
2195                     ; 752   if ((BUF->tcpoffset & 0xf0) > 0x50) {
2197  ea9f c60209        	ld	a,_uip_buf+46
2198  eaa2 a4f0          	and	a,#240
2199  eaa4 a151          	cp	a,#81
2200  eaa6 2403cceb3a    	jrult	L173
2201                     ; 753     for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2;) {
2203  eaab 725f0067      	clr	L14_c
2205  eaaf 206b          	jra	L5101
2206  eab1               L1101:
2207                     ; 754       opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
2209  eab1 5f            	clrw	x
2210  eab2 97            	ld	xl,a
2211  eab3 d60211        	ld	a,(_uip_buf+54,x)
2212  eab6 c70066        	ld	L34_opt,a
2213                     ; 755       if (opt == TCP_OPT_END) {
2215  eab9 277f          	jreq	L173
2216                     ; 757         break;
2218                     ; 759       else if (opt == TCP_OPT_NOOP) {
2220  eabb a101          	cp	a,#1
2221  eabd 2606          	jrne	L5201
2222                     ; 760         ++c;
2224  eabf 725c0067      	inc	L14_c
2226  eac3 2057          	jra	L5101
2227  eac5               L5201:
2228                     ; 763       else if (opt == TCP_OPT_MSS
2228                     ; 764         && uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
2230  eac5 a102          	cp	a,#2
2231  eac7 2640          	jrne	L1301
2233  eac9 c60067        	ld	a,L14_c
2234  eacc 5f            	clrw	x
2235  eacd 97            	ld	xl,a
2236  eace d60212        	ld	a,(_uip_buf+55,x)
2237  ead1 a104          	cp	a,#4
2238  ead3 2634          	jrne	L1301
2239                     ; 766         tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8)
2239                     ; 767 	        | (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
2241  ead5 c60067        	ld	a,L14_c
2242  ead8 5f            	clrw	x
2243  ead9 97            	ld	xl,a
2244  eada d60214        	ld	a,(_uip_buf+57,x)
2245  eadd 5f            	clrw	x
2246  eade 97            	ld	xl,a
2247  eadf 1f01          	ldw	(OFST-4,sp),x
2249  eae1 5f            	clrw	x
2250  eae2 c60067        	ld	a,L14_c
2251  eae5 97            	ld	xl,a
2252  eae6 d60213        	ld	a,(_uip_buf+56,x)
2253  eae9 5f            	clrw	x
2254  eaea 97            	ld	xl,a
2255  eaeb 7b02          	ld	a,(OFST-3,sp)
2256  eaed 01            	rrwa	x,a
2257  eaee 1a01          	or	a,(OFST-4,sp)
2258  eaf0 01            	rrwa	x,a
2259  eaf1 cf0064        	ldw	L54_tmp16,x
2260                     ; 768         uip_connr->initialmss = uip_connr->mss = tmp16 > UIP_TCP_MSS ? UIP_TCP_MSS : tmp16;
2262  eaf4 a30223        	cpw	x,#547
2263  eaf7 2503          	jrult	L421
2264  eaf9 ae0222        	ldw	x,#546
2265  eafc               L421:
2266  eafc 1604          	ldw	y,(OFST-1,sp)
2267  eafe 90ef12        	ldw	(18,y),x
2268  eb01 93            	ldw	x,y
2269  eb02 90ee12        	ldw	y,(18,y)
2270  eb05 ef14          	ldw	(20,x),y
2271                     ; 771         break;
2273  eb07 2031          	jra	L173
2274  eb09               L1301:
2275                     ; 775         if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
2277  eb09 c60067        	ld	a,L14_c
2278  eb0c 5f            	clrw	x
2279  eb0d 97            	ld	xl,a
2280  eb0e 724d0212      	tnz	(_uip_buf+55,x)
2281  eb12 2726          	jreq	L173
2282                     ; 778           break;
2284                     ; 780         c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
2286  eb14 5f            	clrw	x
2287  eb15 97            	ld	xl,a
2288  eb16 db0212        	add	a,(_uip_buf+55,x)
2289  eb19 c70067        	ld	L14_c,a
2290  eb1c               L5101:
2291                     ; 753     for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2;) {
2293  eb1c c60209        	ld	a,_uip_buf+46
2294  eb1f 4e            	swap	a
2295  eb20 a40f          	and	a,#15
2296  eb22 5f            	clrw	x
2297  eb23 97            	ld	xl,a
2298  eb24 58            	sllw	x
2299  eb25 58            	sllw	x
2300  eb26 1d0014        	subw	x,#20
2301  eb29 c60067        	ld	a,L14_c
2302  eb2c 905f          	clrw	y
2303  eb2e 9097          	ld	yl,a
2304  eb30 90bf07        	ldw	c_y,y
2305  eb33 b307          	cpw	x,c_y
2306  eb35 2d03cceab1    	jrsgt	L1101
2307  eb3a               L173:
2308                     ; 786   tcp_send_synack:
2308                     ; 787   BUF->flags = TCP_SYN | TCP_ACK;
2310  eb3a 3512020a      	mov	_uip_buf+47,#18
2311                     ; 790   BUF->optdata[0] = TCP_OPT_MSS;
2313  eb3e 35020211      	mov	_uip_buf+54,#2
2314                     ; 791   BUF->optdata[1] = TCP_OPT_MSS_LEN;
2316  eb42 35040212      	mov	_uip_buf+55,#4
2317                     ; 792   BUF->optdata[2] = (UIP_TCP_MSS) / 256;
2319  eb46 35020213      	mov	_uip_buf+56,#2
2320                     ; 793   BUF->optdata[3] = (UIP_TCP_MSS) & 255;
2322  eb4a 35220214      	mov	_uip_buf+57,#34
2323                     ; 794   uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
2325  eb4e ae002c        	ldw	x,#44
2326  eb51 cf01d7        	ldw	_uip_len,x
2327                     ; 795   BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
2329  eb54 35600209      	mov	_uip_buf+46,#96
2330                     ; 796   goto tcp_send;
2332  eb58 ccee05        	jra	L724
2333  eb5b               L7301:
2334                     ; 813   c = (uint8_t)((BUF->tcpoffset >> 4) << 2);
2336  eb5b c60209        	ld	a,_uip_buf+46
2337  eb5e 4e            	swap	a
2338  eb5f a40f          	and	a,#15
2339  eb61 48            	sll	a
2340  eb62 48            	sll	a
2341  eb63 c70067        	ld	L14_c,a
2342                     ; 817   uip_len = uip_len - c - UIP_IPH_LEN;
2344  eb66 c601d7        	ld	a,_uip_len
2345  eb69 97            	ld	xl,a
2346  eb6a c601d8        	ld	a,_uip_len+1
2347  eb6d c00067        	sub	a,L14_c
2348  eb70 2401          	jrnc	L231
2349  eb72 5a            	decw	x
2350  eb73               L231:
2351  eb73 02            	rlwa	x,a
2352  eb74 1d0014        	subw	x,#20
2353  eb77 cf01d7        	ldw	_uip_len,x
2354                     ; 822   if (!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT)
2354                     ; 823     && ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
2356  eb7a 1e04          	ldw	x,(OFST-1,sp)
2357  eb7c e619          	ld	a,(25,x)
2358  eb7e a40f          	and	a,#15
2359  eb80 a102          	cp	a,#2
2360  eb82 2609          	jrne	L3401
2362  eb84 c6020a        	ld	a,_uip_buf+47
2363  eb87 a43f          	and	a,#63
2364  eb89 a112          	cp	a,#18
2365  eb8b 272d          	jreq	L1401
2366  eb8d               L3401:
2367                     ; 824     if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0))
2367                     ; 825       && (BUF->seqno[0] != uip_connr->rcv_nxt[0]
2367                     ; 826       || BUF->seqno[1] != uip_connr->rcv_nxt[1]
2367                     ; 827       || BUF->seqno[2] != uip_connr->rcv_nxt[2]
2367                     ; 828       || BUF->seqno[3] != uip_connr->rcv_nxt[3])) {
2369  eb8d ce01d7        	ldw	x,_uip_len
2370  eb90 2607          	jrne	L7401
2372  eb92 c6020a        	ld	a,_uip_buf+47
2373  eb95 a503          	bcp	a,#3
2374  eb97 2721          	jreq	L1401
2375  eb99               L7401:
2377  eb99 1e04          	ldw	x,(OFST-1,sp)
2378  eb9b e608          	ld	a,(8,x)
2379  eb9d c10201        	cp	a,_uip_buf+38
2380  eba0 2703cceef6    	jrne	L124
2382  eba5 e609          	ld	a,(9,x)
2383  eba7 c10202        	cp	a,_uip_buf+39
2384  ebaa 26f6          	jrne	L124
2386  ebac e60a          	ld	a,(10,x)
2387  ebae c10203        	cp	a,_uip_buf+40
2388  ebb1 26ef          	jrne	L124
2390  ebb3 e60b          	ld	a,(11,x)
2391  ebb5 c10204        	cp	a,_uip_buf+41
2392  ebb8 26e8          	jrne	L124
2393  ebba               L1401:
2394                     ; 837   if ((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
2396  ebba 7208020a03cc  	btjf	_uip_buf+47,#4,L7501
2398  ebc2 1e04          	ldw	x,(OFST-1,sp)
2399  ebc4 e611          	ld	a,(17,x)
2400  ebc6 ea10          	or	a,(16,x)
2401  ebc8 27f5          	jreq	L7501
2402                     ; 838     uip_add32(uip_connr->snd_nxt, uip_connr->len);
2404  ebca ee10          	ldw	x,(16,x)
2405  ebcc 89            	pushw	x
2406  ebcd 1e06          	ldw	x,(OFST+1,sp)
2407  ebcf 1c000c        	addw	x,#12
2408  ebd2 cde429        	call	_uip_add32
2410  ebd5 c60205        	ld	a,_uip_buf+42
2411  ebd8 c100e1        	cp	a,_uip_acc32
2412  ebdb 85            	popw	x
2413                     ; 840     if (BUF->ackno[0] == uip_acc32[0]
2413                     ; 841       && BUF->ackno[1] == uip_acc32[1]
2413                     ; 842       && BUF->ackno[2] == uip_acc32[2]
2413                     ; 843       && BUF->ackno[3] == uip_acc32[3]) {
2415  ebdc 26e1          	jrne	L7501
2417  ebde c60206        	ld	a,_uip_buf+43
2418  ebe1 c100e2        	cp	a,_uip_acc32+1
2419  ebe4 26d9          	jrne	L7501
2421  ebe6 c60207        	ld	a,_uip_buf+44
2422  ebe9 c100e3        	cp	a,_uip_acc32+2
2423  ebec 26d1          	jrne	L7501
2425  ebee c60208        	ld	a,_uip_buf+45
2426  ebf1 c100e4        	cp	a,_uip_acc32+3
2427  ebf4 2679          	jrne	L7501
2428                     ; 845       uip_connr->snd_nxt[0] = uip_acc32[0];
2430  ebf6 1e04          	ldw	x,(OFST-1,sp)
2431  ebf8 c600e1        	ld	a,_uip_acc32
2432  ebfb e70c          	ld	(12,x),a
2433                     ; 846       uip_connr->snd_nxt[1] = uip_acc32[1];
2435  ebfd c600e2        	ld	a,_uip_acc32+1
2436  ec00 e70d          	ld	(13,x),a
2437                     ; 847       uip_connr->snd_nxt[2] = uip_acc32[2];
2439  ec02 c600e3        	ld	a,_uip_acc32+2
2440  ec05 e70e          	ld	(14,x),a
2441                     ; 848       uip_connr->snd_nxt[3] = uip_acc32[3];
2443  ec07 c600e4        	ld	a,_uip_acc32+3
2444  ec0a e70f          	ld	(15,x),a
2445                     ; 851       if (uip_connr->nrtx == 0) {
2447  ec0c e61b          	ld	a,(27,x)
2448  ec0e 2653          	jrne	L3601
2449                     ; 853         m = (int8_t)(uip_connr->rto - uip_connr->timer);
2451  ec10 e61a          	ld	a,(26,x)
2452  ec12 e018          	sub	a,(24,x)
2453  ec14 40            	neg	a
2454  ec15 6b03          	ld	(OFST-2,sp),a
2456                     ; 855         m = (int8_t)(m - (uip_connr->sa >> 3));
2458  ec17 e616          	ld	a,(22,x)
2459  ec19 44            	srl	a
2460  ec1a 44            	srl	a
2461  ec1b 44            	srl	a
2462  ec1c 5f            	clrw	x
2463  ec1d 97            	ld	xl,a
2464  ec1e 1f01          	ldw	(OFST-4,sp),x
2466  ec20 5f            	clrw	x
2467  ec21 7b03          	ld	a,(OFST-2,sp)
2468  ec23 4d            	tnz	a
2469  ec24 2a01          	jrpl	L631
2470  ec26 53            	cplw	x
2471  ec27               L631:
2472  ec27 97            	ld	xl,a
2473  ec28 72f001        	subw	x,(OFST-4,sp)
2474  ec2b 01            	rrwa	x,a
2475  ec2c 6b03          	ld	(OFST-2,sp),a
2477                     ; 856         uip_connr->sa += m;
2479  ec2e 1e04          	ldw	x,(OFST-1,sp)
2480  ec30 e616          	ld	a,(22,x)
2481  ec32 1b03          	add	a,(OFST-2,sp)
2482  ec34 e716          	ld	(22,x),a
2483                     ; 857         if (m < 0) m = (int8_t)(-m);
2485  ec36 7b03          	ld	a,(OFST-2,sp)
2486  ec38 2a02          	jrpl	L5601
2489  ec3a 0003          	neg	(OFST-2,sp)
2491  ec3c               L5601:
2492                     ; 858         m = (int8_t)(m - (uip_connr->sv >> 2));
2494  ec3c e617          	ld	a,(23,x)
2495  ec3e 44            	srl	a
2496  ec3f 44            	srl	a
2497  ec40 5f            	clrw	x
2498  ec41 97            	ld	xl,a
2499  ec42 1f01          	ldw	(OFST-4,sp),x
2501  ec44 5f            	clrw	x
2502  ec45 7b03          	ld	a,(OFST-2,sp)
2503  ec47 4d            	tnz	a
2504  ec48 2a01          	jrpl	L041
2505  ec4a 53            	cplw	x
2506  ec4b               L041:
2507  ec4b 97            	ld	xl,a
2508  ec4c 72f001        	subw	x,(OFST-4,sp)
2509  ec4f 01            	rrwa	x,a
2510  ec50 6b03          	ld	(OFST-2,sp),a
2512                     ; 859         uip_connr->sv += m;
2514  ec52 1e04          	ldw	x,(OFST-1,sp)
2515  ec54 e617          	ld	a,(23,x)
2516  ec56 1b03          	add	a,(OFST-2,sp)
2517  ec58 e717          	ld	(23,x),a
2518                     ; 860         uip_connr->rto = (uint8_t)((uip_connr->sa >> 3) + uip_connr->sv);
2520  ec5a e616          	ld	a,(22,x)
2521  ec5c 44            	srl	a
2522  ec5d 44            	srl	a
2523  ec5e 44            	srl	a
2524  ec5f eb17          	add	a,(23,x)
2525  ec61 e718          	ld	(24,x),a
2526  ec63               L3601:
2527                     ; 863       uip_flags = UIP_ACKDATA;
2529  ec63 35010088      	mov	_uip_flags,#1
2530                     ; 865       uip_connr->timer = uip_connr->rto;
2532  ec67 e618          	ld	a,(24,x)
2533  ec69 e71a          	ld	(26,x),a
2534                     ; 868       uip_connr->len = 0;
2536  ec6b 905f          	clrw	y
2537  ec6d ef10          	ldw	(16,x),y
2538  ec6f               L7501:
2539                     ; 873   switch (uip_connr->tcpstateflags & UIP_TS_MASK) {
2541  ec6f 1e04          	ldw	x,(OFST-1,sp)
2542  ec71 e619          	ld	a,(25,x)
2543  ec73 a40f          	and	a,#15
2545                     ; 1101 	uip_connr->timer = 0;
2546  ec75 4a            	dec	a
2547  ec76 2725          	jreq	L573
2548  ec78 a002          	sub	a,#2
2549  ec7a 2745          	jreq	L773
2550  ec7c 4a            	dec	a
2551  ec7d 2603ccee7f    	jreq	L114
2552  ec82 4a            	dec	a
2553  ec83 2603cceebe    	jreq	L314
2554  ec88 4a            	dec	a
2555  ec89 2603cceee9    	jreq	L714
2556  ec8e 4a            	dec	a
2557  ec8f 2603cceef6    	jreq	L124
2558  ec94 4a            	dec	a
2559  ec95 2603ccee6e    	jreq	L704
2560  ec9a ccef58        	jra	L734
2561  ec9d               L573:
2562                     ; 877     case UIP_SYN_RCVD:
2562                     ; 878       /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and we are waiting
2562                     ; 879          for an ACK that acknowledges the data we sent out the last time. Therefore, we
2562                     ; 880 	 want to have the UIP_ACKDATA flag set. If so, we enter the ESTABLISHED state. */
2562                     ; 881       if (uip_flags & UIP_ACKDATA) {
2564  ec9d 72010088f8    	btjf	_uip_flags,#0,L734
2565                     ; 882         uip_connr->tcpstateflags = UIP_ESTABLISHED;
2567  eca2 a603          	ld	a,#3
2568  eca4 e719          	ld	(25,x),a
2569                     ; 883         uip_flags = UIP_CONNECTED;
2571  eca6 35400088      	mov	_uip_flags,#64
2572                     ; 884         uip_connr->len = 0;
2574  ecaa 905f          	clrw	y
2575  ecac ef10          	ldw	(16,x),y
2576                     ; 885         if (uip_len > 0) {
2578  ecae ce01d7        	ldw	x,_uip_len
2579  ecb1 2707          	jreq	L5701
2580                     ; 886           uip_flags |= UIP_NEWDATA;
2582  ecb3 72120088      	bset	_uip_flags,#1
2583                     ; 887           uip_add_rcv_nxt(uip_len);
2585  ecb7 cde647        	call	L733_uip_add_rcv_nxt
2587  ecba               L5701:
2588                     ; 889         uip_slen = 0;
2591  ecba 5f            	clrw	x
2592  ecbb cf0078        	ldw	_uip_slen,x
2593                     ; 890         UIP_APPCALL();
2595                     ; 891         goto appsend;
2597  ecbe cce764        	jra	L304
2598  ecc1               L773:
2599                     ; 895     case UIP_ESTABLISHED:
2599                     ; 896       /* In the ESTABLISHED state, we call upon the application to feed data into the
2599                     ; 897          uip_buf. If the UIP_ACKDATA flag is set, the application should put new data
2599                     ; 898 	 into the buffer, otherwise we are retransmitting an old segment, and the
2599                     ; 899 	 application should put that data into the buffer.
2599                     ; 900 	 
2599                     ; 901 	 If the incoming packet is a FIN, we should close the connection on this side
2599                     ; 902 	 as well, and we send out a FIN and enter the LAST_ACK state. We require that
2599                     ; 903 	 there is no outstanding data; otherwise the sequence numbers will be screwed
2599                     ; 904 	 up. */
2599                     ; 905       if (BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
2601  ecc1 7201020a30    	btjf	_uip_buf+47,#0,L7701
2603  ecc6 e619          	ld	a,(25,x)
2604  ecc8 a510          	bcp	a,#16
2605  ecca 262a          	jrne	L7701
2606                     ; 906         if (uip_outstanding(uip_connr)) {
2608  eccc e611          	ld	a,(17,x)
2609  ecce ea10          	or	a,(16,x)
2610  ecd0 26c8          	jrne	L734
2611                     ; 907           goto drop;
2613                     ; 909         uip_add_rcv_nxt(1 + uip_len);
2615  ecd2 ce01d7        	ldw	x,_uip_len
2616  ecd5 5c            	incw	x
2617  ecd6 cde647        	call	L733_uip_add_rcv_nxt
2619                     ; 910         uip_flags |= UIP_CLOSE;
2621  ecd9 72180088      	bset	_uip_flags,#4
2622                     ; 911         if (uip_len > 0) {
2624  ecdd ce01d7        	ldw	x,_uip_len
2625  ece0 2704          	jreq	L3011
2626                     ; 912           uip_flags |= UIP_NEWDATA;
2628  ece2 72120088      	bset	_uip_flags,#1
2629  ece6               L3011:
2630                     ; 914         UIP_APPCALL();
2632  ece6 cdf2fc        	call	_uip_TcpAppHubCall
2634                     ; 915         uip_connr->len = 1;
2636  ece9 1e04          	ldw	x,(OFST-1,sp)
2637  eceb 90ae0001      	ldw	y,#1
2638  ecef ef10          	ldw	(16,x),y
2639                     ; 916         uip_connr->tcpstateflags = UIP_LAST_ACK;
2641  ecf1 a608          	ld	a,#8
2642                     ; 917         uip_connr->nrtx = 0;
2643                     ; 918         tcp_send_finack: BUF->flags = TCP_FIN | TCP_ACK;
2644                     ; 919         goto tcp_send_nodata;
2646  ecf3 cced83        	jp	LC005
2647  ecf6               L7701:
2648                     ; 924       if ((BUF->flags & TCP_URG) != 0) {
2650  ecf6 720b020a1f    	btjf	_uip_buf+47,#5,L5011
2651                     ; 925         uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
2653  ecfb c6020f        	ld	a,_uip_buf+52
2654  ecfe 97            	ld	xl,a
2655  ecff c60210        	ld	a,_uip_buf+53
2656  ed02 02            	rlwa	x,a
2657  ed03 72bb01d9      	addw	x,_uip_appdata
2658  ed07 cf01d9        	ldw	_uip_appdata,x
2659                     ; 926         uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
2661  ed0a c6020f        	ld	a,_uip_buf+52
2662  ed0d 97            	ld	xl,a
2663  ed0e c60210        	ld	a,_uip_buf+53
2664  ed11 02            	rlwa	x,a
2665  ed12 72b001d7      	subw	x,_uip_len
2666  ed16 50            	negw	x
2667  ed17 cf01d7        	ldw	_uip_len,x
2668  ed1a               L5011:
2669                     ; 933       if (uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
2671  ed1a ce01d7        	ldw	x,_uip_len
2672  ed1d 2712          	jreq	L7011
2674  ed1f 1e04          	ldw	x,(OFST-1,sp)
2675  ed21 e619          	ld	a,(25,x)
2676  ed23 a510          	bcp	a,#16
2677  ed25 260a          	jrne	L7011
2678                     ; 934         uip_flags |= UIP_NEWDATA;
2680  ed27 72120088      	bset	_uip_flags,#1
2681                     ; 935         uip_add_rcv_nxt(uip_len);
2683  ed2b ce01d7        	ldw	x,_uip_len
2684  ed2e cde647        	call	L733_uip_add_rcv_nxt
2686  ed31               L7011:
2687                     ; 947       tmp16 = ((uint16_t)BUF->wnd[0] << 8) + (uint16_t)BUF->wnd[1];
2689  ed31 c6020c        	ld	a,_uip_buf+49
2690  ed34 5f            	clrw	x
2691  ed35 97            	ld	xl,a
2692  ed36 1f01          	ldw	(OFST-4,sp),x
2694  ed38 c6020b        	ld	a,_uip_buf+48
2695  ed3b 97            	ld	xl,a
2696  ed3c 4f            	clr	a
2697  ed3d 02            	rlwa	x,a
2698  ed3e 72fb01        	addw	x,(OFST-4,sp)
2699  ed41 cf0064        	ldw	L54_tmp16,x
2700                     ; 948       if (tmp16 > uip_connr->initialmss || tmp16 == 0) {
2702  ed44 1604          	ldw	y,(OFST-1,sp)
2703  ed46 90ee14        	ldw	y,(20,y)
2704  ed49 90c30064      	cpw	y,L54_tmp16
2705  ed4d 2505          	jrult	L3111
2707  ed4f ce0064        	ldw	x,L54_tmp16
2708  ed52 2607          	jrne	L1111
2709  ed54               L3111:
2710                     ; 949         tmp16 = uip_connr->initialmss;
2712  ed54 1e04          	ldw	x,(OFST-1,sp)
2713  ed56 ee14          	ldw	x,(20,x)
2714  ed58 cf0064        	ldw	L54_tmp16,x
2715  ed5b               L1111:
2716                     ; 951       uip_connr->mss = tmp16;
2718  ed5b 1e04          	ldw	x,(OFST-1,sp)
2719  ed5d 90ce0064      	ldw	y,L54_tmp16
2720  ed61 ef12          	ldw	(18,x),y
2721                     ; 966       if (uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
2723  ed63 c60088        	ld	a,_uip_flags
2724  ed66 a503          	bcp	a,#3
2725  ed68 2603ccef58    	jreq	L734
2726                     ; 967         uip_slen = 0;
2727                     ; 968         UIP_APPCALL();
2729  ed6d ccecba        	jp	L5701
2730  ed70               L7111:
2731                     ; 979         if (uip_flags & UIP_CLOSE) {
2733  ed70 720900881e    	btjf	_uip_flags,#4,L1211
2734                     ; 980           uip_slen = 0;
2736  ed75 5f            	clrw	x
2737  ed76 cf0078        	ldw	_uip_slen,x
2738                     ; 981 	  uip_connr->len = 1;
2740  ed79 1e04          	ldw	x,(OFST-1,sp)
2741  ed7b 90ae0001      	ldw	y,#1
2742  ed7f ef10          	ldw	(16,x),y
2743                     ; 982 	  uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
2745  ed81 a604          	ld	a,#4
2746                     ; 983 	  uip_connr->nrtx = 0;
2748  ed83               LC005:
2749  ed83 e719          	ld	(25,x),a
2751  ed85 6f1b          	clr	(27,x)
2752                     ; 984 	  BUF->flags = TCP_FIN | TCP_ACK;
2754  ed87               LC003:
2756  ed87 3511020a      	mov	_uip_buf+47,#17
2757                     ; 985 	  goto tcp_send_nodata;
2758  ed8b               L324:
2759                     ; 1111   tcp_send_nodata: uip_len = UIP_IPTCPH_LEN;
2761  ed8b ae0028        	ldw	x,#40
2762  ed8e cf01d7        	ldw	_uip_len,x
2763  ed91 206e          	jra	L524
2764  ed93               L1211:
2765                     ; 989         if (uip_slen > 0) {
2767  ed93 ce0078        	ldw	x,_uip_slen
2768  ed96 2732          	jreq	L3211
2769                     ; 992 	  if ((uip_flags & UIP_ACKDATA) != 0) {
2771  ed98 7201008806    	btjf	_uip_flags,#0,L5211
2772                     ; 993 	    uip_connr->len = 0;
2774  ed9d 1e04          	ldw	x,(OFST-1,sp)
2775  ed9f 905f          	clrw	y
2776  eda1 ef10          	ldw	(16,x),y
2777  eda3               L5211:
2778                     ; 998 	  if (uip_connr->len == 0) {
2780  eda3 1e04          	ldw	x,(OFST-1,sp)
2781  eda5 e611          	ld	a,(17,x)
2782  eda7 ea10          	or	a,(16,x)
2783  eda9 261a          	jrne	L7211
2784                     ; 1001 	    if (uip_slen > uip_connr->mss) {
2786  edab 9093          	ldw	y,x
2787  edad 90ee12        	ldw	y,(18,y)
2788  edb0 90c30078      	cpw	y,_uip_slen
2789  edb4 2407          	jruge	L1311
2790                     ; 1002 	      uip_slen = uip_connr->mss;
2792  edb6 ee12          	ldw	x,(18,x)
2793  edb8 cf0078        	ldw	_uip_slen,x
2794  edbb 1e04          	ldw	x,(OFST-1,sp)
2795  edbd               L1311:
2796                     ; 1007             uip_connr->len = uip_slen;
2798  edbd 90ce0078      	ldw	y,_uip_slen
2799  edc1 ef10          	ldw	(16,x),y
2801  edc3 2005          	jra	L3211
2802  edc5               L7211:
2803                     ; 1013 	    uip_slen = uip_connr->len;
2805  edc5 ee10          	ldw	x,(16,x)
2806  edc7 cf0078        	ldw	_uip_slen,x
2807  edca               L3211:
2808                     ; 1016 	uip_connr->nrtx = 0;
2810  edca 1e04          	ldw	x,(OFST-1,sp)
2811  edcc 6f1b          	clr	(27,x)
2812  edce               L504:
2813                     ; 1017 	apprexmit: uip_appdata = uip_sappdata;
2815  edce ce007a        	ldw	x,_uip_sappdata
2816  edd1 cf01d9        	ldw	_uip_appdata,x
2817                     ; 1021 	if (uip_slen > 0 && uip_connr->len > 0) {
2819  edd4 ce0078        	ldw	x,_uip_slen
2820  edd7 2716          	jreq	L5311
2822  edd9 1e04          	ldw	x,(OFST-1,sp)
2823  eddb e611          	ld	a,(17,x)
2824  eddd ea10          	or	a,(16,x)
2825  eddf 270e          	jreq	L5311
2826                     ; 1023 	  uip_len = uip_connr->len + UIP_TCPIP_HLEN;
2828  ede1 ee10          	ldw	x,(16,x)
2829  ede3 1c0028        	addw	x,#40
2830  ede6 cf01d7        	ldw	_uip_len,x
2831                     ; 1025 	  BUF->flags = TCP_ACK | TCP_PSH;
2833  ede9 3518020a      	mov	_uip_buf+47,#24
2834                     ; 1027 	  goto tcp_send_noopts;
2836  eded 2012          	jra	L524
2837  edef               L5311:
2838                     ; 1030 	if (uip_flags & UIP_NEWDATA) {
2840  edef 7202008803cc  	btjf	_uip_flags,#1,L734
2841                     ; 1031 	  uip_len = UIP_TCPIP_HLEN;
2843  edf7 ae0028        	ldw	x,#40
2844  edfa cf01d7        	ldw	_uip_len,x
2845                     ; 1032 	  BUF->flags = TCP_ACK;
2847  edfd 3510020a      	mov	_uip_buf+47,#16
2848                     ; 1033 	  goto tcp_send_noopts;
2849  ee01               L524:
2850                     ; 1112   tcp_send_noopts: BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
2852  ee01 35500209      	mov	_uip_buf+46,#80
2853  ee05               L724:
2854                     ; 1115   tcp_send:
2854                     ; 1116   /* We're done with the input processing. We are now ready to send a reply. Our job is to
2854                     ; 1117      fill in all the fields of the TCP and IP headers before calculating the checksum and
2854                     ; 1118      finally send the packet. */
2854                     ; 1119   BUF->ackno[0] = uip_connr->rcv_nxt[0];
2856  ee05 1e04          	ldw	x,(OFST-1,sp)
2857  ee07 e608          	ld	a,(8,x)
2858  ee09 c70205        	ld	_uip_buf+42,a
2859                     ; 1120   BUF->ackno[1] = uip_connr->rcv_nxt[1];
2861  ee0c e609          	ld	a,(9,x)
2862  ee0e c70206        	ld	_uip_buf+43,a
2863                     ; 1121   BUF->ackno[2] = uip_connr->rcv_nxt[2];
2865  ee11 e60a          	ld	a,(10,x)
2866  ee13 c70207        	ld	_uip_buf+44,a
2867                     ; 1122   BUF->ackno[3] = uip_connr->rcv_nxt[3];
2869  ee16 e60b          	ld	a,(11,x)
2870  ee18 c70208        	ld	_uip_buf+45,a
2871                     ; 1124   BUF->seqno[0] = uip_connr->snd_nxt[0];
2873  ee1b e60c          	ld	a,(12,x)
2874  ee1d c70201        	ld	_uip_buf+38,a
2875                     ; 1125   BUF->seqno[1] = uip_connr->snd_nxt[1];
2877  ee20 e60d          	ld	a,(13,x)
2878  ee22 c70202        	ld	_uip_buf+39,a
2879                     ; 1126   BUF->seqno[2] = uip_connr->snd_nxt[2];
2881  ee25 e60e          	ld	a,(14,x)
2882  ee27 c70203        	ld	_uip_buf+40,a
2883                     ; 1127   BUF->seqno[3] = uip_connr->snd_nxt[3];
2885  ee2a e60f          	ld	a,(15,x)
2886  ee2c c70204        	ld	_uip_buf+41,a
2887                     ; 1129   BUF->proto = UIP_PROTO_TCP;
2889  ee2f 350601f2      	mov	_uip_buf+23,#6
2890                     ; 1131   BUF->srcport = uip_connr->lport;
2892  ee33 ee04          	ldw	x,(4,x)
2893  ee35 cf01fd        	ldw	_uip_buf+34,x
2894                     ; 1132   BUF->destport = uip_connr->rport;
2896  ee38 1e04          	ldw	x,(OFST-1,sp)
2897  ee3a ee06          	ldw	x,(6,x)
2898  ee3c cf01ff        	ldw	_uip_buf+36,x
2899                     ; 1134   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
2901  ee3f ce0084        	ldw	x,_uip_hostaddr
2902  ee42 cf01f5        	ldw	_uip_buf+26,x
2905  ee45 ce0086        	ldw	x,_uip_hostaddr+2
2906  ee48 cf01f7        	ldw	_uip_buf+28,x
2907                     ; 1135   uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
2909  ee4b 1e04          	ldw	x,(OFST-1,sp)
2910  ee4d fe            	ldw	x,(x)
2911  ee4e cf01f9        	ldw	_uip_buf+30,x
2914  ee51 1e04          	ldw	x,(OFST-1,sp)
2915  ee53 ee02          	ldw	x,(2,x)
2916  ee55 cf01fb        	ldw	_uip_buf+32,x
2917                     ; 1137   if (uip_connr->tcpstateflags & UIP_STOPPED) {
2919  ee58 1e04          	ldw	x,(OFST-1,sp)
2920  ee5a e619          	ld	a,(25,x)
2921  ee5c a510          	bcp	a,#16
2922  ee5e 2603cceefd    	jreq	L1021
2923                     ; 1140     BUF->wnd[0] = BUF->wnd[1] = 0;
2925  ee63 725f020c      	clr	_uip_buf+49
2926  ee67 725f020b      	clr	_uip_buf+48
2928  ee6b ccef05        	jra	L134
2929  ee6e               L704:
2930                     ; 1038     case UIP_LAST_ACK:
2930                     ; 1039       /* We can close this connection if the peer has acknowledged our FIN. This is
2930                     ; 1040          indicated by the UIP_ACKDATA flag. */
2930                     ; 1041       if (uip_flags & UIP_ACKDATA) {
2932  ee6e 7201008881    	btjf	_uip_flags,#0,L734
2933                     ; 1042         uip_connr->tcpstateflags = UIP_CLOSED;
2935  ee73 e719          	ld	(25,x),a
2936                     ; 1043 	uip_flags = UIP_CLOSE;
2938  ee75 35100088      	mov	_uip_flags,#16
2939                     ; 1044 	UIP_APPCALL();
2941  ee79 cdf2fc        	call	_uip_TcpAppHubCall
2943  ee7c ccef58        	jra	L734
2944  ee7f               L114:
2945                     ; 1048     case UIP_FIN_WAIT_1:
2945                     ; 1049       /* The application has closed the connection, but the remote host hasn't closed
2945                     ; 1050          its end yet. Thus we do nothing but wait for a FIN from the other side. */
2945                     ; 1051       if (uip_len > 0) {
2947  ee7f ce01d7        	ldw	x,_uip_len
2948  ee82 2703          	jreq	L3411
2949                     ; 1052         uip_add_rcv_nxt(uip_len);
2951  ee84 cde647        	call	L733_uip_add_rcv_nxt
2953  ee87               L3411:
2954                     ; 1054       if (BUF->flags & TCP_FIN) {
2956  ee87 7201020a19    	btjf	_uip_buf+47,#0,L5411
2957                     ; 1055         if (uip_flags & UIP_ACKDATA) {
2959  ee8c 1e04          	ldw	x,(OFST-1,sp)
2960  ee8e 720100880c    	btjf	_uip_flags,#0,L7411
2961                     ; 1056 	  uip_connr->tcpstateflags = UIP_TIME_WAIT;
2963  ee93 a607          	ld	a,#7
2964  ee95 e719          	ld	(25,x),a
2965                     ; 1057 	  uip_connr->timer = 0;
2967  ee97 6f1a          	clr	(26,x)
2968                     ; 1058 	  uip_connr->len = 0;
2970  ee99 905f          	clrw	y
2971  ee9b ef10          	ldw	(16,x),y
2973  ee9d 2034          	jra	LC004
2974  ee9f               L7411:
2975                     ; 1061           uip_connr->tcpstateflags = UIP_CLOSING;
2977  ee9f a606          	ld	a,#6
2978  eea1 e719          	ld	(25,x),a
2979                     ; 1063         uip_add_rcv_nxt(1);
2981                     ; 1064         uip_flags = UIP_CLOSE;
2982                     ; 1065         UIP_APPCALL();
2984                     ; 1066         goto tcp_send_ack;
2986  eea3 202e          	jp	LC004
2987  eea5               L5411:
2988                     ; 1068       else if (uip_flags & UIP_ACKDATA) {
2990  eea5 720100880d    	btjf	_uip_flags,#0,L3511
2991                     ; 1069         uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
2993  eeaa 1e04          	ldw	x,(OFST-1,sp)
2994  eeac a605          	ld	a,#5
2995  eeae e719          	ld	(25,x),a
2996                     ; 1070         uip_connr->len = 0;
2998  eeb0 905f          	clrw	y
2999  eeb2 ef10          	ldw	(16,x),y
3000                     ; 1071         goto drop;
3002  eeb4 ccef58        	jra	L734
3003  eeb7               L3511:
3004                     ; 1073       if (uip_len > 0) {
3006  eeb7 ce01d7        	ldw	x,_uip_len
3007  eeba 27f8          	jreq	L734
3008                     ; 1074         goto tcp_send_ack;
3010  eebc 2038          	jra	L124
3011  eebe               L314:
3012                     ; 1078     case UIP_FIN_WAIT_2:
3012                     ; 1079       if (uip_len > 0) {
3014  eebe ce01d7        	ldw	x,_uip_len
3015  eec1 2703          	jreq	L1611
3016                     ; 1080 	uip_add_rcv_nxt(uip_len);
3018  eec3 cde647        	call	L733_uip_add_rcv_nxt
3020  eec6               L1611:
3021                     ; 1082       if (BUF->flags & TCP_FIN) {
3023  eec6 7201020a17    	btjf	_uip_buf+47,#0,L3611
3024                     ; 1083 	uip_connr->tcpstateflags = UIP_TIME_WAIT;
3026  eecb 1e04          	ldw	x,(OFST-1,sp)
3027  eecd a607          	ld	a,#7
3028  eecf e719          	ld	(25,x),a
3029                     ; 1084 	uip_connr->timer = 0;
3031  eed1 6f1a          	clr	(26,x)
3032                     ; 1085 	uip_add_rcv_nxt(1);
3035                     ; 1086 	uip_flags = UIP_CLOSE;
3037                     ; 1087 	UIP_APPCALL();
3039  eed3               LC004:
3041  eed3 ae0001        	ldw	x,#1
3042  eed6 cde647        	call	L733_uip_add_rcv_nxt
3044  eed9 35100088      	mov	_uip_flags,#16
3046  eedd cdf2fc        	call	_uip_TcpAppHubCall
3048                     ; 1088 	goto tcp_send_ack;
3050  eee0 2014          	jra	L124
3051  eee2               L3611:
3052                     ; 1090       if (uip_len > 0) {
3054  eee2 ce01d7        	ldw	x,_uip_len
3055  eee5 2771          	jreq	L734
3056                     ; 1091 	goto tcp_send_ack;
3058  eee7 200d          	jra	L124
3059  eee9               L714:
3060                     ; 1098     case UIP_CLOSING:
3060                     ; 1099       if (uip_flags & UIP_ACKDATA) {
3062  eee9 720100886a    	btjf	_uip_flags,#0,L734
3063                     ; 1100 	uip_connr->tcpstateflags = UIP_TIME_WAIT;
3065  eeee a607          	ld	a,#7
3066  eef0 e719          	ld	(25,x),a
3067                     ; 1101 	uip_connr->timer = 0;
3069  eef2 6f1a          	clr	(26,x)
3070  eef4 2062          	jra	L734
3071                     ; 1104   goto drop;
3073  eef6               L124:
3074                     ; 1109   tcp_send_ack:
3074                     ; 1110   BUF->flags = TCP_ACK;
3076  eef6 3510020a      	mov	_uip_buf+47,#16
3077  eefa cced8b        	jra	L324
3078  eefd               L1021:
3079                     ; 1143     BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
3081  eefd 3502020b      	mov	_uip_buf+48,#2
3082                     ; 1144     BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
3084  ef01 3522020c      	mov	_uip_buf+49,#34
3085  ef05               L134:
3086                     ; 1148   tcp_send_noconn:
3086                     ; 1149   BUF->ttl = UIP_TTL;
3088  ef05 354001f1      	mov	_uip_buf+22,#64
3089                     ; 1150   BUF->len[0] = (uint8_t)(uip_len >> 8);
3091  ef09 5501d701eb    	mov	_uip_buf+16,_uip_len
3092                     ; 1151   BUF->len[1] = (uint8_t)(uip_len & 0xff);
3094  ef0e 5501d801ec    	mov	_uip_buf+17,_uip_len+1
3095                     ; 1153   BUF->urgp[0] = BUF->urgp[1] = 0;
3097  ef13 725f0210      	clr	_uip_buf+53
3098  ef17 725f020f      	clr	_uip_buf+52
3099                     ; 1156   BUF->tcpchksum = 0;
3101  ef1b 5f            	clrw	x
3102  ef1c cf020d        	ldw	_uip_buf+50,x
3103                     ; 1157   BUF->tcpchksum = ~(uip_tcpchksum());
3105  ef1f cde545        	call	_uip_tcpchksum
3107  ef22 53            	cplw	x
3108  ef23 cf020d        	ldw	_uip_buf+50,x
3109                     ; 1160   ip_send_nolen:
3109                     ; 1161 
3109                     ; 1162   BUF->vhl = 0x45;
3111  ef26 354501e9      	mov	_uip_buf+14,#69
3112                     ; 1163   BUF->tos = 0;
3114  ef2a 725f01ea      	clr	_uip_buf+15
3115                     ; 1164   BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
3117  ef2e 725f01f0      	clr	_uip_buf+21
3118  ef32 725f01ef      	clr	_uip_buf+20
3119                     ; 1165   ++ipid;
3121  ef36 ce006c        	ldw	x,L31_ipid
3122  ef39 5c            	incw	x
3123  ef3a cf006c        	ldw	L31_ipid,x
3124                     ; 1166   BUF->ipid[0] = (uint8_t)(ipid >> 8);
3126  ef3d 55006c01ed    	mov	_uip_buf+18,L31_ipid
3127                     ; 1167   BUF->ipid[1] = (uint8_t)(ipid & 0xff);
3129  ef42 55006d01ee    	mov	_uip_buf+19,L31_ipid+1
3130                     ; 1169   BUF->ipchksum = 0;
3132  ef47 5f            	clrw	x
3133  ef48 cf01f3        	ldw	_uip_buf+24,x
3134                     ; 1170   BUF->ipchksum = ~(uip_ipchksum());
3136  ef4b cde4e0        	call	_uip_ipchksum
3138  ef4e 53            	cplw	x
3139  ef4f cf01f3        	ldw	_uip_buf+24,x
3140                     ; 1172   UIP_STAT(++uip_stat.tcp.sent);
3142  ef52 ae00c5        	ldw	x,#_uip_stat+60
3144  ef55 cce8ac        	jra	L534
3145  ef58               L734:
3146                     ; 1183   drop:
3146                     ; 1184   uip_len = 0;
3148  ef58 5f            	clrw	x
3149  ef59 cf01d7        	ldw	_uip_len,x
3150                     ; 1185   uip_flags = 0;
3152                     ; 1186   return;
3153  ef5c               L202:
3155  ef5c 725f0088      	clr	_uip_flags
3158  ef60 5b06          	addw	sp,#6
3159  ef62 81            	ret	
3191                     ; 1191 uint16_t htons(uint16_t val)
3191                     ; 1192 {
3192                     	switch	.text
3193  ef63               _htons:
3197                     ; 1193   return HTONS(val);
3201  ef63 81            	ret	
3246                     ; 1199 void uip_send(const char *data, int len)
3246                     ; 1200 {
3247                     	switch	.text
3248  ef64               _uip_send:
3250  ef64 89            	pushw	x
3251       00000000      OFST:	set	0
3254                     ; 1201   if (len > 0) {
3256  ef65 9c            	rvf	
3257  ef66 1e05          	ldw	x,(OFST+5,sp)
3258  ef68 2d1c          	jrsle	L012
3259                     ; 1202     uip_slen = len;
3261  ef6a cf0078        	ldw	_uip_slen,x
3262                     ; 1203     if (data != uip_sappdata) {
3264  ef6d 1e01          	ldw	x,(OFST+1,sp)
3265  ef6f c3007a        	cpw	x,_uip_sappdata
3266  ef72 2712          	jreq	L012
3267                     ; 1204       memcpy(uip_sappdata, (data), uip_slen);
3269  ef74 bf04          	ldw	c_x,x
3270  ef76 ce0078        	ldw	x,_uip_slen
3271  ef79 270b          	jreq	L012
3272  ef7b               L212:
3273  ef7b 5a            	decw	x
3274  ef7c 92d604        	ld	a,([c_x.w],x)
3275  ef7f 72d7007a      	ld	([_uip_sappdata.w],x),a
3276  ef83 5d            	tnzw	x
3277  ef84 26f5          	jrne	L212
3278  ef86               L012:
3279                     ; 1207 }
3282  ef86 85            	popw	x
3283  ef87 81            	ret	
3710                     	switch	.bss
3711  0064               L54_tmp16:
3712  0064 0000          	ds.b	2
3713  0066               L34_opt:
3714  0066 00            	ds.b	1
3715  0067               L14_c:
3716  0067 00            	ds.b	1
3717  0068               L73_iss:
3718  0068 00000000      	ds.b	4
3719  006c               L31_ipid:
3720  006c 0000          	ds.b	2
3721  006e               _uip_listenports:
3722  006e 000000000000  	ds.b	10
3723                     	xdef	_uip_listenports
3724  0078               _uip_slen:
3725  0078 0000          	ds.b	2
3726                     	xdef	_uip_slen
3727  007a               _uip_sappdata:
3728  007a 0000          	ds.b	2
3729                     	xdef	_uip_sappdata
3730                     	xdef	_uip_ethaddr
3731                     	xdef	_uip_add32
3732                     	xdef	_uip_tcpchksum
3733                     	xdef	_uip_ipchksum
3734                     	xdef	_uip_chksum
3735  007c               _uip_draddr:
3736  007c 00000000      	ds.b	4
3737                     	xdef	_uip_draddr
3738  0080               _uip_netmask:
3739  0080 00000000      	ds.b	4
3740                     	xdef	_uip_netmask
3741  0084               _uip_hostaddr:
3742  0084 00000000      	ds.b	4
3743                     	xdef	_uip_hostaddr
3744                     	xdef	_uip_process
3745  0088               _uip_flags:
3746  0088 00            	ds.b	1
3747                     	xdef	_uip_flags
3748  0089               _uip_stat:
3749  0089 000000000000  	ds.b	88
3750                     	xdef	_uip_stat
3751  00e1               _uip_acc32:
3752  00e1 00000000      	ds.b	4
3753                     	xdef	_uip_acc32
3754  00e5               _uip_conns:
3755  00e5 000000000000  	ds.b	240
3756                     	xdef	_uip_conns
3757  01d5               _uip_conn:
3758  01d5 0000          	ds.b	2
3759                     	xdef	_uip_conn
3760  01d7               _uip_len:
3761  01d7 0000          	ds.b	2
3762                     	xdef	_uip_len
3763  01d9               _uip_appdata:
3764  01d9 0000          	ds.b	2
3765                     	xdef	_uip_appdata
3766                     	xdef	_htons
3767                     	xdef	_uip_send
3768                     	xdef	_uip_unlisten
3769                     	xdef	_uip_listen
3770  01db               _uip_buf:
3771  01db 000000000000  	ds.b	602
3772                     	xdef	_uip_buf
3773                     	xdef	_uip_setipid
3774                     	xdef	_uip_init
3775                     	xref	_uip_TcpAppHubCall
3776                     	xref.b	c_x
3777                     	xref.b	c_y
3797                     	xref	c_lgadc
3798                     	end
