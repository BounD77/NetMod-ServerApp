   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     	switch	.data
  18  000a               _uip_ethaddr:
  19  000a 01            	dc.b	1
  20  000b 02            	dc.b	2
  21  000c 03            	dc.b	3
  22  000d 04            	dc.b	4
  23  000e 05            	dc.b	5
  24  000f 06            	dc.b	6
  63                     ; 158 void uip_setipid(uint16_t id)
  63                     ; 159 {
  65                     	switch	.text
  66  e4ad               _uip_setipid:
  70                     ; 160   ipid = id;
  72  e4ad cf006c        	ldw	L31_ipid,x
  73                     ; 161 }
  76  e4b0 81            	ret	
 119                     ; 212 void uip_add32(uint8_t *op32, uint16_t op16)
 119                     ; 213 {
 120                     	switch	.text
 121  e4b1               _uip_add32:
 123  e4b1 89            	pushw	x
 124  e4b2 89            	pushw	x
 125       00000002      OFST:	set	2
 128                     ; 214   uip_acc32[3] = (uint8_t)(op32[3] + (op16 & 0xff));
 130  e4b3 7b08          	ld	a,(OFST+6,sp)
 131  e4b5 eb03          	add	a,(3,x)
 132  e4b7 c700e4        	ld	_uip_acc32+3,a
 133                     ; 215   uip_acc32[2] = (uint8_t)(op32[2] + (op16 >> 8));
 135  e4ba e602          	ld	a,(2,x)
 136  e4bc 1b07          	add	a,(OFST+5,sp)
 137  e4be c700e3        	ld	_uip_acc32+2,a
 138                     ; 216   uip_acc32[1] = op32[1];
 140  e4c1 e601          	ld	a,(1,x)
 141  e4c3 c700e2        	ld	_uip_acc32+1,a
 142                     ; 217   uip_acc32[0] = op32[0];
 144  e4c6 f6            	ld	a,(x)
 145  e4c7 c700e1        	ld	_uip_acc32,a
 146                     ; 219   if (uip_acc32[2] < (op16 >> 8)) {
 148  e4ca 4f            	clr	a
 149  e4cb 1e07          	ldw	x,(OFST+5,sp)
 150  e4cd 01            	rrwa	x,a
 151  e4ce c600e3        	ld	a,_uip_acc32+2
 152  e4d1 905f          	clrw	y
 153  e4d3 9097          	ld	yl,a
 154  e4d5 90bf07        	ldw	c_y,y
 155  e4d8 b307          	cpw	x,c_y
 156  e4da 230a          	jrule	L76
 157                     ; 220     ++uip_acc32[1];
 159  e4dc 725c00e2      	inc	_uip_acc32+1
 160                     ; 221     if (uip_acc32[1] == 0) {
 162  e4e0 2604          	jrne	L76
 163                     ; 222       ++uip_acc32[0];
 165  e4e2 725c00e1      	inc	_uip_acc32
 166  e4e6               L76:
 167                     ; 226   if (uip_acc32[3] < (op16 & 0xff)) {
 169  e4e6 c600e4        	ld	a,_uip_acc32+3
 170  e4e9 5f            	clrw	x
 171  e4ea 97            	ld	xl,a
 172  e4eb 1f01          	ldw	(OFST-1,sp),x
 174  e4ed 5f            	clrw	x
 175  e4ee 7b08          	ld	a,(OFST+6,sp)
 176  e4f0 02            	rlwa	x,a
 177  e4f1 1301          	cpw	x,(OFST-1,sp)
 178  e4f3 2310          	jrule	L37
 179                     ; 227     ++uip_acc32[2];
 181  e4f5 725c00e3      	inc	_uip_acc32+2
 182                     ; 228     if (uip_acc32[2] == 0) {
 184  e4f9 260a          	jrne	L37
 185                     ; 229       ++uip_acc32[1];
 187  e4fb 725c00e2      	inc	_uip_acc32+1
 188                     ; 230       if (uip_acc32[1] == 0) {
 190  e4ff 2604          	jrne	L37
 191                     ; 231         ++uip_acc32[0];
 193  e501 725c00e1      	inc	_uip_acc32
 194  e505               L37:
 195                     ; 235 }
 198  e505 5b04          	addw	sp,#4
 199  e507 81            	ret	
 275                     ; 242 static uint16_t chksum(uint16_t sum, const uint8_t *data, uint16_t len)
 275                     ; 243 {
 276                     	switch	.text
 277  e508               L101_chksum:
 279  e508 89            	pushw	x
 280  e509 5206          	subw	sp,#6
 281       00000006      OFST:	set	6
 284                     ; 248   dataptr = data;
 286  e50b 1e0b          	ldw	x,(OFST+5,sp)
 287  e50d 1f05          	ldw	(OFST-1,sp),x
 289                     ; 249   last_byte = data + len - 1;
 291  e50f 72fb0d        	addw	x,(OFST+7,sp)
 292  e512 5a            	decw	x
 293  e513 1f01          	ldw	(OFST-5,sp),x
 296  e515 1e05          	ldw	x,(OFST-1,sp)
 297  e517 2020          	jra	L341
 298  e519               L731:
 299                     ; 252     t = (dataptr[0] << 8) + dataptr[1];
 301  e519 f6            	ld	a,(x)
 302  e51a 5f            	clrw	x
 303  e51b 97            	ld	xl,a
 304  e51c 1605          	ldw	y,(OFST-1,sp)
 305  e51e 4f            	clr	a
 306  e51f 90eb01        	add	a,(1,y)
 307  e522 2401          	jrnc	L21
 308  e524 5c            	incw	x
 309  e525               L21:
 310  e525 02            	rlwa	x,a
 311  e526 1f03          	ldw	(OFST-3,sp),x
 313                     ; 253     sum += t;
 315  e528 72fb07        	addw	x,(OFST+1,sp)
 316                     ; 254     if (sum < t) {
 318  e52b 1303          	cpw	x,(OFST-3,sp)
 319  e52d 2401          	jruge	L741
 320                     ; 255       sum++; /* carry */
 322  e52f 5c            	incw	x
 323  e530               L741:
 324  e530 1f07          	ldw	(OFST+1,sp),x
 325                     ; 257     dataptr += 2;
 327  e532 1e05          	ldw	x,(OFST-1,sp)
 328  e534 1c0002        	addw	x,#2
 329  e537 1f05          	ldw	(OFST-1,sp),x
 331  e539               L341:
 332                     ; 251   while (dataptr < last_byte) { /* At least two more bytes */
 334  e539 1301          	cpw	x,(OFST-5,sp)
 335  e53b 25dc          	jrult	L731
 336                     ; 260   if (dataptr == last_byte) {
 338  e53d 2612          	jrne	L151
 339                     ; 261     t = (dataptr[0] << 8) + 0;
 341  e53f f6            	ld	a,(x)
 342  e540 97            	ld	xl,a
 343  e541 4f            	clr	a
 344  e542 02            	rlwa	x,a
 345  e543 1f03          	ldw	(OFST-3,sp),x
 347                     ; 262     sum += t;
 349  e545 72fb07        	addw	x,(OFST+1,sp)
 350  e548 1f07          	ldw	(OFST+1,sp),x
 351                     ; 263     if (sum < t) {
 353  e54a 1303          	cpw	x,(OFST-3,sp)
 354  e54c 2403          	jruge	L151
 355                     ; 264       sum++; /* carry */
 357  e54e 5c            	incw	x
 358  e54f 1f07          	ldw	(OFST+1,sp),x
 359  e551               L151:
 360                     ; 268   return sum;
 362  e551 1e07          	ldw	x,(OFST+1,sp)
 365  e553 5b08          	addw	sp,#8
 366  e555 81            	ret	
 410                     ; 273 uint16_t uip_chksum(uint16_t *data, uint16_t len)
 410                     ; 274 {
 411                     	switch	.text
 412  e556               _uip_chksum:
 414  e556 89            	pushw	x
 415       00000000      OFST:	set	0
 418                     ; 275   return htons(chksum(0, (uint8_t *)data, len));
 420  e557 1e05          	ldw	x,(OFST+5,sp)
 421  e559 89            	pushw	x
 422  e55a 1e03          	ldw	x,(OFST+3,sp)
 423  e55c 89            	pushw	x
 424  e55d 5f            	clrw	x
 425  e55e ada8          	call	L101_chksum
 427  e560 5b04          	addw	sp,#4
 428  e562 cdefeb        	call	_htons
 432  e565 5b02          	addw	sp,#2
 433  e567 81            	ret	
 468                     ; 281 uint16_t uip_ipchksum(void)
 468                     ; 282 {
 469                     	switch	.text
 470  e568               _uip_ipchksum:
 472  e568 89            	pushw	x
 473       00000002      OFST:	set	2
 476                     ; 285   sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 478  e569 ae0014        	ldw	x,#20
 479  e56c 89            	pushw	x
 480  e56d ae01e9        	ldw	x,#_uip_buf+14
 481  e570 89            	pushw	x
 482  e571 5f            	clrw	x
 483  e572 ad94          	call	L101_chksum
 485  e574 5b04          	addw	sp,#4
 486  e576 1f01          	ldw	(OFST-1,sp),x
 488                     ; 287   return (sum == 0) ? 0xffff : htons(sum);
 490  e578 2603          	jrne	L62
 491  e57a 5a            	decw	x
 492  e57b 2003          	jra	L03
 493  e57d               L62:
 494  e57d cdefeb        	call	_htons
 496  e580               L03:
 499  e580 5b02          	addw	sp,#2
 500  e582 81            	ret	
 549                     ; 293 static uint16_t upper_layer_chksum(uint8_t proto)
 549                     ; 294 {
 550                     	switch	.text
 551  e583               L112_upper_layer_chksum:
 553  e583 88            	push	a
 554  e584 5204          	subw	sp,#4
 555       00000004      OFST:	set	4
 558                     ; 298   upper_layer_len = (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 560  e586 c601eb        	ld	a,_uip_buf+16
 561  e589 5f            	clrw	x
 562  e58a 97            	ld	xl,a
 563  e58b 4f            	clr	a
 564  e58c cb01ec        	add	a,_uip_buf+17
 565  e58f 2401          	jrnc	L63
 566  e591 5c            	incw	x
 567  e592               L63:
 568  e592 02            	rlwa	x,a
 569  e593 1d0014        	subw	x,#20
 570  e596 1f01          	ldw	(OFST-3,sp),x
 572                     ; 303   sum = upper_layer_len + proto;
 574  e598 5f            	clrw	x
 575  e599 7b05          	ld	a,(OFST+1,sp)
 576  e59b 97            	ld	xl,a
 577  e59c 72fb01        	addw	x,(OFST-3,sp)
 578  e59f 1f03          	ldw	(OFST-1,sp),x
 580                     ; 305   sum = chksum(sum, (uint8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 582  e5a1 ae0008        	ldw	x,#8
 583  e5a4 89            	pushw	x
 584  e5a5 ae01f5        	ldw	x,#_uip_buf+26
 585  e5a8 89            	pushw	x
 586  e5a9 1e07          	ldw	x,(OFST+3,sp)
 587  e5ab cde508        	call	L101_chksum
 589  e5ae 5b04          	addw	sp,#4
 590  e5b0 1f03          	ldw	(OFST-1,sp),x
 592                     ; 308   sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN], upper_layer_len);
 594  e5b2 1e01          	ldw	x,(OFST-3,sp)
 595  e5b4 89            	pushw	x
 596  e5b5 ae01fd        	ldw	x,#_uip_buf+34
 597  e5b8 89            	pushw	x
 598  e5b9 1e07          	ldw	x,(OFST+3,sp)
 599  e5bb cde508        	call	L101_chksum
 601  e5be 5b04          	addw	sp,#4
 602  e5c0 1f03          	ldw	(OFST-1,sp),x
 604                     ; 310   return (sum == 0) ? 0xffff : htons(sum);
 606  e5c2 2603          	jrne	L44
 607  e5c4 5a            	decw	x
 608  e5c5 2003          	jra	L64
 609  e5c7               L44:
 610  e5c7 cdefeb        	call	_htons
 612  e5ca               L64:
 615  e5ca 5b05          	addw	sp,#5
 616  e5cc 81            	ret	
 640                     ; 315 uint16_t uip_tcpchksum(void)
 640                     ; 316 {
 641                     	switch	.text
 642  e5cd               _uip_tcpchksum:
 646                     ; 317   return upper_layer_chksum(UIP_PROTO_TCP);
 648  e5cd a606          	ld	a,#6
 652  e5cf 20b2          	jp	L112_upper_layer_chksum
 679                     ; 323 void uip_init(void)
 679                     ; 324 {
 680                     	switch	.text
 681  e5d1               _uip_init:
 685                     ; 325   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 687  e5d1 4f            	clr	a
 688  e5d2 c70067        	ld	L14_c,a
 689  e5d5               L352:
 690                     ; 326     uip_listenports[c] = 0;
 692  e5d5 5f            	clrw	x
 693  e5d6 97            	ld	xl,a
 694  e5d7 58            	sllw	x
 695  e5d8 905f          	clrw	y
 696  e5da df006e        	ldw	(_uip_listenports,x),y
 697                     ; 325   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 699  e5dd 725c0067      	inc	L14_c
 702  e5e1 c60067        	ld	a,L14_c
 703  e5e4 a105          	cp	a,#5
 704  e5e6 25ed          	jrult	L352
 705                     ; 328   for (c = 0; c < UIP_CONNS; ++c) {
 707  e5e8 4f            	clr	a
 708  e5e9 c70067        	ld	L14_c,a
 709  e5ec               L162:
 710                     ; 329     uip_conns[c].tcpstateflags = UIP_CLOSED;
 712  e5ec 97            	ld	xl,a
 713  e5ed a628          	ld	a,#40
 714  e5ef 42            	mul	x,a
 715  e5f0 724f00fe      	clr	(_uip_conns+25,x)
 716                     ; 328   for (c = 0; c < UIP_CONNS; ++c) {
 718  e5f4 725c0067      	inc	L14_c
 721  e5f8 c60067        	ld	a,L14_c
 722  e5fb a106          	cp	a,#6
 723  e5fd 25ed          	jrult	L162
 724                     ; 335   uip_stat.ip.drop = 0;
 726  e5ff 5f            	clrw	x
 727  e600 cf008b        	ldw	_uip_stat+2,x
 728  e603 cf0089        	ldw	_uip_stat,x
 729                     ; 336   uip_stat.ip.recv = 0;
 731  e606 cf008f        	ldw	_uip_stat+6,x
 732  e609 cf008d        	ldw	_uip_stat+4,x
 733                     ; 337   uip_stat.ip.sent = 0;
 735  e60c cf0093        	ldw	_uip_stat+10,x
 736  e60f cf0091        	ldw	_uip_stat+8,x
 737                     ; 338   uip_stat.ip.vhlerr = 0;
 739  e612 cf0097        	ldw	_uip_stat+14,x
 740  e615 cf0095        	ldw	_uip_stat+12,x
 741                     ; 339   uip_stat.ip.hblenerr = 0;
 743  e618 cf009b        	ldw	_uip_stat+18,x
 744  e61b cf0099        	ldw	_uip_stat+16,x
 745                     ; 340   uip_stat.ip.lblenerr = 0;
 747  e61e cf009f        	ldw	_uip_stat+22,x
 748  e621 cf009d        	ldw	_uip_stat+20,x
 749                     ; 341   uip_stat.ip.fragerr = 0;
 751  e624 cf00a3        	ldw	_uip_stat+26,x
 752  e627 cf00a1        	ldw	_uip_stat+24,x
 753                     ; 342   uip_stat.ip.chkerr = 0;
 755  e62a cf00a7        	ldw	_uip_stat+30,x
 756  e62d cf00a5        	ldw	_uip_stat+28,x
 757                     ; 343   uip_stat.ip.protoerr = 0;
 759  e630 cf00ab        	ldw	_uip_stat+34,x
 760  e633 cf00a9        	ldw	_uip_stat+32,x
 761                     ; 344   uip_stat.icmp.drop = 0;
 763  e636 cf00af        	ldw	_uip_stat+38,x
 764  e639 cf00ad        	ldw	_uip_stat+36,x
 765                     ; 345   uip_stat.icmp.recv = 0;
 767  e63c cf00b3        	ldw	_uip_stat+42,x
 768  e63f cf00b1        	ldw	_uip_stat+40,x
 769                     ; 346   uip_stat.icmp.sent = 0;
 771  e642 cf00b7        	ldw	_uip_stat+46,x
 772  e645 cf00b5        	ldw	_uip_stat+44,x
 773                     ; 347   uip_stat.icmp.typeerr = 0;
 775  e648 cf00bb        	ldw	_uip_stat+50,x
 776  e64b cf00b9        	ldw	_uip_stat+48,x
 777                     ; 348   uip_stat.tcp.drop = 0;
 779  e64e cf00bf        	ldw	_uip_stat+54,x
 780  e651 cf00bd        	ldw	_uip_stat+52,x
 781                     ; 349   uip_stat.tcp.recv = 0;
 783  e654 cf00c3        	ldw	_uip_stat+58,x
 784  e657 cf00c1        	ldw	_uip_stat+56,x
 785                     ; 350   uip_stat.tcp.sent = 0;
 787  e65a cf00c7        	ldw	_uip_stat+62,x
 788  e65d cf00c5        	ldw	_uip_stat+60,x
 789                     ; 351   uip_stat.tcp.chkerr = 0;
 791  e660 cf00cb        	ldw	_uip_stat+66,x
 792  e663 cf00c9        	ldw	_uip_stat+64,x
 793                     ; 352   uip_stat.tcp.ackerr = 0;
 795  e666 cf00cf        	ldw	_uip_stat+70,x
 796  e669 cf00cd        	ldw	_uip_stat+68,x
 797                     ; 353   uip_stat.tcp.rst = 0;
 799  e66c cf00d3        	ldw	_uip_stat+74,x
 800  e66f cf00d1        	ldw	_uip_stat+72,x
 801                     ; 354   uip_stat.tcp.rexmit = 0;
 803  e672 cf00d7        	ldw	_uip_stat+78,x
 804  e675 cf00d5        	ldw	_uip_stat+76,x
 805                     ; 355   uip_stat.tcp.syndrop = 0;
 807  e678 cf00db        	ldw	_uip_stat+82,x
 808  e67b cf00d9        	ldw	_uip_stat+80,x
 809                     ; 356   uip_stat.tcp.synrst = 0;
 811  e67e cf00df        	ldw	_uip_stat+86,x
 812  e681 cf00dd        	ldw	_uip_stat+84,x
 813                     ; 358 }
 816  e684 81            	ret	
 850                     ; 362 void uip_unlisten(uint16_t port)
 850                     ; 363 {
 851                     	switch	.text
 852  e685               _uip_unlisten:
 854  e685 89            	pushw	x
 855       00000000      OFST:	set	0
 858                     ; 364   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 860  e686 4f            	clr	a
 861  e687 c70067        	ld	L14_c,a
 862  e68a               L303:
 863                     ; 365     if (uip_listenports[c] == port) {
 865  e68a 5f            	clrw	x
 866  e68b 97            	ld	xl,a
 867  e68c 58            	sllw	x
 868  e68d de006e        	ldw	x,(_uip_listenports,x)
 869  e690 1301          	cpw	x,(OFST+1,sp)
 870  e692 260a          	jrne	L113
 871                     ; 366       uip_listenports[c] = 0;
 873  e694 5f            	clrw	x
 874  e695 97            	ld	xl,a
 875  e696 58            	sllw	x
 876  e697 905f          	clrw	y
 877  e699 df006e        	ldw	(_uip_listenports,x),y
 878                     ; 367       return;
 880  e69c 200b          	jra	L26
 881  e69e               L113:
 882                     ; 364   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 884  e69e 725c0067      	inc	L14_c
 887  e6a2 c60067        	ld	a,L14_c
 888  e6a5 a105          	cp	a,#5
 889  e6a7 25e1          	jrult	L303
 890                     ; 370 }
 891  e6a9               L26:
 894  e6a9 85            	popw	x
 895  e6aa 81            	ret	
 929                     ; 374 void uip_listen(uint16_t port)
 929                     ; 375 {
 930                     	switch	.text
 931  e6ab               _uip_listen:
 933  e6ab 89            	pushw	x
 934       00000000      OFST:	set	0
 937                     ; 376   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 939  e6ac 4f            	clr	a
 940  e6ad c70067        	ld	L14_c,a
 941  e6b0               L723:
 942                     ; 377     if (uip_listenports[c] == 0) {
 944  e6b0 5f            	clrw	x
 945  e6b1 97            	ld	xl,a
 946  e6b2 58            	sllw	x
 947  e6b3 d6006f        	ld	a,(_uip_listenports+1,x)
 948  e6b6 da006e        	or	a,(_uip_listenports,x)
 949  e6b9 2607          	jrne	L533
 950                     ; 378       uip_listenports[c] = port;
 952  e6bb 1601          	ldw	y,(OFST+1,sp)
 953  e6bd df006e        	ldw	(_uip_listenports,x),y
 954                     ; 379       return;
 956  e6c0 200b          	jra	L66
 957  e6c2               L533:
 958                     ; 376   for (c = 0; c < UIP_LISTENPORTS; ++c) {
 960  e6c2 725c0067      	inc	L14_c
 963  e6c6 c60067        	ld	a,L14_c
 964  e6c9 a105          	cp	a,#5
 965  e6cb 25e3          	jrult	L723
 966                     ; 382 }
 967  e6cd               L66:
 970  e6cd 85            	popw	x
 971  e6ce 81            	ret	
1006                     ; 386 static void uip_add_rcv_nxt(uint16_t n)
1006                     ; 387 {
1007                     	switch	.text
1008  e6cf               L733_uip_add_rcv_nxt:
1012                     ; 388   uip_add32(uip_conn->rcv_nxt, n);
1014  e6cf 89            	pushw	x
1015  e6d0 ce01d5        	ldw	x,_uip_conn
1016  e6d3 1c0008        	addw	x,#8
1017  e6d6 cde4b1        	call	_uip_add32
1019  e6d9 85            	popw	x
1020                     ; 389   uip_conn->rcv_nxt[0] = uip_acc32[0];
1022  e6da ce01d5        	ldw	x,_uip_conn
1023  e6dd c600e1        	ld	a,_uip_acc32
1024  e6e0 e708          	ld	(8,x),a
1025                     ; 390   uip_conn->rcv_nxt[1] = uip_acc32[1];
1027  e6e2 c600e2        	ld	a,_uip_acc32+1
1028  e6e5 e709          	ld	(9,x),a
1029                     ; 391   uip_conn->rcv_nxt[2] = uip_acc32[2];
1031  e6e7 c600e3        	ld	a,_uip_acc32+2
1032  e6ea e70a          	ld	(10,x),a
1033                     ; 392   uip_conn->rcv_nxt[3] = uip_acc32[3];
1035  e6ec c600e4        	ld	a,_uip_acc32+3
1036  e6ef e70b          	ld	(11,x),a
1037                     ; 393 }
1040  e6f1 81            	ret	
1327                     ; 397 void uip_process(uint8_t flag)
1327                     ; 398 {
1328                     	switch	.text
1329  e6f2               _uip_process:
1331  e6f2 88            	push	a
1332  e6f3 5205          	subw	sp,#5
1333       00000005      OFST:	set	5
1336                     ; 399   register struct uip_conn *uip_connr = uip_conn;
1338  e6f5 ce01d5        	ldw	x,_uip_conn
1339  e6f8 1f04          	ldw	(OFST-1,sp),x
1341                     ; 401   uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
1343  e6fa ae0211        	ldw	x,#_uip_buf+54
1344  e6fd cf01d9        	ldw	_uip_appdata,x
1345  e700 cf007a        	ldw	_uip_sappdata,x
1346                     ; 405   if (flag == UIP_POLL_REQUEST) {
1348  e703 a103          	cp	a,#3
1349  e705 2614          	jrne	L775
1350                     ; 406     if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED && !uip_outstanding(uip_connr)) {
1352  e707 1e04          	ldw	x,(OFST-1,sp)
1353  e709 e619          	ld	a,(25,x)
1354  e70b a40f          	and	a,#15
1355  e70d a103          	cp	a,#3
1356  e70f 2703ccefe0    	jrne	L734
1358  e714 e611          	ld	a,(17,x)
1359  e716 ea10          	or	a,(16,x)
1360                     ; 407       uip_flags = UIP_POLL;
1361                     ; 408       UIP_APPCALL();
1363                     ; 409       goto appsend;
1365  e718 cce7e6        	jp	LC001
1366  e71b               L775:
1367                     ; 415   else if (flag == UIP_TIMER) {
1369  e71b 7b06          	ld	a,(OFST+1,sp)
1370  e71d a102          	cp	a,#2
1371  e71f 2703cce806    	jrne	L306
1372                     ; 417     if (++iss[3] == 0) {
1374  e724 725c006b      	inc	L73_iss+3
1375  e728 2610          	jrne	L706
1376                     ; 418       if (++iss[2] == 0) {
1378  e72a 725c006a      	inc	L73_iss+2
1379  e72e 260a          	jrne	L706
1380                     ; 419         if (++iss[1] == 0) {
1382  e730 725c0069      	inc	L73_iss+1
1383  e734 2604          	jrne	L706
1384                     ; 420           ++iss[0];
1386  e736 725c0068      	inc	L73_iss
1387  e73a               L706:
1388                     ; 426     uip_len = 0;
1390  e73a 5f            	clrw	x
1391  e73b cf01d7        	ldw	_uip_len,x
1392                     ; 427     uip_slen = 0;
1394  e73e cf0078        	ldw	_uip_slen,x
1395                     ; 433     if (uip_connr->tcpstateflags == UIP_TIME_WAIT || uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
1397  e741 1e04          	ldw	x,(OFST-1,sp)
1398  e743 e619          	ld	a,(25,x)
1399  e745 a107          	cp	a,#7
1400  e747 2704          	jreq	L716
1402  e749 a105          	cp	a,#5
1403  e74b 260d          	jrne	L516
1404  e74d               L716:
1405                     ; 434       ++(uip_connr->timer);
1407  e74d 6c1a          	inc	(26,x)
1408                     ; 435       if (uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
1410  e74f e61a          	ld	a,(26,x)
1411  e751 a178          	cp	a,#120
1412  e753 26bc          	jrne	L734
1413                     ; 436         uip_connr->tcpstateflags = UIP_CLOSED;
1415  e755 6f19          	clr	(25,x)
1416  e757 ccefe0        	jra	L734
1417  e75a               L516:
1418                     ; 439     else if (uip_connr->tcpstateflags != UIP_CLOSED) {
1420  e75a e619          	ld	a,(25,x)
1421  e75c 27f9          	jreq	L734
1422                     ; 443       if (uip_outstanding(uip_connr)) {
1424  e75e e611          	ld	a,(17,x)
1425  e760 ea10          	or	a,(16,x)
1426  e762 277c          	jreq	L726
1427                     ; 444         if (uip_connr->timer-- == 0) {
1429  e764 e61a          	ld	a,(26,x)
1430  e766 6a1a          	dec	(26,x)
1431  e768 4d            	tnz	a
1432  e769 26ec          	jrne	L734
1433                     ; 445           if (uip_connr->nrtx == UIP_MAXRTX
1433                     ; 446 	    || ((uip_connr->tcpstateflags == UIP_SYN_SENT
1433                     ; 447             || uip_connr->tcpstateflags == UIP_SYN_RCVD)
1433                     ; 448             && uip_connr->nrtx == UIP_MAXSYNRTX)) {
1435  e76b e61b          	ld	a,(27,x)
1436  e76d a108          	cp	a,#8
1437  e76f 270f          	jreq	L536
1439  e771 e619          	ld	a,(25,x)
1440  e773 a102          	cp	a,#2
1441  e775 2703          	jreq	L736
1443  e777 4a            	dec	a
1444  e778 2616          	jrne	L336
1445  e77a               L736:
1447  e77a e61b          	ld	a,(27,x)
1448  e77c a105          	cp	a,#5
1449  e77e 2610          	jrne	L336
1450  e780               L536:
1451                     ; 449             uip_connr->tcpstateflags = UIP_CLOSED;
1453  e780 6f19          	clr	(25,x)
1454                     ; 454             uip_flags = UIP_TIMEDOUT;
1456  e782 35800088      	mov	_uip_flags,#128
1457                     ; 455             UIP_APPCALL();
1459  e786 cdf384        	call	_uip_TcpAppHubCall
1461                     ; 458             BUF->flags = TCP_RST | TCP_ACK;
1463  e789 3514020a      	mov	_uip_buf+47,#20
1464                     ; 459             goto tcp_send_nodata;
1466  e78d ccee13        	jra	L324
1467  e790               L336:
1468                     ; 463 	  if(uip_connr->nrtx > 4) uip_connr->nrtx = 4;
1470  e790 1e04          	ldw	x,(OFST-1,sp)
1471  e792 e61b          	ld	a,(27,x)
1472  e794 a105          	cp	a,#5
1473  e796 2504          	jrult	L146
1476  e798 a604          	ld	a,#4
1477  e79a e71b          	ld	(27,x),a
1478  e79c               L146:
1479                     ; 464 	  uip_connr->timer = (uint8_t)(UIP_RTO << uip_connr->nrtx);
1481  e79c 5f            	clrw	x
1482  e79d 97            	ld	xl,a
1483  e79e a603          	ld	a,#3
1484  e7a0 5d            	tnzw	x
1485  e7a1 2704          	jreq	L201
1486  e7a3               L401:
1487  e7a3 48            	sll	a
1488  e7a4 5a            	decw	x
1489  e7a5 26fc          	jrne	L401
1490  e7a7               L201:
1491  e7a7 1e04          	ldw	x,(OFST-1,sp)
1492  e7a9 e71a          	ld	(26,x),a
1493                     ; 465 	  ++(uip_connr->nrtx);
1495  e7ab 6c1b          	inc	(27,x)
1496                     ; 473           UIP_STAT(++uip_stat.tcp.rexmit);
1498  e7ad ae00d5        	ldw	x,#_uip_stat+76
1499  e7b0 a601          	ld	a,#1
1500  e7b2 cdf487        	call	c_lgadc
1502                     ; 474           switch (uip_connr->tcpstateflags & UIP_TS_MASK) {
1504  e7b5 1e04          	ldw	x,(OFST-1,sp)
1505  e7b7 e619          	ld	a,(25,x)
1506  e7b9 a40f          	and	a,#15
1508                     ; 488             case UIP_FIN_WAIT_1:
1508                     ; 489             case UIP_CLOSING:
1508                     ; 490             case UIP_LAST_ACK:
1508                     ; 491               /* In all these states we should retransmit a FINACK. */
1508                     ; 492               goto tcp_send_finack;
1509  e7bb 4a            	dec	a
1510  e7bc 2603ccebc2    	jreq	L173
1511  e7c1 a002          	sub	a,#2
1512  e7c3 2711          	jreq	L753
1513  e7c5 4a            	dec	a
1514  e7c6 2603ccee0f    	jreq	LC003
1515  e7cb a002          	sub	a,#2
1516  e7cd 27f9          	jreq	LC003
1517  e7cf a002          	sub	a,#2
1518  e7d1 27f5          	jreq	LC003
1519  e7d3 ccefe0        	jra	L734
1520  e7d6               L753:
1521                     ; 479             case UIP_ESTABLISHED:
1521                     ; 480               /* In the ESTABLISHED state, we call upon the application
1521                     ; 481                  to do the actual retransmit after which we jump into
1521                     ; 482                  the code for sending out the packet (the apprexmit
1521                     ; 483                  label). */
1521                     ; 484               uip_flags = UIP_REXMIT;
1523  e7d6 35040088      	mov	_uip_flags,#4
1524                     ; 485               UIP_APPCALL();
1526  e7da cdf384        	call	_uip_TcpAppHubCall
1528                     ; 486               goto apprexmit;
1530  e7dd ccee56        	jra	L504
1531                     ; 488             case UIP_FIN_WAIT_1:
1531                     ; 489             case UIP_CLOSING:
1531                     ; 490             case UIP_LAST_ACK:
1531                     ; 491               /* In all these states we should retransmit a FINACK. */
1531                     ; 492               goto tcp_send_finack;
1533  e7e0               L726:
1534                     ; 497       else if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
1536  e7e0 e619          	ld	a,(25,x)
1537  e7e2 a40f          	and	a,#15
1538  e7e4 a103          	cp	a,#3
1539                     ; 499         uip_flags = UIP_POLL;
1541  e7e6               LC001:
1542  e7e6 26eb          	jrne	L734
1544  e7e8 35080088      	mov	_uip_flags,#8
1545                     ; 500         UIP_APPCALL();
1548                     ; 501         goto appsend;
1549  e7ec               L304:
1553  e7ec cdf384        	call	_uip_TcpAppHubCall
1554                     ; 970         appsend:
1554                     ; 971 
1554                     ; 972         if (uip_flags & UIP_ABORT) {
1556  e7ef 720a008803cc  	btjf	_uip_flags,#5,L7111
1557                     ; 973           uip_slen = 0;
1559  e7f7 5f            	clrw	x
1560  e7f8 cf0078        	ldw	_uip_slen,x
1561                     ; 974           uip_connr->tcpstateflags = UIP_CLOSED;
1563  e7fb 1e04          	ldw	x,(OFST-1,sp)
1564                     ; 975           BUF->flags = TCP_RST | TCP_ACK;
1566  e7fd 3514020a      	mov	_uip_buf+47,#20
1567  e801 6f19          	clr	(25,x)
1568                     ; 976           goto tcp_send_nodata;
1570  e803 ccee13        	jra	L324
1571  e806               L306:
1572                     ; 508   UIP_STAT(++uip_stat.ip.recv);
1574  e806 ae008d        	ldw	x,#_uip_stat+4
1575  e809 a601          	ld	a,#1
1576  e80b cdf487        	call	c_lgadc
1578                     ; 513   if (BUF->vhl != 0x45) { /* IP version and header length. */
1580  e80e c601e9        	ld	a,_uip_buf+14
1581  e811 a145          	cp	a,#69
1582  e813 2713          	jreq	L356
1583                     ; 514     UIP_STAT(++uip_stat.ip.drop);
1585  e815 ae0089        	ldw	x,#_uip_stat
1586  e818 a601          	ld	a,#1
1587  e81a cdf487        	call	c_lgadc
1589                     ; 515     UIP_STAT(++uip_stat.ip.vhlerr);
1591  e81d ae0095        	ldw	x,#_uip_stat+12
1592  e820 a601          	ld	a,#1
1593  e822 cdf487        	call	c_lgadc
1595                     ; 516     goto drop;
1597  e825 ccefe0        	jra	L734
1598  e828               L356:
1599                     ; 526   if ((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
1601  e828 c601eb        	ld	a,_uip_buf+16
1602  e82b 5f            	clrw	x
1603  e82c 97            	ld	xl,a
1604  e82d 4f            	clr	a
1605  e82e cb01ec        	add	a,_uip_buf+17
1606  e831 2401          	jrnc	L211
1607  e833 5c            	incw	x
1608  e834               L211:
1609  e834 02            	rlwa	x,a
1610  e835 c301d7        	cpw	x,_uip_len
1611  e838 22eb          	jrugt	L734
1612                     ; 527     uip_len = (BUF->len[0] << 8) + BUF->len[1];
1614  e83a c601eb        	ld	a,_uip_buf+16
1615  e83d 5f            	clrw	x
1616  e83e 97            	ld	xl,a
1617  e83f 4f            	clr	a
1618  e840 cb01ec        	add	a,_uip_buf+17
1619  e843 2401          	jrnc	L411
1620  e845 5c            	incw	x
1621  e846               L411:
1622  e846 c701d8        	ld	_uip_len+1,a
1623  e849 9f            	ld	a,xl
1624  e84a c701d7        	ld	_uip_len,a
1626                     ; 534   if ((BUF->ipoffset[0] & 0x3f) != 0 || BUF->ipoffset[1] != 0) {
1628  e84d c601ef        	ld	a,_uip_buf+20
1629  e850 a53f          	bcp	a,#63
1630  e852 2605          	jrne	L366
1632  e854 c601f0        	ld	a,_uip_buf+21
1633  e857 2713          	jreq	L166
1634  e859               L366:
1635                     ; 535     UIP_STAT(++uip_stat.ip.drop);
1637  e859 ae0089        	ldw	x,#_uip_stat
1638  e85c a601          	ld	a,#1
1639  e85e cdf487        	call	c_lgadc
1641                     ; 536     UIP_STAT(++uip_stat.ip.fragerr);
1643  e861 ae00a1        	ldw	x,#_uip_stat+24
1644  e864 a601          	ld	a,#1
1645  e866 cdf487        	call	c_lgadc
1647                     ; 537     goto drop;
1649  e869 ccefe0        	jra	L734
1650  e86c               L166:
1651                     ; 541     if (!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
1653  e86c ce01f9        	ldw	x,_uip_buf+30
1654  e86f c30084        	cpw	x,_uip_hostaddr
1655  e872 2608          	jrne	L766
1657  e874 ce01fb        	ldw	x,_uip_buf+32
1658  e877 c30086        	cpw	x,_uip_hostaddr+2
1659  e87a 270b          	jreq	L566
1660  e87c               L766:
1661                     ; 542       UIP_STAT(++uip_stat.ip.drop);
1663  e87c ae0089        	ldw	x,#_uip_stat
1664  e87f a601          	ld	a,#1
1665  e881 cdf487        	call	c_lgadc
1667                     ; 543       goto drop;
1669  e884 ccefe0        	jra	L734
1670  e887               L566:
1671                     ; 546   if (uip_ipchksum() != 0xffff) { /* Compute and check the IP header checksum. */
1673  e887 cde568        	call	_uip_ipchksum
1675  e88a 5c            	incw	x
1676  e88b 2713          	jreq	L176
1677                     ; 547     UIP_STAT(++uip_stat.ip.drop);
1679  e88d ae0089        	ldw	x,#_uip_stat
1680  e890 a601          	ld	a,#1
1681  e892 cdf487        	call	c_lgadc
1683                     ; 548     UIP_STAT(++uip_stat.ip.chkerr);
1685  e895 ae00a5        	ldw	x,#_uip_stat+28
1686  e898 a601          	ld	a,#1
1687  e89a cdf487        	call	c_lgadc
1689                     ; 549     goto drop;
1691  e89d ccefe0        	jra	L734
1692  e8a0               L176:
1693                     ; 552   if (BUF->proto == UIP_PROTO_TCP) {
1695  e8a0 c601f2        	ld	a,_uip_buf+23
1696  e8a3 a106          	cp	a,#6
1697  e8a5 2624          	jrne	L376
1698                     ; 554     goto tcp_input;
1699                     ; 601   tcp_input:
1699                     ; 602   UIP_STAT(++uip_stat.tcp.recv);
1701  e8a7 ae00c1        	ldw	x,#_uip_stat+56
1702  e8aa a601          	ld	a,#1
1703  e8ac cdf487        	call	c_lgadc
1705                     ; 606   if (uip_tcpchksum() != 0xffff) { /* Compute and check the TCP checksum. */
1707  e8af cde5cd        	call	_uip_tcpchksum
1709  e8b2 5c            	incw	x
1710  e8b3 2603cce944    	jreq	L517
1711                     ; 607     UIP_STAT(++uip_stat.tcp.drop);
1713  e8b8 ae00bd        	ldw	x,#_uip_stat+52
1714  e8bb a601          	ld	a,#1
1715  e8bd cdf487        	call	c_lgadc
1717                     ; 608     UIP_STAT(++uip_stat.tcp.chkerr);
1719  e8c0 ae00c9        	ldw	x,#_uip_stat+64
1720  e8c3 a601          	ld	a,#1
1721  e8c5 cdf487        	call	c_lgadc
1723                     ; 609     goto drop;
1725  e8c8 ccefe0        	jra	L734
1726  e8cb               L376:
1727                     ; 563   if (BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from here. */
1729  e8cb 4a            	dec	a
1730  e8cc 2713          	jreq	L576
1731                     ; 564     UIP_STAT(++uip_stat.ip.drop);
1733  e8ce ae0089        	ldw	x,#_uip_stat
1734  e8d1 a601          	ld	a,#1
1735  e8d3 cdf487        	call	c_lgadc
1737                     ; 565     UIP_STAT(++uip_stat.ip.protoerr);
1739  e8d6 ae00a9        	ldw	x,#_uip_stat+32
1740  e8d9 a601          	ld	a,#1
1741  e8db cdf487        	call	c_lgadc
1743                     ; 566     goto drop;
1745  e8de ccefe0        	jra	L734
1746  e8e1               L576:
1747                     ; 569   UIP_STAT(++uip_stat.icmp.recv);
1749  e8e1 ae00b1        	ldw	x,#_uip_stat+40
1750  e8e4 4c            	inc	a
1751  e8e5 cdf487        	call	c_lgadc
1753                     ; 574   if (ICMPBUF->type != ICMP_ECHO) {
1755  e8e8 c601fd        	ld	a,_uip_buf+34
1756  e8eb a108          	cp	a,#8
1757  e8ed 2713          	jreq	L776
1758                     ; 575     UIP_STAT(++uip_stat.icmp.drop);
1760  e8ef ae00ad        	ldw	x,#_uip_stat+36
1761  e8f2 a601          	ld	a,#1
1762  e8f4 cdf487        	call	c_lgadc
1764                     ; 576     UIP_STAT(++uip_stat.icmp.typeerr);
1766  e8f7 ae00b9        	ldw	x,#_uip_stat+48
1767  e8fa a601          	ld	a,#1
1768  e8fc cdf487        	call	c_lgadc
1770                     ; 577     goto drop;
1772  e8ff ccefe0        	jra	L734
1773  e902               L776:
1774                     ; 580   ICMPBUF->type = ICMP_ECHO_REPLY;
1776  e902 725f01fd      	clr	_uip_buf+34
1777                     ; 582   if (ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
1779  e906 ce01ff        	ldw	x,_uip_buf+36
1780  e909 a3f7ff        	cpw	x,#63487
1781  e90c 2505          	jrult	L107
1782                     ; 583     ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
1784  e90e 1c0801        	addw	x,#2049
1786  e911 2003          	jra	L507
1787  e913               L107:
1788                     ; 586     ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
1790  e913 1c0800        	addw	x,#2048
1791  e916               L507:
1792  e916 cf01ff        	ldw	_uip_buf+36,x
1793                     ; 590   uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
1795  e919 ce01f5        	ldw	x,_uip_buf+26
1796  e91c cf01f9        	ldw	_uip_buf+30,x
1799  e91f ce01f7        	ldw	x,_uip_buf+28
1800  e922 cf01fb        	ldw	_uip_buf+32,x
1801                     ; 591   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
1803  e925 ce0084        	ldw	x,_uip_hostaddr
1804  e928 cf01f5        	ldw	_uip_buf+26,x
1807  e92b ce0086        	ldw	x,_uip_hostaddr+2
1808  e92e cf01f7        	ldw	_uip_buf+28,x
1809                     ; 593   UIP_STAT(++uip_stat.icmp.sent);
1811  e931 ae00b5        	ldw	x,#_uip_stat+44
1813                     ; 594   goto send;
1814  e934               L534:
1815  e934 a601          	ld	a,#1
1816  e936 cdf487        	call	c_lgadc
1817                     ; 1175   send:
1817                     ; 1176 
1817                     ; 1177   UIP_STAT(++uip_stat.ip.sent);
1819  e939 ae0091        	ldw	x,#_uip_stat+8
1820  e93c a601          	ld	a,#1
1821  e93e cdf487        	call	c_lgadc
1823                     ; 1179   uip_flags = 0;
1824                     ; 1181   return;
1826  e941 ccefe4        	jra	L202
1827  e944               L517:
1828                     ; 614   for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1]; ++uip_connr) {
1830  e944 ae00e5        	ldw	x,#_uip_conns
1832  e947 204d          	jra	L327
1833  e949               L717:
1834                     ; 615     if (uip_connr->tcpstateflags != UIP_CLOSED
1834                     ; 616       && BUF->destport == uip_connr->lport
1834                     ; 617       && BUF->srcport == uip_connr->rport
1834                     ; 618       && uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
1836  e949 e619          	ld	a,(25,x)
1837  e94b 2746          	jreq	L727
1839  e94d 9093          	ldw	y,x
1840  e94f 90ee04        	ldw	y,(4,y)
1841  e952 90c301ff      	cpw	y,_uip_buf+36
1842  e956 263b          	jrne	L727
1844  e958 9093          	ldw	y,x
1845  e95a 90ee06        	ldw	y,(6,y)
1846  e95d 90c301fd      	cpw	y,_uip_buf+34
1847  e961 2630          	jrne	L727
1849  e963 9093          	ldw	y,x
1850  e965 90fe          	ldw	y,(y)
1851  e967 90c301f5      	cpw	y,_uip_buf+26
1852  e96b 2626          	jrne	L727
1854  e96d 9093          	ldw	y,x
1855  e96f 90ee02        	ldw	y,(2,y)
1856  e972 90c301f7      	cpw	y,_uip_buf+28
1857  e976 261b          	jrne	L727
1858                     ; 619       goto found;
1859                     ; 799   found:
1859                     ; 800   uip_conn = uip_connr;
1861  e978 cf01d5        	ldw	_uip_conn,x
1862                     ; 801   uip_flags = 0;
1864  e97b 725f0088      	clr	_uip_flags
1865                     ; 806   if (BUF->flags & TCP_RST) {
1867  e97f 7204020a03cc  	btjf	_uip_buf+47,#2,L7301
1868                     ; 807     uip_connr->tcpstateflags = UIP_CLOSED;
1870  e987 6f19          	clr	(25,x)
1871                     ; 808     uip_flags = UIP_ABORT;
1873  e989 35200088      	mov	_uip_flags,#32
1874                     ; 809     UIP_APPCALL();
1876  e98d cdf384        	call	_uip_TcpAppHubCall
1878                     ; 810     goto drop;
1880  e990 ccefe0        	jra	L734
1881  e993               L727:
1882                     ; 614   for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1]; ++uip_connr) {
1884  e993 1c0028        	addw	x,#40
1885  e996               L327:
1886  e996 1f04          	ldw	(OFST-1,sp),x
1890  e998 a301ad        	cpw	x,#_uip_conns+200
1891  e99b 23ac          	jrule	L717
1892                     ; 627   if ((BUF->flags & TCP_CTL) != TCP_SYN) {
1894  e99d c6020a        	ld	a,_uip_buf+47
1895  e9a0 a43f          	and	a,#63
1896  e9a2 a102          	cp	a,#2
1897  e9a4 2647          	jrne	L563
1898                     ; 628     goto reset;
1900                     ; 631   tmp16 = BUF->destport;
1902  e9a6 ce01ff        	ldw	x,_uip_buf+36
1903  e9a9 cf0064        	ldw	L54_tmp16,x
1904                     ; 633   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1906  e9ac 4f            	clr	a
1907  e9ad c70067        	ld	L14_c,a
1908  e9b0               L337:
1909                     ; 634     if (tmp16 == uip_listenports[c]) goto found_listen;
1911  e9b0 5f            	clrw	x
1912  e9b1 97            	ld	xl,a
1913  e9b2 58            	sllw	x
1914  e9b3 9093          	ldw	y,x
1915  e9b5 90de006e      	ldw	y,(_uip_listenports,y)
1916  e9b9 90c30064      	cpw	y,L54_tmp16
1917  e9bd 261b          	jrne	L147
1919                     ; 699   found_listen:
1919                     ; 700   /* First we check if there are any connections avaliable. Unused
1919                     ; 701      connections are kept in the same table as used connections, but
1919                     ; 702      unused ones have the tcpstate set to CLOSED. Also, connections in
1919                     ; 703      TIME_WAIT are kept track of and we'll use the oldest one if no
1919                     ; 704      CLOSED connections are found. Thanks to Eddie C. Dost for a very
1919                     ; 705      nice algorithm for the TIME_WAIT search. */
1919                     ; 706   uip_connr = 0;
1921  e9bf 5f            	clrw	x
1922  e9c0 1f04          	ldw	(OFST-1,sp),x
1924                     ; 707   for (c = 0; c < UIP_CONNS; ++c) {
1926  e9c2 4f            	clr	a
1927  e9c3 c70067        	ld	L14_c,a
1928  e9c6               L367:
1929                     ; 708     if (uip_conns[c].tcpstateflags == UIP_CLOSED) {
1931  e9c6 97            	ld	xl,a
1932  e9c7 a628          	ld	a,#40
1933  e9c9 42            	mul	x,a
1934  e9ca d600fe        	ld	a,(_uip_conns+25,x)
1935  e9cd 2703ccea87    	jrne	L177
1936                     ; 709       uip_connr = &uip_conns[c];
1938  e9d2 1c00e5        	addw	x,#_uip_conns
1939  e9d5 1f04          	ldw	(OFST-1,sp),x
1941                     ; 710       break;
1943  e9d7 cceab9        	jra	L767
1944  e9da               L147:
1945                     ; 633   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1947  e9da 725c0067      	inc	L14_c
1950  e9de c60067        	ld	a,L14_c
1951  e9e1 a105          	cp	a,#5
1952  e9e3 25cb          	jrult	L337
1953                     ; 638   UIP_STAT(++uip_stat.tcp.synrst);
1955  e9e5 ae00dd        	ldw	x,#_uip_stat+84
1956  e9e8 a601          	ld	a,#1
1957  e9ea cdf487        	call	c_lgadc
1959  e9ed               L563:
1960                     ; 639   reset:
1960                     ; 640 
1960                     ; 641   /* We do not send resets in response to resets. */
1960                     ; 642   if (BUF->flags & TCP_RST) {
1962  e9ed 7204020a9e    	btjt	_uip_buf+47,#2,L734
1963                     ; 643     goto drop;
1965                     ; 646   UIP_STAT(++uip_stat.tcp.rst);
1967  e9f2 ae00d1        	ldw	x,#_uip_stat+72
1968  e9f5 a601          	ld	a,#1
1969  e9f7 cdf487        	call	c_lgadc
1971                     ; 648   BUF->flags = TCP_RST | TCP_ACK;
1973  e9fa 3514020a      	mov	_uip_buf+47,#20
1974                     ; 649   uip_len = UIP_IPTCPH_LEN;
1976  e9fe ae0028        	ldw	x,#40
1977  ea01 cf01d7        	ldw	_uip_len,x
1978                     ; 650   BUF->tcpoffset = 5 << 4;
1980  ea04 35500209      	mov	_uip_buf+46,#80
1981                     ; 653   c = BUF->seqno[3];
1983  ea08 5502040067    	mov	L14_c,_uip_buf+41
1984                     ; 654   BUF->seqno[3] = BUF->ackno[3];
1986  ea0d 5502080204    	mov	_uip_buf+41,_uip_buf+45
1987                     ; 655   BUF->ackno[3] = c;
1989  ea12 5500670208    	mov	_uip_buf+45,L14_c
1990                     ; 657   c = BUF->seqno[2];
1992  ea17 5502030067    	mov	L14_c,_uip_buf+40
1993                     ; 658   BUF->seqno[2] = BUF->ackno[2];
1995  ea1c 5502070203    	mov	_uip_buf+40,_uip_buf+44
1996                     ; 659   BUF->ackno[2] = c;
1998  ea21 5500670207    	mov	_uip_buf+44,L14_c
1999                     ; 661   c = BUF->seqno[1];
2001  ea26 5502020067    	mov	L14_c,_uip_buf+39
2002                     ; 662   BUF->seqno[1] = BUF->ackno[1];
2004  ea2b 5502060202    	mov	_uip_buf+39,_uip_buf+43
2005                     ; 663   BUF->ackno[1] = c;
2007  ea30 5500670206    	mov	_uip_buf+43,L14_c
2008                     ; 665   c = BUF->seqno[0];
2010  ea35 5502010067    	mov	L14_c,_uip_buf+38
2011                     ; 666   BUF->seqno[0] = BUF->ackno[0];
2013  ea3a 5502050201    	mov	_uip_buf+38,_uip_buf+42
2014                     ; 667   BUF->ackno[0] = c;
2016  ea3f 5500670205    	mov	_uip_buf+42,L14_c
2017                     ; 672   if (++BUF->ackno[3] == 0) {
2019  ea44 725c0208      	inc	_uip_buf+45
2020  ea48 2610          	jrne	L547
2021                     ; 673     if (++BUF->ackno[2] == 0) {
2023  ea4a 725c0207      	inc	_uip_buf+44
2024  ea4e 260a          	jrne	L547
2025                     ; 674       if (++BUF->ackno[1] == 0) {
2027  ea50 725c0206      	inc	_uip_buf+43
2028  ea54 2604          	jrne	L547
2029                     ; 675         ++BUF->ackno[0];
2031  ea56 725c0205      	inc	_uip_buf+42
2032  ea5a               L547:
2033                     ; 681   tmp16 = BUF->srcport;
2035  ea5a ce01fd        	ldw	x,_uip_buf+34
2036  ea5d cf0064        	ldw	L54_tmp16,x
2037                     ; 682   BUF->srcport = BUF->destport;
2039  ea60 ce01ff        	ldw	x,_uip_buf+36
2040  ea63 cf01fd        	ldw	_uip_buf+34,x
2041                     ; 683   BUF->destport = tmp16;
2043  ea66 ce0064        	ldw	x,L54_tmp16
2044  ea69 cf01ff        	ldw	_uip_buf+36,x
2045                     ; 686   uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
2047  ea6c ce01f5        	ldw	x,_uip_buf+26
2048  ea6f cf01f9        	ldw	_uip_buf+30,x
2051  ea72 ce01f7        	ldw	x,_uip_buf+28
2052  ea75 cf01fb        	ldw	_uip_buf+32,x
2053                     ; 687   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
2055  ea78 ce0084        	ldw	x,_uip_hostaddr
2056  ea7b cf01f5        	ldw	_uip_buf+26,x
2059  ea7e ce0086        	ldw	x,_uip_hostaddr+2
2060  ea81 cf01f7        	ldw	_uip_buf+28,x
2061                     ; 690   goto tcp_send_noconn;
2063  ea84 ccef8d        	jra	L134
2064  ea87               L177:
2065                     ; 712     if (uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
2067  ea87 a107          	cp	a,#7
2068  ea89 2620          	jrne	L377
2069                     ; 713       if (uip_connr == 0 || uip_conns[c].timer > uip_connr->timer) {
2071  ea8b 1e04          	ldw	x,(OFST-1,sp)
2072  ea8d 2710          	jreq	L777
2074  ea8f c60067        	ld	a,L14_c
2075  ea92 97            	ld	xl,a
2076  ea93 a628          	ld	a,#40
2077  ea95 42            	mul	x,a
2078  ea96 d600ff        	ld	a,(_uip_conns+26,x)
2079  ea99 1e04          	ldw	x,(OFST-1,sp)
2080  ea9b e11a          	cp	a,(26,x)
2081  ea9d 230c          	jrule	L377
2082  ea9f               L777:
2083                     ; 714         uip_connr = &uip_conns[c];
2085  ea9f c60067        	ld	a,L14_c
2086  eaa2 97            	ld	xl,a
2087  eaa3 a628          	ld	a,#40
2088  eaa5 42            	mul	x,a
2089  eaa6 1c00e5        	addw	x,#_uip_conns
2090  eaa9 1f04          	ldw	(OFST-1,sp),x
2092  eaab               L377:
2093                     ; 707   for (c = 0; c < UIP_CONNS; ++c) {
2095  eaab 725c0067      	inc	L14_c
2098  eaaf c60067        	ld	a,L14_c
2099  eab2 a106          	cp	a,#6
2100  eab4 2403cce9c6    	jrult	L367
2101  eab9               L767:
2102                     ; 719   if (uip_connr == 0) {
2104  eab9 1e04          	ldw	x,(OFST-1,sp)
2105  eabb 260b          	jrne	L1001
2106                     ; 723     UIP_STAT(++uip_stat.tcp.syndrop);
2108  eabd ae00d9        	ldw	x,#_uip_stat+80
2109  eac0 a601          	ld	a,#1
2110  eac2 cdf487        	call	c_lgadc
2112                     ; 724     goto drop;
2114  eac5 ccefe0        	jra	L734
2115  eac8               L1001:
2116                     ; 726   uip_conn = uip_connr;
2118  eac8 cf01d5        	ldw	_uip_conn,x
2119                     ; 729   uip_connr->rto = uip_connr->timer = UIP_RTO;
2121  eacb a603          	ld	a,#3
2122  eacd e71a          	ld	(26,x),a
2123  eacf e718          	ld	(24,x),a
2124                     ; 730   uip_connr->sa = 0;
2126  ead1 6f16          	clr	(22,x)
2127                     ; 731   uip_connr->sv = 4;
2129  ead3 4c            	inc	a
2130  ead4 e717          	ld	(23,x),a
2131                     ; 732   uip_connr->nrtx = 0;
2133  ead6 6f1b          	clr	(27,x)
2134                     ; 733   uip_connr->lport = BUF->destport;
2136  ead8 90ce01ff      	ldw	y,_uip_buf+36
2137  eadc ef04          	ldw	(4,x),y
2138                     ; 734   uip_connr->rport = BUF->srcport;
2140  eade 90ce01fd      	ldw	y,_uip_buf+34
2141  eae2 ef06          	ldw	(6,x),y
2142                     ; 735   uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
2144  eae4 90ce01f5      	ldw	y,_uip_buf+26
2145  eae8 ff            	ldw	(x),y
2148  eae9 90ce01f7      	ldw	y,_uip_buf+28
2149  eaed ef02          	ldw	(2,x),y
2150                     ; 736   uip_connr->tcpstateflags = UIP_SYN_RCVD;
2152  eaef a601          	ld	a,#1
2153  eaf1 e719          	ld	(25,x),a
2154                     ; 738   uip_connr->snd_nxt[0] = iss[0];
2156  eaf3 c60068        	ld	a,L73_iss
2157  eaf6 e70c          	ld	(12,x),a
2158                     ; 739   uip_connr->snd_nxt[1] = iss[1];
2160  eaf8 c60069        	ld	a,L73_iss+1
2161  eafb e70d          	ld	(13,x),a
2162                     ; 740   uip_connr->snd_nxt[2] = iss[2];
2164  eafd c6006a        	ld	a,L73_iss+2
2165  eb00 e70e          	ld	(14,x),a
2166                     ; 741   uip_connr->snd_nxt[3] = iss[3];
2168  eb02 c6006b        	ld	a,L73_iss+3
2169  eb05 e70f          	ld	(15,x),a
2170                     ; 742   uip_connr->len = 1;
2172  eb07 90ae0001      	ldw	y,#1
2173  eb0b ef10          	ldw	(16,x),y
2174                     ; 745   uip_connr->rcv_nxt[3] = BUF->seqno[3];
2176  eb0d c60204        	ld	a,_uip_buf+41
2177  eb10 e70b          	ld	(11,x),a
2178                     ; 746   uip_connr->rcv_nxt[2] = BUF->seqno[2];
2180  eb12 c60203        	ld	a,_uip_buf+40
2181  eb15 e70a          	ld	(10,x),a
2182                     ; 747   uip_connr->rcv_nxt[1] = BUF->seqno[1];
2184  eb17 c60202        	ld	a,_uip_buf+39
2185  eb1a e709          	ld	(9,x),a
2186                     ; 748   uip_connr->rcv_nxt[0] = BUF->seqno[0];
2188  eb1c c60201        	ld	a,_uip_buf+38
2189  eb1f e708          	ld	(8,x),a
2190                     ; 749   uip_add_rcv_nxt(1);
2192  eb21 ae0001        	ldw	x,#1
2193  eb24 cde6cf        	call	L733_uip_add_rcv_nxt
2195                     ; 752   if ((BUF->tcpoffset & 0xf0) > 0x50) {
2197  eb27 c60209        	ld	a,_uip_buf+46
2198  eb2a a4f0          	and	a,#240
2199  eb2c a151          	cp	a,#81
2200  eb2e 2403ccebc2    	jrult	L173
2201                     ; 753     for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2;) {
2203  eb33 725f0067      	clr	L14_c
2205  eb37 206b          	jra	L5101
2206  eb39               L1101:
2207                     ; 754       opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
2209  eb39 5f            	clrw	x
2210  eb3a 97            	ld	xl,a
2211  eb3b d60211        	ld	a,(_uip_buf+54,x)
2212  eb3e c70066        	ld	L34_opt,a
2213                     ; 755       if (opt == TCP_OPT_END) {
2215  eb41 277f          	jreq	L173
2216                     ; 757         break;
2218                     ; 759       else if (opt == TCP_OPT_NOOP) {
2220  eb43 a101          	cp	a,#1
2221  eb45 2606          	jrne	L5201
2222                     ; 760         ++c;
2224  eb47 725c0067      	inc	L14_c
2226  eb4b 2057          	jra	L5101
2227  eb4d               L5201:
2228                     ; 763       else if (opt == TCP_OPT_MSS
2228                     ; 764         && uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
2230  eb4d a102          	cp	a,#2
2231  eb4f 2640          	jrne	L1301
2233  eb51 c60067        	ld	a,L14_c
2234  eb54 5f            	clrw	x
2235  eb55 97            	ld	xl,a
2236  eb56 d60212        	ld	a,(_uip_buf+55,x)
2237  eb59 a104          	cp	a,#4
2238  eb5b 2634          	jrne	L1301
2239                     ; 766         tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8)
2239                     ; 767 	        | (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
2241  eb5d c60067        	ld	a,L14_c
2242  eb60 5f            	clrw	x
2243  eb61 97            	ld	xl,a
2244  eb62 d60214        	ld	a,(_uip_buf+57,x)
2245  eb65 5f            	clrw	x
2246  eb66 97            	ld	xl,a
2247  eb67 1f01          	ldw	(OFST-4,sp),x
2249  eb69 5f            	clrw	x
2250  eb6a c60067        	ld	a,L14_c
2251  eb6d 97            	ld	xl,a
2252  eb6e d60213        	ld	a,(_uip_buf+56,x)
2253  eb71 5f            	clrw	x
2254  eb72 97            	ld	xl,a
2255  eb73 7b02          	ld	a,(OFST-3,sp)
2256  eb75 01            	rrwa	x,a
2257  eb76 1a01          	or	a,(OFST-4,sp)
2258  eb78 01            	rrwa	x,a
2259  eb79 cf0064        	ldw	L54_tmp16,x
2260                     ; 768         uip_connr->initialmss = uip_connr->mss = tmp16 > UIP_TCP_MSS ? UIP_TCP_MSS : tmp16;
2262  eb7c a30223        	cpw	x,#547
2263  eb7f 2503          	jrult	L421
2264  eb81 ae0222        	ldw	x,#546
2265  eb84               L421:
2266  eb84 1604          	ldw	y,(OFST-1,sp)
2267  eb86 90ef12        	ldw	(18,y),x
2268  eb89 93            	ldw	x,y
2269  eb8a 90ee12        	ldw	y,(18,y)
2270  eb8d ef14          	ldw	(20,x),y
2271                     ; 771         break;
2273  eb8f 2031          	jra	L173
2274  eb91               L1301:
2275                     ; 775         if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
2277  eb91 c60067        	ld	a,L14_c
2278  eb94 5f            	clrw	x
2279  eb95 97            	ld	xl,a
2280  eb96 724d0212      	tnz	(_uip_buf+55,x)
2281  eb9a 2726          	jreq	L173
2282                     ; 778           break;
2284                     ; 780         c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
2286  eb9c 5f            	clrw	x
2287  eb9d 97            	ld	xl,a
2288  eb9e db0212        	add	a,(_uip_buf+55,x)
2289  eba1 c70067        	ld	L14_c,a
2290  eba4               L5101:
2291                     ; 753     for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2;) {
2293  eba4 c60209        	ld	a,_uip_buf+46
2294  eba7 4e            	swap	a
2295  eba8 a40f          	and	a,#15
2296  ebaa 5f            	clrw	x
2297  ebab 97            	ld	xl,a
2298  ebac 58            	sllw	x
2299  ebad 58            	sllw	x
2300  ebae 1d0014        	subw	x,#20
2301  ebb1 c60067        	ld	a,L14_c
2302  ebb4 905f          	clrw	y
2303  ebb6 9097          	ld	yl,a
2304  ebb8 90bf07        	ldw	c_y,y
2305  ebbb b307          	cpw	x,c_y
2306  ebbd 2d03cceb39    	jrsgt	L1101
2307  ebc2               L173:
2308                     ; 786   tcp_send_synack:
2308                     ; 787   BUF->flags = TCP_SYN | TCP_ACK;
2310  ebc2 3512020a      	mov	_uip_buf+47,#18
2311                     ; 790   BUF->optdata[0] = TCP_OPT_MSS;
2313  ebc6 35020211      	mov	_uip_buf+54,#2
2314                     ; 791   BUF->optdata[1] = TCP_OPT_MSS_LEN;
2316  ebca 35040212      	mov	_uip_buf+55,#4
2317                     ; 792   BUF->optdata[2] = (UIP_TCP_MSS) / 256;
2319  ebce 35020213      	mov	_uip_buf+56,#2
2320                     ; 793   BUF->optdata[3] = (UIP_TCP_MSS) & 255;
2322  ebd2 35220214      	mov	_uip_buf+57,#34
2323                     ; 794   uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
2325  ebd6 ae002c        	ldw	x,#44
2326  ebd9 cf01d7        	ldw	_uip_len,x
2327                     ; 795   BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
2329  ebdc 35600209      	mov	_uip_buf+46,#96
2330                     ; 796   goto tcp_send;
2332  ebe0 ccee8d        	jra	L724
2333  ebe3               L7301:
2334                     ; 813   c = (uint8_t)((BUF->tcpoffset >> 4) << 2);
2336  ebe3 c60209        	ld	a,_uip_buf+46
2337  ebe6 4e            	swap	a
2338  ebe7 a40f          	and	a,#15
2339  ebe9 48            	sll	a
2340  ebea 48            	sll	a
2341  ebeb c70067        	ld	L14_c,a
2342                     ; 817   uip_len = uip_len - c - UIP_IPH_LEN;
2344  ebee c601d7        	ld	a,_uip_len
2345  ebf1 97            	ld	xl,a
2346  ebf2 c601d8        	ld	a,_uip_len+1
2347  ebf5 c00067        	sub	a,L14_c
2348  ebf8 2401          	jrnc	L231
2349  ebfa 5a            	decw	x
2350  ebfb               L231:
2351  ebfb 02            	rlwa	x,a
2352  ebfc 1d0014        	subw	x,#20
2353  ebff cf01d7        	ldw	_uip_len,x
2354                     ; 822   if (!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT)
2354                     ; 823     && ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
2356  ec02 1e04          	ldw	x,(OFST-1,sp)
2357  ec04 e619          	ld	a,(25,x)
2358  ec06 a40f          	and	a,#15
2359  ec08 a102          	cp	a,#2
2360  ec0a 2609          	jrne	L3401
2362  ec0c c6020a        	ld	a,_uip_buf+47
2363  ec0f a43f          	and	a,#63
2364  ec11 a112          	cp	a,#18
2365  ec13 272d          	jreq	L1401
2366  ec15               L3401:
2367                     ; 824     if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0))
2367                     ; 825       && (BUF->seqno[0] != uip_connr->rcv_nxt[0]
2367                     ; 826       || BUF->seqno[1] != uip_connr->rcv_nxt[1]
2367                     ; 827       || BUF->seqno[2] != uip_connr->rcv_nxt[2]
2367                     ; 828       || BUF->seqno[3] != uip_connr->rcv_nxt[3])) {
2369  ec15 ce01d7        	ldw	x,_uip_len
2370  ec18 2607          	jrne	L7401
2372  ec1a c6020a        	ld	a,_uip_buf+47
2373  ec1d a503          	bcp	a,#3
2374  ec1f 2721          	jreq	L1401
2375  ec21               L7401:
2377  ec21 1e04          	ldw	x,(OFST-1,sp)
2378  ec23 e608          	ld	a,(8,x)
2379  ec25 c10201        	cp	a,_uip_buf+38
2380  ec28 2703ccef7e    	jrne	L124
2382  ec2d e609          	ld	a,(9,x)
2383  ec2f c10202        	cp	a,_uip_buf+39
2384  ec32 26f6          	jrne	L124
2386  ec34 e60a          	ld	a,(10,x)
2387  ec36 c10203        	cp	a,_uip_buf+40
2388  ec39 26ef          	jrne	L124
2390  ec3b e60b          	ld	a,(11,x)
2391  ec3d c10204        	cp	a,_uip_buf+41
2392  ec40 26e8          	jrne	L124
2393  ec42               L1401:
2394                     ; 837   if ((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
2396  ec42 7208020a03cc  	btjf	_uip_buf+47,#4,L7501
2398  ec4a 1e04          	ldw	x,(OFST-1,sp)
2399  ec4c e611          	ld	a,(17,x)
2400  ec4e ea10          	or	a,(16,x)
2401  ec50 27f5          	jreq	L7501
2402                     ; 838     uip_add32(uip_connr->snd_nxt, uip_connr->len);
2404  ec52 ee10          	ldw	x,(16,x)
2405  ec54 89            	pushw	x
2406  ec55 1e06          	ldw	x,(OFST+1,sp)
2407  ec57 1c000c        	addw	x,#12
2408  ec5a cde4b1        	call	_uip_add32
2410  ec5d c60205        	ld	a,_uip_buf+42
2411  ec60 c100e1        	cp	a,_uip_acc32
2412  ec63 85            	popw	x
2413                     ; 840     if (BUF->ackno[0] == uip_acc32[0]
2413                     ; 841       && BUF->ackno[1] == uip_acc32[1]
2413                     ; 842       && BUF->ackno[2] == uip_acc32[2]
2413                     ; 843       && BUF->ackno[3] == uip_acc32[3]) {
2415  ec64 26e1          	jrne	L7501
2417  ec66 c60206        	ld	a,_uip_buf+43
2418  ec69 c100e2        	cp	a,_uip_acc32+1
2419  ec6c 26d9          	jrne	L7501
2421  ec6e c60207        	ld	a,_uip_buf+44
2422  ec71 c100e3        	cp	a,_uip_acc32+2
2423  ec74 26d1          	jrne	L7501
2425  ec76 c60208        	ld	a,_uip_buf+45
2426  ec79 c100e4        	cp	a,_uip_acc32+3
2427  ec7c 2679          	jrne	L7501
2428                     ; 845       uip_connr->snd_nxt[0] = uip_acc32[0];
2430  ec7e 1e04          	ldw	x,(OFST-1,sp)
2431  ec80 c600e1        	ld	a,_uip_acc32
2432  ec83 e70c          	ld	(12,x),a
2433                     ; 846       uip_connr->snd_nxt[1] = uip_acc32[1];
2435  ec85 c600e2        	ld	a,_uip_acc32+1
2436  ec88 e70d          	ld	(13,x),a
2437                     ; 847       uip_connr->snd_nxt[2] = uip_acc32[2];
2439  ec8a c600e3        	ld	a,_uip_acc32+2
2440  ec8d e70e          	ld	(14,x),a
2441                     ; 848       uip_connr->snd_nxt[3] = uip_acc32[3];
2443  ec8f c600e4        	ld	a,_uip_acc32+3
2444  ec92 e70f          	ld	(15,x),a
2445                     ; 851       if (uip_connr->nrtx == 0) {
2447  ec94 e61b          	ld	a,(27,x)
2448  ec96 2653          	jrne	L3601
2449                     ; 853         m = (int8_t)(uip_connr->rto - uip_connr->timer);
2451  ec98 e61a          	ld	a,(26,x)
2452  ec9a e018          	sub	a,(24,x)
2453  ec9c 40            	neg	a
2454  ec9d 6b03          	ld	(OFST-2,sp),a
2456                     ; 855         m = (int8_t)(m - (uip_connr->sa >> 3));
2458  ec9f e616          	ld	a,(22,x)
2459  eca1 44            	srl	a
2460  eca2 44            	srl	a
2461  eca3 44            	srl	a
2462  eca4 5f            	clrw	x
2463  eca5 97            	ld	xl,a
2464  eca6 1f01          	ldw	(OFST-4,sp),x
2466  eca8 5f            	clrw	x
2467  eca9 7b03          	ld	a,(OFST-2,sp)
2468  ecab 4d            	tnz	a
2469  ecac 2a01          	jrpl	L631
2470  ecae 53            	cplw	x
2471  ecaf               L631:
2472  ecaf 97            	ld	xl,a
2473  ecb0 72f001        	subw	x,(OFST-4,sp)
2474  ecb3 01            	rrwa	x,a
2475  ecb4 6b03          	ld	(OFST-2,sp),a
2477                     ; 856         uip_connr->sa += m;
2479  ecb6 1e04          	ldw	x,(OFST-1,sp)
2480  ecb8 e616          	ld	a,(22,x)
2481  ecba 1b03          	add	a,(OFST-2,sp)
2482  ecbc e716          	ld	(22,x),a
2483                     ; 857         if (m < 0) m = (int8_t)(-m);
2485  ecbe 7b03          	ld	a,(OFST-2,sp)
2486  ecc0 2a02          	jrpl	L5601
2489  ecc2 0003          	neg	(OFST-2,sp)
2491  ecc4               L5601:
2492                     ; 858         m = (int8_t)(m - (uip_connr->sv >> 2));
2494  ecc4 e617          	ld	a,(23,x)
2495  ecc6 44            	srl	a
2496  ecc7 44            	srl	a
2497  ecc8 5f            	clrw	x
2498  ecc9 97            	ld	xl,a
2499  ecca 1f01          	ldw	(OFST-4,sp),x
2501  eccc 5f            	clrw	x
2502  eccd 7b03          	ld	a,(OFST-2,sp)
2503  eccf 4d            	tnz	a
2504  ecd0 2a01          	jrpl	L041
2505  ecd2 53            	cplw	x
2506  ecd3               L041:
2507  ecd3 97            	ld	xl,a
2508  ecd4 72f001        	subw	x,(OFST-4,sp)
2509  ecd7 01            	rrwa	x,a
2510  ecd8 6b03          	ld	(OFST-2,sp),a
2512                     ; 859         uip_connr->sv += m;
2514  ecda 1e04          	ldw	x,(OFST-1,sp)
2515  ecdc e617          	ld	a,(23,x)
2516  ecde 1b03          	add	a,(OFST-2,sp)
2517  ece0 e717          	ld	(23,x),a
2518                     ; 860         uip_connr->rto = (uint8_t)((uip_connr->sa >> 3) + uip_connr->sv);
2520  ece2 e616          	ld	a,(22,x)
2521  ece4 44            	srl	a
2522  ece5 44            	srl	a
2523  ece6 44            	srl	a
2524  ece7 eb17          	add	a,(23,x)
2525  ece9 e718          	ld	(24,x),a
2526  eceb               L3601:
2527                     ; 863       uip_flags = UIP_ACKDATA;
2529  eceb 35010088      	mov	_uip_flags,#1
2530                     ; 865       uip_connr->timer = uip_connr->rto;
2532  ecef e618          	ld	a,(24,x)
2533  ecf1 e71a          	ld	(26,x),a
2534                     ; 868       uip_connr->len = 0;
2536  ecf3 905f          	clrw	y
2537  ecf5 ef10          	ldw	(16,x),y
2538  ecf7               L7501:
2539                     ; 873   switch (uip_connr->tcpstateflags & UIP_TS_MASK) {
2541  ecf7 1e04          	ldw	x,(OFST-1,sp)
2542  ecf9 e619          	ld	a,(25,x)
2543  ecfb a40f          	and	a,#15
2545                     ; 1101 	uip_connr->timer = 0;
2546  ecfd 4a            	dec	a
2547  ecfe 2725          	jreq	L573
2548  ed00 a002          	sub	a,#2
2549  ed02 2745          	jreq	L773
2550  ed04 4a            	dec	a
2551  ed05 2603ccef07    	jreq	L114
2552  ed0a 4a            	dec	a
2553  ed0b 2603ccef46    	jreq	L314
2554  ed10 4a            	dec	a
2555  ed11 2603ccef71    	jreq	L714
2556  ed16 4a            	dec	a
2557  ed17 2603ccef7e    	jreq	L124
2558  ed1c 4a            	dec	a
2559  ed1d 2603cceef6    	jreq	L704
2560  ed22 ccefe0        	jra	L734
2561  ed25               L573:
2562                     ; 877     case UIP_SYN_RCVD:
2562                     ; 878       /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and we are waiting
2562                     ; 879          for an ACK that acknowledges the data we sent out the last time. Therefore, we
2562                     ; 880 	 want to have the UIP_ACKDATA flag set. If so, we enter the ESTABLISHED state. */
2562                     ; 881       if (uip_flags & UIP_ACKDATA) {
2564  ed25 72010088f8    	btjf	_uip_flags,#0,L734
2565                     ; 882         uip_connr->tcpstateflags = UIP_ESTABLISHED;
2567  ed2a a603          	ld	a,#3
2568  ed2c e719          	ld	(25,x),a
2569                     ; 883         uip_flags = UIP_CONNECTED;
2571  ed2e 35400088      	mov	_uip_flags,#64
2572                     ; 884         uip_connr->len = 0;
2574  ed32 905f          	clrw	y
2575  ed34 ef10          	ldw	(16,x),y
2576                     ; 885         if (uip_len > 0) {
2578  ed36 ce01d7        	ldw	x,_uip_len
2579  ed39 2707          	jreq	L5701
2580                     ; 886           uip_flags |= UIP_NEWDATA;
2582  ed3b 72120088      	bset	_uip_flags,#1
2583                     ; 887           uip_add_rcv_nxt(uip_len);
2585  ed3f cde6cf        	call	L733_uip_add_rcv_nxt
2587  ed42               L5701:
2588                     ; 889         uip_slen = 0;
2591  ed42 5f            	clrw	x
2592  ed43 cf0078        	ldw	_uip_slen,x
2593                     ; 890         UIP_APPCALL();
2595                     ; 891         goto appsend;
2597  ed46 cce7ec        	jra	L304
2598  ed49               L773:
2599                     ; 895     case UIP_ESTABLISHED:
2599                     ; 896       /* In the ESTABLISHED state, we call upon the application to feed data into the
2599                     ; 897          uip_buf. If the UIP_ACKDATA flag is set, the application should put new data
2599                     ; 898 	 into the buffer, otherwise we are retransmitting an old segment, and the
2599                     ; 899 	 application should put that data into the buffer.
2599                     ; 900 	 
2599                     ; 901 	 If the incoming packet is a FIN, we should close the connection on this side
2599                     ; 902 	 as well, and we send out a FIN and enter the LAST_ACK state. We require that
2599                     ; 903 	 there is no outstanding data; otherwise the sequence numbers will be screwed
2599                     ; 904 	 up. */
2599                     ; 905       if (BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
2601  ed49 7201020a30    	btjf	_uip_buf+47,#0,L7701
2603  ed4e e619          	ld	a,(25,x)
2604  ed50 a510          	bcp	a,#16
2605  ed52 262a          	jrne	L7701
2606                     ; 906         if (uip_outstanding(uip_connr)) {
2608  ed54 e611          	ld	a,(17,x)
2609  ed56 ea10          	or	a,(16,x)
2610  ed58 26c8          	jrne	L734
2611                     ; 907           goto drop;
2613                     ; 909         uip_add_rcv_nxt(1 + uip_len);
2615  ed5a ce01d7        	ldw	x,_uip_len
2616  ed5d 5c            	incw	x
2617  ed5e cde6cf        	call	L733_uip_add_rcv_nxt
2619                     ; 910         uip_flags |= UIP_CLOSE;
2621  ed61 72180088      	bset	_uip_flags,#4
2622                     ; 911         if (uip_len > 0) {
2624  ed65 ce01d7        	ldw	x,_uip_len
2625  ed68 2704          	jreq	L3011
2626                     ; 912           uip_flags |= UIP_NEWDATA;
2628  ed6a 72120088      	bset	_uip_flags,#1
2629  ed6e               L3011:
2630                     ; 914         UIP_APPCALL();
2632  ed6e cdf384        	call	_uip_TcpAppHubCall
2634                     ; 915         uip_connr->len = 1;
2636  ed71 1e04          	ldw	x,(OFST-1,sp)
2637  ed73 90ae0001      	ldw	y,#1
2638  ed77 ef10          	ldw	(16,x),y
2639                     ; 916         uip_connr->tcpstateflags = UIP_LAST_ACK;
2641  ed79 a608          	ld	a,#8
2642                     ; 917         uip_connr->nrtx = 0;
2643                     ; 918         tcp_send_finack: BUF->flags = TCP_FIN | TCP_ACK;
2644                     ; 919         goto tcp_send_nodata;
2646  ed7b ccee0b        	jp	LC005
2647  ed7e               L7701:
2648                     ; 924       if ((BUF->flags & TCP_URG) != 0) {
2650  ed7e 720b020a1f    	btjf	_uip_buf+47,#5,L5011
2651                     ; 925         uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
2653  ed83 c6020f        	ld	a,_uip_buf+52
2654  ed86 97            	ld	xl,a
2655  ed87 c60210        	ld	a,_uip_buf+53
2656  ed8a 02            	rlwa	x,a
2657  ed8b 72bb01d9      	addw	x,_uip_appdata
2658  ed8f cf01d9        	ldw	_uip_appdata,x
2659                     ; 926         uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
2661  ed92 c6020f        	ld	a,_uip_buf+52
2662  ed95 97            	ld	xl,a
2663  ed96 c60210        	ld	a,_uip_buf+53
2664  ed99 02            	rlwa	x,a
2665  ed9a 72b001d7      	subw	x,_uip_len
2666  ed9e 50            	negw	x
2667  ed9f cf01d7        	ldw	_uip_len,x
2668  eda2               L5011:
2669                     ; 933       if (uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
2671  eda2 ce01d7        	ldw	x,_uip_len
2672  eda5 2712          	jreq	L7011
2674  eda7 1e04          	ldw	x,(OFST-1,sp)
2675  eda9 e619          	ld	a,(25,x)
2676  edab a510          	bcp	a,#16
2677  edad 260a          	jrne	L7011
2678                     ; 934         uip_flags |= UIP_NEWDATA;
2680  edaf 72120088      	bset	_uip_flags,#1
2681                     ; 935         uip_add_rcv_nxt(uip_len);
2683  edb3 ce01d7        	ldw	x,_uip_len
2684  edb6 cde6cf        	call	L733_uip_add_rcv_nxt
2686  edb9               L7011:
2687                     ; 947       tmp16 = ((uint16_t)BUF->wnd[0] << 8) + (uint16_t)BUF->wnd[1];
2689  edb9 c6020c        	ld	a,_uip_buf+49
2690  edbc 5f            	clrw	x
2691  edbd 97            	ld	xl,a
2692  edbe 1f01          	ldw	(OFST-4,sp),x
2694  edc0 c6020b        	ld	a,_uip_buf+48
2695  edc3 97            	ld	xl,a
2696  edc4 4f            	clr	a
2697  edc5 02            	rlwa	x,a
2698  edc6 72fb01        	addw	x,(OFST-4,sp)
2699  edc9 cf0064        	ldw	L54_tmp16,x
2700                     ; 948       if (tmp16 > uip_connr->initialmss || tmp16 == 0) {
2702  edcc 1604          	ldw	y,(OFST-1,sp)
2703  edce 90ee14        	ldw	y,(20,y)
2704  edd1 90c30064      	cpw	y,L54_tmp16
2705  edd5 2505          	jrult	L3111
2707  edd7 ce0064        	ldw	x,L54_tmp16
2708  edda 2607          	jrne	L1111
2709  eddc               L3111:
2710                     ; 949         tmp16 = uip_connr->initialmss;
2712  eddc 1e04          	ldw	x,(OFST-1,sp)
2713  edde ee14          	ldw	x,(20,x)
2714  ede0 cf0064        	ldw	L54_tmp16,x
2715  ede3               L1111:
2716                     ; 951       uip_connr->mss = tmp16;
2718  ede3 1e04          	ldw	x,(OFST-1,sp)
2719  ede5 90ce0064      	ldw	y,L54_tmp16
2720  ede9 ef12          	ldw	(18,x),y
2721                     ; 966       if (uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
2723  edeb c60088        	ld	a,_uip_flags
2724  edee a503          	bcp	a,#3
2725  edf0 2603ccefe0    	jreq	L734
2726                     ; 967         uip_slen = 0;
2727                     ; 968         UIP_APPCALL();
2729  edf5 cced42        	jp	L5701
2730  edf8               L7111:
2731                     ; 979         if (uip_flags & UIP_CLOSE) {
2733  edf8 720900881e    	btjf	_uip_flags,#4,L1211
2734                     ; 980           uip_slen = 0;
2736  edfd 5f            	clrw	x
2737  edfe cf0078        	ldw	_uip_slen,x
2738                     ; 981 	  uip_connr->len = 1;
2740  ee01 1e04          	ldw	x,(OFST-1,sp)
2741  ee03 90ae0001      	ldw	y,#1
2742  ee07 ef10          	ldw	(16,x),y
2743                     ; 982 	  uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
2745  ee09 a604          	ld	a,#4
2746                     ; 983 	  uip_connr->nrtx = 0;
2748  ee0b               LC005:
2749  ee0b e719          	ld	(25,x),a
2751  ee0d 6f1b          	clr	(27,x)
2752                     ; 984 	  BUF->flags = TCP_FIN | TCP_ACK;
2754  ee0f               LC003:
2756  ee0f 3511020a      	mov	_uip_buf+47,#17
2757                     ; 985 	  goto tcp_send_nodata;
2758  ee13               L324:
2759                     ; 1111   tcp_send_nodata: uip_len = UIP_IPTCPH_LEN;
2761  ee13 ae0028        	ldw	x,#40
2762  ee16 cf01d7        	ldw	_uip_len,x
2763  ee19 206e          	jra	L524
2764  ee1b               L1211:
2765                     ; 989         if (uip_slen > 0) {
2767  ee1b ce0078        	ldw	x,_uip_slen
2768  ee1e 2732          	jreq	L3211
2769                     ; 992 	  if ((uip_flags & UIP_ACKDATA) != 0) {
2771  ee20 7201008806    	btjf	_uip_flags,#0,L5211
2772                     ; 993 	    uip_connr->len = 0;
2774  ee25 1e04          	ldw	x,(OFST-1,sp)
2775  ee27 905f          	clrw	y
2776  ee29 ef10          	ldw	(16,x),y
2777  ee2b               L5211:
2778                     ; 998 	  if (uip_connr->len == 0) {
2780  ee2b 1e04          	ldw	x,(OFST-1,sp)
2781  ee2d e611          	ld	a,(17,x)
2782  ee2f ea10          	or	a,(16,x)
2783  ee31 261a          	jrne	L7211
2784                     ; 1001 	    if (uip_slen > uip_connr->mss) {
2786  ee33 9093          	ldw	y,x
2787  ee35 90ee12        	ldw	y,(18,y)
2788  ee38 90c30078      	cpw	y,_uip_slen
2789  ee3c 2407          	jruge	L1311
2790                     ; 1002 	      uip_slen = uip_connr->mss;
2792  ee3e ee12          	ldw	x,(18,x)
2793  ee40 cf0078        	ldw	_uip_slen,x
2794  ee43 1e04          	ldw	x,(OFST-1,sp)
2795  ee45               L1311:
2796                     ; 1007             uip_connr->len = uip_slen;
2798  ee45 90ce0078      	ldw	y,_uip_slen
2799  ee49 ef10          	ldw	(16,x),y
2801  ee4b 2005          	jra	L3211
2802  ee4d               L7211:
2803                     ; 1013 	    uip_slen = uip_connr->len;
2805  ee4d ee10          	ldw	x,(16,x)
2806  ee4f cf0078        	ldw	_uip_slen,x
2807  ee52               L3211:
2808                     ; 1016 	uip_connr->nrtx = 0;
2810  ee52 1e04          	ldw	x,(OFST-1,sp)
2811  ee54 6f1b          	clr	(27,x)
2812  ee56               L504:
2813                     ; 1017 	apprexmit: uip_appdata = uip_sappdata;
2815  ee56 ce007a        	ldw	x,_uip_sappdata
2816  ee59 cf01d9        	ldw	_uip_appdata,x
2817                     ; 1021 	if (uip_slen > 0 && uip_connr->len > 0) {
2819  ee5c ce0078        	ldw	x,_uip_slen
2820  ee5f 2716          	jreq	L5311
2822  ee61 1e04          	ldw	x,(OFST-1,sp)
2823  ee63 e611          	ld	a,(17,x)
2824  ee65 ea10          	or	a,(16,x)
2825  ee67 270e          	jreq	L5311
2826                     ; 1023 	  uip_len = uip_connr->len + UIP_TCPIP_HLEN;
2828  ee69 ee10          	ldw	x,(16,x)
2829  ee6b 1c0028        	addw	x,#40
2830  ee6e cf01d7        	ldw	_uip_len,x
2831                     ; 1025 	  BUF->flags = TCP_ACK | TCP_PSH;
2833  ee71 3518020a      	mov	_uip_buf+47,#24
2834                     ; 1027 	  goto tcp_send_noopts;
2836  ee75 2012          	jra	L524
2837  ee77               L5311:
2838                     ; 1030 	if (uip_flags & UIP_NEWDATA) {
2840  ee77 7202008803cc  	btjf	_uip_flags,#1,L734
2841                     ; 1031 	  uip_len = UIP_TCPIP_HLEN;
2843  ee7f ae0028        	ldw	x,#40
2844  ee82 cf01d7        	ldw	_uip_len,x
2845                     ; 1032 	  BUF->flags = TCP_ACK;
2847  ee85 3510020a      	mov	_uip_buf+47,#16
2848                     ; 1033 	  goto tcp_send_noopts;
2849  ee89               L524:
2850                     ; 1112   tcp_send_noopts: BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
2852  ee89 35500209      	mov	_uip_buf+46,#80
2853  ee8d               L724:
2854                     ; 1115   tcp_send:
2854                     ; 1116   /* We're done with the input processing. We are now ready to send a reply. Our job is to
2854                     ; 1117      fill in all the fields of the TCP and IP headers before calculating the checksum and
2854                     ; 1118      finally send the packet. */
2854                     ; 1119   BUF->ackno[0] = uip_connr->rcv_nxt[0];
2856  ee8d 1e04          	ldw	x,(OFST-1,sp)
2857  ee8f e608          	ld	a,(8,x)
2858  ee91 c70205        	ld	_uip_buf+42,a
2859                     ; 1120   BUF->ackno[1] = uip_connr->rcv_nxt[1];
2861  ee94 e609          	ld	a,(9,x)
2862  ee96 c70206        	ld	_uip_buf+43,a
2863                     ; 1121   BUF->ackno[2] = uip_connr->rcv_nxt[2];
2865  ee99 e60a          	ld	a,(10,x)
2866  ee9b c70207        	ld	_uip_buf+44,a
2867                     ; 1122   BUF->ackno[3] = uip_connr->rcv_nxt[3];
2869  ee9e e60b          	ld	a,(11,x)
2870  eea0 c70208        	ld	_uip_buf+45,a
2871                     ; 1124   BUF->seqno[0] = uip_connr->snd_nxt[0];
2873  eea3 e60c          	ld	a,(12,x)
2874  eea5 c70201        	ld	_uip_buf+38,a
2875                     ; 1125   BUF->seqno[1] = uip_connr->snd_nxt[1];
2877  eea8 e60d          	ld	a,(13,x)
2878  eeaa c70202        	ld	_uip_buf+39,a
2879                     ; 1126   BUF->seqno[2] = uip_connr->snd_nxt[2];
2881  eead e60e          	ld	a,(14,x)
2882  eeaf c70203        	ld	_uip_buf+40,a
2883                     ; 1127   BUF->seqno[3] = uip_connr->snd_nxt[3];
2885  eeb2 e60f          	ld	a,(15,x)
2886  eeb4 c70204        	ld	_uip_buf+41,a
2887                     ; 1129   BUF->proto = UIP_PROTO_TCP;
2889  eeb7 350601f2      	mov	_uip_buf+23,#6
2890                     ; 1131   BUF->srcport = uip_connr->lport;
2892  eebb ee04          	ldw	x,(4,x)
2893  eebd cf01fd        	ldw	_uip_buf+34,x
2894                     ; 1132   BUF->destport = uip_connr->rport;
2896  eec0 1e04          	ldw	x,(OFST-1,sp)
2897  eec2 ee06          	ldw	x,(6,x)
2898  eec4 cf01ff        	ldw	_uip_buf+36,x
2899                     ; 1134   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
2901  eec7 ce0084        	ldw	x,_uip_hostaddr
2902  eeca cf01f5        	ldw	_uip_buf+26,x
2905  eecd ce0086        	ldw	x,_uip_hostaddr+2
2906  eed0 cf01f7        	ldw	_uip_buf+28,x
2907                     ; 1135   uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
2909  eed3 1e04          	ldw	x,(OFST-1,sp)
2910  eed5 fe            	ldw	x,(x)
2911  eed6 cf01f9        	ldw	_uip_buf+30,x
2914  eed9 1e04          	ldw	x,(OFST-1,sp)
2915  eedb ee02          	ldw	x,(2,x)
2916  eedd cf01fb        	ldw	_uip_buf+32,x
2917                     ; 1137   if (uip_connr->tcpstateflags & UIP_STOPPED) {
2919  eee0 1e04          	ldw	x,(OFST-1,sp)
2920  eee2 e619          	ld	a,(25,x)
2921  eee4 a510          	bcp	a,#16
2922  eee6 2603ccef85    	jreq	L1021
2923                     ; 1140     BUF->wnd[0] = BUF->wnd[1] = 0;
2925  eeeb 725f020c      	clr	_uip_buf+49
2926  eeef 725f020b      	clr	_uip_buf+48
2928  eef3 ccef8d        	jra	L134
2929  eef6               L704:
2930                     ; 1038     case UIP_LAST_ACK:
2930                     ; 1039       /* We can close this connection if the peer has acknowledged our FIN. This is
2930                     ; 1040          indicated by the UIP_ACKDATA flag. */
2930                     ; 1041       if (uip_flags & UIP_ACKDATA) {
2932  eef6 7201008881    	btjf	_uip_flags,#0,L734
2933                     ; 1042         uip_connr->tcpstateflags = UIP_CLOSED;
2935  eefb e719          	ld	(25,x),a
2936                     ; 1043 	uip_flags = UIP_CLOSE;
2938  eefd 35100088      	mov	_uip_flags,#16
2939                     ; 1044 	UIP_APPCALL();
2941  ef01 cdf384        	call	_uip_TcpAppHubCall
2943  ef04 ccefe0        	jra	L734
2944  ef07               L114:
2945                     ; 1048     case UIP_FIN_WAIT_1:
2945                     ; 1049       /* The application has closed the connection, but the remote host hasn't closed
2945                     ; 1050          its end yet. Thus we do nothing but wait for a FIN from the other side. */
2945                     ; 1051       if (uip_len > 0) {
2947  ef07 ce01d7        	ldw	x,_uip_len
2948  ef0a 2703          	jreq	L3411
2949                     ; 1052         uip_add_rcv_nxt(uip_len);
2951  ef0c cde6cf        	call	L733_uip_add_rcv_nxt
2953  ef0f               L3411:
2954                     ; 1054       if (BUF->flags & TCP_FIN) {
2956  ef0f 7201020a19    	btjf	_uip_buf+47,#0,L5411
2957                     ; 1055         if (uip_flags & UIP_ACKDATA) {
2959  ef14 1e04          	ldw	x,(OFST-1,sp)
2960  ef16 720100880c    	btjf	_uip_flags,#0,L7411
2961                     ; 1056 	  uip_connr->tcpstateflags = UIP_TIME_WAIT;
2963  ef1b a607          	ld	a,#7
2964  ef1d e719          	ld	(25,x),a
2965                     ; 1057 	  uip_connr->timer = 0;
2967  ef1f 6f1a          	clr	(26,x)
2968                     ; 1058 	  uip_connr->len = 0;
2970  ef21 905f          	clrw	y
2971  ef23 ef10          	ldw	(16,x),y
2973  ef25 2034          	jra	LC004
2974  ef27               L7411:
2975                     ; 1061           uip_connr->tcpstateflags = UIP_CLOSING;
2977  ef27 a606          	ld	a,#6
2978  ef29 e719          	ld	(25,x),a
2979                     ; 1063         uip_add_rcv_nxt(1);
2981                     ; 1064         uip_flags = UIP_CLOSE;
2982                     ; 1065         UIP_APPCALL();
2984                     ; 1066         goto tcp_send_ack;
2986  ef2b 202e          	jp	LC004
2987  ef2d               L5411:
2988                     ; 1068       else if (uip_flags & UIP_ACKDATA) {
2990  ef2d 720100880d    	btjf	_uip_flags,#0,L3511
2991                     ; 1069         uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
2993  ef32 1e04          	ldw	x,(OFST-1,sp)
2994  ef34 a605          	ld	a,#5
2995  ef36 e719          	ld	(25,x),a
2996                     ; 1070         uip_connr->len = 0;
2998  ef38 905f          	clrw	y
2999  ef3a ef10          	ldw	(16,x),y
3000                     ; 1071         goto drop;
3002  ef3c ccefe0        	jra	L734
3003  ef3f               L3511:
3004                     ; 1073       if (uip_len > 0) {
3006  ef3f ce01d7        	ldw	x,_uip_len
3007  ef42 27f8          	jreq	L734
3008                     ; 1074         goto tcp_send_ack;
3010  ef44 2038          	jra	L124
3011  ef46               L314:
3012                     ; 1078     case UIP_FIN_WAIT_2:
3012                     ; 1079       if (uip_len > 0) {
3014  ef46 ce01d7        	ldw	x,_uip_len
3015  ef49 2703          	jreq	L1611
3016                     ; 1080 	uip_add_rcv_nxt(uip_len);
3018  ef4b cde6cf        	call	L733_uip_add_rcv_nxt
3020  ef4e               L1611:
3021                     ; 1082       if (BUF->flags & TCP_FIN) {
3023  ef4e 7201020a17    	btjf	_uip_buf+47,#0,L3611
3024                     ; 1083 	uip_connr->tcpstateflags = UIP_TIME_WAIT;
3026  ef53 1e04          	ldw	x,(OFST-1,sp)
3027  ef55 a607          	ld	a,#7
3028  ef57 e719          	ld	(25,x),a
3029                     ; 1084 	uip_connr->timer = 0;
3031  ef59 6f1a          	clr	(26,x)
3032                     ; 1085 	uip_add_rcv_nxt(1);
3035                     ; 1086 	uip_flags = UIP_CLOSE;
3037                     ; 1087 	UIP_APPCALL();
3039  ef5b               LC004:
3041  ef5b ae0001        	ldw	x,#1
3042  ef5e cde6cf        	call	L733_uip_add_rcv_nxt
3044  ef61 35100088      	mov	_uip_flags,#16
3046  ef65 cdf384        	call	_uip_TcpAppHubCall
3048                     ; 1088 	goto tcp_send_ack;
3050  ef68 2014          	jra	L124
3051  ef6a               L3611:
3052                     ; 1090       if (uip_len > 0) {
3054  ef6a ce01d7        	ldw	x,_uip_len
3055  ef6d 2771          	jreq	L734
3056                     ; 1091 	goto tcp_send_ack;
3058  ef6f 200d          	jra	L124
3059  ef71               L714:
3060                     ; 1098     case UIP_CLOSING:
3060                     ; 1099       if (uip_flags & UIP_ACKDATA) {
3062  ef71 720100886a    	btjf	_uip_flags,#0,L734
3063                     ; 1100 	uip_connr->tcpstateflags = UIP_TIME_WAIT;
3065  ef76 a607          	ld	a,#7
3066  ef78 e719          	ld	(25,x),a
3067                     ; 1101 	uip_connr->timer = 0;
3069  ef7a 6f1a          	clr	(26,x)
3070  ef7c 2062          	jra	L734
3071                     ; 1104   goto drop;
3073  ef7e               L124:
3074                     ; 1109   tcp_send_ack:
3074                     ; 1110   BUF->flags = TCP_ACK;
3076  ef7e 3510020a      	mov	_uip_buf+47,#16
3077  ef82 ccee13        	jra	L324
3078  ef85               L1021:
3079                     ; 1143     BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
3081  ef85 3502020b      	mov	_uip_buf+48,#2
3082                     ; 1144     BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
3084  ef89 3522020c      	mov	_uip_buf+49,#34
3085  ef8d               L134:
3086                     ; 1148   tcp_send_noconn:
3086                     ; 1149   BUF->ttl = UIP_TTL;
3088  ef8d 354001f1      	mov	_uip_buf+22,#64
3089                     ; 1150   BUF->len[0] = (uint8_t)(uip_len >> 8);
3091  ef91 5501d701eb    	mov	_uip_buf+16,_uip_len
3092                     ; 1151   BUF->len[1] = (uint8_t)(uip_len & 0xff);
3094  ef96 5501d801ec    	mov	_uip_buf+17,_uip_len+1
3095                     ; 1153   BUF->urgp[0] = BUF->urgp[1] = 0;
3097  ef9b 725f0210      	clr	_uip_buf+53
3098  ef9f 725f020f      	clr	_uip_buf+52
3099                     ; 1156   BUF->tcpchksum = 0;
3101  efa3 5f            	clrw	x
3102  efa4 cf020d        	ldw	_uip_buf+50,x
3103                     ; 1157   BUF->tcpchksum = ~(uip_tcpchksum());
3105  efa7 cde5cd        	call	_uip_tcpchksum
3107  efaa 53            	cplw	x
3108  efab cf020d        	ldw	_uip_buf+50,x
3109                     ; 1160   ip_send_nolen:
3109                     ; 1161 
3109                     ; 1162   BUF->vhl = 0x45;
3111  efae 354501e9      	mov	_uip_buf+14,#69
3112                     ; 1163   BUF->tos = 0;
3114  efb2 725f01ea      	clr	_uip_buf+15
3115                     ; 1164   BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
3117  efb6 725f01f0      	clr	_uip_buf+21
3118  efba 725f01ef      	clr	_uip_buf+20
3119                     ; 1165   ++ipid;
3121  efbe ce006c        	ldw	x,L31_ipid
3122  efc1 5c            	incw	x
3123  efc2 cf006c        	ldw	L31_ipid,x
3124                     ; 1166   BUF->ipid[0] = (uint8_t)(ipid >> 8);
3126  efc5 55006c01ed    	mov	_uip_buf+18,L31_ipid
3127                     ; 1167   BUF->ipid[1] = (uint8_t)(ipid & 0xff);
3129  efca 55006d01ee    	mov	_uip_buf+19,L31_ipid+1
3130                     ; 1169   BUF->ipchksum = 0;
3132  efcf 5f            	clrw	x
3133  efd0 cf01f3        	ldw	_uip_buf+24,x
3134                     ; 1170   BUF->ipchksum = ~(uip_ipchksum());
3136  efd3 cde568        	call	_uip_ipchksum
3138  efd6 53            	cplw	x
3139  efd7 cf01f3        	ldw	_uip_buf+24,x
3140                     ; 1172   UIP_STAT(++uip_stat.tcp.sent);
3142  efda ae00c5        	ldw	x,#_uip_stat+60
3144  efdd cce934        	jra	L534
3145  efe0               L734:
3146                     ; 1183   drop:
3146                     ; 1184   uip_len = 0;
3148  efe0 5f            	clrw	x
3149  efe1 cf01d7        	ldw	_uip_len,x
3150                     ; 1185   uip_flags = 0;
3152                     ; 1186   return;
3153  efe4               L202:
3155  efe4 725f0088      	clr	_uip_flags
3158  efe8 5b06          	addw	sp,#6
3159  efea 81            	ret	
3191                     ; 1191 uint16_t htons(uint16_t val)
3191                     ; 1192 {
3192                     	switch	.text
3193  efeb               _htons:
3197                     ; 1193   return HTONS(val);
3201  efeb 81            	ret	
3246                     ; 1199 void uip_send(const char *data, int len)
3246                     ; 1200 {
3247                     	switch	.text
3248  efec               _uip_send:
3250  efec 89            	pushw	x
3251       00000000      OFST:	set	0
3254                     ; 1201   if (len > 0) {
3256  efed 9c            	rvf	
3257  efee 1e05          	ldw	x,(OFST+5,sp)
3258  eff0 2d1c          	jrsle	L012
3259                     ; 1202     uip_slen = len;
3261  eff2 cf0078        	ldw	_uip_slen,x
3262                     ; 1203     if (data != uip_sappdata) {
3264  eff5 1e01          	ldw	x,(OFST+1,sp)
3265  eff7 c3007a        	cpw	x,_uip_sappdata
3266  effa 2712          	jreq	L012
3267                     ; 1204       memcpy(uip_sappdata, (data), uip_slen);
3269  effc bf04          	ldw	c_x,x
3270  effe ce0078        	ldw	x,_uip_slen
3271  f001 270b          	jreq	L012
3272  f003               L212:
3273  f003 5a            	decw	x
3274  f004 92d604        	ld	a,([c_x.w],x)
3275  f007 72d7007a      	ld	([_uip_sappdata.w],x),a
3276  f00b 5d            	tnzw	x
3277  f00c 26f5          	jrne	L212
3278  f00e               L012:
3279                     ; 1207 }
3282  f00e 85            	popw	x
3283  f00f 81            	ret	
3710                     	switch	.bss
3711  0064               L54_tmp16:
3712  0064 0000          	ds.b	2
3713  0066               L34_opt:
3714  0066 00            	ds.b	1
3715  0067               L14_c:
3716  0067 00            	ds.b	1
3717  0068               L73_iss:
3718  0068 00000000      	ds.b	4
3719  006c               L31_ipid:
3720  006c 0000          	ds.b	2
3721  006e               _uip_listenports:
3722  006e 000000000000  	ds.b	10
3723                     	xdef	_uip_listenports
3724  0078               _uip_slen:
3725  0078 0000          	ds.b	2
3726                     	xdef	_uip_slen
3727  007a               _uip_sappdata:
3728  007a 0000          	ds.b	2
3729                     	xdef	_uip_sappdata
3730                     	xdef	_uip_ethaddr
3731                     	xdef	_uip_add32
3732                     	xdef	_uip_tcpchksum
3733                     	xdef	_uip_ipchksum
3734                     	xdef	_uip_chksum
3735  007c               _uip_draddr:
3736  007c 00000000      	ds.b	4
3737                     	xdef	_uip_draddr
3738  0080               _uip_netmask:
3739  0080 00000000      	ds.b	4
3740                     	xdef	_uip_netmask
3741  0084               _uip_hostaddr:
3742  0084 00000000      	ds.b	4
3743                     	xdef	_uip_hostaddr
3744                     	xdef	_uip_process
3745  0088               _uip_flags:
3746  0088 00            	ds.b	1
3747                     	xdef	_uip_flags
3748  0089               _uip_stat:
3749  0089 000000000000  	ds.b	88
3750                     	xdef	_uip_stat
3751  00e1               _uip_acc32:
3752  00e1 00000000      	ds.b	4
3753                     	xdef	_uip_acc32
3754  00e5               _uip_conns:
3755  00e5 000000000000  	ds.b	240
3756                     	xdef	_uip_conns
3757  01d5               _uip_conn:
3758  01d5 0000          	ds.b	2
3759                     	xdef	_uip_conn
3760  01d7               _uip_len:
3761  01d7 0000          	ds.b	2
3762                     	xdef	_uip_len
3763  01d9               _uip_appdata:
3764  01d9 0000          	ds.b	2
3765                     	xdef	_uip_appdata
3766                     	xdef	_htons
3767                     	xdef	_uip_send
3768                     	xdef	_uip_unlisten
3769                     	xdef	_uip_listen
3770  01db               _uip_buf:
3771  01db 000000000000  	ds.b	602
3772                     	xdef	_uip_buf
3773                     	xdef	_uip_setipid
3774                     	xdef	_uip_init
3775                     	xref	_uip_TcpAppHubCall
3776                     	xref.b	c_x
3777                     	xref.b	c_y
3797                     	xref	c_lgadc
3798                     	end
