   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     .const:	section	.text
  18  8080               L31_checked:
  19  8080 636865636b65  	dc.b	"checked",0
  20  8088               L51_g_HtmlPageDefault:
  21  8088 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
  22  809a 6d6c206c616e  	dc.b	"ml lang='en'><head"
  23  80ac 3e3c7469746c  	dc.b	"><title>Relay Cont"
  24  80be 726f6c3c2f74  	dc.b	"rol</title><style>"
  25  80d0 2e7330207b20  	dc.b	".s0 { background-c"
  26  80e2 6f6c6f723a20  	dc.b	"olor: red; width: "
  27  80f4 333070783b20  	dc.b	"30px; }.s1 { backg"
  28  8106 726f756e642d  	dc.b	"round-color: green"
  29  8118 3b2077696474  	dc.b	"; width: 30px; }.t"
  30  812a 31636c617373  	dc.b	"1class { width: 10"
  31  813c 3070783b207d  	dc.b	"0px; }.t2class { w"
  32  814e 696474683a20  	dc.b	"idth: 148px; }.t3c"
  33  8160 6c617373207b  	dc.b	"lass { width: 30px"
  34  8172 3b207d2e7434  	dc.b	"; }.t4class { widt"
  35  8184 683a20        	dc.b	"h: "
  36  8187 31323070783b  	dc.b	"120px; }td { text-"
  37  8199 616c69676e3a  	dc.b	"align: center; bor"
  38  81ab 6465723a2031  	dc.b	"der: 1px black sol"
  39  81bd 69643b207d3c  	dc.b	"id; }</style></hea"
  40  81cf 643e3c626f64  	dc.b	"d><body><h1>Relay "
  41  81e1 436f6e74726f  	dc.b	"Control</h1><form "
  42  81f3 6d6574686f64  	dc.b	"method='POST' acti"
  43  8205 6f6e3d272f27  	dc.b	"on='/'><table><tr>"
  44  8217 3c746420636c  	dc.b	"<td class='t1class"
  45  8229 273e4e616d65  	dc.b	"'>Name:</td><td><i"
  46  823b 6e7075742074  	dc.b	"nput type='text' n"
  47  824d 616d653d2761  	dc.b	"ame='a00' class='t"
  48  825f 32636c617373  	dc.b	"2class' value='%a0"
  49  8271 307878787878  	dc.b	"0xxxxxxxxxxxxxxxxx"
  50  8283 787878        	dc.b	"xxx"
  51  8286 272070617474  	dc.b	"' pattern='[0-9a-z"
  52  8298 412d5a2d5f2a  	dc.b	"A-Z-_*.]{1,20}' ti"
  53  82aa 746c653d2731  	dc.b	"tle='1 to 20 lette"
  54  82bc 72732c206e75  	dc.b	"rs, numbers, and -"
  55  82ce 5f2a2e206e6f  	dc.b	"_*. no spaces' max"
  56  82e0 6c656e677468  	dc.b	"length='20' size='"
  57  82f2 3230273e3c2f  	dc.b	"20'></td></tr></ta"
  58  8304 626c653e3c74  	dc.b	"ble><table><tr><td"
  59  8316 20636c617373  	dc.b	" class='t1class'><"
  60  8328 2f74643e3c74  	dc.b	"/td><td class='t3c"
  61  833a 6c617373273e  	dc.b	"lass'></td><td cla"
  62  834c 73733d277434  	dc.b	"ss='t4class'>SET</"
  63  835e 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
  64  8370 6173733d2774  	dc.b	"ass='t1class'>Rela"
  65  8382 793031        	dc.b	"y01"
  66  8385 3c2f74643e3c  	dc.b	"</td><td class='s%"
  67  8397 693030273e3c  	dc.b	"i00'></td><td clas"
  68  83a9 733d27743463  	dc.b	"s='t4class'><input"
  69  83bb 20747970653d  	dc.b	" type='radio' id='"
  70  83cd 72656c617930  	dc.b	"relay01on' name='o"
  71  83df 303027207661  	dc.b	"00' value='1' %o00"
  72  83f1 3e3c6c616265  	dc.b	"><label for='relay"
  73  8403 30316f6e273e  	dc.b	"01on'>ON</label><i"
  74  8415 6e7075742074  	dc.b	"nput type='radio' "
  75  8427 69643d277265  	dc.b	"id='relay01off' na"
  76  8439 6d653d276f30  	dc.b	"me='o00' value='0'"
  77  844b 20257030303e  	dc.b	" %p00><label for='"
  78  845d 72656c617930  	dc.b	"relay01off'>OFF</l"
  79  846f 6162656c3e3c  	dc.b	"abel></td></tr><tr"
  80  8481 3e3c74        	dc.b	"><t"
  81  8484 6420636c6173  	dc.b	"d class='t1class'>"
  82  8496 52656c617930  	dc.b	"Relay02</td><td cl"
  83  84a8 6173733d2773  	dc.b	"ass='s%i01'></td><"
  84  84ba 746420636c61  	dc.b	"td class='t4class'"
  85  84cc 3e3c696e7075  	dc.b	"><input type='radi"
  86  84de 6f272069643d  	dc.b	"o' id='relay02on' "
  87  84f0 6e616d653d27  	dc.b	"name='o01' value='"
  88  8502 312720256f30  	dc.b	"1' %o01><label for"
  89  8514 3d2772656c61  	dc.b	"='relay02on'>ON</l"
  90  8526 6162656c3e3c  	dc.b	"abel><input type='"
  91  8538 726164696f27  	dc.b	"radio' id='relay02"
  92  854a 6f666627206e  	dc.b	"off' name='o01' va"
  93  855c 6c75653d2730  	dc.b	"lue='0' %p01><labe"
  94  856e 6c20666f723d  	dc.b	"l for='relay02off'"
  95  8580 3e4f46        	dc.b	">OF"
  96  8583 463c2f6c6162  	dc.b	"F</label></td></tr"
  97  8595 3e3c74723e3c  	dc.b	"><tr><td class='t1"
  98  85a7 636c61737327  	dc.b	"class'>Relay03</td"
  99  85b9 3e3c74642063  	dc.b	"><td class='s%i02'"
 100  85cb 3e3c2f74643e  	dc.b	"></td><td class='t"
 101  85dd 34636c617373  	dc.b	"4class'><input typ"
 102  85ef 653d27726164  	dc.b	"e='radio' id='rela"
 103  8601 7930336f6e27  	dc.b	"y03on' name='o02' "
 104  8613 76616c75653d  	dc.b	"value='1' %o02><la"
 105  8625 62656c20666f  	dc.b	"bel for='relay03on"
 106  8637 273e4f4e3c2f  	dc.b	"'>ON</label><input"
 107  8649 20747970653d  	dc.b	" type='radio' id='"
 108  865b 72656c617930  	dc.b	"relay03off' name='"
 109  866d 6f3032272076  	dc.b	"o02' value='0' %p0"
 110  867f 323e3c        	dc.b	"2><"
 111  8682 6c6162656c20  	dc.b	"label for='relay03"
 112  8694 6f6666273e4f  	dc.b	"off'>OFF</label></"
 113  86a6 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 114  86b8 6173733d2774  	dc.b	"ass='t1class'>Rela"
 115  86ca 7930343c2f74  	dc.b	"y04</td><td class="
 116  86dc 277325693033  	dc.b	"'s%i03'></td><td c"
 117  86ee 6c6173733d27  	dc.b	"lass='t4class'><in"
 118  8700 707574207479  	dc.b	"put type='radio' i"
 119  8712 643d2772656c  	dc.b	"d='relay04on' name"
 120  8724 3d276f303327  	dc.b	"='o03' value='1' %"
 121  8736 6f30333e3c6c  	dc.b	"o03><label for='re"
 122  8748 6c617930346f  	dc.b	"lay04on'>ON</label"
 123  875a 3e3c696e7075  	dc.b	"><input type='radi"
 124  876c 6f272069643d  	dc.b	"o' id='relay04off'"
 125  877e 206e61        	dc.b	" na"
 126  8781 6d653d276f30  	dc.b	"me='o03' value='0'"
 127  8793 20257030333e  	dc.b	" %p03><label for='"
 128  87a5 72656c617930  	dc.b	"relay04off'>OFF</l"
 129  87b7 6162656c3e3c  	dc.b	"abel></td></tr><tr"
 130  87c9 3e3c74642063  	dc.b	"><td class='t1clas"
 131  87db 73273e52656c  	dc.b	"s'>Relay05</td><td"
 132  87ed 20636c617373  	dc.b	" class='s%i04'></t"
 133  87ff 643e3c746420  	dc.b	"d><td class='t4cla"
 134  8811 7373273e3c69  	dc.b	"ss'><input type='r"
 135  8823 6164696f2720  	dc.b	"adio' id='relay05o"
 136  8835 6e27206e616d  	dc.b	"n' name='o04' valu"
 137  8847 653d27312720  	dc.b	"e='1' %o04><label "
 138  8859 666f723d2772  	dc.b	"for='relay05on'>ON"
 139  886b 3c2f6c616265  	dc.b	"</label><input typ"
 140  887d 653d27        	dc.b	"e='"
 141  8880 726164696f27  	dc.b	"radio' id='relay05"
 142  8892 6f666627206e  	dc.b	"off' name='o04' va"
 143  88a4 6c75653d2730  	dc.b	"lue='0' %p04><labe"
 144  88b6 6c20666f723d  	dc.b	"l for='relay05off'"
 145  88c8 3e4f46463c2f  	dc.b	">OFF</label></td><"
 146  88da 2f74723e3c74  	dc.b	"/tr><tr><td class="
 147  88ec 277431636c61  	dc.b	"'t1class'>Relay06<"
 148  88fe 2f74643e3c74  	dc.b	"/td><td class='s%i"
 149  8910 3035273e3c2f  	dc.b	"05'></td><td class"
 150  8922 3d277434636c  	dc.b	"='t4class'><input "
 151  8934 747970653d27  	dc.b	"type='radio' id='r"
 152  8946 656c61793036  	dc.b	"elay06on' name='o0"
 153  8958 35272076616c  	dc.b	"5' value='1' %o05>"
 154  896a 3c6c6162656c  	dc.b	"<label for='relay0"
 155  897c 366f6e        	dc.b	"6on"
 156  897f 273e4f4e3c2f  	dc.b	"'>ON</label><input"
 157  8991 20747970653d  	dc.b	" type='radio' id='"
 158  89a3 72656c617930  	dc.b	"relay06off' name='"
 159  89b5 6f3035272076  	dc.b	"o05' value='0' %p0"
 160  89c7 353e3c6c6162  	dc.b	"5><label for='rela"
 161  89d9 7930366f6666  	dc.b	"y06off'>OFF</label"
 162  89eb 3e3c2f74643e  	dc.b	"></td></tr><tr><td"
 163  89fd 20636c617373  	dc.b	" class='t1class'>R"
 164  8a0f 656c61793037  	dc.b	"elay07</td><td cla"
 165  8a21 73733d277325  	dc.b	"ss='s%i06'></td><t"
 166  8a33 6420636c6173  	dc.b	"d class='t4class'>"
 167  8a45 3c696e707574  	dc.b	"<input type='radio"
 168  8a57 272069643d27  	dc.b	"' id='relay07on' n"
 169  8a69 616d653d276f  	dc.b	"ame='o06' value='1"
 170  8a7b 272025        	dc.b	"' %"
 171  8a7e 6f30363e3c6c  	dc.b	"o06><label for='re"
 172  8a90 6c617930376f  	dc.b	"lay07on'>ON</label"
 173  8aa2 3e3c696e7075  	dc.b	"><input type='radi"
 174  8ab4 6f272069643d  	dc.b	"o' id='relay07off'"
 175  8ac6 206e616d653d  	dc.b	" name='o06' value="
 176  8ad8 273027202570  	dc.b	"'0' %p06><label fo"
 177  8aea 723d2772656c  	dc.b	"r='relay07off'>OFF"
 178  8afc 3c2f6c616265  	dc.b	"</label></td></tr>"
 179  8b0e 3c74723e3c74  	dc.b	"<tr><td class='t1c"
 180  8b20 6c617373273e  	dc.b	"lass'>Relay08</td>"
 181  8b32 3c746420636c  	dc.b	"<td class='s%i07'>"
 182  8b44 3c2f74643e3c  	dc.b	"</td><td class='t4"
 183  8b56 636c61737327  	dc.b	"class'><input type"
 184  8b68 3d2772616469  	dc.b	"='radio' id='relay"
 185  8b7a 30386f        	dc.b	"08o"
 186  8b7d 6e27206e616d  	dc.b	"n' name='o07' valu"
 187  8b8f 653d27312720  	dc.b	"e='1' %o07><label "
 188  8ba1 666f723d2772  	dc.b	"for='relay08on'>ON"
 189  8bb3 3c2f6c616265  	dc.b	"</label><input typ"
 190  8bc5 653d27726164  	dc.b	"e='radio' id='rela"
 191  8bd7 7930386f6666  	dc.b	"y08off' name='o07'"
 192  8be9 2076616c7565  	dc.b	" value='0' %p07><l"
 193  8bfb 6162656c2066  	dc.b	"abel for='relay08o"
 194  8c0d 6666273e4f46  	dc.b	"ff'>OFF</label></t"
 195  8c1f 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 196  8c31 73733d277431  	dc.b	"ss='t1class'>Relay"
 197  8c43 30393c2f7464  	dc.b	"09</td><td class='"
 198  8c55 732569303827  	dc.b	"s%i08'></td><td cl"
 199  8c67 6173733d2774  	dc.b	"ass='t4class'><inp"
 200  8c79 757420        	dc.b	"ut "
 201  8c7c 747970653d27  	dc.b	"type='radio' id='r"
 202  8c8e 656c61793039  	dc.b	"elay09on' name='o0"
 203  8ca0 38272076616c  	dc.b	"8' value='1' %o08>"
 204  8cb2 3c6c6162656c  	dc.b	"<label for='relay0"
 205  8cc4 396f6e273e4f  	dc.b	"9on'>ON</label><in"
 206  8cd6 707574207479  	dc.b	"put type='radio' i"
 207  8ce8 643d2772656c  	dc.b	"d='relay09off' nam"
 208  8cfa 653d276f3038  	dc.b	"e='o08' value='0' "
 209  8d0c 257030383e3c  	dc.b	"%p08><label for='r"
 210  8d1e 656c61793039  	dc.b	"elay09off'>OFF</la"
 211  8d30 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
 212  8d42 3c746420636c  	dc.b	"<td class='t1class"
 213  8d54 273e52656c61  	dc.b	"'>Relay10</td><td "
 214  8d66 636c6173733d  	dc.b	"class='s%i09'></td"
 215  8d78 3e3c74        	dc.b	"><t"
 216  8d7b 6420636c6173  	dc.b	"d class='t4class'>"
 217  8d8d 3c696e707574  	dc.b	"<input type='radio"
 218  8d9f 272069643d27  	dc.b	"' id='relay10on' n"
 219  8db1 616d653d276f  	dc.b	"ame='o09' value='1"
 220  8dc3 2720256f3039  	dc.b	"' %o09><label for="
 221  8dd5 2772656c6179  	dc.b	"'relay10on'>ON</la"
 222  8de7 62656c3e3c69  	dc.b	"bel><input type='r"
 223  8df9 6164696f2720  	dc.b	"adio' id='relay10o"
 224  8e0b 666627206e61  	dc.b	"ff' name='o09' val"
 225  8e1d 75653d273027  	dc.b	"ue='0' %p09><label"
 226  8e2f 20666f723d27  	dc.b	" for='relay10off'>"
 227  8e41 4f46463c2f6c  	dc.b	"OFF</label></td></"
 228  8e53 74723e3c7472  	dc.b	"tr><tr><td class='"
 229  8e65 7431636c6173  	dc.b	"t1class'>Relay11</"
 230  8e77 74643e        	dc.b	"td>"
 231  8e7a 3c746420636c  	dc.b	"<td class='s%i10'>"
 232  8e8c 3c2f74643e3c  	dc.b	"</td><td class='t4"
 233  8e9e 636c61737327  	dc.b	"class'><input type"
 234  8eb0 3d2772616469  	dc.b	"='radio' id='relay"
 235  8ec2 31316f6e2720  	dc.b	"11on' name='o10' v"
 236  8ed4 616c75653d27  	dc.b	"alue='1' %o10><lab"
 237  8ee6 656c20666f72  	dc.b	"el for='relay11on'"
 238  8ef8 3e4f4e3c2f6c  	dc.b	">ON</label><input "
 239  8f0a 747970653d27  	dc.b	"type='radio' id='r"
 240  8f1c 656c61793131  	dc.b	"elay11off' name='o"
 241  8f2e 313027207661  	dc.b	"10' value='0' %p10"
 242  8f40 3e3c6c616265  	dc.b	"><label for='relay"
 243  8f52 31316f666627  	dc.b	"11off'>OFF</label>"
 244  8f64 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 245  8f76 636c61        	dc.b	"cla"
 246  8f79 73733d277431  	dc.b	"ss='t1class'>Relay"
 247  8f8b 31323c2f7464  	dc.b	"12</td><td class='"
 248  8f9d 732569313127  	dc.b	"s%i11'></td><td cl"
 249  8faf 6173733d2774  	dc.b	"ass='t4class'><inp"
 250  8fc1 757420747970  	dc.b	"ut type='radio' id"
 251  8fd3 3d2772656c61  	dc.b	"='relay12on' name="
 252  8fe5 276f31312720  	dc.b	"'o11' value='1' %o"
 253  8ff7 31313e3c6c61  	dc.b	"11><label for='rel"
 254  9009 617931326f6e  	dc.b	"ay12on'>ON</label>"
 255  901b 3c696e707574  	dc.b	"<input type='radio"
 256  902d 272069643d27  	dc.b	"' id='relay12off' "
 257  903f 6e616d653d27  	dc.b	"name='o11' value='"
 258  9051 302720257031  	dc.b	"0' %p11><label for"
 259  9063 3d2772656c61  	dc.b	"='relay12off'>OFF<"
 260  9075 2f6c61        	dc.b	"/la"
 261  9078 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
 262  908a 3c746420636c  	dc.b	"<td class='t1class"
 263  909c 273e52656c61  	dc.b	"'>Relay13</td><td "
 264  90ae 636c6173733d  	dc.b	"class='s%i12'></td"
 265  90c0 3e3c74642063  	dc.b	"><td class='t4clas"
 266  90d2 73273e3c696e  	dc.b	"s'><input type='ra"
 267  90e4 64696f272069  	dc.b	"dio' id='relay13on"
 268  90f6 27206e616d65  	dc.b	"' name='o12' value"
 269  9108 3d2731272025  	dc.b	"='1' %o12><label f"
 270  911a 6f723d277265  	dc.b	"or='relay13on'>ON<"
 271  912c 2f6c6162656c  	dc.b	"/label><input type"
 272  913e 3d2772616469  	dc.b	"='radio' id='relay"
 273  9150 31336f666627  	dc.b	"13off' name='o12' "
 274  9162 76616c75653d  	dc.b	"value='0' %p12><la"
 275  9174 62656c        	dc.b	"bel"
 276  9177 20666f723d27  	dc.b	" for='relay13off'>"
 277  9189 4f46463c2f6c  	dc.b	"OFF</label></td></"
 278  919b 74723e3c7472  	dc.b	"tr><tr><td class='"
 279  91ad 7431636c6173  	dc.b	"t1class'>Relay14</"
 280  91bf 74643e3c7464  	dc.b	"td><td class='s%i1"
 281  91d1 33273e3c2f74  	dc.b	"3'></td><td class="
 282  91e3 277434636c61  	dc.b	"'t4class'><input t"
 283  91f5 7970653d2772  	dc.b	"ype='radio' id='re"
 284  9207 6c617931346f  	dc.b	"lay14on' name='o13"
 285  9219 272076616c75  	dc.b	"' value='1' %o13><"
 286  922b 6c6162656c20  	dc.b	"label for='relay14"
 287  923d 6f6e273e4f4e  	dc.b	"on'>ON</label><inp"
 288  924f 757420747970  	dc.b	"ut type='radio' id"
 289  9261 3d2772656c61  	dc.b	"='relay14off' name"
 290  9273 3d276f        	dc.b	"='o"
 291  9276 313327207661  	dc.b	"13' value='0' %p13"
 292  9288 3e3c6c616265  	dc.b	"><label for='relay"
 293  929a 31346f666627  	dc.b	"14off'>OFF</label>"
 294  92ac 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 295  92be 636c6173733d  	dc.b	"class='t1class'>Re"
 296  92d0 6c617931353c  	dc.b	"lay15</td><td clas"
 297  92e2 733d27732569  	dc.b	"s='s%i14'></td><td"
 298  92f4 20636c617373  	dc.b	" class='t4class'><"
 299  9306 696e70757420  	dc.b	"input type='radio'"
 300  9318 2069643d2772  	dc.b	" id='relay15on' na"
 301  932a 6d653d276f31  	dc.b	"me='o14' value='1'"
 302  933c 20256f31343e  	dc.b	" %o14><label for='"
 303  934e 72656c617931  	dc.b	"relay15on'>ON</lab"
 304  9360 656c3e3c696e  	dc.b	"el><input type='ra"
 305  9372 64696f        	dc.b	"dio"
 306  9375 272069643d27  	dc.b	"' id='relay15off' "
 307  9387 6e616d653d27  	dc.b	"name='o14' value='"
 308  9399 302720257031  	dc.b	"0' %p14><label for"
 309  93ab 3d2772656c61  	dc.b	"='relay15off'>OFF<"
 310  93bd 2f6c6162656c  	dc.b	"/label></td></tr><"
 311  93cf 74723e3c7464  	dc.b	"tr><td class='t1cl"
 312  93e1 617373273e52  	dc.b	"ass'>Relay16</td><"
 313  93f3 746420636c61  	dc.b	"td class='s%i15'><"
 314  9405 2f74643e3c74  	dc.b	"/td><td class='t4c"
 315  9417 6c617373273e  	dc.b	"lass'><input type="
 316  9429 27726164696f  	dc.b	"'radio' id='relay1"
 317  943b 366f6e27206e  	dc.b	"6on' name='o15' va"
 318  944d 6c75653d2731  	dc.b	"lue='1' %o15><labe"
 319  945f 6c20666f723d  	dc.b	"l for='relay16on'>"
 320  9471 4f4e3c        	dc.b	"ON<"
 321  9474 2f6c6162656c  	dc.b	"/label><input type"
 322  9486 3d2772616469  	dc.b	"='radio' id='relay"
 323  9498 31366f666627  	dc.b	"16off' name='o15' "
 324  94aa 76616c75653d  	dc.b	"value='0' %p15><la"
 325  94bc 62656c20666f  	dc.b	"bel for='relay16of"
 326  94ce 66273e4f4646  	dc.b	"f'>OFF</label></td"
 327  94e0 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 328  94f2 733d27743163  	dc.b	"s='t1class'>Invert"
 329  9504 3c2f74643e3c  	dc.b	"</td><td class='t3"
 330  9516 636c61737327  	dc.b	"class'></td><td cl"
 331  9528 6173733d2774  	dc.b	"ass='t4class'><inp"
 332  953a 757420747970  	dc.b	"ut type='radio' id"
 333  954c 3d27696e7665  	dc.b	"='invertOn' name='"
 334  955e 673030272076  	dc.b	"g00' value='1' %g0"
 335  9570 303e3c        	dc.b	"0><"
 336  9573 6c6162656c20  	dc.b	"label for='invertO"
 337  9585 6e273e4f4e3c  	dc.b	"n'>ON</label><inpu"
 338  9597 742074797065  	dc.b	"t type='radio' id="
 339  95a9 27696e766572  	dc.b	"'invertOff' name='"
 340  95bb 673030272076  	dc.b	"g00' value='0' %h0"
 341  95cd 303e3c6c6162  	dc.b	"0><label for='inve"
 342  95df 72744f666627  	dc.b	"rtOff'>OFF</label>"
 343  95f1 3c2f74643e3c  	dc.b	"</td></tr></table>"
 344  9603 3c627574746f  	dc.b	"<button type='subm"
 345  9615 697427207469  	dc.b	"it' title='Saves y"
 346  9627 6f7572206368  	dc.b	"our changes - does"
 347  9639 206e6f742072  	dc.b	" not restart the N"
 348  964b 6574776f726b  	dc.b	"etwork Module'>Sav"
 349  965d 653c2f627574  	dc.b	"e</button><button "
 350  966f 747970        	dc.b	"typ"
 351  9672 653d27726573  	dc.b	"e='reset' title='U"
 352  9684 6e2d646f6573  	dc.b	"n-does any changes"
 353  9696 207468617420  	dc.b	" that have not bee"
 354  96a8 6e2073617665  	dc.b	"n saved'>Undo All<"
 355  96ba 2f627574746f  	dc.b	"/button></form><fo"
 356  96cc 726d20737479  	dc.b	"rm style='display:"
 357  96de 20696e6c696e  	dc.b	" inline' action='%"
 358  96f0 783030687474  	dc.b	"x00http://192.168."
 359  9702 3030312e3030  	dc.b	"001.004:08080/61' "
 360  9714 6d6574686f64  	dc.b	"method='get'><butt"
 361  9726 6f6e20746974  	dc.b	"on title='Save fir"
 362  9738 737421205468  	dc.b	"st! This button wi"
 363  974a 6c6c206e6f74  	dc.b	"ll not save your c"
 364  975c 68616e676573  	dc.b	"hanges'>Address Se"
 365  976e 747469        	dc.b	"tti"
 366  9771 6e67733c2f62  	dc.b	"ngs</button></form"
 367  9783 3e3c666f726d  	dc.b	"><form style='disp"
 368  9795 6c61793a2069  	dc.b	"lay: inline' actio"
 369  97a7 6e3d27257830  	dc.b	"n='%x00http://192."
 370  97b9 3136382e3030  	dc.b	"168.001.004:08080/"
 371  97cb 363627206d65  	dc.b	"66' method='get'><"
 372  97dd 627574746f6e  	dc.b	"button title='Save"
 373  97ef 206669727374  	dc.b	" first! This butto"
 374  9801 6e2077696c6c  	dc.b	"n will not save yo"
 375  9813 757220636861  	dc.b	"ur changes'>Networ"
 376  9825 6b2053746174  	dc.b	"k Statistics</butt"
 377  9837 6f6e3e3c2f66  	dc.b	"on></form><form st"
 378  9849 796c653d2764  	dc.b	"yle='display: inli"
 379  985b 6e6527206163  	dc.b	"ne' action='%x00ht"
 380  986d 74703a        	dc.b	"tp:"
 381  9870 2f2f3139322e  	dc.b	"//192.168.001.004:"
 382  9882 30383038302f  	dc.b	"08080/63' method='"
 383  9894 676574273e3c  	dc.b	"get'><button title"
 384  98a6 3d2753617665  	dc.b	"='Save first! This"
 385  98b8 20627574746f  	dc.b	" button will not s"
 386  98ca 61766520796f  	dc.b	"ave your changes'>"
 387  98dc 48656c703c2f  	dc.b	"Help</button></for"
 388  98ee 6d3e3c2f626f  	dc.b	"m></body></html>",0
 389  98ff               L71_g_HtmlPageAddress:
 390  98ff 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 391  9911 6d6c206c616e  	dc.b	"ml lang='en'><head"
 392  9923 3e3c7469746c  	dc.b	"><title>Address Se"
 393  9935 7474696e6773  	dc.b	"ttings</title><sty"
 394  9947 6c653e2e7431  	dc.b	"le>.t1class { widt"
 395  9959 683a20313030  	dc.b	"h: 100px; }.t2clas"
 396  996b 73207b207769  	dc.b	"s { width: 25px; }"
 397  997d 2e7433636c61  	dc.b	".t3class { width: "
 398  998f 313870783b20  	dc.b	"18px; }.t4class { "
 399  99a1 77696474683a  	dc.b	"width: 40px; }td {"
 400  99b3 20746578742d  	dc.b	" text-align: cente"
 401  99c5 723b20626f72  	dc.b	"r; border: 1px bla"
 402  99d7 636b20736f6c  	dc.b	"ck solid; }</style"
 403  99e9 3e3c2f686561  	dc.b	"></head><body><h1>"
 404  99fb 416464        	dc.b	"Add"
 405  99fe 726573732053  	dc.b	"ress Settings</h1>"
 406  9a10 3c666f726d20  	dc.b	"<form method='POST"
 407  9a22 272061637469  	dc.b	"' action='/'><tabl"
 408  9a34 653e3c74723e  	dc.b	"e><tr><td class='t"
 409  9a46 31636c617373  	dc.b	"1class'>IP Addr</t"
 410  9a58 643e3c74643e  	dc.b	"d><td><input type="
 411  9a6a 277465787427  	dc.b	"'text' name='b00' "
 412  9a7c 636c6173733d  	dc.b	"class='t2class' va"
 413  9a8e 6c75653d2725  	dc.b	"lue='%b00' pattern"
 414  9aa0 3d275b302d39  	dc.b	"='[0-9]{3}' title="
 415  9ab2 275468726565  	dc.b	"'Three digits from"
 416  9ac4 203030302074  	dc.b	" 000 to 255' maxle"
 417  9ad6 6e6774683d27  	dc.b	"ngth='3' size='3'>"
 418  9ae8 3c2f74643e3c  	dc.b	"</td><td><input ty"
 419  9afa 70653d        	dc.b	"pe="
 420  9afd 277465787427  	dc.b	"'text' name='b01' "
 421  9b0f 636c6173733d  	dc.b	"class='t2class' va"
 422  9b21 6c75653d2725  	dc.b	"lue='%b01' pattern"
 423  9b33 3d275b302d39  	dc.b	"='[0-9]{3}' title="
 424  9b45 275468726565  	dc.b	"'Three digits from"
 425  9b57 203030302074  	dc.b	" 000 to 255' maxle"
 426  9b69 6e6774683d27  	dc.b	"ngth='3' size='3'>"
 427  9b7b 3c2f74643e3c  	dc.b	"</td><td><input ty"
 428  9b8d 70653d277465  	dc.b	"pe='text' name='b0"
 429  9b9f 322720636c61  	dc.b	"2' class='t2class'"
 430  9bb1 2076616c7565  	dc.b	" value='%b02' patt"
 431  9bc3 65726e3d275b  	dc.b	"ern='[0-9]{3}' tit"
 432  9bd5 6c653d275468  	dc.b	"le='Three digits f"
 433  9be7 726f6d203030  	dc.b	"rom 000 to 255' ma"
 434  9bf9 786c65        	dc.b	"xle"
 435  9bfc 6e6774683d27  	dc.b	"ngth='3' size='3'>"
 436  9c0e 3c2f74643e3c  	dc.b	"</td><td><input ty"
 437  9c20 70653d277465  	dc.b	"pe='text' name='b0"
 438  9c32 332720636c61  	dc.b	"3' class='t2class'"
 439  9c44 2076616c7565  	dc.b	" value='%b03' patt"
 440  9c56 65726e3d275b  	dc.b	"ern='[0-9]{3}' tit"
 441  9c68 6c653d275468  	dc.b	"le='Three digits f"
 442  9c7a 726f6d203030  	dc.b	"rom 000 to 255' ma"
 443  9c8c 786c656e6774  	dc.b	"xlength='3' size='"
 444  9c9e 33273e3c2f74  	dc.b	"3'></td></tr><tr><"
 445  9cb0 746420636c61  	dc.b	"td class='t1class'"
 446  9cc2 3e4761746577  	dc.b	">Gateway</td><td><"
 447  9cd4 696e70757420  	dc.b	"input type='text' "
 448  9ce6 6e616d653d27  	dc.b	"name='b04' class='"
 449  9cf8 743263        	dc.b	"t2c"
 450  9cfb 6c6173732720  	dc.b	"lass' value='%b04'"
 451  9d0d 207061747465  	dc.b	" pattern='[0-9]{3}"
 452  9d1f 27207469746c  	dc.b	"' title='Three dig"
 453  9d31 697473206672  	dc.b	"its from 000 to 25"
 454  9d43 3527206d6178  	dc.b	"5' maxlength='3' s"
 455  9d55 697a653d2733  	dc.b	"ize='3'></td><td><"
 456  9d67 696e70757420  	dc.b	"input type='text' "
 457  9d79 6e616d653d27  	dc.b	"name='b05' class='"
 458  9d8b 7432636c6173  	dc.b	"t2class' value='%b"
 459  9d9d 303527207061  	dc.b	"05' pattern='[0-9]"
 460  9daf 7b337d272074  	dc.b	"{3}' title='Three "
 461  9dc1 646967697473  	dc.b	"digits from 000 to"
 462  9dd3 203235352720  	dc.b	" 255' maxlength='3"
 463  9de5 272073697a65  	dc.b	"' size='3'></td><t"
 464  9df7 643e3c        	dc.b	"d><"
 465  9dfa 696e70757420  	dc.b	"input type='text' "
 466  9e0c 6e616d653d27  	dc.b	"name='b06' class='"
 467  9e1e 7432636c6173  	dc.b	"t2class' value='%b"
 468  9e30 303627207061  	dc.b	"06' pattern='[0-9]"
 469  9e42 7b337d272074  	dc.b	"{3}' title='Three "
 470  9e54 646967697473  	dc.b	"digits from 000 to"
 471  9e66 203235352720  	dc.b	" 255' maxlength='3"
 472  9e78 272073697a65  	dc.b	"' size='3'></td><t"
 473  9e8a 643e3c696e70  	dc.b	"d><input type='tex"
 474  9e9c 7427206e616d  	dc.b	"t' name='b07' clas"
 475  9eae 733d27743263  	dc.b	"s='t2class' value="
 476  9ec0 272562303727  	dc.b	"'%b07' pattern='[0"
 477  9ed2 2d395d7b337d  	dc.b	"-9]{3}' title='Thr"
 478  9ee4 656520646967  	dc.b	"ee digits from 000"
 479  9ef6 20746f        	dc.b	" to"
 480  9ef9 203235352720  	dc.b	" 255' maxlength='3"
 481  9f0b 272073697a65  	dc.b	"' size='3'></td></"
 482  9f1d 74723e3c7472  	dc.b	"tr><tr><td class='"
 483  9f2f 7431636c6173  	dc.b	"t1class'>Netmask</"
 484  9f41 74643e3c7464  	dc.b	"td><td><input type"
 485  9f53 3d2774657874  	dc.b	"='text' name='b08'"
 486  9f65 20636c617373  	dc.b	" class='t2class' v"
 487  9f77 616c75653d27  	dc.b	"alue='%b08' patter"
 488  9f89 6e3d275b302d  	dc.b	"n='[0-9]{3}' title"
 489  9f9b 3d2754687265  	dc.b	"='Three digits fro"
 490  9fad 6d2030303020  	dc.b	"m 000 to 255' maxl"
 491  9fbf 656e6774683d  	dc.b	"ength='3' size='3'"
 492  9fd1 3e3c2f74643e  	dc.b	"></td><td><input t"
 493  9fe3 7970653d2774  	dc.b	"ype='text' name='b"
 494  9ff5 303927        	dc.b	"09'"
 495  9ff8 20636c617373  	dc.b	" class='t2class' v"
 496  a00a 616c75653d27  	dc.b	"alue='%b09' patter"
 497  a01c 6e3d275b302d  	dc.b	"n='[0-9]{3}' title"
 498  a02e 3d2754687265  	dc.b	"='Three digits fro"
 499  a040 6d2030303020  	dc.b	"m 000 to 255' maxl"
 500  a052 656e6774683d  	dc.b	"ength='3' size='3'"
 501  a064 3e3c2f74643e  	dc.b	"></td><td><input t"
 502  a076 7970653d2774  	dc.b	"ype='text' name='b"
 503  a088 31302720636c  	dc.b	"10' class='t2class"
 504  a09a 272076616c75  	dc.b	"' value='%b10' pat"
 505  a0ac 7465726e3d27  	dc.b	"tern='[0-9]{3}' ti"
 506  a0be 746c653d2754  	dc.b	"tle='Three digits "
 507  a0d0 66726f6d2030  	dc.b	"from 000 to 255' m"
 508  a0e2 61786c656e67  	dc.b	"axlength='3' size="
 509  a0f4 273327        	dc.b	"'3'"
 510  a0f7 3e3c2f74643e  	dc.b	"></td><td><input t"
 511  a109 7970653d2774  	dc.b	"ype='text' name='b"
 512  a11b 31312720636c  	dc.b	"11' class='t2class"
 513  a12d 272076616c75  	dc.b	"' value='%b11' pat"
 514  a13f 7465726e3d27  	dc.b	"tern='[0-9]{3}' ti"
 515  a151 746c653d2754  	dc.b	"tle='Three digits "
 516  a163 66726f6d2030  	dc.b	"from 000 to 255' m"
 517  a175 61786c656e67  	dc.b	"axlength='3' size="
 518  a187 2733273e3c2f  	dc.b	"'3'></td></tr></ta"
 519  a199 626c653e3c74  	dc.b	"ble><table><tr><td"
 520  a1ab 20636c617373  	dc.b	" class='t1class'>P"
 521  a1bd 6f7274202020  	dc.b	"ort   </td><td><in"
 522  a1cf 707574207479  	dc.b	"put type='text' na"
 523  a1e1 6d653d276330  	dc.b	"me='c00' class='t4"
 524  a1f3 636c61        	dc.b	"cla"
 525  a1f6 737327207661  	dc.b	"ss' value='%c00' p"
 526  a208 61747465726e  	dc.b	"attern='[0-9]{5}' "
 527  a21a 7469746c653d  	dc.b	"title='Five digits"
 528  a22c 2066726f6d20  	dc.b	" from 00000 to 655"
 529  a23e 333627206d61  	dc.b	"36' maxlength='5' "
 530  a250 73697a653d27  	dc.b	"size='5'></td></tr"
 531  a262 3e3c2f746162  	dc.b	"></table><table><t"
 532  a274 723e3c746420  	dc.b	"r><td class='t1cla"
 533  a286 7373273e4d41  	dc.b	"ss'>MAC Address</t"
 534  a298 643e3c74643e  	dc.b	"d><td><input type="
 535  a2aa 277465787427  	dc.b	"'text' name='d00' "
 536  a2bc 636c6173733d  	dc.b	"class='t3class' va"
 537  a2ce 6c75653d2725  	dc.b	"lue='%d00' pattern"
 538  a2e0 3d275b302d39  	dc.b	"='[0-9a-f]{2}' tit"
 539  a2f2 6c653d        	dc.b	"le="
 540  a2f5 2754776f2068  	dc.b	"'Two hex digits fr"
 541  a307 6f6d20303020  	dc.b	"om 00 to ff' maxle"
 542  a319 6e6774683d27  	dc.b	"ngth='2' size='2'>"
 543  a32b 3c2f74643e3c  	dc.b	"</td><td><input ty"
 544  a33d 70653d277465  	dc.b	"pe='text' name='d0"
 545  a34f 312720636c61  	dc.b	"1' class='t3class'"
 546  a361 2076616c7565  	dc.b	" value='%d01' patt"
 547  a373 65726e3d275b  	dc.b	"ern='[0-9a-f]{2}' "
 548  a385 7469746c653d  	dc.b	"title='Two hex dig"
 549  a397 697473206672  	dc.b	"its from 00 to ff'"
 550  a3a9 206d61786c65  	dc.b	" maxlength='2' siz"
 551  a3bb 653d2732273e  	dc.b	"e='2'></td><td><in"
 552  a3cd 707574207479  	dc.b	"put type='text' na"
 553  a3df 6d653d276430  	dc.b	"me='d02' class='t3"
 554  a3f1 636c61        	dc.b	"cla"
 555  a3f4 737327207661  	dc.b	"ss' value='%d02' p"
 556  a406 61747465726e  	dc.b	"attern='[0-9a-f]{2"
 557  a418 7d2720746974  	dc.b	"}' title='Two hex "
 558  a42a 646967697473  	dc.b	"digits from 00 to "
 559  a43c 666627206d61  	dc.b	"ff' maxlength='2' "
 560  a44e 73697a653d27  	dc.b	"size='2'></td><td>"
 561  a460 3c696e707574  	dc.b	"<input type='text'"
 562  a472 206e616d653d  	dc.b	" name='d03' class="
 563  a484 277433636c61  	dc.b	"'t3class' value='%"
 564  a496 643033272070  	dc.b	"d03' pattern='[0-9"
 565  a4a8 612d665d7b32  	dc.b	"a-f]{2}' title='Tw"
 566  a4ba 6f2068657820  	dc.b	"o hex digits from "
 567  a4cc 303020746f20  	dc.b	"00 to ff' maxlengt"
 568  a4de 683d27322720  	dc.b	"h='2' size='2'></t"
 569  a4f0 643e3c        	dc.b	"d><"
 570  a4f3 74643e3c696e  	dc.b	"td><input type='te"
 571  a505 787427206e61  	dc.b	"xt' name='d04' cla"
 572  a517 73733d277433  	dc.b	"ss='t3class' value"
 573  a529 3d2725643034  	dc.b	"='%d04' pattern='["
 574  a53b 302d39612d66  	dc.b	"0-9a-f]{2}' title="
 575  a54d 2754776f2068  	dc.b	"'Two hex digits fr"
 576  a55f 6f6d20303020  	dc.b	"om 00 to ff' maxle"
 577  a571 6e6774683d27  	dc.b	"ngth='2' size='2'>"
 578  a583 3c2f74643e3c  	dc.b	"</td><td><input ty"
 579  a595 70653d277465  	dc.b	"pe='text' name='d0"
 580  a5a7 352720636c61  	dc.b	"5' class='t3class'"
 581  a5b9 2076616c7565  	dc.b	" value='%d05' patt"
 582  a5cb 65726e3d275b  	dc.b	"ern='[0-9a-f]{2}' "
 583  a5dd 7469746c653d  	dc.b	"title='Two hex dig"
 584  a5ef 697473        	dc.b	"its"
 585  a5f2 2066726f6d20  	dc.b	" from 00 to ff' ma"
 586  a604 786c656e6774  	dc.b	"xlength='2' size='"
 587  a616 32273e3c2f74  	dc.b	"2'></td></tr></tab"
 588  a628 6c653e3c6275  	dc.b	"le><button type='s"
 589  a63a 75626d697427  	dc.b	"ubmit' title='Save"
 590  a64c 7320796f7572  	dc.b	"s your changes the"
 591  a65e 6e2072657374  	dc.b	"n restarts the Net"
 592  a670 776f726b204d  	dc.b	"work Module'>Save<"
 593  a682 2f627574746f  	dc.b	"/button><button ty"
 594  a694 70653d277265  	dc.b	"pe='reset' title='"
 595  a6a6 556e2d646f65  	dc.b	"Un-does any change"
 596  a6b8 732074686174  	dc.b	"s that have not be"
 597  a6ca 656e20736176  	dc.b	"en saved'>Undo All"
 598  a6dc 3c2f62757474  	dc.b	"</button></form><p"
 599  a6ee 206c69        	dc.b	" li"
 600  a6f1 6e652d686569  	dc.b	"ne-height 20px>Use"
 601  a703 206361757469  	dc.b	" caution when chan"
 602  a715 67696e672074  	dc.b	"ging the above. If"
 603  a727 20796f75206d  	dc.b	" you make a mistak"
 604  a739 6520796f7520  	dc.b	"e you may have to<"
 605  a74b 62723e726573  	dc.b	"br>restore factory"
 606  a75d 206465666175  	dc.b	" defaults by holdi"
 607  a76f 6e6720646f77  	dc.b	"ng down the reset "
 608  a781 627574746f6e  	dc.b	"button for 10 seco"
 609  a793 6e64732e3c62  	dc.b	"nds.<br><br>Make s"
 610  a7a5 757265207468  	dc.b	"ure the MAC you as"
 611  a7b7 7369676e2069  	dc.b	"sign is unique to "
 612  a7c9 796f7572206c  	dc.b	"your local network"
 613  a7db 2e205265636f  	dc.b	". Recommended<br>i"
 614  a7ed 732074        	dc.b	"s t"
 615  a7f0 68617420796f  	dc.b	"hat you just incre"
 616  a802 6d656e742074  	dc.b	"ment the lowest oc"
 617  a814 74657420616e  	dc.b	"tet and then label"
 618  a826 20796f757220  	dc.b	" your devices for<"
 619  a838 62723e667574  	dc.b	"br>future referenc"
 620  a84a 652e3c62723e  	dc.b	"e.<br><br>If you c"
 621  a85c 68616e676520  	dc.b	"hange the highest "
 622  a86e 6f6374657420  	dc.b	"octet of the MAC y"
 623  a880 6f75204d5553  	dc.b	"ou MUST use an eve"
 624  a892 6e206e756d62  	dc.b	"n number to<br>for"
 625  a8a4 6d206120756e  	dc.b	"m a unicast addres"
 626  a8b6 732e2030302c  	dc.b	"s. 00, 02, ... fc,"
 627  a8c8 206665206574  	dc.b	" fe etc work fine."
 628  a8da 2030312c2030  	dc.b	" 01, 03 ... fd, ff"
 629  a8ec 206172        	dc.b	" ar"
 630  a8ef 6520666f723c  	dc.b	"e for<br>multicast"
 631  a901 20616e642077  	dc.b	" and will not work"
 632  a913 2e3c2f703e3c  	dc.b	".</p><form style='"
 633  a925 646973706c61  	dc.b	"display: inline' a"
 634  a937 6374696f6e3d  	dc.b	"ction='%x00http://"
 635  a949 3139322e3136  	dc.b	"192.168.001.004:08"
 636  a95b 3038302f3931  	dc.b	"080/91' method='ge"
 637  a96d 74273e3c6275  	dc.b	"t'><button title='"
 638  a97f 536176652066  	dc.b	"Save first! This b"
 639  a991 7574746f6e20  	dc.b	"utton will not sav"
 640  a9a3 6520796f7572  	dc.b	"e your changes'>Re"
 641  a9b5 626f6f743c2f  	dc.b	"boot</button></for"
 642  a9c7 6d3e266e6273  	dc.b	"m>&nbsp&nbspNOTE: "
 643  a9d9 5265626f6f74  	dc.b	"Reboot may cause t"
 644  a9eb 686520        	dc.b	"he "
 645  a9ee 72656c617973  	dc.b	"relays to cycle.<b"
 646  aa00 723e3c62723e  	dc.b	"r><br><form style="
 647  aa12 27646973706c  	dc.b	"'display: inline' "
 648  aa24 616374696f6e  	dc.b	"action='%x00http:/"
 649  aa36 2f3139322e31  	dc.b	"/192.168.001.004:0"
 650  aa48 383038302f36  	dc.b	"8080/60' method='g"
 651  aa5a 6574273e3c62  	dc.b	"et'><button title="
 652  aa6c 275361766520  	dc.b	"'Save first! This "
 653  aa7e 627574746f6e  	dc.b	"button will not sa"
 654  aa90 766520796f75  	dc.b	"ve your changes'>R"
 655  aaa2 656c61792043  	dc.b	"elay Controls</but"
 656  aab4 746f6e3e3c2f  	dc.b	"ton></form><form s"
 657  aac6 74796c653d27  	dc.b	"tyle='display: inl"
 658  aad8 696e65272061  	dc.b	"ine' action='%x00h"
 659  aaea 747470        	dc.b	"ttp"
 660  aaed 3a2f2f313932  	dc.b	"://192.168.001.004"
 661  aaff 3a3038303830  	dc.b	":08080/66' method="
 662  ab11 27676574273e  	dc.b	"'get'><button titl"
 663  ab23 653d27536176  	dc.b	"e='Save first! Thi"
 664  ab35 732062757474  	dc.b	"s button will not "
 665  ab47 736176652079  	dc.b	"save your changes'"
 666  ab59 3e4e6574776f  	dc.b	">Network Statistic"
 667  ab6b 733c2f627574  	dc.b	"s</button></form><"
 668  ab7d 666f726d2073  	dc.b	"form style='displa"
 669  ab8f 793a20696e6c  	dc.b	"y: inline' action="
 670  aba1 272578303068  	dc.b	"'%x00http://192.16"
 671  abb3 382e3030312e  	dc.b	"8.001.004:08080/63"
 672  abc5 27206d657468  	dc.b	"' method='get'><bu"
 673  abd7 74746f6e2074  	dc.b	"tton title='Save f"
 674  abe9 697273        	dc.b	"irs"
 675  abec 742120546869  	dc.b	"t! This button wil"
 676  abfe 6c206e6f7420  	dc.b	"l not save your ch"
 677  ac10 616e67657327  	dc.b	"anges'>Help</butto"
 678  ac22 6e3e3c2f666f  	dc.b	"n></form></body></"
 679  ac34 68746d6c3e00  	dc.b	"html>",0
 680  ac3a               L12_g_HtmlPageHelp:
 681  ac3a 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 682  ac4c 6d6c206c616e  	dc.b	"ml lang='en'><head"
 683  ac5e 3e3c7469746c  	dc.b	"><title>Help Page<"
 684  ac70 2f7469746c65  	dc.b	"/title><style>td {"
 685  ac82 207769647468  	dc.b	" width: 140px; pad"
 686  ac94 64696e673a20  	dc.b	"ding: 0px; }</styl"
 687  aca6 653e3c2f6865  	dc.b	"e></head><body><h1"
 688  acb8 3e48656c7020  	dc.b	">Help Page 1</h1><"
 689  acca 70206c696e65  	dc.b	"p line-height 20px"
 690  acdc 3e416e20616c  	dc.b	">An alternative to"
 691  acee 207573696e67  	dc.b	" using the web int"
 692  ad00 657266616365  	dc.b	"erface for changin"
 693  ad12 672072656c61  	dc.b	"g relay states is "
 694  ad24 746f2073656e  	dc.b	"to send relay<br>s"
 695  ad36 706563        	dc.b	"pec"
 696  ad39 696669632068  	dc.b	"ific html commands"
 697  ad4b 2e20456e7465  	dc.b	". Enter http://IP:"
 698  ad5d 506f72742f78  	dc.b	"Port/xx where<br>-"
 699  ad6f 204950203d20  	dc.b	" IP = the device I"
 700  ad81 502041646472  	dc.b	"P Address, for exa"
 701  ad93 6d706c652031  	dc.b	"mple 192.168.1.4<b"
 702  ada5 723e2d20506f  	dc.b	"r>- Port = the dev"
 703  adb7 69636520506f  	dc.b	"ice Port number, f"
 704  adc9 6f7220657861  	dc.b	"or example 8080<br"
 705  addb 3e2d20787820  	dc.b	">- xx = one of the"
 706  aded 20636f646573  	dc.b	" codes below:<br><"
 707  adff 7461626c653e  	dc.b	"table><tr><td>00 ="
 708  ae11 2052656c6179  	dc.b	" Relay-01 OFF</td>"
 709  ae23 3c74643e3039  	dc.b	"<td>09 = Relay-05 "
 710  ae35 4f4646        	dc.b	"OFF"
 711  ae38 3c2f74643e3c  	dc.b	"</td><td>17 = Rela"
 712  ae4a 792d3039204f  	dc.b	"y-09 OFF</td><td>2"
 713  ae5c 35203d205265  	dc.b	"5 = Relay-13 OFF<b"
 714  ae6e 723e3c2f7464  	dc.b	"r></td></tr><tr><t"
 715  ae80 643e3031203d  	dc.b	"d>01 = Relay-01  O"
 716  ae92 4e3c2f74643e  	dc.b	"N</td><td>10 = Rel"
 717  aea4 61792d303520  	dc.b	"ay-05  ON</td><td>"
 718  aeb6 3138203d2052  	dc.b	"18 = Relay-09  ON<"
 719  aec8 2f74643e3c74  	dc.b	"/td><td>26 = Relay"
 720  aeda 2d313320204f  	dc.b	"-13  ON<br></td></"
 721  aeec 74723e3c7472  	dc.b	"tr><tr><td>02 = Re"
 722  aefe 6c61792d3032  	dc.b	"lay-02 OFF</td><td"
 723  af10 3e3131203d20  	dc.b	">11 = Relay-06 OFF"
 724  af22 3c2f74643e3c  	dc.b	"</td><td>19 = Rela"
 725  af34 792d31        	dc.b	"y-1"
 726  af37 30204f46463c  	dc.b	"0 OFF</td><td>27 ="
 727  af49 2052656c6179  	dc.b	" Relay-14 OFF<br><"
 728  af5b 2f74643e3c2f  	dc.b	"/td></tr><tr><td>0"
 729  af6d 33203d205265  	dc.b	"3 = Relay-02  ON</"
 730  af7f 74643e3c7464  	dc.b	"td><td>12 = Relay-"
 731  af91 303620204f4e  	dc.b	"06  ON</td><td>20 "
 732  afa3 3d2052656c61  	dc.b	"= Relay-10  ON</td"
 733  afb5 3e3c74643e32  	dc.b	"><td>28 = Relay-14"
 734  afc7 20204f4e3c62  	dc.b	"  ON<br></td></tr>"
 735  afd9 3c74723e3c74  	dc.b	"<tr><td>04 = Relay"
 736  afeb 2d3033204f46  	dc.b	"-03 OFF</td><td>13"
 737  affd 203d2052656c  	dc.b	" = Relay-07 OFF</t"
 738  b00f 643e3c74643e  	dc.b	"d><td>21 = Relay-1"
 739  b021 31204f46463c  	dc.b	"1 OFF</td><td>29 ="
 740  b033 205265        	dc.b	" Re"
 741  b036 6c61792d3135  	dc.b	"lay-15 OFF<br></td"
 742  b048 3e3c2f74723e  	dc.b	"></tr><tr><td>05 ="
 743  b05a 2052656c6179  	dc.b	" Relay-03  ON</td>"
 744  b06c 3c74643e3134  	dc.b	"<td>14 = Relay-07 "
 745  b07e 204f4e3c2f74  	dc.b	" ON</td><td>22 = R"
 746  b090 656c61792d31  	dc.b	"elay-11  ON</td><t"
 747  b0a2 643e3330203d  	dc.b	"d>30 = Relay-15  O"
 748  b0b4 4e3c62723e3c  	dc.b	"N<br></td></tr><tr"
 749  b0c6 3e3c74643e30  	dc.b	"><td>07 = Relay-04"
 750  b0d8 204f46463c2f  	dc.b	" OFF</td><td>15 = "
 751  b0ea 52656c61792d  	dc.b	"Relay-08 OFF</td><"
 752  b0fc 74643e323320  	dc.b	"td>23 = Relay-12 O"
 753  b10e 46463c2f7464  	dc.b	"FF</td><td>31 = Re"
 754  b120 6c61792d3136  	dc.b	"lay-16 OFF<br></td"
 755  b132 3e3c2f        	dc.b	"></"
 756  b135 74723e3c7472  	dc.b	"tr><tr><td>08 = Re"
 757  b147 6c61792d3034  	dc.b	"lay-04  ON</td><td"
 758  b159 3e3136203d20  	dc.b	">16 = Relay-08  ON"
 759  b16b 3c2f74643e3c  	dc.b	"</td><td>24 = Rela"
 760  b17d 792d31322020  	dc.b	"y-12  ON</td><td>3"
 761  b18f 32203d205265  	dc.b	"2 = Relay-16  ON<b"
 762  b1a1 723e3c2f7464  	dc.b	"r></td></tr></tabl"
 763  b1b3 653e3535203d  	dc.b	"e>55 = All Relays "
 764  b1c5 4f4e3c62723e  	dc.b	"ON<br>56 = All Rel"
 765  b1d7 617973204f46  	dc.b	"ays OFF<br><br>The"
 766  b1e9 20666f6c6c6f  	dc.b	" following are als"
 767  b1fb 6f2061766169  	dc.b	"o available:<br>60"
 768  b20d 203d2053686f  	dc.b	" = Show Relay Cont"
 769  b21f 726f6c207061  	dc.b	"rol page<br>61 = S"
 770  b231 686f77        	dc.b	"how"
 771  b234 204164647265  	dc.b	" Address Settings "
 772  b246 706167653c62  	dc.b	"page<br>63 = Show "
 773  b258 48656c702050  	dc.b	"Help Page 1<br>64 "
 774  b26a 3d2053686f77  	dc.b	"= Show Help Page 2"
 775  b27c 3c62723e3635  	dc.b	"<br>65 = Flash LED"
 776  b28e 3c62723e3636  	dc.b	"<br>66 = Show Stat"
 777  b2a0 697374696373  	dc.b	"istics<br>91 = Reb"
 778  b2b2 6f6f743c6272  	dc.b	"oot<br>99 = Show S"
 779  b2c4 686f72742046  	dc.b	"hort Form Relay Se"
 780  b2d6 7474696e6773  	dc.b	"ttings<br></p><for"
 781  b2e8 6d207374796c  	dc.b	"m style='display: "
 782  b2fa 696e6c696e65  	dc.b	"inline' action='%x"
 783  b30c 303068747470  	dc.b	"00http://192.168.0"
 784  b31e 30312e303034  	dc.b	"01.004:08080/64' m"
 785  b330 657468        	dc.b	"eth"
 786  b333 6f643d276765  	dc.b	"od='get'><button t"
 787  b345 69746c653d27  	dc.b	"itle='Go to next H"
 788  b357 656c70207061  	dc.b	"elp page'>Next Hel"
 789  b369 702050616765  	dc.b	"p Page</button></f"
 790  b37b 6f726d3e3c2f  	dc.b	"orm></body></html>",0
 791  b38e               L32_g_HtmlPageHelp2:
 792  b38e 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 793  b3a0 6d6c206c616e  	dc.b	"ml lang='en'><head"
 794  b3b2 3e3c7469746c  	dc.b	"><title>Help Page "
 795  b3c4 323c2f746974  	dc.b	"2</title><style></"
 796  b3d6 7374796c653e  	dc.b	"style></head><body"
 797  b3e8 3e3c68313e48  	dc.b	"><h1>Help Page 2</"
 798  b3fa 68313e3c7020  	dc.b	"h1><p line-height "
 799  b40c 323070783e49  	dc.b	"20px>IP Address, G"
 800  b41e 617465776179  	dc.b	"ateway Address, Ne"
 801  b430 746d61736b2c  	dc.b	"tmask, Port, and M"
 802  b442 414320416464  	dc.b	"AC Address can onl"
 803  b454 792062653c62  	dc.b	"y be<br>changed vi"
 804  b466 612074686520  	dc.b	"a the web interfac"
 805  b478 652e20496620  	dc.b	"e. If the device b"
 806  b48a 65636f        	dc.b	"eco"
 807  b48d 6d657320696e  	dc.b	"mes inaccessible y"
 808  b49f 6f752063616e  	dc.b	"ou can<br>reset to"
 809  b4b1 20666163746f  	dc.b	" factory defaults "
 810  b4c3 627920686f6c  	dc.b	"by holding the res"
 811  b4d5 657420627574  	dc.b	"et button down for"
 812  b4e7 203130207365  	dc.b	" 10 seconds.<br>De"
 813  b4f9 6661756c7473  	dc.b	"faults:<br> IP 192"
 814  b50b 2e3136382e31  	dc.b	".168.1.4<br> Gatew"
 815  b51d 617920313932  	dc.b	"ay 192.168.1.1<br>"
 816  b52f 204e65746d61  	dc.b	" Netmask 255.255.2"
 817  b541 35352e303c62  	dc.b	"55.0<br> Port 0808"
 818  b553 303c62723e20  	dc.b	"0<br> MAC c2-4d-69"
 819  b565 2d36622d3635  	dc.b	"-6b-65-00<br><br>C"
 820  b577 6f6465205265  	dc.b	"ode Revision 20200"
 821  b589 363137        	dc.b	"617"
 822  b58c 20323131303c  	dc.b	" 2110</p><form sty"
 823  b59e 6c653d276469  	dc.b	"le='display: inlin"
 824  b5b0 652720616374  	dc.b	"e' action='%x00htt"
 825  b5c2 703a2f2f3139  	dc.b	"p://192.168.001.00"
 826  b5d4 343a30383038  	dc.b	"4:08080/60' method"
 827  b5e6 3d2767657427  	dc.b	"='get'><button tit"
 828  b5f8 6c653d27476f  	dc.b	"le='Go to Relay Co"
 829  b60a 6e74726f6c20  	dc.b	"ntrol Page'>Relay "
 830  b61c 436f6e74726f  	dc.b	"Controls</button><"
 831  b62e 2f666f726d3e  	dc.b	"/form></body></htm"
 832  b640 6c3e00        	dc.b	"l>",0
 833  b643               L52_g_HtmlPageStats:
 834  b643 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 835  b655 6d6c206c616e  	dc.b	"ml lang='en'><head"
 836  b667 3e3c7469746c  	dc.b	"><title>Network St"
 837  b679 617469737469  	dc.b	"atistics</title><s"
 838  b68b 74796c653e2e  	dc.b	"tyle>.t1class { wi"
 839  b69d 6474683a2031  	dc.b	"dth: 100px; }.t2cl"
 840  b6af 617373207b20  	dc.b	"ass { width: 450px"
 841  b6c1 3b207d746420  	dc.b	"; }td { border: 1p"
 842  b6d3 7820626c6163  	dc.b	"x black solid; }</"
 843  b6e5 7374796c653e  	dc.b	"style></head><body"
 844  b6f7 3e3c68313e4e  	dc.b	"><h1>Network Stati"
 845  b709 73746963733c  	dc.b	"stics</h1><p>Value"
 846  b71b 732073686f77  	dc.b	"s shown are since "
 847  b72d 6c6173742070  	dc.b	"last power on or r"
 848  b73f 657365        	dc.b	"ese"
 849  b742 743c2f703e3c  	dc.b	"t</p><table><tr><t"
 850  b754 6420636c6173  	dc.b	"d class='t1class'>"
 851  b766 256530307878  	dc.b	"%e00xxxxxxxxxx</td"
 852  b778 3e3c74642063  	dc.b	"><td class='t2clas"
 853  b78a 73273e44726f  	dc.b	"s'>Dropped packets"
 854  b79c 206174207468  	dc.b	" at the IP layer</"
 855  b7ae 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 856  b7c0 6173733d2774  	dc.b	"ass='t1class'>%e01"
 857  b7d2 787878787878  	dc.b	"xxxxxxxxxx</td><td"
 858  b7e4 20636c617373  	dc.b	" class='t2class'>R"
 859  b7f6 656365697665  	dc.b	"eceived packets at"
 860  b808 207468652049  	dc.b	" the IP layer</td>"
 861  b81a 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 862  b82c 3d277431636c  	dc.b	"='t1class'>%e02xxx"
 863  b83e 787878        	dc.b	"xxx"
 864  b841 787878783c2f  	dc.b	"xxxx</td><td class"
 865  b853 3d277432636c  	dc.b	"='t2class'>Sent pa"
 866  b865 636b65747320  	dc.b	"ckets at the IP la"
 867  b877 7965723c2f74  	dc.b	"yer</td></tr><tr><"
 868  b889 746420636c61  	dc.b	"td class='t1class'"
 869  b89b 3e2565303378  	dc.b	">%e03xxxxxxxxxx</t"
 870  b8ad 643e3c746420  	dc.b	"d><td class='t2cla"
 871  b8bf 7373273e5061  	dc.b	"ss'>Packets droppe"
 872  b8d1 642064756520  	dc.b	"d due to wrong IP "
 873  b8e3 76657273696f  	dc.b	"version or header "
 874  b8f5 6c656e677468  	dc.b	"length</td></tr><t"
 875  b907 723e3c746420  	dc.b	"r><td class='t1cla"
 876  b919 7373273e2565  	dc.b	"ss'>%e04xxxxxxxxxx"
 877  b92b 3c2f74643e3c  	dc.b	"</td><td class='t2"
 878  b93d 636c61        	dc.b	"cla"
 879  b940 7373273e5061  	dc.b	"ss'>Packets droppe"
 880  b952 642064756520  	dc.b	"d due to wrong IP "
 881  b964 6c656e677468  	dc.b	"length, high byte<"
 882  b976 2f74643e3c2f  	dc.b	"/td></tr><tr><td c"
 883  b988 6c6173733d27  	dc.b	"lass='t1class'>%e0"
 884  b99a 357878787878  	dc.b	"5xxxxxxxxxx</td><t"
 885  b9ac 6420636c6173  	dc.b	"d class='t2class'>"
 886  b9be 5061636b6574  	dc.b	"Packets dropped du"
 887  b9d0 6520746f2077  	dc.b	"e to wrong IP leng"
 888  b9e2 74682c206c6f  	dc.b	"th, low byte</td><"
 889  b9f4 2f74723e3c74  	dc.b	"/tr><tr><td class="
 890  ba06 277431636c61  	dc.b	"'t1class'>%e06xxxx"
 891  ba18 787878787878  	dc.b	"xxxxxx</td><td cla"
 892  ba2a 73733d277432  	dc.b	"ss='t2class'>Packe"
 893  ba3c 747320        	dc.b	"ts "
 894  ba3f 64726f707065  	dc.b	"dropped since they"
 895  ba51 207765726520  	dc.b	" were IP fragments"
 896  ba63 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 897  ba75 636c6173733d  	dc.b	"class='t1class'>%e"
 898  ba87 303778787878  	dc.b	"07xxxxxxxxxx</td><"
 899  ba99 746420636c61  	dc.b	"td class='t2class'"
 900  baab 3e5061636b65  	dc.b	">Packets dropped d"
 901  babd 756520746f20  	dc.b	"ue to IP checksum "
 902  bacf 6572726f7273  	dc.b	"errors</td></tr><t"
 903  bae1 723e3c746420  	dc.b	"r><td class='t1cla"
 904  baf3 7373273e2565  	dc.b	"ss'>%e08xxxxxxxxxx"
 905  bb05 3c2f74643e3c  	dc.b	"</td><td class='t2"
 906  bb17 636c61737327  	dc.b	"class'>Packets dro"
 907  bb29 707065642073  	dc.b	"pped since they we"
 908  bb3b 726520        	dc.b	"re "
 909  bb3e 6e6f74204943  	dc.b	"not ICMP or TCP</t"
 910  bb50 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 911  bb62 73733d277431  	dc.b	"ss='t1class'>%e09x"
 912  bb74 787878787878  	dc.b	"xxxxxxxxx</td><td "
 913  bb86 636c6173733d  	dc.b	"class='t2class'>Dr"
 914  bb98 6f7070656420  	dc.b	"opped ICMP packets"
 915  bbaa 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 916  bbbc 636c6173733d  	dc.b	"class='t1class'>%e"
 917  bbce 313078787878  	dc.b	"10xxxxxxxxxx</td><"
 918  bbe0 746420636c61  	dc.b	"td class='t2class'"
 919  bbf2 3e5265636569  	dc.b	">Received ICMP pac"
 920  bc04 6b6574733c2f  	dc.b	"kets</td></tr><tr>"
 921  bc16 3c746420636c  	dc.b	"<td class='t1class"
 922  bc28 273e25653131  	dc.b	"'>%e11xxxxxxxxxx</"
 923  bc3a 74643e        	dc.b	"td>"
 924  bc3d 3c746420636c  	dc.b	"<td class='t2class"
 925  bc4f 273e53656e74  	dc.b	"'>Sent ICMP packet"
 926  bc61 733c2f74643e  	dc.b	"s</td></tr><tr><td"
 927  bc73 20636c617373  	dc.b	" class='t1class'>%"
 928  bc85 653132787878  	dc.b	"e12xxxxxxxxxx</td>"
 929  bc97 3c746420636c  	dc.b	"<td class='t2class"
 930  bca9 273e49434d50  	dc.b	"'>ICMP packets wit"
 931  bcbb 682061207772  	dc.b	"h a wrong type</td"
 932  bccd 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 933  bcdf 733d27743163  	dc.b	"s='t1class'>%e13xx"
 934  bcf1 787878787878  	dc.b	"xxxxxxxx</td><td c"
 935  bd03 6c6173733d27  	dc.b	"lass='t2class'>Dro"
 936  bd15 707065642054  	dc.b	"pped TCP segments<"
 937  bd27 2f74643e3c2f  	dc.b	"/td></tr><tr><td c"
 938  bd39 6c6173        	dc.b	"las"
 939  bd3c 733d27743163  	dc.b	"s='t1class'>%e14xx"
 940  bd4e 787878787878  	dc.b	"xxxxxxxx</td><td c"
 941  bd60 6c6173733d27  	dc.b	"lass='t2class'>Rec"
 942  bd72 656976656420  	dc.b	"eived TCP segments"
 943  bd84 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 944  bd96 636c6173733d  	dc.b	"class='t1class'>%e"
 945  bda8 313578787878  	dc.b	"15xxxxxxxxxx</td><"
 946  bdba 746420636c61  	dc.b	"td class='t2class'"
 947  bdcc 3e53656e7420  	dc.b	">Sent TCP segments"
 948  bdde 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 949  bdf0 636c6173733d  	dc.b	"class='t1class'>%e"
 950  be02 313678787878  	dc.b	"16xxxxxxxxxx</td><"
 951  be14 746420636c61  	dc.b	"td class='t2class'"
 952  be26 3e5443502073  	dc.b	">TCP segments with"
 953  be38 206120        	dc.b	" a "
 954  be3b 626164206368  	dc.b	"bad checksum</td><"
 955  be4d 2f74723e3c74  	dc.b	"/tr><tr><td class="
 956  be5f 277431636c61  	dc.b	"'t1class'>%e17xxxx"
 957  be71 787878787878  	dc.b	"xxxxxx</td><td cla"
 958  be83 73733d277432  	dc.b	"ss='t2class'>TCP s"
 959  be95 65676d656e74  	dc.b	"egments with a bad"
 960  bea7 2041434b206e  	dc.b	" ACK number</td></"
 961  beb9 74723e3c7472  	dc.b	"tr><tr><td class='"
 962  becb 7431636c6173  	dc.b	"t1class'>%e18xxxxx"
 963  bedd 78787878783c  	dc.b	"xxxxx</td><td clas"
 964  beef 733d27743263  	dc.b	"s='t2class'>Receiv"
 965  bf01 656420544350  	dc.b	"ed TCP RST (reset)"
 966  bf13 207365676d65  	dc.b	" segments</td></tr"
 967  bf25 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 968  bf37 636c61        	dc.b	"cla"
 969  bf3a 7373273e2565  	dc.b	"ss'>%e19xxxxxxxxxx"
 970  bf4c 3c2f74643e3c  	dc.b	"</td><td class='t2"
 971  bf5e 636c61737327  	dc.b	"class'>Retransmitt"
 972  bf70 656420544350  	dc.b	"ed TCP segments</t"
 973  bf82 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 974  bf94 73733d277431  	dc.b	"ss='t1class'>%e20x"
 975  bfa6 787878787878  	dc.b	"xxxxxxxxx</td><td "
 976  bfb8 636c6173733d  	dc.b	"class='t2class'>Dr"
 977  bfca 6f7070656420  	dc.b	"opped SYNs due to "
 978  bfdc 746f6f206665  	dc.b	"too few connection"
 979  bfee 73206176616c  	dc.b	"s avaliable</td></"
 980  c000 74723e3c7472  	dc.b	"tr><tr><td class='"
 981  c012 7431636c6173  	dc.b	"t1class'>%e21xxxxx"
 982  c024 78787878783c  	dc.b	"xxxxx</td><td clas"
 983  c036 733d27        	dc.b	"s='"
 984  c039 7432636c6173  	dc.b	"t2class'>SYNs for "
 985  c04b 636c6f736564  	dc.b	"closed ports, trig"
 986  c05d 676572696e67  	dc.b	"gering a RST</td><"
 987  c06f 2f74723e3c2f  	dc.b	"/tr></table><form "
 988  c081 7374796c653d  	dc.b	"style='display: in"
 989  c093 6c696e652720  	dc.b	"line' action='%x00"
 990  c0a5 687474703a2f  	dc.b	"http://192.168.001"
 991  c0b7 2e3030343a30  	dc.b	".004:08080/60' met"
 992  c0c9 686f643d2767  	dc.b	"hod='get'><button "
 993  c0db 7469746c653d  	dc.b	"title='Go to Relay"
 994  c0ed 20436f6e7472  	dc.b	" Control Page'>Rel"
 995  c0ff 617920436f6e  	dc.b	"ay Controls</butto"
 996  c111 6e3e3c2f666f  	dc.b	"n></form></body></"
 997  c123 68746d6c3e00  	dc.b	"html>",0
 998  c129               L72_g_HtmlPageRstate:
 999  c129 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
1000  c13b 6d6c206c616e  	dc.b	"ml lang='en'><head"
1001  c14d 3e3c7469746c  	dc.b	"><title>Help Page "
1002  c15f 323c2f746974  	dc.b	"2</title><style></"
1003  c171 7374796c653e  	dc.b	"style></head><body"
1004  c183 3e3c703e2566  	dc.b	"><p>%f00xxxxxxxxxx"
1005  c195 787878787878  	dc.b	"xxxxxx</p></body><"
1006  c1a7 2f68746d6c3e  	dc.b	"/html>",0
1072                     ; 484 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1072                     ; 485 {
1074                     	switch	.text
1075  c759               L3_CopyStringP:
1077  c759 89            	pushw	x
1078  c75a 5203          	subw	sp,#3
1079       00000003      OFST:	set	3
1082                     ; 490   nBytes = 0;
1084  c75c 5f            	clrw	x
1086  c75d 2014          	jra	L17
1087  c75f               L56:
1088                     ; 492     **ppBuffer = Character;
1090  c75f 1e04          	ldw	x,(OFST+1,sp)
1091  c761 fe            	ldw	x,(x)
1092  c762 f7            	ld	(x),a
1093                     ; 493     *ppBuffer = *ppBuffer + 1;
1095  c763 1e04          	ldw	x,(OFST+1,sp)
1096  c765 9093          	ldw	y,x
1097  c767 fe            	ldw	x,(x)
1098  c768 5c            	incw	x
1099  c769 90ff          	ldw	(y),x
1100                     ; 494     pString = pString + 1;
1102  c76b 1e08          	ldw	x,(OFST+5,sp)
1103  c76d 5c            	incw	x
1104  c76e 1f08          	ldw	(OFST+5,sp),x
1105                     ; 495     nBytes++;
1107  c770 1e01          	ldw	x,(OFST-2,sp)
1108  c772 5c            	incw	x
1109  c773               L17:
1110  c773 1f01          	ldw	(OFST-2,sp),x
1112                     ; 491   while ((Character = pString[0]) != '\0') {
1112                     ; 492     **ppBuffer = Character;
1112                     ; 493     *ppBuffer = *ppBuffer + 1;
1112                     ; 494     pString = pString + 1;
1112                     ; 495     nBytes++;
1114  c775 1e08          	ldw	x,(OFST+5,sp)
1115  c777 f6            	ld	a,(x)
1116  c778 6b03          	ld	(OFST+0,sp),a
1118  c77a 26e3          	jrne	L56
1119                     ; 497   return nBytes;
1121  c77c 1e01          	ldw	x,(OFST-2,sp)
1124  c77e 5b05          	addw	sp,#5
1125  c780 81            	ret	
1170                     ; 501 static uint16_t CopyValue(uint8_t** ppBuffer, uint32_t nValue)
1170                     ; 502 {
1171                     	switch	.text
1172  c781               L5_CopyValue:
1174  c781 89            	pushw	x
1175       00000000      OFST:	set	0
1178                     ; 510   emb_itoa(nValue, OctetArray, 10, 5);
1180  c782 4b05          	push	#5
1181  c784 4b0a          	push	#10
1182  c786 ae0010        	ldw	x,#_OctetArray
1183  c789 89            	pushw	x
1184  c78a 1e0b          	ldw	x,(OFST+11,sp)
1185  c78c 89            	pushw	x
1186  c78d 1e0b          	ldw	x,(OFST+11,sp)
1187  c78f 89            	pushw	x
1188  c790 ad53          	call	_emb_itoa
1190  c792 5b08          	addw	sp,#8
1191                     ; 512   **ppBuffer = OctetArray[0];
1193  c794 1e01          	ldw	x,(OFST+1,sp)
1194  c796 fe            	ldw	x,(x)
1195  c797 c60010        	ld	a,_OctetArray
1196  c79a f7            	ld	(x),a
1197                     ; 513   *ppBuffer = *ppBuffer + 1;
1199  c79b 1e01          	ldw	x,(OFST+1,sp)
1200  c79d 9093          	ldw	y,x
1201  c79f fe            	ldw	x,(x)
1202  c7a0 5c            	incw	x
1203  c7a1 90ff          	ldw	(y),x
1204                     ; 515   **ppBuffer = OctetArray[1];
1206  c7a3 1e01          	ldw	x,(OFST+1,sp)
1207  c7a5 fe            	ldw	x,(x)
1208  c7a6 c60011        	ld	a,_OctetArray+1
1209  c7a9 f7            	ld	(x),a
1210                     ; 516   *ppBuffer = *ppBuffer + 1;
1212  c7aa 1e01          	ldw	x,(OFST+1,sp)
1213  c7ac 9093          	ldw	y,x
1214  c7ae fe            	ldw	x,(x)
1215  c7af 5c            	incw	x
1216  c7b0 90ff          	ldw	(y),x
1217                     ; 518   **ppBuffer = OctetArray[2];
1219  c7b2 1e01          	ldw	x,(OFST+1,sp)
1220  c7b4 fe            	ldw	x,(x)
1221  c7b5 c60012        	ld	a,_OctetArray+2
1222  c7b8 f7            	ld	(x),a
1223                     ; 519   *ppBuffer = *ppBuffer + 1;
1225  c7b9 1e01          	ldw	x,(OFST+1,sp)
1226  c7bb 9093          	ldw	y,x
1227  c7bd fe            	ldw	x,(x)
1228  c7be 5c            	incw	x
1229  c7bf 90ff          	ldw	(y),x
1230                     ; 521   **ppBuffer = OctetArray[3];
1232  c7c1 1e01          	ldw	x,(OFST+1,sp)
1233  c7c3 fe            	ldw	x,(x)
1234  c7c4 c60013        	ld	a,_OctetArray+3
1235  c7c7 f7            	ld	(x),a
1236                     ; 522   *ppBuffer = *ppBuffer + 1;
1238  c7c8 1e01          	ldw	x,(OFST+1,sp)
1239  c7ca 9093          	ldw	y,x
1240  c7cc fe            	ldw	x,(x)
1241  c7cd 5c            	incw	x
1242  c7ce 90ff          	ldw	(y),x
1243                     ; 524   **ppBuffer = OctetArray[4];
1245  c7d0 1e01          	ldw	x,(OFST+1,sp)
1246  c7d2 fe            	ldw	x,(x)
1247  c7d3 c60014        	ld	a,_OctetArray+4
1248  c7d6 f7            	ld	(x),a
1249                     ; 525   *ppBuffer = *ppBuffer + 1;
1251  c7d7 1e01          	ldw	x,(OFST+1,sp)
1252  c7d9 9093          	ldw	y,x
1253  c7db fe            	ldw	x,(x)
1254  c7dc 5c            	incw	x
1255  c7dd 90ff          	ldw	(y),x
1256                     ; 527   return 5;
1258  c7df ae0005        	ldw	x,#5
1261  c7e2 5b02          	addw	sp,#2
1262  c7e4 81            	ret	
1334                     ; 531 char* emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
1334                     ; 532 {
1335                     	switch	.text
1336  c7e5               _emb_itoa:
1338  c7e5 5206          	subw	sp,#6
1339       00000006      OFST:	set	6
1342                     ; 547   for (i=0; i < 10; i++) str[i] = '0';
1344  c7e7 4f            	clr	a
1345  c7e8 6b06          	ld	(OFST+0,sp),a
1347  c7ea               L541:
1350  c7ea 5f            	clrw	x
1351  c7eb 97            	ld	xl,a
1352  c7ec 72fb0d        	addw	x,(OFST+7,sp)
1353  c7ef a630          	ld	a,#48
1354  c7f1 f7            	ld	(x),a
1357  c7f2 0c06          	inc	(OFST+0,sp)
1361  c7f4 7b06          	ld	a,(OFST+0,sp)
1362  c7f6 a10a          	cp	a,#10
1363  c7f8 25f0          	jrult	L541
1364                     ; 548   str[pad] = '\0';
1366  c7fa 7b10          	ld	a,(OFST+10,sp)
1367  c7fc 5f            	clrw	x
1368  c7fd 97            	ld	xl,a
1369  c7fe 72fb0d        	addw	x,(OFST+7,sp)
1370  c801 7f            	clr	(x)
1371                     ; 549   if (num == 0) return str;
1373  c802 96            	ldw	x,sp
1374  c803 1c0009        	addw	x,#OFST+3
1375  c806 cdfafd        	call	c_lzmp
1379  c809 2775          	jreq	L61
1380                     ; 552   i = 0;
1382  c80b 0f06          	clr	(OFST+0,sp)
1385  c80d 2060          	jra	L161
1386  c80f               L551:
1387                     ; 554     rem = (uint8_t)(num % base);
1389  c80f 7b0f          	ld	a,(OFST+9,sp)
1390  c811 b703          	ld	c_lreg+3,a
1391  c813 3f02          	clr	c_lreg+2
1392  c815 3f01          	clr	c_lreg+1
1393  c817 3f00          	clr	c_lreg
1394  c819 96            	ldw	x,sp
1395  c81a 5c            	incw	x
1396  c81b cdfb10        	call	c_rtol
1399  c81e 96            	ldw	x,sp
1400  c81f 1c0009        	addw	x,#OFST+3
1401  c822 cdf9aa        	call	c_ltor
1403  c825 96            	ldw	x,sp
1404  c826 5c            	incw	x
1405  c827 cdfae3        	call	c_lumd
1407  c82a b603          	ld	a,c_lreg+3
1408  c82c 6b05          	ld	(OFST-1,sp),a
1410                     ; 555     if(rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
1412  c82e a10a          	cp	a,#10
1413  c830 7b06          	ld	a,(OFST+0,sp)
1414  c832 250d          	jrult	L561
1417  c834 0c06          	inc	(OFST+0,sp)
1419  c836 5f            	clrw	x
1420  c837 97            	ld	xl,a
1421  c838 72fb0d        	addw	x,(OFST+7,sp)
1422  c83b 7b05          	ld	a,(OFST-1,sp)
1423  c83d ab57          	add	a,#87
1425  c83f 200b          	jra	L761
1426  c841               L561:
1427                     ; 556     else str[i++] = (uint8_t)(rem + '0');
1429  c841 0c06          	inc	(OFST+0,sp)
1431  c843 5f            	clrw	x
1432  c844 97            	ld	xl,a
1433  c845 72fb0d        	addw	x,(OFST+7,sp)
1434  c848 7b05          	ld	a,(OFST-1,sp)
1435  c84a ab30          	add	a,#48
1436  c84c               L761:
1437  c84c f7            	ld	(x),a
1438                     ; 557     num = num/base;
1440  c84d 7b0f          	ld	a,(OFST+9,sp)
1441  c84f b703          	ld	c_lreg+3,a
1442  c851 3f02          	clr	c_lreg+2
1443  c853 3f01          	clr	c_lreg+1
1444  c855 3f00          	clr	c_lreg
1445  c857 96            	ldw	x,sp
1446  c858 5c            	incw	x
1447  c859 cdfb10        	call	c_rtol
1450  c85c 96            	ldw	x,sp
1451  c85d 1c0009        	addw	x,#OFST+3
1452  c860 cdf9aa        	call	c_ltor
1454  c863 96            	ldw	x,sp
1455  c864 5c            	incw	x
1456  c865 cdf9bc        	call	c_ludv
1458  c868 96            	ldw	x,sp
1459  c869 1c0009        	addw	x,#OFST+3
1460  c86c cdfb10        	call	c_rtol
1462  c86f               L161:
1463                     ; 553   while (num != 0) {
1465  c86f 96            	ldw	x,sp
1466  c870 1c0009        	addw	x,#OFST+3
1467  c873 cdfafd        	call	c_lzmp
1469  c876 2697          	jrne	L551
1470                     ; 561   reverse(str, pad);
1472  c878 7b10          	ld	a,(OFST+10,sp)
1473  c87a 88            	push	a
1474  c87b 1e0e          	ldw	x,(OFST+8,sp)
1475  c87d ad06          	call	_reverse
1477  c87f 84            	pop	a
1478                     ; 563   return str;
1481  c880               L61:
1483  c880 1e0d          	ldw	x,(OFST+7,sp)
1485  c882 5b06          	addw	sp,#6
1486  c884 81            	ret	
1549                     ; 568 void reverse(char str[], uint8_t length)
1549                     ; 569 {
1550                     	switch	.text
1551  c885               _reverse:
1553  c885 89            	pushw	x
1554  c886 5203          	subw	sp,#3
1555       00000003      OFST:	set	3
1558                     ; 574   start = 0;
1560  c888 0f02          	clr	(OFST-1,sp)
1562                     ; 575   end = (uint8_t)(length - 1);
1564  c88a 7b08          	ld	a,(OFST+5,sp)
1565  c88c 4a            	dec	a
1566  c88d 6b03          	ld	(OFST+0,sp),a
1569  c88f 2029          	jra	L322
1570  c891               L712:
1571                     ; 578     temp = str[start];
1573  c891 5f            	clrw	x
1574  c892 97            	ld	xl,a
1575  c893 72fb04        	addw	x,(OFST+1,sp)
1576  c896 f6            	ld	a,(x)
1577  c897 6b01          	ld	(OFST-2,sp),a
1579                     ; 579     str[start] = str[end];
1581  c899 5f            	clrw	x
1582  c89a 7b02          	ld	a,(OFST-1,sp)
1583  c89c 97            	ld	xl,a
1584  c89d 72fb04        	addw	x,(OFST+1,sp)
1585  c8a0 7b03          	ld	a,(OFST+0,sp)
1586  c8a2 905f          	clrw	y
1587  c8a4 9097          	ld	yl,a
1588  c8a6 72f904        	addw	y,(OFST+1,sp)
1589  c8a9 90f6          	ld	a,(y)
1590  c8ab f7            	ld	(x),a
1591                     ; 580     str[end] = temp;
1593  c8ac 5f            	clrw	x
1594  c8ad 7b03          	ld	a,(OFST+0,sp)
1595  c8af 97            	ld	xl,a
1596  c8b0 72fb04        	addw	x,(OFST+1,sp)
1597  c8b3 7b01          	ld	a,(OFST-2,sp)
1598  c8b5 f7            	ld	(x),a
1599                     ; 581     start++;
1601  c8b6 0c02          	inc	(OFST-1,sp)
1603                     ; 582     end--;
1605  c8b8 0a03          	dec	(OFST+0,sp)
1607  c8ba               L322:
1608                     ; 577   while (start < end) {
1608                     ; 578     temp = str[start];
1608                     ; 579     str[start] = str[end];
1608                     ; 580     str[end] = temp;
1608                     ; 581     start++;
1608                     ; 582     end--;
1610  c8ba 7b02          	ld	a,(OFST-1,sp)
1611  c8bc 1103          	cp	a,(OFST+0,sp)
1612  c8be 25d1          	jrult	L712
1613                     ; 584 }
1616  c8c0 5b05          	addw	sp,#5
1617  c8c2 81            	ret	
1678                     ; 587 uint8_t three_alpha_to_uint(uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
1678                     ; 588 {
1679                     	switch	.text
1680  c8c3               _three_alpha_to_uint:
1682  c8c3 89            	pushw	x
1683  c8c4 89            	pushw	x
1684       00000002      OFST:	set	2
1687                     ; 596   value = (uint8_t)((alpha1 - '0') *100);
1689  c8c5 9e            	ld	a,xh
1690  c8c6 97            	ld	xl,a
1691  c8c7 a664          	ld	a,#100
1692  c8c9 42            	mul	x,a
1693  c8ca 9f            	ld	a,xl
1694  c8cb a0c0          	sub	a,#192
1695  c8cd 6b02          	ld	(OFST+0,sp),a
1697                     ; 597   digit = (uint8_t)((alpha2 - '0') * 10);
1699  c8cf 7b04          	ld	a,(OFST+2,sp)
1700  c8d1 97            	ld	xl,a
1701  c8d2 a60a          	ld	a,#10
1702  c8d4 42            	mul	x,a
1703  c8d5 9f            	ld	a,xl
1704  c8d6 a0e0          	sub	a,#224
1706                     ; 598   value = (uint8_t)(value + digit);
1708  c8d8 1b02          	add	a,(OFST+0,sp)
1709  c8da 6b02          	ld	(OFST+0,sp),a
1711                     ; 599   digit = (uint8_t)(alpha3 - '0');
1713  c8dc 7b07          	ld	a,(OFST+5,sp)
1714  c8de a030          	sub	a,#48
1715  c8e0 6b01          	ld	(OFST-1,sp),a
1717                     ; 600   value = (uint8_t)(value + digit);
1719  c8e2 1b02          	add	a,(OFST+0,sp)
1721                     ; 602   if(value >= 255) value = 0;
1723  c8e4 a1ff          	cp	a,#255
1724  c8e6 2501          	jrult	L352
1727  c8e8 4f            	clr	a
1729  c8e9               L352:
1730                     ; 604   return value;
1734  c8e9 5b04          	addw	sp,#4
1735  c8eb 81            	ret	
1781                     ; 608 uint8_t two_alpha_to_uint(uint8_t alpha1, uint8_t alpha2)
1781                     ; 609 {
1782                     	switch	.text
1783  c8ec               _two_alpha_to_uint:
1785  c8ec 89            	pushw	x
1786  c8ed 88            	push	a
1787       00000001      OFST:	set	1
1790                     ; 616   if (alpha1 >= '0' && alpha1 <= '9') value = (uint8_t)((alpha1 - '0') << 4);
1792  c8ee 9e            	ld	a,xh
1793  c8ef a130          	cp	a,#48
1794  c8f1 250f          	jrult	L572
1796  c8f3 9e            	ld	a,xh
1797  c8f4 a13a          	cp	a,#58
1798  c8f6 240a          	jruge	L572
1801  c8f8 9e            	ld	a,xh
1802  c8f9 97            	ld	xl,a
1803  c8fa a610          	ld	a,#16
1804  c8fc 42            	mul	x,a
1805  c8fd 9f            	ld	a,xl
1806  c8fe a000          	sub	a,#0
1808  c900 2030          	jp	LC001
1809  c902               L572:
1810                     ; 617   else if(alpha1 == 'a') value = 0xa0;
1812  c902 7b02          	ld	a,(OFST+1,sp)
1813  c904 a161          	cp	a,#97
1814  c906 2604          	jrne	L103
1817  c908 a6a0          	ld	a,#160
1819  c90a 2026          	jp	LC001
1820  c90c               L103:
1821                     ; 618   else if(alpha1 == 'b') value = 0xb0;
1823  c90c a162          	cp	a,#98
1824  c90e 2604          	jrne	L503
1827  c910 a6b0          	ld	a,#176
1829  c912 201e          	jp	LC001
1830  c914               L503:
1831                     ; 619   else if(alpha1 == 'c') value = 0xc0;
1833  c914 a163          	cp	a,#99
1834  c916 2604          	jrne	L113
1837  c918 a6c0          	ld	a,#192
1839  c91a 2016          	jp	LC001
1840  c91c               L113:
1841                     ; 620   else if(alpha1 == 'd') value = 0xd0;
1843  c91c a164          	cp	a,#100
1844  c91e 2604          	jrne	L513
1847  c920 a6d0          	ld	a,#208
1849  c922 200e          	jp	LC001
1850  c924               L513:
1851                     ; 621   else if(alpha1 == 'e') value = 0xe0;
1853  c924 a165          	cp	a,#101
1854  c926 2604          	jrne	L123
1857  c928 a6e0          	ld	a,#224
1859  c92a 2006          	jp	LC001
1860  c92c               L123:
1861                     ; 622   else if(alpha1 == 'f') value = 0xf0;
1863  c92c a166          	cp	a,#102
1864  c92e 2606          	jrne	L523
1867  c930 a6f0          	ld	a,#240
1868  c932               LC001:
1869  c932 6b01          	ld	(OFST+0,sp),a
1872  c934 2002          	jra	L772
1873  c936               L523:
1874                     ; 623   else value = 0; // If an invalid entry is made convert it to 0
1876  c936 0f01          	clr	(OFST+0,sp)
1878  c938               L772:
1879                     ; 625   if (alpha2 >= '0' && alpha2 <= '9') value = (uint8_t)(value + alpha2 - '0');
1881  c938 7b03          	ld	a,(OFST+2,sp)
1882  c93a a130          	cp	a,#48
1883  c93c 250c          	jrult	L133
1885  c93e a13a          	cp	a,#58
1886  c940 2408          	jruge	L133
1889  c942 7b01          	ld	a,(OFST+0,sp)
1890  c944 1b03          	add	a,(OFST+2,sp)
1891  c946 a030          	sub	a,#48
1893  c948 203d          	jp	L333
1894  c94a               L133:
1895                     ; 626   else if(alpha2 == 'a') value = (uint8_t)(value + 0x0a);
1897  c94a a161          	cp	a,#97
1898  c94c 2606          	jrne	L533
1901  c94e 7b01          	ld	a,(OFST+0,sp)
1902  c950 ab0a          	add	a,#10
1904  c952 2033          	jp	L333
1905  c954               L533:
1906                     ; 627   else if(alpha2 == 'b') value = (uint8_t)(value + 0x0b);
1908  c954 a162          	cp	a,#98
1909  c956 2606          	jrne	L143
1912  c958 7b01          	ld	a,(OFST+0,sp)
1913  c95a ab0b          	add	a,#11
1915  c95c 2029          	jp	L333
1916  c95e               L143:
1917                     ; 628   else if(alpha2 == 'c') value = (uint8_t)(value + 0x0c);
1919  c95e a163          	cp	a,#99
1920  c960 2606          	jrne	L543
1923  c962 7b01          	ld	a,(OFST+0,sp)
1924  c964 ab0c          	add	a,#12
1926  c966 201f          	jp	L333
1927  c968               L543:
1928                     ; 629   else if(alpha2 == 'd') value = (uint8_t)(value + 0x0d);
1930  c968 a164          	cp	a,#100
1931  c96a 2606          	jrne	L153
1934  c96c 7b01          	ld	a,(OFST+0,sp)
1935  c96e ab0d          	add	a,#13
1937  c970 2015          	jp	L333
1938  c972               L153:
1939                     ; 630   else if(alpha2 == 'e') value = (uint8_t)(value + 0x0e);
1941  c972 a165          	cp	a,#101
1942  c974 2606          	jrne	L553
1945  c976 7b01          	ld	a,(OFST+0,sp)
1946  c978 ab0e          	add	a,#14
1948  c97a 200b          	jp	L333
1949  c97c               L553:
1950                     ; 631   else if(alpha2 == 'f') value = (uint8_t)(value + 0x0f);
1952  c97c a166          	cp	a,#102
1953  c97e 2606          	jrne	L163
1956  c980 7b01          	ld	a,(OFST+0,sp)
1957  c982 ab0f          	add	a,#15
1960  c984 2001          	jra	L333
1961  c986               L163:
1962                     ; 632   else value = 0; // If an invalid entry is made convert it to 0
1964  c986 4f            	clr	a
1966  c987               L333:
1967                     ; 634   return value;
1971  c987 5b03          	addw	sp,#3
1972  c989 81            	ret	
2023                     ; 638 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint32_t nDataLen)
2023                     ; 639 {
2024                     	switch	.text
2025  c98a               L7_CopyHttpHeader:
2027  c98a 89            	pushw	x
2028  c98b 89            	pushw	x
2029       00000002      OFST:	set	2
2032                     ; 642   nBytes = 0;
2034  c98c 5f            	clrw	x
2035  c98d 1f01          	ldw	(OFST-1,sp),x
2037                     ; 644   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
2039  c98f aec2ef        	ldw	x,#L704
2040  c992 89            	pushw	x
2041  c993 96            	ldw	x,sp
2042  c994 1c0005        	addw	x,#OFST+3
2043  c997 cdc759        	call	L3_CopyStringP
2045  c99a 5b02          	addw	sp,#2
2046  c99c 72fb01        	addw	x,(OFST-1,sp)
2047  c99f 1f01          	ldw	(OFST-1,sp),x
2049                     ; 645   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2051  c9a1 aec2ec        	ldw	x,#L114
2052  c9a4 89            	pushw	x
2053  c9a5 96            	ldw	x,sp
2054  c9a6 1c0005        	addw	x,#OFST+3
2055  c9a9 cdc759        	call	L3_CopyStringP
2057  c9ac 5b02          	addw	sp,#2
2058  c9ae 72fb01        	addw	x,(OFST-1,sp)
2059  c9b1 1f01          	ldw	(OFST-1,sp),x
2061                     ; 647   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
2063  c9b3 aec2dc        	ldw	x,#L314
2064  c9b6 89            	pushw	x
2065  c9b7 96            	ldw	x,sp
2066  c9b8 1c0005        	addw	x,#OFST+3
2067  c9bb cdc759        	call	L3_CopyStringP
2069  c9be 5b02          	addw	sp,#2
2070  c9c0 72fb01        	addw	x,(OFST-1,sp)
2071  c9c3 1f01          	ldw	(OFST-1,sp),x
2073                     ; 648   nBytes += CopyValue(&pBuffer, nDataLen);
2075  c9c5 1e09          	ldw	x,(OFST+7,sp)
2076  c9c7 89            	pushw	x
2077  c9c8 1e09          	ldw	x,(OFST+7,sp)
2078  c9ca 89            	pushw	x
2079  c9cb 96            	ldw	x,sp
2080  c9cc 1c0007        	addw	x,#OFST+5
2081  c9cf cdc781        	call	L5_CopyValue
2083  c9d2 5b04          	addw	sp,#4
2084  c9d4 72fb01        	addw	x,(OFST-1,sp)
2085  c9d7 1f01          	ldw	(OFST-1,sp),x
2087                     ; 649   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2089  c9d9 aec2ec        	ldw	x,#L114
2090  c9dc 89            	pushw	x
2091  c9dd 96            	ldw	x,sp
2092  c9de 1c0005        	addw	x,#OFST+3
2093  c9e1 cdc759        	call	L3_CopyStringP
2095  c9e4 5b02          	addw	sp,#2
2096  c9e6 72fb01        	addw	x,(OFST-1,sp)
2097  c9e9 1f01          	ldw	(OFST-1,sp),x
2099                     ; 651   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type:text/html\r\n"));
2101  c9eb aec2c3        	ldw	x,#L514
2102  c9ee 89            	pushw	x
2103  c9ef 96            	ldw	x,sp
2104  c9f0 1c0005        	addw	x,#OFST+3
2105  c9f3 cdc759        	call	L3_CopyStringP
2107  c9f6 5b02          	addw	sp,#2
2108  c9f8 72fb01        	addw	x,(OFST-1,sp)
2109  c9fb 1f01          	ldw	(OFST-1,sp),x
2111                     ; 652   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
2113  c9fd aec2b0        	ldw	x,#L714
2114  ca00 89            	pushw	x
2115  ca01 96            	ldw	x,sp
2116  ca02 1c0005        	addw	x,#OFST+3
2117  ca05 cdc759        	call	L3_CopyStringP
2119  ca08 5b02          	addw	sp,#2
2120  ca0a 72fb01        	addw	x,(OFST-1,sp)
2121  ca0d 1f01          	ldw	(OFST-1,sp),x
2123                     ; 653   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2125  ca0f aec2ec        	ldw	x,#L114
2126  ca12 89            	pushw	x
2127  ca13 96            	ldw	x,sp
2128  ca14 1c0005        	addw	x,#OFST+3
2129  ca17 cdc759        	call	L3_CopyStringP
2131  ca1a 5b02          	addw	sp,#2
2132  ca1c 72fb01        	addw	x,(OFST-1,sp)
2134                     ; 655   return nBytes;
2138  ca1f 5b04          	addw	sp,#4
2139  ca21 81            	ret	
2278                     	switch	.const
2279  c1ae               L421:
2280  c1ae cbc6          	dc.w	L124
2281  c1b0 cbd4          	dc.w	L324
2282  c1b2 cbe2          	dc.w	L524
2283  c1b4 cbef          	dc.w	L724
2284  c1b6 cbfc          	dc.w	L134
2285  c1b8 cc09          	dc.w	L334
2286  c1ba cc16          	dc.w	L534
2287  c1bc cc23          	dc.w	L734
2288  c1be cc30          	dc.w	L144
2289  c1c0 cc3d          	dc.w	L344
2290  c1c2 cc4a          	dc.w	L544
2291  c1c4 cc57          	dc.w	L744
2292  c1c6               L422:
2293  c1c6 cd96          	dc.w	L354
2294  c1c8 cda8          	dc.w	L554
2295  c1ca cdba          	dc.w	L754
2296  c1cc cdcc          	dc.w	L164
2297  c1ce cdde          	dc.w	L364
2298  c1d0 cdf0          	dc.w	L564
2299  c1d2 ce02          	dc.w	L764
2300  c1d4 ce14          	dc.w	L174
2301  c1d6 ce26          	dc.w	L374
2302  c1d8 ce38          	dc.w	L574
2303  c1da ce4a          	dc.w	L774
2304  c1dc ce5c          	dc.w	L105
2305  c1de ce6e          	dc.w	L305
2306  c1e0 ce80          	dc.w	L505
2307  c1e2 ce92          	dc.w	L705
2308  c1e4 cea4          	dc.w	L115
2309  c1e6 ceb5          	dc.w	L315
2310  c1e8 cec6          	dc.w	L515
2311  c1ea ced7          	dc.w	L715
2312  c1ec cee8          	dc.w	L125
2313  c1ee cef9          	dc.w	L325
2314  c1f0 cf0a          	dc.w	L525
2315                     ; 659 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
2315                     ; 660 {
2316                     	switch	.text
2317  ca22               L11_CopyHttpData:
2319  ca22 89            	pushw	x
2320  ca23 5207          	subw	sp,#7
2321       00000007      OFST:	set	7
2324                     ; 676   nBytes = 0;
2326  ca25 5f            	clrw	x
2327  ca26 1f05          	ldw	(OFST-2,sp),x
2329                     ; 712   if(nMaxBytes > 400) nMaxBytes = 400; // limit just in case
2331  ca28 1e10          	ldw	x,(OFST+9,sp)
2332  ca2a a30191        	cpw	x,#401
2333  ca2d 2403ccd251    	jrult	L306
2336  ca32 ae0190        	ldw	x,#400
2337  ca35 1f10          	ldw	(OFST+9,sp),x
2338  ca37 ccd251        	jra	L306
2339  ca3a               L106:
2340                     ; 735     if (*pDataLeft > 0) {
2342  ca3a 1e0e          	ldw	x,(OFST+7,sp)
2343  ca3c e601          	ld	a,(1,x)
2344  ca3e fa            	or	a,(x)
2345  ca3f 2603ccd25a    	jreq	L506
2346                     ; 739       memcpy(&nByte, *ppData, 1);
2348  ca44 96            	ldw	x,sp
2349  ca45 5c            	incw	x
2350  ca46 bf04          	ldw	c_x,x
2351  ca48 160c          	ldw	y,(OFST+5,sp)
2352  ca4a 90fe          	ldw	y,(y)
2353  ca4c 90bf07        	ldw	c_y,y
2354  ca4f ae0001        	ldw	x,#1
2355  ca52               L25:
2356  ca52 5a            	decw	x
2357  ca53 92d607        	ld	a,([c_y.w],x)
2358  ca56 92d704        	ld	([c_x.w],x),a
2359  ca59 5d            	tnzw	x
2360  ca5a 26f6          	jrne	L25
2361                     ; 765       if (nByte == '%') {
2363  ca5c 7b01          	ld	a,(OFST-6,sp)
2364  ca5e a125          	cp	a,#37
2365  ca60 2703ccd234    	jrne	L116
2366                     ; 766         *ppData = *ppData + 1;
2368  ca65 1e0c          	ldw	x,(OFST+5,sp)
2369  ca67 9093          	ldw	y,x
2370  ca69 fe            	ldw	x,(x)
2371  ca6a 5c            	incw	x
2372  ca6b 90ff          	ldw	(y),x
2373                     ; 767         *pDataLeft = *pDataLeft - 1;
2375  ca6d 1e0e          	ldw	x,(OFST+7,sp)
2376  ca6f 9093          	ldw	y,x
2377  ca71 fe            	ldw	x,(x)
2378  ca72 5a            	decw	x
2379  ca73 90ff          	ldw	(y),x
2380                     ; 772         memcpy(&nParsedMode, *ppData, 1);
2382  ca75 96            	ldw	x,sp
2383  ca76 1c0003        	addw	x,#OFST-4
2384  ca79 bf04          	ldw	c_x,x
2385  ca7b 160c          	ldw	y,(OFST+5,sp)
2386  ca7d 90fe          	ldw	y,(y)
2387  ca7f 90bf07        	ldw	c_y,y
2388  ca82 ae0001        	ldw	x,#1
2389  ca85               L45:
2390  ca85 5a            	decw	x
2391  ca86 92d607        	ld	a,([c_y.w],x)
2392  ca89 92d704        	ld	([c_x.w],x),a
2393  ca8c 5d            	tnzw	x
2394  ca8d 26f6          	jrne	L45
2395                     ; 773         *ppData = *ppData + 1;
2397  ca8f 1e0c          	ldw	x,(OFST+5,sp)
2398  ca91 9093          	ldw	y,x
2399  ca93 fe            	ldw	x,(x)
2400  ca94 5c            	incw	x
2401  ca95 90ff          	ldw	(y),x
2402                     ; 774         *pDataLeft = *pDataLeft - 1;
2404  ca97 1e0e          	ldw	x,(OFST+7,sp)
2405  ca99 9093          	ldw	y,x
2406  ca9b fe            	ldw	x,(x)
2407  ca9c 5a            	decw	x
2408  ca9d 90ff          	ldw	(y),x
2409                     ; 778         memcpy(&temp, *ppData, 1);
2411  ca9f 96            	ldw	x,sp
2412  caa0 1c0002        	addw	x,#OFST-5
2413  caa3 bf04          	ldw	c_x,x
2414  caa5 160c          	ldw	y,(OFST+5,sp)
2415  caa7 90fe          	ldw	y,(y)
2416  caa9 90bf07        	ldw	c_y,y
2417  caac ae0001        	ldw	x,#1
2418  caaf               L65:
2419  caaf 5a            	decw	x
2420  cab0 92d607        	ld	a,([c_y.w],x)
2421  cab3 92d704        	ld	([c_x.w],x),a
2422  cab6 5d            	tnzw	x
2423  cab7 26f6          	jrne	L65
2424                     ; 779 	nParsedNum = (uint8_t)((temp - '0') * 10);
2426  cab9 7b02          	ld	a,(OFST-5,sp)
2427  cabb 97            	ld	xl,a
2428  cabc a60a          	ld	a,#10
2429  cabe 42            	mul	x,a
2430  cabf 9f            	ld	a,xl
2431  cac0 a0e0          	sub	a,#224
2432  cac2 6b04          	ld	(OFST-3,sp),a
2434                     ; 780         *ppData = *ppData + 1;
2436  cac4 1e0c          	ldw	x,(OFST+5,sp)
2437  cac6 9093          	ldw	y,x
2438  cac8 fe            	ldw	x,(x)
2439  cac9 5c            	incw	x
2440  caca 90ff          	ldw	(y),x
2441                     ; 781         *pDataLeft = *pDataLeft - 1;
2443  cacc 1e0e          	ldw	x,(OFST+7,sp)
2444  cace 9093          	ldw	y,x
2445  cad0 fe            	ldw	x,(x)
2446  cad1 5a            	decw	x
2447  cad2 90ff          	ldw	(y),x
2448                     ; 785         memcpy(&temp, *ppData, 1);
2450  cad4 96            	ldw	x,sp
2451  cad5 1c0002        	addw	x,#OFST-5
2452  cad8 bf04          	ldw	c_x,x
2453  cada 160c          	ldw	y,(OFST+5,sp)
2454  cadc 90fe          	ldw	y,(y)
2455  cade 90bf07        	ldw	c_y,y
2456  cae1 ae0001        	ldw	x,#1
2457  cae4               L06:
2458  cae4 5a            	decw	x
2459  cae5 92d607        	ld	a,([c_y.w],x)
2460  cae8 92d704        	ld	([c_x.w],x),a
2461  caeb 5d            	tnzw	x
2462  caec 26f6          	jrne	L06
2463                     ; 786 	nParsedNum = (uint8_t)(nParsedNum + temp - '0');
2465  caee 7b04          	ld	a,(OFST-3,sp)
2466  caf0 1b02          	add	a,(OFST-5,sp)
2467  caf2 a030          	sub	a,#48
2468  caf4 6b04          	ld	(OFST-3,sp),a
2470                     ; 787         *ppData = *ppData + 1;
2472  caf6 1e0c          	ldw	x,(OFST+5,sp)
2473  caf8 9093          	ldw	y,x
2474  cafa fe            	ldw	x,(x)
2475  cafb 5c            	incw	x
2476  cafc 90ff          	ldw	(y),x
2477                     ; 788         *pDataLeft = *pDataLeft - 1;
2479  cafe 1e0e          	ldw	x,(OFST+7,sp)
2480  cb00 9093          	ldw	y,x
2481  cb02 fe            	ldw	x,(x)
2482  cb03 5a            	decw	x
2483  cb04 90ff          	ldw	(y),x
2484                     ; 798         if (nParsedMode == 'i') {
2486  cb06 7b03          	ld	a,(OFST-4,sp)
2487  cb08 a169          	cp	a,#105
2488  cb0a 2614          	jrne	L316
2489                     ; 800 	  *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
2491  cb0c 7b04          	ld	a,(OFST-3,sp)
2492  cb0e cdda8e        	call	_GpioGetPin
2494  cb11 1e08          	ldw	x,(OFST+1,sp)
2495  cb13 ab30          	add	a,#48
2496  cb15 f7            	ld	(x),a
2497                     ; 801           pBuffer++;
2499  cb16 5c            	incw	x
2500  cb17 1f08          	ldw	(OFST+1,sp),x
2501                     ; 802           nBytes++;
2503  cb19 1e05          	ldw	x,(OFST-2,sp)
2504  cb1b 5c            	incw	x
2505  cb1c 1f05          	ldw	(OFST-2,sp),x
2508  cb1e 204e          	jra	L516
2509  cb20               L316:
2510                     ; 805         else if (nParsedMode == 'o') {
2512  cb20 a16f          	cp	a,#111
2513  cb22 2624          	jrne	L716
2514                     ; 808           if((uint8_t)(GpioGetPin(nParsedNum) == 1)) { // Insert 'checked'
2516  cb24 7b04          	ld	a,(OFST-3,sp)
2517  cb26 cdda8e        	call	_GpioGetPin
2519  cb29 4a            	dec	a
2520  cb2a 2642          	jrne	L516
2521                     ; 809             for(i=0; i<7; i++) {
2523  cb2c 6b07          	ld	(OFST+0,sp),a
2525  cb2e               L326:
2526                     ; 810               *pBuffer = checked[i];
2528  cb2e 5f            	clrw	x
2529  cb2f 97            	ld	xl,a
2530  cb30 d68080        	ld	a,(L31_checked,x)
2531  cb33 1e08          	ldw	x,(OFST+1,sp)
2532  cb35 f7            	ld	(x),a
2533                     ; 811               pBuffer++;
2535  cb36 5c            	incw	x
2536  cb37 1f08          	ldw	(OFST+1,sp),x
2537                     ; 812               nBytes++;
2539  cb39 1e05          	ldw	x,(OFST-2,sp)
2540  cb3b 5c            	incw	x
2541  cb3c 1f05          	ldw	(OFST-2,sp),x
2543                     ; 809             for(i=0; i<7; i++) {
2545  cb3e 0c07          	inc	(OFST+0,sp)
2549  cb40 7b07          	ld	a,(OFST+0,sp)
2550  cb42 a107          	cp	a,#7
2551  cb44 25e8          	jrult	L326
2553  cb46 2026          	jra	L516
2554  cb48               L716:
2555                     ; 819         else if (nParsedMode == 'p') {
2557  cb48 a170          	cp	a,#112
2558  cb4a 2622          	jrne	L516
2559                     ; 822           if((uint8_t)(GpioGetPin(nParsedNum) == 0)) { // Insert 'checked'
2561  cb4c 7b04          	ld	a,(OFST-3,sp)
2562  cb4e cdda8e        	call	_GpioGetPin
2564  cb51 4d            	tnz	a
2565  cb52 261a          	jrne	L516
2566                     ; 823             for(i=0; i<7; i++) {
2568  cb54 6b07          	ld	(OFST+0,sp),a
2570  cb56               L146:
2571                     ; 824               *pBuffer = checked[i];
2573  cb56 5f            	clrw	x
2574  cb57 97            	ld	xl,a
2575  cb58 d68080        	ld	a,(L31_checked,x)
2576  cb5b 1e08          	ldw	x,(OFST+1,sp)
2577  cb5d f7            	ld	(x),a
2578                     ; 825               pBuffer++;
2580  cb5e 5c            	incw	x
2581  cb5f 1f08          	ldw	(OFST+1,sp),x
2582                     ; 826               nBytes++;
2584  cb61 1e05          	ldw	x,(OFST-2,sp)
2585  cb63 5c            	incw	x
2586  cb64 1f05          	ldw	(OFST-2,sp),x
2588                     ; 823             for(i=0; i<7; i++) {
2590  cb66 0c07          	inc	(OFST+0,sp)
2594  cb68 7b07          	ld	a,(OFST+0,sp)
2595  cb6a a107          	cp	a,#7
2596  cb6c 25e8          	jrult	L146
2598  cb6e               L516:
2599                     ; 833         if (nParsedMode == 'a') {
2601  cb6e 7b03          	ld	a,(OFST-4,sp)
2602  cb70 a161          	cp	a,#97
2603  cb72 263b          	jrne	L156
2604                     ; 835 	  for(i=0; i<20; i++) {
2606  cb74 4f            	clr	a
2607  cb75 6b07          	ld	(OFST+0,sp),a
2609  cb77               L356:
2610                     ; 836 	    if(ex_stored_devicename[i] != ' ') { // Don't write spaces out - confuses the
2612  cb77 5f            	clrw	x
2613  cb78 97            	ld	xl,a
2614  cb79 d60038        	ld	a,(_ex_stored_devicename,x)
2615  cb7c a120          	cp	a,#32
2616  cb7e 2712          	jreq	L166
2617                     ; 838               *pBuffer = (uint8_t)(ex_stored_devicename[i]);
2619  cb80 7b07          	ld	a,(OFST+0,sp)
2620  cb82 5f            	clrw	x
2621  cb83 97            	ld	xl,a
2622  cb84 d60038        	ld	a,(_ex_stored_devicename,x)
2623  cb87 1e08          	ldw	x,(OFST+1,sp)
2624  cb89 f7            	ld	(x),a
2625                     ; 839               pBuffer++;
2627  cb8a 5c            	incw	x
2628  cb8b 1f08          	ldw	(OFST+1,sp),x
2629                     ; 840               nBytes++;
2631  cb8d 1e05          	ldw	x,(OFST-2,sp)
2632  cb8f 5c            	incw	x
2633  cb90 1f05          	ldw	(OFST-2,sp),x
2635  cb92               L166:
2636                     ; 835 	  for(i=0; i<20; i++) {
2638  cb92 0c07          	inc	(OFST+0,sp)
2642  cb94 7b07          	ld	a,(OFST+0,sp)
2643  cb96 a114          	cp	a,#20
2644  cb98 25dd          	jrult	L356
2645                     ; 855           *ppData = *ppData + 20;
2647  cb9a 1e0c          	ldw	x,(OFST+5,sp)
2648  cb9c 9093          	ldw	y,x
2649  cb9e fe            	ldw	x,(x)
2650  cb9f 1c0014        	addw	x,#20
2651  cba2 90ff          	ldw	(y),x
2652                     ; 856           *pDataLeft = *pDataLeft - 20;
2654  cba4 1e0e          	ldw	x,(OFST+7,sp)
2655  cba6 9093          	ldw	y,x
2656  cba8 fe            	ldw	x,(x)
2657  cba9 1d0014        	subw	x,#20
2659  cbac cccf8b        	jp	LC011
2660  cbaf               L156:
2661                     ; 859         else if (nParsedMode == 'b') {
2663  cbaf a162          	cp	a,#98
2664  cbb1 2703ccccaf    	jrne	L566
2665                     ; 864 	  advanceptrs = 0;
2667                     ; 866           switch (nParsedNum)
2669  cbb6 7b04          	ld	a,(OFST-3,sp)
2671                     ; 881 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2672  cbb8 a10c          	cp	a,#12
2673  cbba 2503cccc71    	jruge	L154
2674  cbbf 5f            	clrw	x
2675  cbc0 97            	ld	xl,a
2676  cbc1 58            	sllw	x
2677  cbc2 dec1ae        	ldw	x,(L421,x)
2678  cbc5 fc            	jp	(x)
2679  cbc6               L124:
2680                     ; 869 	    case 0:  emb_itoa(ex_stored_hostaddr4, OctetArray, 10, 3); advanceptrs = 1; break;
2682  cbc6 4b03          	push	#3
2683  cbc8 4b0a          	push	#10
2684  cbca ae0010        	ldw	x,#_OctetArray
2685  cbcd 89            	pushw	x
2686  cbce c60059        	ld	a,_ex_stored_hostaddr4
2691  cbd1 cccc62        	jp	LC003
2692  cbd4               L324:
2693                     ; 870 	    case 1:  emb_itoa(ex_stored_hostaddr3, OctetArray, 10, 3); advanceptrs = 1; break;
2695  cbd4 4b03          	push	#3
2696  cbd6 4b0a          	push	#10
2697  cbd8 ae0010        	ldw	x,#_OctetArray
2698  cbdb 89            	pushw	x
2699  cbdc c60058        	ld	a,_ex_stored_hostaddr3
2704  cbdf cccc62        	jp	LC003
2705  cbe2               L524:
2706                     ; 871 	    case 2:  emb_itoa(ex_stored_hostaddr2, OctetArray, 10, 3); advanceptrs = 1; break;
2708  cbe2 4b03          	push	#3
2709  cbe4 4b0a          	push	#10
2710  cbe6 ae0010        	ldw	x,#_OctetArray
2711  cbe9 89            	pushw	x
2712  cbea c60057        	ld	a,_ex_stored_hostaddr2
2717  cbed 2073          	jp	LC003
2718  cbef               L724:
2719                     ; 872 	    case 3:  emb_itoa(ex_stored_hostaddr1, OctetArray, 10, 3); advanceptrs = 1; break;
2721  cbef 4b03          	push	#3
2722  cbf1 4b0a          	push	#10
2723  cbf3 ae0010        	ldw	x,#_OctetArray
2724  cbf6 89            	pushw	x
2725  cbf7 c60056        	ld	a,_ex_stored_hostaddr1
2730  cbfa 2066          	jp	LC003
2731  cbfc               L134:
2732                     ; 873 	    case 4:  emb_itoa(ex_stored_draddr4,   OctetArray, 10, 3); advanceptrs = 1; break;
2734  cbfc 4b03          	push	#3
2735  cbfe 4b0a          	push	#10
2736  cc00 ae0010        	ldw	x,#_OctetArray
2737  cc03 89            	pushw	x
2738  cc04 c60055        	ld	a,_ex_stored_draddr4
2743  cc07 2059          	jp	LC003
2744  cc09               L334:
2745                     ; 874 	    case 5:  emb_itoa(ex_stored_draddr3,   OctetArray, 10, 3); advanceptrs = 1; break;
2747  cc09 4b03          	push	#3
2748  cc0b 4b0a          	push	#10
2749  cc0d ae0010        	ldw	x,#_OctetArray
2750  cc10 89            	pushw	x
2751  cc11 c60054        	ld	a,_ex_stored_draddr3
2756  cc14 204c          	jp	LC003
2757  cc16               L534:
2758                     ; 875 	    case 6:  emb_itoa(ex_stored_draddr2,   OctetArray, 10, 3); advanceptrs = 1; break;
2760  cc16 4b03          	push	#3
2761  cc18 4b0a          	push	#10
2762  cc1a ae0010        	ldw	x,#_OctetArray
2763  cc1d 89            	pushw	x
2764  cc1e c60053        	ld	a,_ex_stored_draddr2
2769  cc21 203f          	jp	LC003
2770  cc23               L734:
2771                     ; 876 	    case 7:  emb_itoa(ex_stored_draddr1,   OctetArray, 10, 3); advanceptrs = 1; break;
2773  cc23 4b03          	push	#3
2774  cc25 4b0a          	push	#10
2775  cc27 ae0010        	ldw	x,#_OctetArray
2776  cc2a 89            	pushw	x
2777  cc2b c60052        	ld	a,_ex_stored_draddr1
2782  cc2e 2032          	jp	LC003
2783  cc30               L144:
2784                     ; 877 	    case 8:  emb_itoa(ex_stored_netmask4,  OctetArray, 10, 3); advanceptrs = 1; break;
2786  cc30 4b03          	push	#3
2787  cc32 4b0a          	push	#10
2788  cc34 ae0010        	ldw	x,#_OctetArray
2789  cc37 89            	pushw	x
2790  cc38 c60051        	ld	a,_ex_stored_netmask4
2795  cc3b 2025          	jp	LC003
2796  cc3d               L344:
2797                     ; 878 	    case 9:  emb_itoa(ex_stored_netmask3,  OctetArray, 10, 3); advanceptrs = 1; break;
2799  cc3d 4b03          	push	#3
2800  cc3f 4b0a          	push	#10
2801  cc41 ae0010        	ldw	x,#_OctetArray
2802  cc44 89            	pushw	x
2803  cc45 c60050        	ld	a,_ex_stored_netmask3
2808  cc48 2018          	jp	LC003
2809  cc4a               L544:
2810                     ; 879 	    case 10: emb_itoa(ex_stored_netmask2,  OctetArray, 10, 3); advanceptrs = 1; break;
2812  cc4a 4b03          	push	#3
2813  cc4c 4b0a          	push	#10
2814  cc4e ae0010        	ldw	x,#_OctetArray
2815  cc51 89            	pushw	x
2816  cc52 c6004f        	ld	a,_ex_stored_netmask2
2821  cc55 200b          	jp	LC003
2822  cc57               L744:
2823                     ; 880 	    case 11: emb_itoa(ex_stored_netmask1,  OctetArray, 10, 3); advanceptrs = 1; break;
2825  cc57 4b03          	push	#3
2826  cc59 4b0a          	push	#10
2827  cc5b ae0010        	ldw	x,#_OctetArray
2828  cc5e 89            	pushw	x
2829  cc5f c6004e        	ld	a,_ex_stored_netmask1
2830  cc62               LC003:
2831  cc62 b703          	ld	c_lreg+3,a
2832  cc64 3f02          	clr	c_lreg+2
2833  cc66 3f01          	clr	c_lreg+1
2834  cc68 3f00          	clr	c_lreg
2835  cc6a be02          	ldw	x,c_lreg+2
2836  cc6c 89            	pushw	x
2837  cc6d be00          	ldw	x,c_lreg
2842  cc6f 200a          	jra	L176
2843  cc71               L154:
2844                     ; 881 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2846  cc71 4b03          	push	#3
2847  cc73 4b0a          	push	#10
2848  cc75 ae0010        	ldw	x,#_OctetArray
2849  cc78 89            	pushw	x
2850  cc79 5f            	clrw	x
2851  cc7a 89            	pushw	x
2857  cc7b               L176:
2858  cc7b 89            	pushw	x
2859  cc7c cdc7e5        	call	_emb_itoa
2860  cc7f 5b08          	addw	sp,#8
2873  cc81 a601          	ld	a,#1
2874  cc83 6b07          	ld	(OFST+0,sp),a
2876                     ; 884 	  if(advanceptrs == 1) { // Copy OctetArray and advance pointers if one of the above
2878  cc85 4a            	dec	a
2879  cc86 2703ccd251    	jrne	L306
2880                     ; 886             *pBuffer = (uint8_t)OctetArray[0];
2882  cc8b 1e08          	ldw	x,(OFST+1,sp)
2883  cc8d c60010        	ld	a,_OctetArray
2884  cc90 f7            	ld	(x),a
2885                     ; 887             pBuffer++;
2887  cc91 5c            	incw	x
2888  cc92 1f08          	ldw	(OFST+1,sp),x
2889                     ; 888             nBytes++;
2891  cc94 1e05          	ldw	x,(OFST-2,sp)
2892  cc96 5c            	incw	x
2893  cc97 1f05          	ldw	(OFST-2,sp),x
2895                     ; 890             *pBuffer = (uint8_t)OctetArray[1];
2897  cc99 1e08          	ldw	x,(OFST+1,sp)
2898  cc9b c60011        	ld	a,_OctetArray+1
2899  cc9e f7            	ld	(x),a
2900                     ; 891             pBuffer++;
2902  cc9f 5c            	incw	x
2903  cca0 1f08          	ldw	(OFST+1,sp),x
2904                     ; 892             nBytes++;
2906  cca2 1e05          	ldw	x,(OFST-2,sp)
2907  cca4 5c            	incw	x
2908  cca5 1f05          	ldw	(OFST-2,sp),x
2910                     ; 894             *pBuffer = (uint8_t)OctetArray[2];
2912  cca7 c60012        	ld	a,_OctetArray+2
2913  ccaa 1e08          	ldw	x,(OFST+1,sp)
2914                     ; 895             pBuffer++;
2915                     ; 896             nBytes++;
2916  ccac cccd7b        	jp	LC010
2917  ccaf               L566:
2918                     ; 900         else if (nParsedMode == 'c') {
2920  ccaf a163          	cp	a,#99
2921  ccb1 2637          	jrne	L776
2922                     ; 906           emb_itoa(ex_stored_port, OctetArray, 10, 5);
2924  ccb3 4b05          	push	#5
2925  ccb5 4b0a          	push	#10
2926  ccb7 ae0010        	ldw	x,#_OctetArray
2927  ccba 89            	pushw	x
2928  ccbb ce004c        	ldw	x,_ex_stored_port
2929  ccbe cdfb22        	call	c_uitolx
2931  ccc1 be02          	ldw	x,c_lreg+2
2932  ccc3 89            	pushw	x
2933  ccc4 be00          	ldw	x,c_lreg
2934  ccc6 89            	pushw	x
2935  ccc7 cdc7e5        	call	_emb_itoa
2937  ccca 5b08          	addw	sp,#8
2938                     ; 908 	  for(i=0; i<5; i++) {
2940  cccc 4f            	clr	a
2941  cccd 6b07          	ld	(OFST+0,sp),a
2943  cccf               L107:
2944                     ; 909             *pBuffer = (uint8_t)OctetArray[i];
2946  cccf 5f            	clrw	x
2947  ccd0 97            	ld	xl,a
2948  ccd1 d60010        	ld	a,(_OctetArray,x)
2949  ccd4 1e08          	ldw	x,(OFST+1,sp)
2950  ccd6 f7            	ld	(x),a
2951                     ; 910             pBuffer++;
2953  ccd7 5c            	incw	x
2954  ccd8 1f08          	ldw	(OFST+1,sp),x
2955                     ; 911             nBytes++;
2957  ccda 1e05          	ldw	x,(OFST-2,sp)
2958  ccdc 5c            	incw	x
2959  ccdd 1f05          	ldw	(OFST-2,sp),x
2961                     ; 908 	  for(i=0; i<5; i++) {
2963  ccdf 0c07          	inc	(OFST+0,sp)
2967  cce1 7b07          	ld	a,(OFST+0,sp)
2968  cce3 a105          	cp	a,#5
2969  cce5 25e8          	jrult	L107
2971  cce7 ccd251        	jra	L306
2972  ccea               L776:
2973                     ; 915         else if (nParsedMode == 'd') {
2975  ccea a164          	cp	a,#100
2976  ccec 2703cccd7f    	jrne	L117
2977                     ; 920 	  if(nParsedNum == 0)      emb_itoa(uip_ethaddr1, OctetArray, 16, 2);
2979  ccf1 7b04          	ld	a,(OFST-3,sp)
2980  ccf3 260d          	jrne	L317
2983  ccf5 4b02          	push	#2
2984  ccf7 4b10          	push	#16
2985  ccf9 ae0010        	ldw	x,#_OctetArray
2986  ccfc 89            	pushw	x
2987  ccfd c6001e        	ld	a,_uip_ethaddr1
2990  cd00 2053          	jp	LC004
2991  cd02               L317:
2992                     ; 921 	  else if(nParsedNum == 1) emb_itoa(uip_ethaddr2, OctetArray, 16, 2);
2994  cd02 a101          	cp	a,#1
2995  cd04 260d          	jrne	L717
2998  cd06 4b02          	push	#2
2999  cd08 4b10          	push	#16
3000  cd0a ae0010        	ldw	x,#_OctetArray
3001  cd0d 89            	pushw	x
3002  cd0e c6001f        	ld	a,_uip_ethaddr2
3005  cd11 2042          	jp	LC004
3006  cd13               L717:
3007                     ; 922 	  else if(nParsedNum == 2) emb_itoa(uip_ethaddr3, OctetArray, 16, 2);
3009  cd13 a102          	cp	a,#2
3010  cd15 260d          	jrne	L327
3013  cd17 4b02          	push	#2
3014  cd19 4b10          	push	#16
3015  cd1b ae0010        	ldw	x,#_OctetArray
3016  cd1e 89            	pushw	x
3017  cd1f c60020        	ld	a,_uip_ethaddr3
3020  cd22 2031          	jp	LC004
3021  cd24               L327:
3022                     ; 923 	  else if(nParsedNum == 3) emb_itoa(uip_ethaddr4, OctetArray, 16, 2);
3024  cd24 a103          	cp	a,#3
3025  cd26 260d          	jrne	L727
3028  cd28 4b02          	push	#2
3029  cd2a 4b10          	push	#16
3030  cd2c ae0010        	ldw	x,#_OctetArray
3031  cd2f 89            	pushw	x
3032  cd30 c60021        	ld	a,_uip_ethaddr4
3035  cd33 2020          	jp	LC004
3036  cd35               L727:
3037                     ; 924 	  else if(nParsedNum == 4) emb_itoa(uip_ethaddr5, OctetArray, 16, 2);
3039  cd35 a104          	cp	a,#4
3040  cd37 260d          	jrne	L337
3043  cd39 4b02          	push	#2
3044  cd3b 4b10          	push	#16
3045  cd3d ae0010        	ldw	x,#_OctetArray
3046  cd40 89            	pushw	x
3047  cd41 c60022        	ld	a,_uip_ethaddr5
3050  cd44 200f          	jp	LC004
3051  cd46               L337:
3052                     ; 925 	  else if(nParsedNum == 5) emb_itoa(uip_ethaddr6, OctetArray, 16, 2);
3054  cd46 a105          	cp	a,#5
3055  cd48 261e          	jrne	L517
3058  cd4a 4b02          	push	#2
3059  cd4c 4b10          	push	#16
3060  cd4e ae0010        	ldw	x,#_OctetArray
3061  cd51 89            	pushw	x
3062  cd52 c60023        	ld	a,_uip_ethaddr6
3064  cd55               LC004:
3065  cd55 b703          	ld	c_lreg+3,a
3066  cd57 3f02          	clr	c_lreg+2
3067  cd59 3f01          	clr	c_lreg+1
3068  cd5b 3f00          	clr	c_lreg
3069  cd5d be02          	ldw	x,c_lreg+2
3070  cd5f 89            	pushw	x
3071  cd60 be00          	ldw	x,c_lreg
3072  cd62 89            	pushw	x
3073  cd63 cdc7e5        	call	_emb_itoa
3074  cd66 5b08          	addw	sp,#8
3075  cd68               L517:
3076                     ; 927           *pBuffer = OctetArray[0];
3078  cd68 1e08          	ldw	x,(OFST+1,sp)
3079  cd6a c60010        	ld	a,_OctetArray
3080  cd6d f7            	ld	(x),a
3081                     ; 928           pBuffer++;
3083  cd6e 5c            	incw	x
3084  cd6f 1f08          	ldw	(OFST+1,sp),x
3085                     ; 929           nBytes++;
3087  cd71 1e05          	ldw	x,(OFST-2,sp)
3088  cd73 5c            	incw	x
3089  cd74 1f05          	ldw	(OFST-2,sp),x
3091                     ; 931           *pBuffer = OctetArray[1];
3093  cd76 c60011        	ld	a,_OctetArray+1
3094  cd79 1e08          	ldw	x,(OFST+1,sp)
3095  cd7b               LC010:
3096  cd7b f7            	ld	(x),a
3097                     ; 932           pBuffer++;
3098                     ; 933           nBytes++;
3100  cd7c ccd249        	jp	LC009
3101  cd7f               L117:
3102                     ; 938         else if (nParsedMode == 'e') {
3104  cd7f a165          	cp	a,#101
3105  cd81 2703cccf5a    	jrne	L347
3106                     ; 965           switch (nParsedNum)
3108  cd86 7b04          	ld	a,(OFST-3,sp)
3110                     ; 990 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3111  cd88 a116          	cp	a,#22
3112  cd8a 2503cccf1b    	jruge	L725
3113  cd8f 5f            	clrw	x
3114  cd90 97            	ld	xl,a
3115  cd91 58            	sllw	x
3116  cd92 dec1c6        	ldw	x,(L422,x)
3117  cd95 fc            	jp	(x)
3118  cd96               L354:
3119                     ; 968 	    case 0:  emb_itoa(uip_stat.ip.drop,      OctetArray, 10, 10); break;
3121  cd96 4b0a          	push	#10
3122  cd98 4b0a          	push	#10
3123  cd9a ae0010        	ldw	x,#_OctetArray
3124  cd9d 89            	pushw	x
3125  cd9e ce008b        	ldw	x,_uip_stat+2
3126  cda1 89            	pushw	x
3127  cda2 ce0089        	ldw	x,_uip_stat
3131  cda5 cccf25        	jra	L747
3132  cda8               L554:
3133                     ; 969 	    case 1:  emb_itoa(uip_stat.ip.recv,      OctetArray, 10, 10); break;
3135  cda8 4b0a          	push	#10
3136  cdaa 4b0a          	push	#10
3137  cdac ae0010        	ldw	x,#_OctetArray
3138  cdaf 89            	pushw	x
3139  cdb0 ce008f        	ldw	x,_uip_stat+6
3140  cdb3 89            	pushw	x
3141  cdb4 ce008d        	ldw	x,_uip_stat+4
3145  cdb7 cccf25        	jra	L747
3146  cdba               L754:
3147                     ; 970 	    case 2:  emb_itoa(uip_stat.ip.sent,      OctetArray, 10, 10); break;
3149  cdba 4b0a          	push	#10
3150  cdbc 4b0a          	push	#10
3151  cdbe ae0010        	ldw	x,#_OctetArray
3152  cdc1 89            	pushw	x
3153  cdc2 ce0093        	ldw	x,_uip_stat+10
3154  cdc5 89            	pushw	x
3155  cdc6 ce0091        	ldw	x,_uip_stat+8
3159  cdc9 cccf25        	jra	L747
3160  cdcc               L164:
3161                     ; 971 	    case 3:  emb_itoa(uip_stat.ip.vhlerr,    OctetArray, 10, 10); break;
3163  cdcc 4b0a          	push	#10
3164  cdce 4b0a          	push	#10
3165  cdd0 ae0010        	ldw	x,#_OctetArray
3166  cdd3 89            	pushw	x
3167  cdd4 ce0097        	ldw	x,_uip_stat+14
3168  cdd7 89            	pushw	x
3169  cdd8 ce0095        	ldw	x,_uip_stat+12
3173  cddb cccf25        	jra	L747
3174  cdde               L364:
3175                     ; 972 	    case 4:  emb_itoa(uip_stat.ip.hblenerr,  OctetArray, 10, 10); break;
3177  cdde 4b0a          	push	#10
3178  cde0 4b0a          	push	#10
3179  cde2 ae0010        	ldw	x,#_OctetArray
3180  cde5 89            	pushw	x
3181  cde6 ce009b        	ldw	x,_uip_stat+18
3182  cde9 89            	pushw	x
3183  cdea ce0099        	ldw	x,_uip_stat+16
3187  cded cccf25        	jra	L747
3188  cdf0               L564:
3189                     ; 973 	    case 5:  emb_itoa(uip_stat.ip.lblenerr,  OctetArray, 10, 10); break;
3191  cdf0 4b0a          	push	#10
3192  cdf2 4b0a          	push	#10
3193  cdf4 ae0010        	ldw	x,#_OctetArray
3194  cdf7 89            	pushw	x
3195  cdf8 ce009f        	ldw	x,_uip_stat+22
3196  cdfb 89            	pushw	x
3197  cdfc ce009d        	ldw	x,_uip_stat+20
3201  cdff cccf25        	jra	L747
3202  ce02               L764:
3203                     ; 974 	    case 6:  emb_itoa(uip_stat.ip.fragerr,   OctetArray, 10, 10); break;
3205  ce02 4b0a          	push	#10
3206  ce04 4b0a          	push	#10
3207  ce06 ae0010        	ldw	x,#_OctetArray
3208  ce09 89            	pushw	x
3209  ce0a ce00a3        	ldw	x,_uip_stat+26
3210  ce0d 89            	pushw	x
3211  ce0e ce00a1        	ldw	x,_uip_stat+24
3215  ce11 cccf25        	jra	L747
3216  ce14               L174:
3217                     ; 975 	    case 7:  emb_itoa(uip_stat.ip.chkerr,    OctetArray, 10, 10); break;
3219  ce14 4b0a          	push	#10
3220  ce16 4b0a          	push	#10
3221  ce18 ae0010        	ldw	x,#_OctetArray
3222  ce1b 89            	pushw	x
3223  ce1c ce00a7        	ldw	x,_uip_stat+30
3224  ce1f 89            	pushw	x
3225  ce20 ce00a5        	ldw	x,_uip_stat+28
3229  ce23 cccf25        	jra	L747
3230  ce26               L374:
3231                     ; 976 	    case 8:  emb_itoa(uip_stat.ip.protoerr,  OctetArray, 10, 10); break;
3233  ce26 4b0a          	push	#10
3234  ce28 4b0a          	push	#10
3235  ce2a ae0010        	ldw	x,#_OctetArray
3236  ce2d 89            	pushw	x
3237  ce2e ce00ab        	ldw	x,_uip_stat+34
3238  ce31 89            	pushw	x
3239  ce32 ce00a9        	ldw	x,_uip_stat+32
3243  ce35 cccf25        	jra	L747
3244  ce38               L574:
3245                     ; 977 	    case 9:  emb_itoa(uip_stat.icmp.drop,    OctetArray, 10, 10); break;
3247  ce38 4b0a          	push	#10
3248  ce3a 4b0a          	push	#10
3249  ce3c ae0010        	ldw	x,#_OctetArray
3250  ce3f 89            	pushw	x
3251  ce40 ce00af        	ldw	x,_uip_stat+38
3252  ce43 89            	pushw	x
3253  ce44 ce00ad        	ldw	x,_uip_stat+36
3257  ce47 cccf25        	jra	L747
3258  ce4a               L774:
3259                     ; 978 	    case 10: emb_itoa(uip_stat.icmp.recv,    OctetArray, 10, 10); break;
3261  ce4a 4b0a          	push	#10
3262  ce4c 4b0a          	push	#10
3263  ce4e ae0010        	ldw	x,#_OctetArray
3264  ce51 89            	pushw	x
3265  ce52 ce00b3        	ldw	x,_uip_stat+42
3266  ce55 89            	pushw	x
3267  ce56 ce00b1        	ldw	x,_uip_stat+40
3271  ce59 cccf25        	jra	L747
3272  ce5c               L105:
3273                     ; 979 	    case 11: emb_itoa(uip_stat.icmp.sent,    OctetArray, 10, 10); break;
3275  ce5c 4b0a          	push	#10
3276  ce5e 4b0a          	push	#10
3277  ce60 ae0010        	ldw	x,#_OctetArray
3278  ce63 89            	pushw	x
3279  ce64 ce00b7        	ldw	x,_uip_stat+46
3280  ce67 89            	pushw	x
3281  ce68 ce00b5        	ldw	x,_uip_stat+44
3285  ce6b cccf25        	jra	L747
3286  ce6e               L305:
3287                     ; 980 	    case 12: emb_itoa(uip_stat.icmp.typeerr, OctetArray, 10, 10); break;
3289  ce6e 4b0a          	push	#10
3290  ce70 4b0a          	push	#10
3291  ce72 ae0010        	ldw	x,#_OctetArray
3292  ce75 89            	pushw	x
3293  ce76 ce00bb        	ldw	x,_uip_stat+50
3294  ce79 89            	pushw	x
3295  ce7a ce00b9        	ldw	x,_uip_stat+48
3299  ce7d cccf25        	jra	L747
3300  ce80               L505:
3301                     ; 981 	    case 13: emb_itoa(uip_stat.tcp.drop,     OctetArray, 10, 10); break;
3303  ce80 4b0a          	push	#10
3304  ce82 4b0a          	push	#10
3305  ce84 ae0010        	ldw	x,#_OctetArray
3306  ce87 89            	pushw	x
3307  ce88 ce00bf        	ldw	x,_uip_stat+54
3308  ce8b 89            	pushw	x
3309  ce8c ce00bd        	ldw	x,_uip_stat+52
3313  ce8f cccf25        	jra	L747
3314  ce92               L705:
3315                     ; 982 	    case 14: emb_itoa(uip_stat.tcp.recv,     OctetArray, 10, 10); break;
3317  ce92 4b0a          	push	#10
3318  ce94 4b0a          	push	#10
3319  ce96 ae0010        	ldw	x,#_OctetArray
3320  ce99 89            	pushw	x
3321  ce9a ce00c3        	ldw	x,_uip_stat+58
3322  ce9d 89            	pushw	x
3323  ce9e ce00c1        	ldw	x,_uip_stat+56
3327  cea1 cccf25        	jra	L747
3328  cea4               L115:
3329                     ; 983 	    case 15: emb_itoa(uip_stat.tcp.sent,     OctetArray, 10, 10); break;
3331  cea4 4b0a          	push	#10
3332  cea6 4b0a          	push	#10
3333  cea8 ae0010        	ldw	x,#_OctetArray
3334  ceab 89            	pushw	x
3335  ceac ce00c7        	ldw	x,_uip_stat+62
3336  ceaf 89            	pushw	x
3337  ceb0 ce00c5        	ldw	x,_uip_stat+60
3341  ceb3 2070          	jra	L747
3342  ceb5               L315:
3343                     ; 984 	    case 16: emb_itoa(uip_stat.tcp.chkerr,   OctetArray, 10, 10); break;
3345  ceb5 4b0a          	push	#10
3346  ceb7 4b0a          	push	#10
3347  ceb9 ae0010        	ldw	x,#_OctetArray
3348  cebc 89            	pushw	x
3349  cebd ce00cb        	ldw	x,_uip_stat+66
3350  cec0 89            	pushw	x
3351  cec1 ce00c9        	ldw	x,_uip_stat+64
3355  cec4 205f          	jra	L747
3356  cec6               L515:
3357                     ; 985 	    case 17: emb_itoa(uip_stat.tcp.ackerr,   OctetArray, 10, 10); break;
3359  cec6 4b0a          	push	#10
3360  cec8 4b0a          	push	#10
3361  ceca ae0010        	ldw	x,#_OctetArray
3362  cecd 89            	pushw	x
3363  cece ce00cf        	ldw	x,_uip_stat+70
3364  ced1 89            	pushw	x
3365  ced2 ce00cd        	ldw	x,_uip_stat+68
3369  ced5 204e          	jra	L747
3370  ced7               L715:
3371                     ; 986 	    case 18: emb_itoa(uip_stat.tcp.rst,      OctetArray, 10, 10); break;
3373  ced7 4b0a          	push	#10
3374  ced9 4b0a          	push	#10
3375  cedb ae0010        	ldw	x,#_OctetArray
3376  cede 89            	pushw	x
3377  cedf ce00d3        	ldw	x,_uip_stat+74
3378  cee2 89            	pushw	x
3379  cee3 ce00d1        	ldw	x,_uip_stat+72
3383  cee6 203d          	jra	L747
3384  cee8               L125:
3385                     ; 987 	    case 19: emb_itoa(uip_stat.tcp.rexmit,   OctetArray, 10, 10); break;
3387  cee8 4b0a          	push	#10
3388  ceea 4b0a          	push	#10
3389  ceec ae0010        	ldw	x,#_OctetArray
3390  ceef 89            	pushw	x
3391  cef0 ce00d7        	ldw	x,_uip_stat+78
3392  cef3 89            	pushw	x
3393  cef4 ce00d5        	ldw	x,_uip_stat+76
3397  cef7 202c          	jra	L747
3398  cef9               L325:
3399                     ; 988 	    case 20: emb_itoa(uip_stat.tcp.syndrop,  OctetArray, 10, 10); break;
3401  cef9 4b0a          	push	#10
3402  cefb 4b0a          	push	#10
3403  cefd ae0010        	ldw	x,#_OctetArray
3404  cf00 89            	pushw	x
3405  cf01 ce00db        	ldw	x,_uip_stat+82
3406  cf04 89            	pushw	x
3407  cf05 ce00d9        	ldw	x,_uip_stat+80
3411  cf08 201b          	jra	L747
3412  cf0a               L525:
3413                     ; 989 	    case 21: emb_itoa(uip_stat.tcp.synrst,   OctetArray, 10, 10); break;
3415  cf0a 4b0a          	push	#10
3416  cf0c 4b0a          	push	#10
3417  cf0e ae0010        	ldw	x,#_OctetArray
3418  cf11 89            	pushw	x
3419  cf12 ce00df        	ldw	x,_uip_stat+86
3420  cf15 89            	pushw	x
3421  cf16 ce00dd        	ldw	x,_uip_stat+84
3425  cf19 200a          	jra	L747
3426  cf1b               L725:
3427                     ; 990 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3429  cf1b 4b0a          	push	#10
3430  cf1d 4b0a          	push	#10
3431  cf1f ae0010        	ldw	x,#_OctetArray
3432  cf22 89            	pushw	x
3433  cf23 5f            	clrw	x
3434  cf24 89            	pushw	x
3438  cf25               L747:
3439  cf25 89            	pushw	x
3440  cf26 cdc7e5        	call	_emb_itoa
3441  cf29 5b08          	addw	sp,#8
3442                     ; 993 	  for (i=0; i<10; i++) {
3444  cf2b 4f            	clr	a
3445  cf2c 6b07          	ld	(OFST+0,sp),a
3447  cf2e               L157:
3448                     ; 994             *pBuffer = OctetArray[i];
3450  cf2e 5f            	clrw	x
3451  cf2f 97            	ld	xl,a
3452  cf30 d60010        	ld	a,(_OctetArray,x)
3453  cf33 1e08          	ldw	x,(OFST+1,sp)
3454  cf35 f7            	ld	(x),a
3455                     ; 995             pBuffer++;
3457  cf36 5c            	incw	x
3458  cf37 1f08          	ldw	(OFST+1,sp),x
3459                     ; 996             nBytes++;
3461  cf39 1e05          	ldw	x,(OFST-2,sp)
3462  cf3b 5c            	incw	x
3463  cf3c 1f05          	ldw	(OFST-2,sp),x
3465                     ; 993 	  for (i=0; i<10; i++) {
3467  cf3e 0c07          	inc	(OFST+0,sp)
3471  cf40 7b07          	ld	a,(OFST+0,sp)
3472  cf42 a10a          	cp	a,#10
3473  cf44 25e8          	jrult	L157
3474                     ; 1001           *ppData = *ppData + 10;
3476  cf46 1e0c          	ldw	x,(OFST+5,sp)
3477  cf48 9093          	ldw	y,x
3478  cf4a fe            	ldw	x,(x)
3479  cf4b 1c000a        	addw	x,#10
3480  cf4e 90ff          	ldw	(y),x
3481                     ; 1002           *pDataLeft = *pDataLeft - 10;
3483  cf50 1e0e          	ldw	x,(OFST+7,sp)
3484  cf52 9093          	ldw	y,x
3485  cf54 fe            	ldw	x,(x)
3486  cf55 1d000a        	subw	x,#10
3488  cf58 2031          	jp	LC011
3489  cf5a               L347:
3490                     ; 1007         else if (nParsedMode == 'f') {
3492  cf5a a166          	cp	a,#102
3493  cf5c 2632          	jrne	L167
3494                     ; 1010 	  for(i=0; i<16; i++) {
3496  cf5e 4f            	clr	a
3497  cf5f 6b07          	ld	(OFST+0,sp),a
3499  cf61               L367:
3500                     ; 1011 	    *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
3502  cf61 cdda8e        	call	_GpioGetPin
3504  cf64 1e08          	ldw	x,(OFST+1,sp)
3505  cf66 ab30          	add	a,#48
3506  cf68 f7            	ld	(x),a
3507                     ; 1012             pBuffer++;
3509  cf69 5c            	incw	x
3510  cf6a 1f08          	ldw	(OFST+1,sp),x
3511                     ; 1013             nBytes++;
3513  cf6c 1e05          	ldw	x,(OFST-2,sp)
3514  cf6e 5c            	incw	x
3515  cf6f 1f05          	ldw	(OFST-2,sp),x
3517                     ; 1010 	  for(i=0; i<16; i++) {
3519  cf71 0c07          	inc	(OFST+0,sp)
3523  cf73 7b07          	ld	a,(OFST+0,sp)
3524  cf75 a110          	cp	a,#16
3525  cf77 25e8          	jrult	L367
3526                     ; 1017           *ppData = *ppData + 16;
3528  cf79 1e0c          	ldw	x,(OFST+5,sp)
3529  cf7b 9093          	ldw	y,x
3530  cf7d fe            	ldw	x,(x)
3531  cf7e 1c0010        	addw	x,#16
3532  cf81 90ff          	ldw	(y),x
3533                     ; 1018           *pDataLeft = *pDataLeft - 16;
3535  cf83 1e0e          	ldw	x,(OFST+7,sp)
3536  cf85 9093          	ldw	y,x
3537  cf87 fe            	ldw	x,(x)
3538  cf88 1d0010        	subw	x,#16
3539  cf8b               LC011:
3540  cf8b 90ff          	ldw	(y),x
3542  cf8d ccd251        	jra	L306
3543  cf90               L167:
3544                     ; 1021         else if (nParsedMode == 'g') {
3546  cf90 a167          	cp	a,#103
3547  cf92 2623          	jrne	L377
3548                     ; 1025 	  if (invert_output == 1) {  // Insert 'checked'
3550  cf94 c6005e        	ld	a,_invert_output
3551  cf97 4a            	dec	a
3552  cf98 26f3          	jrne	L306
3553                     ; 1026             for(i=0; i<7; i++) {
3555  cf9a 6b07          	ld	(OFST+0,sp),a
3557  cf9c               L777:
3558                     ; 1027               *pBuffer = checked[i];
3560  cf9c 5f            	clrw	x
3561  cf9d 97            	ld	xl,a
3562  cf9e d68080        	ld	a,(L31_checked,x)
3563  cfa1 1e08          	ldw	x,(OFST+1,sp)
3564  cfa3 f7            	ld	(x),a
3565                     ; 1028               pBuffer++;
3567  cfa4 5c            	incw	x
3568  cfa5 1f08          	ldw	(OFST+1,sp),x
3569                     ; 1029               nBytes++;
3571  cfa7 1e05          	ldw	x,(OFST-2,sp)
3572  cfa9 5c            	incw	x
3573  cfaa 1f05          	ldw	(OFST-2,sp),x
3575                     ; 1026             for(i=0; i<7; i++) {
3577  cfac 0c07          	inc	(OFST+0,sp)
3581  cfae 7b07          	ld	a,(OFST+0,sp)
3582  cfb0 a107          	cp	a,#7
3583  cfb2 25e8          	jrult	L777
3584  cfb4 ccd251        	jra	L306
3585  cfb7               L377:
3586                     ; 1034         else if (nParsedMode == 'h') {
3588  cfb7 a168          	cp	a,#104
3589  cfb9 2622          	jrne	L7001
3590                     ; 1039 	  if (invert_output == 0) {  // Insert 'checked'
3592  cfbb c6005e        	ld	a,_invert_output
3593  cfbe 26f4          	jrne	L306
3594                     ; 1040             for(i=0; i<7; i++) {
3596  cfc0 6b07          	ld	(OFST+0,sp),a
3598  cfc2               L3101:
3599                     ; 1041               *pBuffer = checked[i];
3601  cfc2 5f            	clrw	x
3602  cfc3 97            	ld	xl,a
3603  cfc4 d68080        	ld	a,(L31_checked,x)
3604  cfc7 1e08          	ldw	x,(OFST+1,sp)
3605  cfc9 f7            	ld	(x),a
3606                     ; 1042               pBuffer++;
3608  cfca 5c            	incw	x
3609  cfcb 1f08          	ldw	(OFST+1,sp),x
3610                     ; 1043               nBytes++;
3612  cfcd 1e05          	ldw	x,(OFST-2,sp)
3613  cfcf 5c            	incw	x
3614  cfd0 1f05          	ldw	(OFST-2,sp),x
3616                     ; 1040             for(i=0; i<7; i++) {
3618  cfd2 0c07          	inc	(OFST+0,sp)
3622  cfd4 7b07          	ld	a,(OFST+0,sp)
3623  cfd6 a107          	cp	a,#7
3624  cfd8 25e8          	jrult	L3101
3625  cfda ccd251        	jra	L306
3626  cfdd               L7001:
3627                     ; 1048         else if (nParsedMode == 'x') {
3629  cfdd a178          	cp	a,#120
3630  cfdf 26f9          	jrne	L306
3631                     ; 1058           *pBuffer = 'h'; pBuffer++; nBytes++;
3633  cfe1 1e08          	ldw	x,(OFST+1,sp)
3634  cfe3 a668          	ld	a,#104
3635  cfe5 f7            	ld	(x),a
3638  cfe6 5c            	incw	x
3639  cfe7 1f08          	ldw	(OFST+1,sp),x
3642  cfe9 1e05          	ldw	x,(OFST-2,sp)
3643  cfeb 5c            	incw	x
3644  cfec 1f05          	ldw	(OFST-2,sp),x
3646                     ; 1059           *pBuffer = 't'; pBuffer++; nBytes++;
3648  cfee 1e08          	ldw	x,(OFST+1,sp)
3649  cff0 a674          	ld	a,#116
3650  cff2 f7            	ld	(x),a
3653  cff3 5c            	incw	x
3654  cff4 1f08          	ldw	(OFST+1,sp),x
3657  cff6 1e05          	ldw	x,(OFST-2,sp)
3658  cff8 5c            	incw	x
3659  cff9 1f05          	ldw	(OFST-2,sp),x
3661                     ; 1060           *pBuffer = 't'; pBuffer++; nBytes++;
3663  cffb 1e08          	ldw	x,(OFST+1,sp)
3664  cffd f7            	ld	(x),a
3667  cffe 5c            	incw	x
3668  cfff 1f08          	ldw	(OFST+1,sp),x
3671  d001 1e05          	ldw	x,(OFST-2,sp)
3672  d003 5c            	incw	x
3673  d004 1f05          	ldw	(OFST-2,sp),x
3675                     ; 1061           *pBuffer = 'p'; pBuffer++; nBytes++;
3677  d006 1e08          	ldw	x,(OFST+1,sp)
3678  d008 a670          	ld	a,#112
3679  d00a f7            	ld	(x),a
3682  d00b 5c            	incw	x
3683  d00c 1f08          	ldw	(OFST+1,sp),x
3686  d00e 1e05          	ldw	x,(OFST-2,sp)
3687  d010 5c            	incw	x
3688  d011 1f05          	ldw	(OFST-2,sp),x
3690                     ; 1062           *pBuffer = ':'; pBuffer++; nBytes++;
3692  d013 1e08          	ldw	x,(OFST+1,sp)
3693  d015 a63a          	ld	a,#58
3694  d017 f7            	ld	(x),a
3697  d018 5c            	incw	x
3698  d019 1f08          	ldw	(OFST+1,sp),x
3701  d01b 1e05          	ldw	x,(OFST-2,sp)
3702  d01d 5c            	incw	x
3703  d01e 1f05          	ldw	(OFST-2,sp),x
3705                     ; 1063           *pBuffer = '/'; pBuffer++; nBytes++;
3707  d020 1e08          	ldw	x,(OFST+1,sp)
3708  d022 a62f          	ld	a,#47
3709  d024 f7            	ld	(x),a
3712  d025 5c            	incw	x
3713  d026 1f08          	ldw	(OFST+1,sp),x
3716  d028 1e05          	ldw	x,(OFST-2,sp)
3717  d02a 5c            	incw	x
3718  d02b 1f05          	ldw	(OFST-2,sp),x
3720                     ; 1064           *pBuffer = '/'; pBuffer++; nBytes++;
3722  d02d 1e08          	ldw	x,(OFST+1,sp)
3723  d02f f7            	ld	(x),a
3726  d030 5c            	incw	x
3727  d031 1f08          	ldw	(OFST+1,sp),x
3730  d033 1e05          	ldw	x,(OFST-2,sp)
3731  d035 5c            	incw	x
3732  d036 1f05          	ldw	(OFST-2,sp),x
3734                     ; 1068           emb_itoa(ex_stored_hostaddr4,  OctetArray, 10, 3);
3736  d038 4b03          	push	#3
3737  d03a 4b0a          	push	#10
3738  d03c ae0010        	ldw	x,#_OctetArray
3739  d03f 89            	pushw	x
3740  d040 5500590003    	mov	c_lreg+3,_ex_stored_hostaddr4
3741  d045 3f02          	clr	c_lreg+2
3742  d047 3f01          	clr	c_lreg+1
3743  d049 3f00          	clr	c_lreg
3744  d04b be02          	ldw	x,c_lreg+2
3745  d04d 89            	pushw	x
3746  d04e be00          	ldw	x,c_lreg
3747  d050 89            	pushw	x
3748  d051 cdc7e5        	call	_emb_itoa
3750  d054 5b08          	addw	sp,#8
3751                     ; 1070 	  if (OctetArray[0] != '0') {
3753  d056 c60010        	ld	a,_OctetArray
3754  d059 a130          	cp	a,#48
3755  d05b 270b          	jreq	L5201
3756                     ; 1071 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3758  d05d 1e08          	ldw	x,(OFST+1,sp)
3759  d05f f7            	ld	(x),a
3762  d060 5c            	incw	x
3763  d061 1f08          	ldw	(OFST+1,sp),x
3766  d063 1e05          	ldw	x,(OFST-2,sp)
3767  d065 5c            	incw	x
3768  d066 1f05          	ldw	(OFST-2,sp),x
3770  d068               L5201:
3771                     ; 1073 	  if (OctetArray[0] != '0') {
3773  d068 a130          	cp	a,#48
3774  d06a 2707          	jreq	L7201
3775                     ; 1074             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3777  d06c 1e08          	ldw	x,(OFST+1,sp)
3778  d06e c60011        	ld	a,_OctetArray+1
3782  d071 2009          	jp	LC005
3783  d073               L7201:
3784                     ; 1076 	  else if (OctetArray[1] != '0') {
3786  d073 c60011        	ld	a,_OctetArray+1
3787  d076 a130          	cp	a,#48
3788  d078 270b          	jreq	L1301
3789                     ; 1077             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3791  d07a 1e08          	ldw	x,(OFST+1,sp)
3796  d07c               LC005:
3797  d07c f7            	ld	(x),a
3799  d07d 5c            	incw	x
3800  d07e 1f08          	ldw	(OFST+1,sp),x
3802  d080 1e05          	ldw	x,(OFST-2,sp)
3803  d082 5c            	incw	x
3804  d083 1f05          	ldw	(OFST-2,sp),x
3806  d085               L1301:
3807                     ; 1079           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3809  d085 1e08          	ldw	x,(OFST+1,sp)
3810  d087 c60012        	ld	a,_OctetArray+2
3811  d08a f7            	ld	(x),a
3814  d08b 5c            	incw	x
3815  d08c 1f08          	ldw	(OFST+1,sp),x
3818  d08e 1e05          	ldw	x,(OFST-2,sp)
3819  d090 5c            	incw	x
3820  d091 1f05          	ldw	(OFST-2,sp),x
3822                     ; 1081           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3824  d093 1e08          	ldw	x,(OFST+1,sp)
3825  d095 a62e          	ld	a,#46
3826  d097 f7            	ld	(x),a
3829  d098 5c            	incw	x
3830  d099 1f08          	ldw	(OFST+1,sp),x
3833  d09b 1e05          	ldw	x,(OFST-2,sp)
3834  d09d 5c            	incw	x
3835  d09e 1f05          	ldw	(OFST-2,sp),x
3837                     ; 1084           emb_itoa(ex_stored_hostaddr3,  OctetArray, 10, 3);
3839  d0a0 4b03          	push	#3
3840  d0a2 4b0a          	push	#10
3841  d0a4 ae0010        	ldw	x,#_OctetArray
3842  d0a7 89            	pushw	x
3843  d0a8 5500580003    	mov	c_lreg+3,_ex_stored_hostaddr3
3844  d0ad 3f02          	clr	c_lreg+2
3845  d0af 3f01          	clr	c_lreg+1
3846  d0b1 3f00          	clr	c_lreg
3847  d0b3 be02          	ldw	x,c_lreg+2
3848  d0b5 89            	pushw	x
3849  d0b6 be00          	ldw	x,c_lreg
3850  d0b8 89            	pushw	x
3851  d0b9 cdc7e5        	call	_emb_itoa
3853  d0bc 5b08          	addw	sp,#8
3854                     ; 1086 	  if (OctetArray[0] != '0') {
3856  d0be c60010        	ld	a,_OctetArray
3857  d0c1 a130          	cp	a,#48
3858  d0c3 270b          	jreq	L5301
3859                     ; 1087 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3861  d0c5 1e08          	ldw	x,(OFST+1,sp)
3862  d0c7 f7            	ld	(x),a
3865  d0c8 5c            	incw	x
3866  d0c9 1f08          	ldw	(OFST+1,sp),x
3869  d0cb 1e05          	ldw	x,(OFST-2,sp)
3870  d0cd 5c            	incw	x
3871  d0ce 1f05          	ldw	(OFST-2,sp),x
3873  d0d0               L5301:
3874                     ; 1089 	  if (OctetArray[0] != '0') {
3876  d0d0 a130          	cp	a,#48
3877  d0d2 2707          	jreq	L7301
3878                     ; 1090             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3880  d0d4 1e08          	ldw	x,(OFST+1,sp)
3881  d0d6 c60011        	ld	a,_OctetArray+1
3885  d0d9 2009          	jp	LC006
3886  d0db               L7301:
3887                     ; 1092 	  else if (OctetArray[1] != '0') {
3889  d0db c60011        	ld	a,_OctetArray+1
3890  d0de a130          	cp	a,#48
3891  d0e0 270b          	jreq	L1401
3892                     ; 1093             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3894  d0e2 1e08          	ldw	x,(OFST+1,sp)
3899  d0e4               LC006:
3900  d0e4 f7            	ld	(x),a
3902  d0e5 5c            	incw	x
3903  d0e6 1f08          	ldw	(OFST+1,sp),x
3905  d0e8 1e05          	ldw	x,(OFST-2,sp)
3906  d0ea 5c            	incw	x
3907  d0eb 1f05          	ldw	(OFST-2,sp),x
3909  d0ed               L1401:
3910                     ; 1095           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3912  d0ed 1e08          	ldw	x,(OFST+1,sp)
3913  d0ef c60012        	ld	a,_OctetArray+2
3914  d0f2 f7            	ld	(x),a
3917  d0f3 5c            	incw	x
3918  d0f4 1f08          	ldw	(OFST+1,sp),x
3921  d0f6 1e05          	ldw	x,(OFST-2,sp)
3922  d0f8 5c            	incw	x
3923  d0f9 1f05          	ldw	(OFST-2,sp),x
3925                     ; 1097           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3927  d0fb 1e08          	ldw	x,(OFST+1,sp)
3928  d0fd a62e          	ld	a,#46
3929  d0ff f7            	ld	(x),a
3932  d100 5c            	incw	x
3933  d101 1f08          	ldw	(OFST+1,sp),x
3936  d103 1e05          	ldw	x,(OFST-2,sp)
3937  d105 5c            	incw	x
3938  d106 1f05          	ldw	(OFST-2,sp),x
3940                     ; 1100           emb_itoa(ex_stored_hostaddr2,  OctetArray, 10, 3);
3942  d108 4b03          	push	#3
3943  d10a 4b0a          	push	#10
3944  d10c ae0010        	ldw	x,#_OctetArray
3945  d10f 89            	pushw	x
3946  d110 5500570003    	mov	c_lreg+3,_ex_stored_hostaddr2
3947  d115 3f02          	clr	c_lreg+2
3948  d117 3f01          	clr	c_lreg+1
3949  d119 3f00          	clr	c_lreg
3950  d11b be02          	ldw	x,c_lreg+2
3951  d11d 89            	pushw	x
3952  d11e be00          	ldw	x,c_lreg
3953  d120 89            	pushw	x
3954  d121 cdc7e5        	call	_emb_itoa
3956  d124 5b08          	addw	sp,#8
3957                     ; 1102 	  if (OctetArray[0] != '0') {
3959  d126 c60010        	ld	a,_OctetArray
3960  d129 a130          	cp	a,#48
3961  d12b 270b          	jreq	L5401
3962                     ; 1103 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3964  d12d 1e08          	ldw	x,(OFST+1,sp)
3965  d12f f7            	ld	(x),a
3968  d130 5c            	incw	x
3969  d131 1f08          	ldw	(OFST+1,sp),x
3972  d133 1e05          	ldw	x,(OFST-2,sp)
3973  d135 5c            	incw	x
3974  d136 1f05          	ldw	(OFST-2,sp),x
3976  d138               L5401:
3977                     ; 1105 	  if (OctetArray[0] != '0') {
3979  d138 a130          	cp	a,#48
3980  d13a 2707          	jreq	L7401
3981                     ; 1106             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3983  d13c 1e08          	ldw	x,(OFST+1,sp)
3984  d13e c60011        	ld	a,_OctetArray+1
3988  d141 2009          	jp	LC007
3989  d143               L7401:
3990                     ; 1108 	  else if (OctetArray[1] != '0') {
3992  d143 c60011        	ld	a,_OctetArray+1
3993  d146 a130          	cp	a,#48
3994  d148 270b          	jreq	L1501
3995                     ; 1109             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3997  d14a 1e08          	ldw	x,(OFST+1,sp)
4002  d14c               LC007:
4003  d14c f7            	ld	(x),a
4005  d14d 5c            	incw	x
4006  d14e 1f08          	ldw	(OFST+1,sp),x
4008  d150 1e05          	ldw	x,(OFST-2,sp)
4009  d152 5c            	incw	x
4010  d153 1f05          	ldw	(OFST-2,sp),x
4012  d155               L1501:
4013                     ; 1111           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
4015  d155 1e08          	ldw	x,(OFST+1,sp)
4016  d157 c60012        	ld	a,_OctetArray+2
4017  d15a f7            	ld	(x),a
4020  d15b 5c            	incw	x
4021  d15c 1f08          	ldw	(OFST+1,sp),x
4024  d15e 1e05          	ldw	x,(OFST-2,sp)
4025  d160 5c            	incw	x
4026  d161 1f05          	ldw	(OFST-2,sp),x
4028                     ; 1113           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
4030  d163 1e08          	ldw	x,(OFST+1,sp)
4031  d165 a62e          	ld	a,#46
4032  d167 f7            	ld	(x),a
4035  d168 5c            	incw	x
4036  d169 1f08          	ldw	(OFST+1,sp),x
4039  d16b 1e05          	ldw	x,(OFST-2,sp)
4040  d16d 5c            	incw	x
4041  d16e 1f05          	ldw	(OFST-2,sp),x
4043                     ; 1116           emb_itoa(ex_stored_hostaddr1,  OctetArray, 10, 3);
4045  d170 4b03          	push	#3
4046  d172 4b0a          	push	#10
4047  d174 ae0010        	ldw	x,#_OctetArray
4048  d177 89            	pushw	x
4049  d178 5500560003    	mov	c_lreg+3,_ex_stored_hostaddr1
4050  d17d 3f02          	clr	c_lreg+2
4051  d17f 3f01          	clr	c_lreg+1
4052  d181 3f00          	clr	c_lreg
4053  d183 be02          	ldw	x,c_lreg+2
4054  d185 89            	pushw	x
4055  d186 be00          	ldw	x,c_lreg
4056  d188 89            	pushw	x
4057  d189 cdc7e5        	call	_emb_itoa
4059  d18c 5b08          	addw	sp,#8
4060                     ; 1118 	  if (OctetArray[0] != '0') {
4062  d18e c60010        	ld	a,_OctetArray
4063  d191 a130          	cp	a,#48
4064  d193 270b          	jreq	L5501
4065                     ; 1119 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
4067  d195 1e08          	ldw	x,(OFST+1,sp)
4068  d197 f7            	ld	(x),a
4071  d198 5c            	incw	x
4072  d199 1f08          	ldw	(OFST+1,sp),x
4075  d19b 1e05          	ldw	x,(OFST-2,sp)
4076  d19d 5c            	incw	x
4077  d19e 1f05          	ldw	(OFST-2,sp),x
4079  d1a0               L5501:
4080                     ; 1121 	  if (OctetArray[0] != '0') {
4082  d1a0 a130          	cp	a,#48
4083  d1a2 2707          	jreq	L7501
4084                     ; 1122             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
4086  d1a4 1e08          	ldw	x,(OFST+1,sp)
4087  d1a6 c60011        	ld	a,_OctetArray+1
4091  d1a9 2009          	jp	LC008
4092  d1ab               L7501:
4093                     ; 1124 	  else if (OctetArray[1] != '0') {
4095  d1ab c60011        	ld	a,_OctetArray+1
4096  d1ae a130          	cp	a,#48
4097  d1b0 270b          	jreq	L1601
4098                     ; 1125             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
4100  d1b2 1e08          	ldw	x,(OFST+1,sp)
4105  d1b4               LC008:
4106  d1b4 f7            	ld	(x),a
4108  d1b5 5c            	incw	x
4109  d1b6 1f08          	ldw	(OFST+1,sp),x
4111  d1b8 1e05          	ldw	x,(OFST-2,sp)
4112  d1ba 5c            	incw	x
4113  d1bb 1f05          	ldw	(OFST-2,sp),x
4115  d1bd               L1601:
4116                     ; 1127           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
4118  d1bd 1e08          	ldw	x,(OFST+1,sp)
4119  d1bf c60012        	ld	a,_OctetArray+2
4120  d1c2 f7            	ld	(x),a
4123  d1c3 5c            	incw	x
4124  d1c4 1f08          	ldw	(OFST+1,sp),x
4127  d1c6 1e05          	ldw	x,(OFST-2,sp)
4128  d1c8 5c            	incw	x
4129  d1c9 1f05          	ldw	(OFST-2,sp),x
4131                     ; 1129           *pBuffer = ':'; pBuffer++; nBytes++; // Output ':'
4133  d1cb 1e08          	ldw	x,(OFST+1,sp)
4134  d1cd a63a          	ld	a,#58
4135  d1cf f7            	ld	(x),a
4138  d1d0 5c            	incw	x
4139  d1d1 1f08          	ldw	(OFST+1,sp),x
4142  d1d3 1e05          	ldw	x,(OFST-2,sp)
4143  d1d5 5c            	incw	x
4144  d1d6 1f05          	ldw	(OFST-2,sp),x
4146                     ; 1132   	  emb_itoa(ex_stored_port, OctetArray, 10, 5);
4148  d1d8 4b05          	push	#5
4149  d1da 4b0a          	push	#10
4150  d1dc ae0010        	ldw	x,#_OctetArray
4151  d1df 89            	pushw	x
4152  d1e0 ce004c        	ldw	x,_ex_stored_port
4153  d1e3 cdfb22        	call	c_uitolx
4155  d1e6 be02          	ldw	x,c_lreg+2
4156  d1e8 89            	pushw	x
4157  d1e9 be00          	ldw	x,c_lreg
4158  d1eb 89            	pushw	x
4159  d1ec cdc7e5        	call	_emb_itoa
4161  d1ef 5b08          	addw	sp,#8
4162                     ; 1134 	  for(i=0; i<5; i++) {
4164  d1f1 4f            	clr	a
4165  d1f2 6b07          	ld	(OFST+0,sp),a
4167  d1f4               L5601:
4168                     ; 1135 	    if (OctetArray[i] != '0') break;
4170  d1f4 5f            	clrw	x
4171  d1f5 97            	ld	xl,a
4172  d1f6 d60010        	ld	a,(_OctetArray,x)
4173  d1f9 a130          	cp	a,#48
4174  d1fb 261c          	jrne	L7701
4177                     ; 1134 	  for(i=0; i<5; i++) {
4179  d1fd 0c07          	inc	(OFST+0,sp)
4183  d1ff 7b07          	ld	a,(OFST+0,sp)
4184  d201 a105          	cp	a,#5
4185  d203 25ef          	jrult	L5601
4186  d205 2012          	jra	L7701
4187  d207               L5701:
4188                     ; 1138 	    *pBuffer = OctetArray[i]; pBuffer++; nBytes++;
4190  d207 5f            	clrw	x
4191  d208 97            	ld	xl,a
4192  d209 d60010        	ld	a,(_OctetArray,x)
4193  d20c 1e08          	ldw	x,(OFST+1,sp)
4194  d20e f7            	ld	(x),a
4197  d20f 5c            	incw	x
4198  d210 1f08          	ldw	(OFST+1,sp),x
4201  d212 1e05          	ldw	x,(OFST-2,sp)
4202  d214 5c            	incw	x
4203  d215 1f05          	ldw	(OFST-2,sp),x
4205                     ; 1139 	    i++;
4207  d217 0c07          	inc	(OFST+0,sp)
4209  d219               L7701:
4210                     ; 1137 	  while(i<5) {
4212  d219 7b07          	ld	a,(OFST+0,sp)
4213  d21b a105          	cp	a,#5
4214  d21d 25e8          	jrult	L5701
4215                     ; 1144           *ppData = *ppData + 28;
4217  d21f 1e0c          	ldw	x,(OFST+5,sp)
4218  d221 9093          	ldw	y,x
4219  d223 fe            	ldw	x,(x)
4220  d224 1c001c        	addw	x,#28
4221  d227 90ff          	ldw	(y),x
4222                     ; 1145           *pDataLeft = *pDataLeft - 28;
4224  d229 1e0e          	ldw	x,(OFST+7,sp)
4225  d22b 9093          	ldw	y,x
4226  d22d fe            	ldw	x,(x)
4227  d22e 1d001c        	subw	x,#28
4228  d231 cccf8b        	jp	LC011
4229  d234               L116:
4230                     ; 1149         *pBuffer = nByte;
4232  d234 1e08          	ldw	x,(OFST+1,sp)
4233  d236 f7            	ld	(x),a
4234                     ; 1150         *ppData = *ppData + 1;
4236  d237 1e0c          	ldw	x,(OFST+5,sp)
4237  d239 9093          	ldw	y,x
4238  d23b fe            	ldw	x,(x)
4239  d23c 5c            	incw	x
4240  d23d 90ff          	ldw	(y),x
4241                     ; 1151         *pDataLeft = *pDataLeft - 1;
4243  d23f 1e0e          	ldw	x,(OFST+7,sp)
4244  d241 9093          	ldw	y,x
4245  d243 fe            	ldw	x,(x)
4246  d244 5a            	decw	x
4247  d245 90ff          	ldw	(y),x
4248                     ; 1152         pBuffer++;
4250  d247 1e08          	ldw	x,(OFST+1,sp)
4251                     ; 1153         nBytes++;
4253  d249               LC009:
4256  d249 5c            	incw	x
4257  d24a 1f08          	ldw	(OFST+1,sp),x
4260  d24c 1e05          	ldw	x,(OFST-2,sp)
4261  d24e 5c            	incw	x
4262  d24f 1f05          	ldw	(OFST-2,sp),x
4264  d251               L306:
4265                     ; 714   while (nBytes < nMaxBytes) {
4267  d251 1e05          	ldw	x,(OFST-2,sp)
4268  d253 1310          	cpw	x,(OFST+9,sp)
4269  d255 2403ccca3a    	jrult	L106
4270  d25a               L506:
4271                     ; 1158   return nBytes;
4273  d25a 1e05          	ldw	x,(OFST-2,sp)
4276  d25c 5b09          	addw	sp,#9
4277  d25e 81            	ret	
4304                     ; 1162 void HttpDInit()
4304                     ; 1163 {
4305                     	switch	.text
4306  d25f               _HttpDInit:
4310                     ; 1165   uip_listen(htons(Port_Httpd));
4312  d25f ce0061        	ldw	x,_Port_Httpd
4313  d262 cdf4fe        	call	_htons
4315  d265 cdebbe        	call	_uip_listen
4317                     ; 1166   current_webpage = WEBPAGE_DEFAULT;
4319  d268 725f001b      	clr	_current_webpage
4320                     ; 1167 }
4323  d26c 81            	ret	
4529                     	switch	.const
4530  c1f2               L472:
4531  c1f2 d7e6          	dc.w	L7111
4532  c1f4 d7ed          	dc.w	L1211
4533  c1f6 d7f4          	dc.w	L3211
4534  c1f8 d7fb          	dc.w	L5211
4535  c1fa d802          	dc.w	L7211
4536  c1fc d809          	dc.w	L1311
4537  c1fe d810          	dc.w	L3311
4538  c200 d817          	dc.w	L5311
4539  c202 d81e          	dc.w	L7311
4540  c204 d825          	dc.w	L1411
4541  c206 d82c          	dc.w	L3411
4542  c208 d833          	dc.w	L5411
4543  c20a d83a          	dc.w	L7411
4544  c20c d841          	dc.w	L1511
4545  c20e d848          	dc.w	L3511
4546  c210 d84f          	dc.w	L5511
4547  c212 d856          	dc.w	L7511
4548  c214 d85d          	dc.w	L1611
4549  c216 d864          	dc.w	L3611
4550  c218 d86b          	dc.w	L5611
4551  c21a d872          	dc.w	L7611
4552  c21c d879          	dc.w	L1711
4553  c21e d880          	dc.w	L3711
4554  c220 d887          	dc.w	L5711
4555  c222 d88e          	dc.w	L7711
4556  c224 d895          	dc.w	L1021
4557  c226 d89c          	dc.w	L3021
4558  c228 d8a3          	dc.w	L5021
4559  c22a d8aa          	dc.w	L7021
4560  c22c d8b1          	dc.w	L1121
4561  c22e d8b8          	dc.w	L3121
4562  c230 d8bf          	dc.w	L5121
4563  c232 d94c          	dc.w	L3421
4564  c234 d94c          	dc.w	L3421
4565  c236 d94c          	dc.w	L3421
4566  c238 d94c          	dc.w	L3421
4567  c23a d94c          	dc.w	L3421
4568  c23c d94c          	dc.w	L3421
4569  c23e d94c          	dc.w	L3421
4570  c240 d94c          	dc.w	L3421
4571  c242 d94c          	dc.w	L3421
4572  c244 d94c          	dc.w	L3421
4573  c246 d94c          	dc.w	L3421
4574  c248 d94c          	dc.w	L3421
4575  c24a d94c          	dc.w	L3421
4576  c24c d94c          	dc.w	L3421
4577  c24e d94c          	dc.w	L3421
4578  c250 d94c          	dc.w	L3421
4579  c252 d94c          	dc.w	L3421
4580  c254 d94c          	dc.w	L3421
4581  c256 d94c          	dc.w	L3421
4582  c258 d94c          	dc.w	L3421
4583  c25a d94c          	dc.w	L3421
4584  c25c d94c          	dc.w	L3421
4585  c25e d94c          	dc.w	L3421
4586  c260 d8c6          	dc.w	L7121
4587  c262 d8d1          	dc.w	L1221
4588  c264 d94c          	dc.w	L3421
4589  c266 d94c          	dc.w	L3421
4590  c268 d94c          	dc.w	L3421
4591  c26a d8dc          	dc.w	L3221
4592  c26c d8de          	dc.w	L5221
4593  c26e d94c          	dc.w	L3421
4594  c270 d8f0          	dc.w	L7221
4595  c272 d902          	dc.w	L1321
4596  c274 d914          	dc.w	L3321
4597  c276 d91f          	dc.w	L5321
4598                     ; 1170 void HttpDCall(	uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
4598                     ; 1171 {
4599                     	switch	.text
4600  d26d               _HttpDCall:
4602  d26d 89            	pushw	x
4603  d26e 5207          	subw	sp,#7
4604       00000007      OFST:	set	7
4607                     ; 1181   alpha_1 = '0';
4609                     ; 1182   alpha_2 = '0';
4611                     ; 1183   alpha_3 = '0';
4613                     ; 1184   alpha_4 = '0';
4615                     ; 1185   alpha_5 = '0';
4617                     ; 1187   if(uip_connected()) {
4619  d270 720d00887a    	btjf	_uip_flags,#6,L3431
4620                     ; 1189     if(current_webpage == WEBPAGE_DEFAULT) {
4622  d275 c6001b        	ld	a,_current_webpage
4623  d278 260e          	jrne	L5431
4624                     ; 1190       pSocket->pData = g_HtmlPageDefault;
4626  d27a 1e0e          	ldw	x,(OFST+7,sp)
4627  d27c 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
4628  d280 ef01          	ldw	(1,x),y
4629                     ; 1191       pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
4631  d282 90ae1876      	ldw	y,#6262
4633  d286 2058          	jp	LC012
4634  d288               L5431:
4635                     ; 1195     else if(current_webpage == WEBPAGE_ADDRESS) {
4637  d288 a101          	cp	a,#1
4638  d28a 260e          	jrne	L1531
4639                     ; 1196       pSocket->pData = g_HtmlPageAddress;
4641  d28c 1e0e          	ldw	x,(OFST+7,sp)
4642  d28e 90ae98ff      	ldw	y,#L71_g_HtmlPageAddress
4643  d292 ef01          	ldw	(1,x),y
4644                     ; 1197       pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
4646  d294 90ae133a      	ldw	y,#4922
4648  d298 2046          	jp	LC012
4649  d29a               L1531:
4650                     ; 1201     else if(current_webpage == WEBPAGE_HELP) {
4652  d29a a103          	cp	a,#3
4653  d29c 260e          	jrne	L5531
4654                     ; 1202       pSocket->pData = g_HtmlPageHelp;
4656  d29e 1e0e          	ldw	x,(OFST+7,sp)
4657  d2a0 90aeac3a      	ldw	y,#L12_g_HtmlPageHelp
4658  d2a4 ef01          	ldw	(1,x),y
4659                     ; 1203       pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
4661  d2a6 90ae0753      	ldw	y,#1875
4663  d2aa 2034          	jp	LC012
4664  d2ac               L5531:
4665                     ; 1205     else if(current_webpage == WEBPAGE_HELP2) {
4667  d2ac a104          	cp	a,#4
4668  d2ae 260e          	jrne	L1631
4669                     ; 1206       pSocket->pData = g_HtmlPageHelp2;
4671  d2b0 1e0e          	ldw	x,(OFST+7,sp)
4672  d2b2 90aeb38e      	ldw	y,#L32_g_HtmlPageHelp2
4673  d2b6 ef01          	ldw	(1,x),y
4674                     ; 1207       pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
4676  d2b8 90ae02b4      	ldw	y,#692
4678  d2bc 2022          	jp	LC012
4679  d2be               L1631:
4680                     ; 1212     else if(current_webpage == WEBPAGE_STATS) {
4682  d2be a105          	cp	a,#5
4683  d2c0 260e          	jrne	L5631
4684                     ; 1213       pSocket->pData = g_HtmlPageStats;
4686  d2c2 1e0e          	ldw	x,(OFST+7,sp)
4687  d2c4 90aeb643      	ldw	y,#L52_g_HtmlPageStats
4688  d2c8 ef01          	ldw	(1,x),y
4689                     ; 1214       pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
4691  d2ca 90ae0ae5      	ldw	y,#2789
4693  d2ce 2010          	jp	LC012
4694  d2d0               L5631:
4695                     ; 1217     else if(current_webpage == WEBPAGE_RSTATE) {
4697  d2d0 a106          	cp	a,#6
4698  d2d2 260e          	jrne	L7431
4699                     ; 1218       pSocket->pData = g_HtmlPageRstate;
4701  d2d4 1e0e          	ldw	x,(OFST+7,sp)
4702  d2d6 90aec129      	ldw	y,#L72_g_HtmlPageRstate
4703  d2da ef01          	ldw	(1,x),y
4704                     ; 1219       pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
4706  d2dc 90ae0084      	ldw	y,#132
4707  d2e0               LC012:
4708  d2e0 ef03          	ldw	(3,x),y
4709  d2e2               L7431:
4710                     ; 1221     pSocket->nNewlines = 0;
4712  d2e2 1e0e          	ldw	x,(OFST+7,sp)
4713                     ; 1222     pSocket->nState = STATE_CONNECTED;
4715  d2e4 7f            	clr	(x)
4716  d2e5 6f05          	clr	(5,x)
4717                     ; 1223     pSocket->nPrevBytes = 0xFFFF;
4719  d2e7 90aeffff      	ldw	y,#65535
4720  d2eb ef0a          	ldw	(10,x),y
4722  d2ed 2041          	jra	L613
4723  d2ef               L3431:
4724                     ; 1225   else if (uip_newdata() || uip_acked()) {
4726  d2ef 7202008808    	btjt	_uip_flags,#1,L7731
4728  d2f4 7200008803cc  	btjf	_uip_flags,#0,L5731
4729  d2fc               L7731:
4730                     ; 1226     if (pSocket->nState == STATE_CONNECTED) {
4732  d2fc 1e0e          	ldw	x,(OFST+7,sp)
4733  d2fe f6            	ld	a,(x)
4734  d2ff 2627          	jrne	L1041
4735                     ; 1227       if (nBytes == 0) return;
4737  d301 1e0c          	ldw	x,(OFST+5,sp)
4738  d303 272b          	jreq	L613
4741                     ; 1228       if (*pBuffer == 'G') pSocket->nState = STATE_GET_G;
4743  d305 1e08          	ldw	x,(OFST+1,sp)
4744  d307 f6            	ld	a,(x)
4745  d308 a147          	cp	a,#71
4746  d30a 2606          	jrne	L5041
4749  d30c 1e0e          	ldw	x,(OFST+7,sp)
4750  d30e a601          	ld	a,#1
4752  d310 2008          	jp	LC013
4753  d312               L5041:
4754                     ; 1229       else if (*pBuffer == 'P') pSocket->nState = STATE_POST_P;
4756  d312 a150          	cp	a,#80
4757  d314 2605          	jrne	L7041
4760  d316 1e0e          	ldw	x,(OFST+7,sp)
4761  d318 a604          	ld	a,#4
4762  d31a               LC013:
4763  d31a f7            	ld	(x),a
4764  d31b               L7041:
4765                     ; 1230       nBytes--;
4767  d31b 1e0c          	ldw	x,(OFST+5,sp)
4768  d31d 5a            	decw	x
4769  d31e 1f0c          	ldw	(OFST+5,sp),x
4770                     ; 1231       pBuffer++;
4772  d320 1e08          	ldw	x,(OFST+1,sp)
4773  d322 5c            	incw	x
4774  d323 1f08          	ldw	(OFST+1,sp),x
4775  d325 1e0e          	ldw	x,(OFST+7,sp)
4776  d327 f6            	ld	a,(x)
4777  d328               L1041:
4778                     ; 1234     if (pSocket->nState == STATE_GET_G) {
4780  d328 a101          	cp	a,#1
4781  d32a 2620          	jrne	L3141
4782                     ; 1235       if (nBytes == 0) return;
4784  d32c 1e0c          	ldw	x,(OFST+5,sp)
4785  d32e 2603          	jrne	L5141
4787  d330               L613:
4790  d330 5b09          	addw	sp,#9
4791  d332 81            	ret	
4792  d333               L5141:
4793                     ; 1236       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
4795  d333 1e08          	ldw	x,(OFST+1,sp)
4796  d335 f6            	ld	a,(x)
4797  d336 a145          	cp	a,#69
4798  d338 2605          	jrne	L7141
4801  d33a 1e0e          	ldw	x,(OFST+7,sp)
4802  d33c a602          	ld	a,#2
4803  d33e f7            	ld	(x),a
4804  d33f               L7141:
4805                     ; 1237       nBytes--;
4807  d33f 1e0c          	ldw	x,(OFST+5,sp)
4808  d341 5a            	decw	x
4809  d342 1f0c          	ldw	(OFST+5,sp),x
4810                     ; 1238       pBuffer++;
4812  d344 1e08          	ldw	x,(OFST+1,sp)
4813  d346 5c            	incw	x
4814  d347 1f08          	ldw	(OFST+1,sp),x
4815  d349 1e0e          	ldw	x,(OFST+7,sp)
4816  d34b f6            	ld	a,(x)
4817  d34c               L3141:
4818                     ; 1241     if (pSocket->nState == STATE_GET_GE) {
4820  d34c a102          	cp	a,#2
4821  d34e 261d          	jrne	L1241
4822                     ; 1242       if (nBytes == 0) return;
4824  d350 1e0c          	ldw	x,(OFST+5,sp)
4825  d352 27dc          	jreq	L613
4828                     ; 1243       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
4830  d354 1e08          	ldw	x,(OFST+1,sp)
4831  d356 f6            	ld	a,(x)
4832  d357 a154          	cp	a,#84
4833  d359 2605          	jrne	L5241
4836  d35b 1e0e          	ldw	x,(OFST+7,sp)
4837  d35d a603          	ld	a,#3
4838  d35f f7            	ld	(x),a
4839  d360               L5241:
4840                     ; 1244       nBytes--;
4842  d360 1e0c          	ldw	x,(OFST+5,sp)
4843  d362 5a            	decw	x
4844  d363 1f0c          	ldw	(OFST+5,sp),x
4845                     ; 1245       pBuffer++;
4847  d365 1e08          	ldw	x,(OFST+1,sp)
4848  d367 5c            	incw	x
4849  d368 1f08          	ldw	(OFST+1,sp),x
4850  d36a 1e0e          	ldw	x,(OFST+7,sp)
4851  d36c f6            	ld	a,(x)
4852  d36d               L1241:
4853                     ; 1248     if (pSocket->nState == STATE_GET_GET) {
4855  d36d a103          	cp	a,#3
4856  d36f 261d          	jrne	L7241
4857                     ; 1249       if (nBytes == 0) return;
4859  d371 1e0c          	ldw	x,(OFST+5,sp)
4860  d373 27bb          	jreq	L613
4863                     ; 1250       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
4865  d375 1e08          	ldw	x,(OFST+1,sp)
4866  d377 f6            	ld	a,(x)
4867  d378 a120          	cp	a,#32
4868  d37a 2605          	jrne	L3341
4871  d37c 1e0e          	ldw	x,(OFST+7,sp)
4872  d37e a608          	ld	a,#8
4873  d380 f7            	ld	(x),a
4874  d381               L3341:
4875                     ; 1251       nBytes--;
4877  d381 1e0c          	ldw	x,(OFST+5,sp)
4878  d383 5a            	decw	x
4879  d384 1f0c          	ldw	(OFST+5,sp),x
4880                     ; 1252       pBuffer++;
4882  d386 1e08          	ldw	x,(OFST+1,sp)
4883  d388 5c            	incw	x
4884  d389 1f08          	ldw	(OFST+1,sp),x
4885  d38b 1e0e          	ldw	x,(OFST+7,sp)
4886  d38d f6            	ld	a,(x)
4887  d38e               L7241:
4888                     ; 1255     if (pSocket->nState == STATE_POST_P) {
4890  d38e a104          	cp	a,#4
4891  d390 261d          	jrne	L5341
4892                     ; 1256       if (nBytes == 0) return;
4894  d392 1e0c          	ldw	x,(OFST+5,sp)
4895  d394 279a          	jreq	L613
4898                     ; 1257       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
4900  d396 1e08          	ldw	x,(OFST+1,sp)
4901  d398 f6            	ld	a,(x)
4902  d399 a14f          	cp	a,#79
4903  d39b 2605          	jrne	L1441
4906  d39d 1e0e          	ldw	x,(OFST+7,sp)
4907  d39f a605          	ld	a,#5
4908  d3a1 f7            	ld	(x),a
4909  d3a2               L1441:
4910                     ; 1258       nBytes--;
4912  d3a2 1e0c          	ldw	x,(OFST+5,sp)
4913  d3a4 5a            	decw	x
4914  d3a5 1f0c          	ldw	(OFST+5,sp),x
4915                     ; 1259       pBuffer++;
4917  d3a7 1e08          	ldw	x,(OFST+1,sp)
4918  d3a9 5c            	incw	x
4919  d3aa 1f08          	ldw	(OFST+1,sp),x
4920  d3ac 1e0e          	ldw	x,(OFST+7,sp)
4921  d3ae f6            	ld	a,(x)
4922  d3af               L5341:
4923                     ; 1262     if (pSocket->nState == STATE_POST_PO) {
4925  d3af a105          	cp	a,#5
4926  d3b1 2620          	jrne	L3441
4927                     ; 1263       if (nBytes == 0) return;
4929  d3b3 1e0c          	ldw	x,(OFST+5,sp)
4930  d3b5 2603ccd330    	jreq	L613
4933                     ; 1264       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
4935  d3ba 1e08          	ldw	x,(OFST+1,sp)
4936  d3bc f6            	ld	a,(x)
4937  d3bd a153          	cp	a,#83
4938  d3bf 2605          	jrne	L7441
4941  d3c1 1e0e          	ldw	x,(OFST+7,sp)
4942  d3c3 a606          	ld	a,#6
4943  d3c5 f7            	ld	(x),a
4944  d3c6               L7441:
4945                     ; 1265       nBytes--;
4947  d3c6 1e0c          	ldw	x,(OFST+5,sp)
4948  d3c8 5a            	decw	x
4949  d3c9 1f0c          	ldw	(OFST+5,sp),x
4950                     ; 1266       pBuffer++;
4952  d3cb 1e08          	ldw	x,(OFST+1,sp)
4953  d3cd 5c            	incw	x
4954  d3ce 1f08          	ldw	(OFST+1,sp),x
4955  d3d0 1e0e          	ldw	x,(OFST+7,sp)
4956  d3d2 f6            	ld	a,(x)
4957  d3d3               L3441:
4958                     ; 1269     if (pSocket->nState == STATE_POST_POS) {
4960  d3d3 a106          	cp	a,#6
4961  d3d5 261d          	jrne	L1541
4962                     ; 1270       if (nBytes == 0) return;
4964  d3d7 1e0c          	ldw	x,(OFST+5,sp)
4965  d3d9 27dc          	jreq	L613
4968                     ; 1271       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
4970  d3db 1e08          	ldw	x,(OFST+1,sp)
4971  d3dd f6            	ld	a,(x)
4972  d3de a154          	cp	a,#84
4973  d3e0 2605          	jrne	L5541
4976  d3e2 1e0e          	ldw	x,(OFST+7,sp)
4977  d3e4 a607          	ld	a,#7
4978  d3e6 f7            	ld	(x),a
4979  d3e7               L5541:
4980                     ; 1272       nBytes--;
4982  d3e7 1e0c          	ldw	x,(OFST+5,sp)
4983  d3e9 5a            	decw	x
4984  d3ea 1f0c          	ldw	(OFST+5,sp),x
4985                     ; 1273       pBuffer++;
4987  d3ec 1e08          	ldw	x,(OFST+1,sp)
4988  d3ee 5c            	incw	x
4989  d3ef 1f08          	ldw	(OFST+1,sp),x
4990  d3f1 1e0e          	ldw	x,(OFST+7,sp)
4991  d3f3 f6            	ld	a,(x)
4992  d3f4               L1541:
4993                     ; 1276     if (pSocket->nState == STATE_POST_POST) {
4995  d3f4 a107          	cp	a,#7
4996  d3f6 261d          	jrne	L7541
4997                     ; 1277       if (nBytes == 0) return;
4999  d3f8 1e0c          	ldw	x,(OFST+5,sp)
5000  d3fa 27bb          	jreq	L613
5003                     ; 1278       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
5005  d3fc 1e08          	ldw	x,(OFST+1,sp)
5006  d3fe f6            	ld	a,(x)
5007  d3ff a120          	cp	a,#32
5008  d401 2605          	jrne	L3641
5011  d403 1e0e          	ldw	x,(OFST+7,sp)
5012  d405 a609          	ld	a,#9
5013  d407 f7            	ld	(x),a
5014  d408               L3641:
5015                     ; 1279       nBytes--;
5017  d408 1e0c          	ldw	x,(OFST+5,sp)
5018  d40a 5a            	decw	x
5019  d40b 1f0c          	ldw	(OFST+5,sp),x
5020                     ; 1280       pBuffer++;
5022  d40d 1e08          	ldw	x,(OFST+1,sp)
5023  d40f 5c            	incw	x
5024  d410 1f08          	ldw	(OFST+1,sp),x
5025  d412 1e0e          	ldw	x,(OFST+7,sp)
5026  d414 f6            	ld	a,(x)
5027  d415               L7541:
5028                     ; 1283     if (pSocket->nState == STATE_GOTPOST) {
5030  d415 a109          	cp	a,#9
5031  d417 264c          	jrne	L5641
5033  d419 2046          	jra	L1741
5034  d41b               L7641:
5035                     ; 1286         if (*pBuffer == '\n') {
5037  d41b 1e08          	ldw	x,(OFST+1,sp)
5038  d41d f6            	ld	a,(x)
5039  d41e a10a          	cp	a,#10
5040  d420 2606          	jrne	L5741
5041                     ; 1287           pSocket->nNewlines++;
5043  d422 1e0e          	ldw	x,(OFST+7,sp)
5044  d424 6c05          	inc	(5,x)
5046  d426 2008          	jra	L7741
5047  d428               L5741:
5048                     ; 1289         else if (*pBuffer == '\r') {
5050  d428 a10d          	cp	a,#13
5051  d42a 2704          	jreq	L7741
5053                     ; 1292           pSocket->nNewlines = 0;
5055  d42c 1e0e          	ldw	x,(OFST+7,sp)
5056  d42e 6f05          	clr	(5,x)
5057  d430               L7741:
5058                     ; 1294         pBuffer++;
5060  d430 1e08          	ldw	x,(OFST+1,sp)
5061  d432 5c            	incw	x
5062  d433 1f08          	ldw	(OFST+1,sp),x
5063                     ; 1295         nBytes--;
5065  d435 1e0c          	ldw	x,(OFST+5,sp)
5066  d437 5a            	decw	x
5067  d438 1f0c          	ldw	(OFST+5,sp),x
5068                     ; 1296         if (pSocket->nNewlines == 2) {
5070  d43a 1e0e          	ldw	x,(OFST+7,sp)
5071  d43c e605          	ld	a,(5,x)
5072  d43e a102          	cp	a,#2
5073  d440 261f          	jrne	L1741
5074                     ; 1298           if (pSocket->nState == STATE_GOTPOST) {
5076  d442 f6            	ld	a,(x)
5077  d443 a109          	cp	a,#9
5078  d445 261e          	jrne	L5641
5079                     ; 1300             if(current_webpage == WEBPAGE_DEFAULT) pSocket->nParseLeft = PARSEBYTES_DEFAULT;
5081  d447 c6001b        	ld	a,_current_webpage
5082  d44a 2607          	jrne	L1151
5085  d44c a67e          	ld	a,#126
5086  d44e e706          	ld	(6,x),a
5087  d450 c6001b        	ld	a,_current_webpage
5088  d453               L1151:
5089                     ; 1301             if(current_webpage == WEBPAGE_ADDRESS) pSocket->nParseLeft = PARSEBYTES_ADDRESS;
5091  d453 4a            	dec	a
5092  d454 2604          	jrne	L3151
5095  d456 a693          	ld	a,#147
5096  d458 e706          	ld	(6,x),a
5097  d45a               L3151:
5098                     ; 1302             pSocket->ParseState = PARSE_CMD;
5100  d45a 6f09          	clr	(9,x)
5101                     ; 1304             pSocket->nState = STATE_PARSEPOST;
5103  d45c a60a          	ld	a,#10
5104  d45e f7            	ld	(x),a
5105  d45f 2004          	jra	L5641
5106  d461               L1741:
5107                     ; 1285       while (nBytes != 0) {
5109  d461 1e0c          	ldw	x,(OFST+5,sp)
5110  d463 26b6          	jrne	L7641
5111  d465               L5641:
5112                     ; 1311     if (pSocket->nState == STATE_GOTGET) {
5114  d465 1e0e          	ldw	x,(OFST+7,sp)
5115  d467 f6            	ld	a,(x)
5116  d468 a108          	cp	a,#8
5117  d46a 2609          	jrne	L5151
5118                     ; 1314       pSocket->nParseLeft = 6; // Small parse number since we should have short
5120  d46c a606          	ld	a,#6
5121  d46e e706          	ld	(6,x),a
5122                     ; 1316       pSocket->ParseState = PARSE_SLASH1;
5124  d470 e709          	ld	(9,x),a
5125                     ; 1318       pSocket->nState = STATE_PARSEGET;
5127  d472 a60d          	ld	a,#13
5128  d474 f7            	ld	(x),a
5129  d475               L5151:
5130                     ; 1321     if (pSocket->nState == STATE_PARSEPOST) {
5132  d475 a10a          	cp	a,#10
5133  d477 2703ccd6e7    	jrne	L7151
5135  d47c ccd6d8        	jra	L3251
5136  d47f               L1251:
5137                     ; 1331         if (pSocket->ParseState == PARSE_CMD) {
5139  d47f 1e0e          	ldw	x,(OFST+7,sp)
5140  d481 e609          	ld	a,(9,x)
5141  d483 263e          	jrne	L7251
5142                     ; 1332           pSocket->ParseCmd = *pBuffer;
5144  d485 1e08          	ldw	x,(OFST+1,sp)
5145  d487 f6            	ld	a,(x)
5146  d488 1e0e          	ldw	x,(OFST+7,sp)
5147  d48a e707          	ld	(7,x),a
5148                     ; 1333           pSocket->ParseState = PARSE_NUM10;
5150  d48c a601          	ld	a,#1
5151  d48e e709          	ld	(9,x),a
5152                     ; 1334 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5154  d490 e606          	ld	a,(6,x)
5155  d492 2704          	jreq	L1351
5158  d494 6a06          	dec	(6,x)
5160  d496 2004          	jra	L3351
5161  d498               L1351:
5162                     ; 1335 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5164  d498 a605          	ld	a,#5
5165  d49a e709          	ld	(9,x),a
5166  d49c               L3351:
5167                     ; 1336           pBuffer++;
5169  d49c 1e08          	ldw	x,(OFST+1,sp)
5170  d49e 5c            	incw	x
5171  d49f 1f08          	ldw	(OFST+1,sp),x
5172                     ; 1338 	  if (pSocket->ParseCmd == 'o' ||
5172                     ; 1339 	      pSocket->ParseCmd == 'a' ||
5172                     ; 1340 	      pSocket->ParseCmd == 'b' ||
5172                     ; 1341 	      pSocket->ParseCmd == 'c' ||
5172                     ; 1342 	      pSocket->ParseCmd == 'd' ||
5172                     ; 1343 	      pSocket->ParseCmd == 'g') { }
5174  d4a1 1e0e          	ldw	x,(OFST+7,sp)
5175  d4a3 e607          	ld	a,(7,x)
5176  d4a5 a16f          	cp	a,#111
5177  d4a7 2603ccd6ca    	jreq	L3551
5179  d4ac a161          	cp	a,#97
5180  d4ae 27f9          	jreq	L3551
5182  d4b0 a162          	cp	a,#98
5183  d4b2 27f5          	jreq	L3551
5185  d4b4 a163          	cp	a,#99
5186  d4b6 27f1          	jreq	L3551
5188  d4b8 a164          	cp	a,#100
5189  d4ba 27ed          	jreq	L3551
5191  d4bc a167          	cp	a,#103
5192  d4be 27e9          	jreq	L3551
5193                     ; 1344 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5194  d4c0 ccd6af        	jp	LC018
5195  d4c3               L7251:
5196                     ; 1346         else if (pSocket->ParseState == PARSE_NUM10) {
5198  d4c3 a101          	cp	a,#1
5199  d4c5 2619          	jrne	L5551
5200                     ; 1347           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5202  d4c7 1e08          	ldw	x,(OFST+1,sp)
5203  d4c9 f6            	ld	a,(x)
5204  d4ca 97            	ld	xl,a
5205  d4cb a60a          	ld	a,#10
5206  d4cd 42            	mul	x,a
5207  d4ce 9f            	ld	a,xl
5208  d4cf 1e0e          	ldw	x,(OFST+7,sp)
5209  d4d1 a0e0          	sub	a,#224
5210  d4d3 e708          	ld	(8,x),a
5211                     ; 1348           pSocket->ParseState = PARSE_NUM1;
5213  d4d5 a602          	ld	a,#2
5214  d4d7 e709          	ld	(9,x),a
5215                     ; 1349 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5217  d4d9 e606          	ld	a,(6,x)
5218  d4db 2719          	jreq	L7651
5221  d4dd ccd6bf        	jp	LC025
5222                     ; 1350 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5223                     ; 1351           pBuffer++;
5225  d4e0               L5551:
5226                     ; 1353         else if (pSocket->ParseState == PARSE_NUM1) {
5228  d4e0 a102          	cp	a,#2
5229  d4e2 2616          	jrne	L5651
5230                     ; 1354           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5232  d4e4 1608          	ldw	y,(OFST+1,sp)
5233  d4e6 90f6          	ld	a,(y)
5234  d4e8 a030          	sub	a,#48
5235  d4ea eb08          	add	a,(8,x)
5236  d4ec e708          	ld	(8,x),a
5237                     ; 1355           pSocket->ParseState = PARSE_EQUAL;
5239  d4ee a603          	ld	a,#3
5240  d4f0 e709          	ld	(9,x),a
5241                     ; 1356 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5243  d4f2 e606          	ld	a,(6,x)
5246  d4f4 26e7          	jrne	LC025
5247  d4f6               L7651:
5248                     ; 1357 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5251  d4f6 a605          	ld	a,#5
5252                     ; 1358           pBuffer++;
5254  d4f8 200d          	jp	LC026
5255  d4fa               L5651:
5256                     ; 1360         else if (pSocket->ParseState == PARSE_EQUAL) {
5258  d4fa a103          	cp	a,#3
5259  d4fc 260e          	jrne	L5751
5260                     ; 1361           pSocket->ParseState = PARSE_VAL;
5262  d4fe a604          	ld	a,#4
5263  d500 e709          	ld	(9,x),a
5264                     ; 1362 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5266  d502 6d06          	tnz	(6,x)
5269  d504 26d7          	jrne	LC025
5270                     ; 1363 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5272  d506 4c            	inc	a
5273  d507               LC026:
5274  d507 e709          	ld	(9,x),a
5275                     ; 1364           pBuffer++;
5277  d509 ccd6c1        	jp	LC017
5278  d50c               L5751:
5279                     ; 1366         else if (pSocket->ParseState == PARSE_VAL) {
5281  d50c a104          	cp	a,#4
5282  d50e 2703ccd6b5    	jrne	L5061
5283                     ; 1374           if (pSocket->ParseCmd == 'o') {
5285  d513 e607          	ld	a,(7,x)
5286  d515 a16f          	cp	a,#111
5287  d517 2625          	jrne	L7061
5288                     ; 1377             if ((uint8_t)(*pBuffer) == '1') GpioSetPin(pSocket->ParseNum, (uint8_t)1);
5290  d519 1e08          	ldw	x,(OFST+1,sp)
5291  d51b f6            	ld	a,(x)
5292  d51c a131          	cp	a,#49
5293  d51e 2609          	jrne	L1161
5296  d520 1e0e          	ldw	x,(OFST+7,sp)
5297  d522 e608          	ld	a,(8,x)
5298  d524 ae0001        	ldw	x,#1
5301  d527 2005          	jra	L3161
5302  d529               L1161:
5303                     ; 1378             else GpioSetPin(pSocket->ParseNum, (uint8_t)0);
5305  d529 1e0e          	ldw	x,(OFST+7,sp)
5306  d52b e608          	ld	a,(8,x)
5307  d52d 5f            	clrw	x
5309  d52e               L3161:
5310  d52e 95            	ld	xh,a
5311  d52f cddb4e        	call	_GpioSetPin
5312                     ; 1379 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5314  d532 1e0e          	ldw	x,(OFST+7,sp)
5315  d534 e606          	ld	a,(6,x)
5316  d536 2603ccd6a8    	jreq	L5661
5318                     ; 1380             pBuffer++;
5320  d53b ccd6a6        	jp	LC024
5321  d53e               L7061:
5322                     ; 1383           else if (pSocket->ParseCmd == 'a') {
5324  d53e a161          	cp	a,#97
5325  d540 2656          	jrne	L1261
5326                     ; 1393             ex_stored_devicename[0] = (uint8_t)(*pBuffer);
5328  d542 1e08          	ldw	x,(OFST+1,sp)
5329  d544 f6            	ld	a,(x)
5330  d545 c70038        	ld	_ex_stored_devicename,a
5331                     ; 1394             pSocket->nParseLeft--;
5333  d548 1e0e          	ldw	x,(OFST+7,sp)
5334  d54a 6a06          	dec	(6,x)
5335                     ; 1395             pBuffer++; // nBytes already decremented for first char
5337  d54c 1e08          	ldw	x,(OFST+1,sp)
5338  d54e 5c            	incw	x
5339  d54f 1f08          	ldw	(OFST+1,sp),x
5340                     ; 1399 	    amp_found = 0;
5342  d551 0f06          	clr	(OFST-1,sp)
5344                     ; 1400 	    for(i=1; i<20; i++) {
5346  d553 a601          	ld	a,#1
5347  d555 6b07          	ld	(OFST+0,sp),a
5349  d557               L3261:
5350                     ; 1401 	      if((uint8_t)(*pBuffer) == 38) amp_found = 1;
5352  d557 1e08          	ldw	x,(OFST+1,sp)
5353  d559 f6            	ld	a,(x)
5354  d55a a126          	cp	a,#38
5355  d55c 2604          	jrne	L1361
5358  d55e a601          	ld	a,#1
5359  d560 6b06          	ld	(OFST-1,sp),a
5361  d562               L1361:
5362                     ; 1402 	      if(amp_found == 0) {
5364  d562 7b06          	ld	a,(OFST-1,sp)
5365  d564 261a          	jrne	L3361
5366                     ; 1404                 ex_stored_devicename[i] = (uint8_t)(*pBuffer);
5368  d566 7b07          	ld	a,(OFST+0,sp)
5369  d568 5f            	clrw	x
5370  d569 1608          	ldw	y,(OFST+1,sp)
5371  d56b 97            	ld	xl,a
5372  d56c 90f6          	ld	a,(y)
5373  d56e d70038        	ld	(_ex_stored_devicename,x),a
5374                     ; 1405                 pSocket->nParseLeft--;
5376  d571 1e0e          	ldw	x,(OFST+7,sp)
5377  d573 6a06          	dec	(6,x)
5378                     ; 1406                 pBuffer++;
5380  d575 93            	ldw	x,y
5381  d576 5c            	incw	x
5382  d577 1f08          	ldw	(OFST+1,sp),x
5383                     ; 1407                 nBytes--; // Must subtract 1 from nBytes for extra byte read
5385  d579 1e0c          	ldw	x,(OFST+5,sp)
5386  d57b 5a            	decw	x
5387  d57c 1f0c          	ldw	(OFST+5,sp),x
5389  d57e 200d          	jra	L5361
5390  d580               L3361:
5391                     ; 1411 	        ex_stored_devicename[i] = ' ';
5393  d580 7b07          	ld	a,(OFST+0,sp)
5394  d582 5f            	clrw	x
5395  d583 97            	ld	xl,a
5396  d584 a620          	ld	a,#32
5397  d586 d70038        	ld	(_ex_stored_devicename,x),a
5398                     ; 1420                 pSocket->nParseLeft--;
5400  d589 1e0e          	ldw	x,(OFST+7,sp)
5401  d58b 6a06          	dec	(6,x)
5402  d58d               L5361:
5403                     ; 1400 	    for(i=1; i<20; i++) {
5405  d58d 0c07          	inc	(OFST+0,sp)
5409  d58f 7b07          	ld	a,(OFST+0,sp)
5410  d591 a114          	cp	a,#20
5411  d593 25c2          	jrult	L3261
5413  d595 ccd6ad        	jra	L7161
5414  d598               L1261:
5415                     ; 1425           else if (pSocket->ParseCmd == 'b') {
5417  d598 a162          	cp	a,#98
5418  d59a 2646          	jrne	L1461
5419                     ; 1432 	    alpha_1 = '-';
5421                     ; 1433 	    alpha_2 = '-';
5423                     ; 1434 	    alpha_3 = '-';
5425                     ; 1436             alpha_1 = (uint8_t)(*pBuffer);
5427  d59c 1e08          	ldw	x,(OFST+1,sp)
5428  d59e f6            	ld	a,(x)
5429  d59f 6b07          	ld	(OFST+0,sp),a
5431                     ; 1437             pSocket->nParseLeft--;
5433  d5a1 1e0e          	ldw	x,(OFST+7,sp)
5434  d5a3 6a06          	dec	(6,x)
5435                     ; 1438             pBuffer++; // nBytes already decremented for first char
5437  d5a5 1e08          	ldw	x,(OFST+1,sp)
5438  d5a7 5c            	incw	x
5439  d5a8 1f08          	ldw	(OFST+1,sp),x
5440                     ; 1440 	    alpha_2 = (uint8_t)(*pBuffer);
5442  d5aa f6            	ld	a,(x)
5443  d5ab 6b05          	ld	(OFST-2,sp),a
5445                     ; 1441             pSocket->nParseLeft--;
5447  d5ad 1e0e          	ldw	x,(OFST+7,sp)
5448  d5af 6a06          	dec	(6,x)
5449                     ; 1442             pBuffer++;
5451  d5b1 1e08          	ldw	x,(OFST+1,sp)
5452  d5b3 5c            	incw	x
5453  d5b4 1f08          	ldw	(OFST+1,sp),x
5454                     ; 1443 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5456  d5b6 1e0c          	ldw	x,(OFST+5,sp)
5457  d5b8 5a            	decw	x
5458  d5b9 1f0c          	ldw	(OFST+5,sp),x
5459                     ; 1445 	    alpha_3 = (uint8_t)(*pBuffer);
5461  d5bb 1e08          	ldw	x,(OFST+1,sp)
5462  d5bd f6            	ld	a,(x)
5463  d5be 6b06          	ld	(OFST-1,sp),a
5465                     ; 1446             pSocket->nParseLeft--;
5467  d5c0 1e0e          	ldw	x,(OFST+7,sp)
5468  d5c2 6a06          	dec	(6,x)
5469                     ; 1447             pBuffer++;
5471  d5c4 1e08          	ldw	x,(OFST+1,sp)
5472  d5c6 5c            	incw	x
5473  d5c7 1f08          	ldw	(OFST+1,sp),x
5474                     ; 1448 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5476  d5c9 1e0c          	ldw	x,(OFST+5,sp)
5477  d5cb 5a            	decw	x
5478  d5cc 1f0c          	ldw	(OFST+5,sp),x
5479                     ; 1450 	    SetAddresses(pSocket->ParseNum, (uint8_t)alpha_1, (uint8_t)alpha_2, (uint8_t)alpha_3);
5481  d5ce 88            	push	a
5482  d5cf 7b06          	ld	a,(OFST-1,sp)
5483  d5d1 88            	push	a
5484  d5d2 7b09          	ld	a,(OFST+2,sp)
5485  d5d4 1610          	ldw	y,(OFST+9,sp)
5486  d5d6 97            	ld	xl,a
5487  d5d7 90e608        	ld	a,(8,y)
5488  d5da 95            	ld	xh,a
5489  d5db cddc7a        	call	_SetAddresses
5491  d5de 85            	popw	x
5493  d5df ccd6ad        	jra	L7161
5494  d5e2               L1461:
5495                     ; 1453           else if (pSocket->ParseCmd == 'c') {
5497  d5e2 a163          	cp	a,#99
5498  d5e4 2672          	jrne	L5461
5499                     ; 1459 	    alpha_1 = '-';
5501                     ; 1460 	    alpha_2 = '-';
5503                     ; 1461 	    alpha_3 = '-';
5505                     ; 1462 	    alpha_4 = '-';
5507                     ; 1463 	    alpha_5 = '-';
5509                     ; 1466   	    alpha_1 = (uint8_t)(*pBuffer);
5511  d5e6 1e08          	ldw	x,(OFST+1,sp)
5512  d5e8 f6            	ld	a,(x)
5513  d5e9 6b07          	ld	(OFST+0,sp),a
5515                     ; 1467             pSocket->nParseLeft--;
5517  d5eb 1e0e          	ldw	x,(OFST+7,sp)
5518  d5ed 6a06          	dec	(6,x)
5519                     ; 1468             pBuffer++; // nBytes already decremented for first char
5521  d5ef 1e08          	ldw	x,(OFST+1,sp)
5522  d5f1 5c            	incw	x
5523  d5f2 1f08          	ldw	(OFST+1,sp),x
5524                     ; 1470 	    alpha_2 = (uint8_t)(*pBuffer);
5526  d5f4 f6            	ld	a,(x)
5527  d5f5 6b05          	ld	(OFST-2,sp),a
5529                     ; 1471             pSocket->nParseLeft--;
5531  d5f7 1e0e          	ldw	x,(OFST+7,sp)
5532  d5f9 6a06          	dec	(6,x)
5533                     ; 1472             pBuffer++;
5535  d5fb 1e08          	ldw	x,(OFST+1,sp)
5536  d5fd 5c            	incw	x
5537  d5fe 1f08          	ldw	(OFST+1,sp),x
5538                     ; 1473 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5540  d600 1e0c          	ldw	x,(OFST+5,sp)
5541  d602 5a            	decw	x
5542  d603 1f0c          	ldw	(OFST+5,sp),x
5543                     ; 1475 	    alpha_3 = (uint8_t)(*pBuffer);
5545  d605 1e08          	ldw	x,(OFST+1,sp)
5546  d607 f6            	ld	a,(x)
5547  d608 6b06          	ld	(OFST-1,sp),a
5549                     ; 1476             pSocket->nParseLeft--;
5551  d60a 1e0e          	ldw	x,(OFST+7,sp)
5552  d60c 6a06          	dec	(6,x)
5553                     ; 1477             pBuffer++;
5555  d60e 1e08          	ldw	x,(OFST+1,sp)
5556  d610 5c            	incw	x
5557  d611 1f08          	ldw	(OFST+1,sp),x
5558                     ; 1478 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5560  d613 1e0c          	ldw	x,(OFST+5,sp)
5561  d615 5a            	decw	x
5562  d616 1f0c          	ldw	(OFST+5,sp),x
5563                     ; 1480 	    alpha_4 = (uint8_t)(*pBuffer);
5565  d618 1e08          	ldw	x,(OFST+1,sp)
5566  d61a f6            	ld	a,(x)
5567  d61b 6b03          	ld	(OFST-4,sp),a
5569                     ; 1481             pSocket->nParseLeft--;
5571  d61d 1e0e          	ldw	x,(OFST+7,sp)
5572  d61f 6a06          	dec	(6,x)
5573                     ; 1482             pBuffer++;
5575  d621 1e08          	ldw	x,(OFST+1,sp)
5576  d623 5c            	incw	x
5577  d624 1f08          	ldw	(OFST+1,sp),x
5578                     ; 1483 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5580  d626 1e0c          	ldw	x,(OFST+5,sp)
5581  d628 5a            	decw	x
5582  d629 1f0c          	ldw	(OFST+5,sp),x
5583                     ; 1485             alpha_5 = (uint8_t)(*pBuffer);
5585  d62b 1e08          	ldw	x,(OFST+1,sp)
5586  d62d f6            	ld	a,(x)
5587  d62e 6b04          	ld	(OFST-3,sp),a
5589                     ; 1486             pSocket->nParseLeft--;
5591  d630 1e0e          	ldw	x,(OFST+7,sp)
5592  d632 6a06          	dec	(6,x)
5593                     ; 1487             pBuffer++;
5595  d634 1e08          	ldw	x,(OFST+1,sp)
5596  d636 5c            	incw	x
5597  d637 1f08          	ldw	(OFST+1,sp),x
5598                     ; 1488 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5600  d639 1e0c          	ldw	x,(OFST+5,sp)
5601  d63b 5a            	decw	x
5602  d63c 1f0c          	ldw	(OFST+5,sp),x
5603                     ; 1490 	    SetPort(pSocket->ParseNum,
5603                     ; 1491 	            (uint8_t)alpha_1,
5603                     ; 1492 		    (uint8_t)alpha_2,
5603                     ; 1493 		    (uint8_t)alpha_3,
5603                     ; 1494 		    (uint8_t)alpha_4,
5603                     ; 1495 		    (uint8_t)alpha_5);
5605  d63e 88            	push	a
5606  d63f 7b04          	ld	a,(OFST-3,sp)
5607  d641 88            	push	a
5608  d642 7b08          	ld	a,(OFST+1,sp)
5609  d644 88            	push	a
5610  d645 7b08          	ld	a,(OFST+1,sp)
5611  d647 88            	push	a
5612  d648 7b0b          	ld	a,(OFST+4,sp)
5613  d64a 1612          	ldw	y,(OFST+11,sp)
5614  d64c 97            	ld	xl,a
5615  d64d 90e608        	ld	a,(8,y)
5616  d650 95            	ld	xh,a
5617  d651 cddd04        	call	_SetPort
5619  d654 5b04          	addw	sp,#4
5621  d656 2055          	jra	L7161
5622  d658               L5461:
5623                     ; 1498           else if (pSocket->ParseCmd == 'd') {
5625  d658 a164          	cp	a,#100
5626  d65a 262f          	jrne	L1561
5627                     ; 1504 	    alpha_1 = (uint8_t)(*pBuffer);
5629  d65c 1e08          	ldw	x,(OFST+1,sp)
5630  d65e f6            	ld	a,(x)
5631  d65f 6b07          	ld	(OFST+0,sp),a
5633                     ; 1505             pSocket->nParseLeft--;
5635  d661 1e0e          	ldw	x,(OFST+7,sp)
5636  d663 6a06          	dec	(6,x)
5637                     ; 1506             pBuffer++; // nBytes already decremented for first char
5639  d665 1e08          	ldw	x,(OFST+1,sp)
5640  d667 5c            	incw	x
5641  d668 1f08          	ldw	(OFST+1,sp),x
5642                     ; 1508 	    alpha_2 = (uint8_t)(*pBuffer);
5644  d66a f6            	ld	a,(x)
5645  d66b 6b05          	ld	(OFST-2,sp),a
5647                     ; 1509             pSocket->nParseLeft--;
5649  d66d 1e0e          	ldw	x,(OFST+7,sp)
5650  d66f 6a06          	dec	(6,x)
5651                     ; 1510             pBuffer++;
5653  d671 1e08          	ldw	x,(OFST+1,sp)
5654  d673 5c            	incw	x
5655  d674 1f08          	ldw	(OFST+1,sp),x
5656                     ; 1511 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5658  d676 1e0c          	ldw	x,(OFST+5,sp)
5659  d678 5a            	decw	x
5660  d679 1f0c          	ldw	(OFST+5,sp),x
5661                     ; 1513 	    SetMAC(pSocket->ParseNum, alpha_1, alpha_2);
5663  d67b 88            	push	a
5664  d67c 7b08          	ld	a,(OFST+1,sp)
5665  d67e 160f          	ldw	y,(OFST+8,sp)
5666  d680 97            	ld	xl,a
5667  d681 90e608        	ld	a,(8,y)
5668  d684 95            	ld	xh,a
5669  d685 cddd3f        	call	_SetMAC
5671  d688 84            	pop	a
5673  d689 2022          	jra	L7161
5674  d68b               L1561:
5675                     ; 1516 	  else if (pSocket->ParseCmd == 'g') {
5677  d68b a167          	cp	a,#103
5678  d68d 261e          	jrne	L7161
5679                     ; 1519             if ((uint8_t)(*pBuffer) == '1') invert_output = 1;
5681  d68f 1e08          	ldw	x,(OFST+1,sp)
5682  d691 f6            	ld	a,(x)
5683  d692 a131          	cp	a,#49
5684  d694 2606          	jrne	L7561
5687  d696 3501005e      	mov	_invert_output,#1
5689  d69a 2004          	jra	L1661
5690  d69c               L7561:
5691                     ; 1520             else invert_output = 0;
5693  d69c 725f005e      	clr	_invert_output
5694  d6a0               L1661:
5695                     ; 1521 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--;
5697  d6a0 1e0e          	ldw	x,(OFST+7,sp)
5698  d6a2 e606          	ld	a,(6,x)
5699  d6a4 2702          	jreq	L5661
5702  d6a6               LC024:
5704  d6a6 6a06          	dec	(6,x)
5706  d6a8               L5661:
5707                     ; 1523             pBuffer++;
5710  d6a8 1e08          	ldw	x,(OFST+1,sp)
5711  d6aa 5c            	incw	x
5712  d6ab 1f08          	ldw	(OFST+1,sp),x
5713  d6ad               L7161:
5714                     ; 1526           pSocket->ParseState = PARSE_DELIM;
5716  d6ad 1e0e          	ldw	x,(OFST+7,sp)
5717  d6af               LC018:
5719  d6af a605          	ld	a,#5
5720  d6b1 e709          	ld	(9,x),a
5722  d6b3 2015          	jra	L3551
5723  d6b5               L5061:
5724                     ; 1529         else if (pSocket->ParseState == PARSE_DELIM) {
5726  d6b5 a105          	cp	a,#5
5727  d6b7 2611          	jrne	L3551
5728                     ; 1530           if(pSocket->nParseLeft > 0) {
5730  d6b9 e606          	ld	a,(6,x)
5731  d6bb 270b          	jreq	L3761
5732                     ; 1531             pSocket->ParseState = PARSE_CMD;
5734  d6bd 6f09          	clr	(9,x)
5735                     ; 1532             pSocket->nParseLeft--;
5737  d6bf               LC025:
5741  d6bf 6a06          	dec	(6,x)
5742                     ; 1533             pBuffer++;
5744  d6c1               LC017:
5748  d6c1 1e08          	ldw	x,(OFST+1,sp)
5749  d6c3 5c            	incw	x
5750  d6c4 1f08          	ldw	(OFST+1,sp),x
5752  d6c6 2002          	jra	L3551
5753  d6c8               L3761:
5754                     ; 1536             pSocket->nParseLeft = 0; // Something out of sync - end the parsing
5756  d6c8 e706          	ld	(6,x),a
5757  d6ca               L3551:
5758                     ; 1540         if (pSocket->nParseLeft == 0) {
5760  d6ca 1e0e          	ldw	x,(OFST+7,sp)
5761  d6cc e606          	ld	a,(6,x)
5762  d6ce 2608          	jrne	L3251
5763                     ; 1542           pSocket->nState = STATE_SENDHEADER;
5765  d6d0 a60b          	ld	a,#11
5766  d6d2 f7            	ld	(x),a
5767                     ; 1543           break;
5768  d6d3               L5251:
5769                     ; 1547       pSocket->nState = STATE_SENDHEADER;
5771  d6d3 1e0e          	ldw	x,(OFST+7,sp)
5772  d6d5 f7            	ld	(x),a
5773  d6d6 200f          	jra	L7151
5774  d6d8               L3251:
5775                     ; 1330       while (nBytes--) {
5777  d6d8 1e0c          	ldw	x,(OFST+5,sp)
5778  d6da 5a            	decw	x
5779  d6db 1f0c          	ldw	(OFST+5,sp),x
5780  d6dd 5c            	incw	x
5781  d6de 2703ccd47f    	jrne	L1251
5782  d6e3 a60b          	ld	a,#11
5783  d6e5 20ec          	jra	L5251
5784  d6e7               L7151:
5785                     ; 1550     if (pSocket->nState == STATE_PARSEGET) {
5787  d6e7 a10d          	cp	a,#13
5788  d6e9 2703ccd99a    	jrne	L1071
5790  d6ee ccd98f        	jra	L5071
5791  d6f1               L3071:
5792                     ; 1564         if (pSocket->ParseState == PARSE_SLASH1) {
5794  d6f1 1e0e          	ldw	x,(OFST+7,sp)
5795  d6f3 e609          	ld	a,(9,x)
5796  d6f5 a106          	cp	a,#6
5797  d6f7 263e          	jrne	L1171
5798                     ; 1567           pSocket->ParseCmd = *pBuffer;
5800  d6f9 1e08          	ldw	x,(OFST+1,sp)
5801  d6fb f6            	ld	a,(x)
5802  d6fc 1e0e          	ldw	x,(OFST+7,sp)
5803  d6fe e707          	ld	(7,x),a
5804                     ; 1568           pSocket->nParseLeft--;
5806  d700 6a06          	dec	(6,x)
5807                     ; 1569           pBuffer++;
5809  d702 1e08          	ldw	x,(OFST+1,sp)
5810  d704 5c            	incw	x
5811  d705 1f08          	ldw	(OFST+1,sp),x
5812                     ; 1570 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
5814  d707 1e0e          	ldw	x,(OFST+7,sp)
5815  d709 e607          	ld	a,(7,x)
5816  d70b a12f          	cp	a,#47
5817  d70d 2604          	jrne	L3171
5818                     ; 1571 	    pSocket->ParseState = PARSE_NUM10;
5820  d70f a601          	ld	a,#1
5821  d711 e709          	ld	(9,x),a
5822  d713               L3171:
5823                     ; 1573 	  if (pSocket->nParseLeft == 0) {
5825  d713 e606          	ld	a,(6,x)
5826  d715 2703ccd96d    	jrne	L7171
5827                     ; 1575 	    current_webpage = WEBPAGE_DEFAULT;
5829  d71a c7001b        	ld	_current_webpage,a
5830                     ; 1576             pSocket->pData = g_HtmlPageDefault;
5832  d71d 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5833  d721 ef01          	ldw	(1,x),y
5834                     ; 1577             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5836  d723 90ae1876      	ldw	y,#6262
5837  d727 ef03          	ldw	(3,x),y
5838                     ; 1578             pSocket->nNewlines = 0;
5840  d729 e705          	ld	(5,x),a
5841                     ; 1579             pSocket->nState = STATE_SENDHEADER;
5843  d72b a60b          	ld	a,#11
5844  d72d f7            	ld	(x),a
5845                     ; 1580             pSocket->nPrevBytes = 0xFFFF;
5847  d72e 90aeffff      	ldw	y,#65535
5848  d732 ef0a          	ldw	(10,x),y
5849                     ; 1581             break;
5851  d734 ccd99a        	jra	L1071
5852  d737               L1171:
5853                     ; 1584         else if (pSocket->ParseState == PARSE_NUM10) {
5855  d737 a101          	cp	a,#1
5856  d739 264e          	jrne	L1271
5857                     ; 1589 	  if(*pBuffer == ' ') {
5859  d73b 1e08          	ldw	x,(OFST+1,sp)
5860  d73d f6            	ld	a,(x)
5861  d73e a120          	cp	a,#32
5862  d740 2620          	jrne	L3271
5863                     ; 1590 	    current_webpage = WEBPAGE_DEFAULT;
5865  d742 725f001b      	clr	_current_webpage
5866                     ; 1591             pSocket->pData = g_HtmlPageDefault;
5868  d746 1e0e          	ldw	x,(OFST+7,sp)
5869  d748 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5870  d74c ef01          	ldw	(1,x),y
5871                     ; 1592             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5873  d74e 90ae1876      	ldw	y,#6262
5874  d752 ef03          	ldw	(3,x),y
5875                     ; 1593             pSocket->nNewlines = 0;
5877  d754 6f05          	clr	(5,x)
5878                     ; 1594             pSocket->nState = STATE_SENDHEADER;
5880  d756 a60b          	ld	a,#11
5881  d758 f7            	ld	(x),a
5882                     ; 1595             pSocket->nPrevBytes = 0xFFFF;
5884  d759 90aeffff      	ldw	y,#65535
5885  d75d ef0a          	ldw	(10,x),y
5886                     ; 1596 	    break;
5888  d75f ccd99a        	jra	L1071
5889  d762               L3271:
5890                     ; 1599 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5892  d762 a130          	cp	a,#48
5893  d764 2504          	jrult	L5271
5895  d766 a13a          	cp	a,#58
5896  d768 2506          	jrult	L7271
5898  d76a               L5271:
5899                     ; 1600 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5901  d76a 1e0e          	ldw	x,(OFST+7,sp)
5902  d76c a605          	ld	a,#5
5903  d76e e709          	ld	(9,x),a
5904  d770               L7271:
5905                     ; 1601           if (pSocket->ParseState == PARSE_NUM10) {      // Still good - parse number
5907  d770 1e0e          	ldw	x,(OFST+7,sp)
5908  d772 e609          	ld	a,(9,x)
5909  d774 4a            	dec	a
5910  d775 26a0          	jrne	L7171
5911                     ; 1602             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5913  d777 1e08          	ldw	x,(OFST+1,sp)
5914  d779 f6            	ld	a,(x)
5915  d77a 97            	ld	xl,a
5916  d77b a60a          	ld	a,#10
5917  d77d 42            	mul	x,a
5918  d77e 9f            	ld	a,xl
5919  d77f 1e0e          	ldw	x,(OFST+7,sp)
5920  d781 a0e0          	sub	a,#224
5921  d783 e708          	ld	(8,x),a
5922                     ; 1603 	    pSocket->ParseState = PARSE_NUM1;
5924  d785 a602          	ld	a,#2
5925                     ; 1604             pSocket->nParseLeft--;
5926                     ; 1605             pBuffer++;
5927  d787 202c          	jp	LC022
5928  d789               L1271:
5929                     ; 1609         else if (pSocket->ParseState == PARSE_NUM1) {
5931  d789 a102          	cp	a,#2
5932  d78b 2634          	jrne	L5371
5933                     ; 1610 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5935  d78d 1e08          	ldw	x,(OFST+1,sp)
5936  d78f f6            	ld	a,(x)
5937  d790 a130          	cp	a,#48
5938  d792 2504          	jrult	L7371
5940  d794 a13a          	cp	a,#58
5941  d796 2506          	jrult	L1471
5943  d798               L7371:
5944                     ; 1611 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5946  d798 1e0e          	ldw	x,(OFST+7,sp)
5947  d79a a605          	ld	a,#5
5948  d79c e709          	ld	(9,x),a
5949  d79e               L1471:
5950                     ; 1612           if (pSocket->ParseState == PARSE_NUM1) {       // Still good - parse number
5952  d79e 1e0e          	ldw	x,(OFST+7,sp)
5953  d7a0 e609          	ld	a,(9,x)
5954  d7a2 a102          	cp	a,#2
5955  d7a4 2703ccd96d    	jrne	L7171
5956                     ; 1613             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5958  d7a9 1608          	ldw	y,(OFST+1,sp)
5959  d7ab 90f6          	ld	a,(y)
5960  d7ad a030          	sub	a,#48
5961  d7af eb08          	add	a,(8,x)
5962  d7b1 e708          	ld	(8,x),a
5963                     ; 1614             pSocket->ParseState = PARSE_VAL;
5965  d7b3 a604          	ld	a,#4
5966                     ; 1615             pSocket->nParseLeft--;
5968                     ; 1616             pBuffer++;
5970  d7b5               LC022:
5971  d7b5 e709          	ld	(9,x),a
5973  d7b7 6a06          	dec	(6,x)
5975  d7b9 1e08          	ldw	x,(OFST+1,sp)
5976  d7bb 5c            	incw	x
5977  d7bc 1f08          	ldw	(OFST+1,sp),x
5978  d7be ccd96d        	jra	L7171
5979  d7c1               L5371:
5980                     ; 1619         else if (pSocket->ParseState == PARSE_VAL) {
5982  d7c1 a104          	cp	a,#4
5983  d7c3 2703ccd975    	jrne	L7471
5984                     ; 1670           switch(pSocket->ParseNum)
5986  d7c8 e608          	ld	a,(8,x)
5988                     ; 1794 	      break;
5989  d7ca a143          	cp	a,#67
5990  d7cc 2407          	jruge	L272
5991  d7ce 5f            	clrw	x
5992  d7cf 97            	ld	xl,a
5993  d7d0 58            	sllw	x
5994  d7d1 dec1f2        	ldw	x,(L472,x)
5995  d7d4 fc            	jp	(x)
5996  d7d5               L272:
5997  d7d5 a05b          	sub	a,#91
5998  d7d7 2603ccd931    	jreq	L7321
5999  d7dc a008          	sub	a,#8
6000  d7de 2603ccd937    	jreq	L1421
6001  d7e3 ccd94c        	jra	L3421
6002  d7e6               L7111:
6003                     ; 1672 	    case 0:  Relays_8to1 &= (uint8_t)(~0x01);  break; // Relay-01 OFF
6005  d7e6 7211005f      	bres	_Relays_8to1,#0
6008  d7ea ccd967        	jra	L3571
6009  d7ed               L1211:
6010                     ; 1673 	    case 1:  Relays_8to1 |= (uint8_t)0x01;     break; // Relay-01 ON
6012  d7ed 7210005f      	bset	_Relays_8to1,#0
6015  d7f1 ccd967        	jra	L3571
6016  d7f4               L3211:
6017                     ; 1674 	    case 2:  Relays_8to1 &= (uint8_t)(~0x02);  break; // Relay-02 OFF
6019  d7f4 7213005f      	bres	_Relays_8to1,#1
6022  d7f8 ccd967        	jra	L3571
6023  d7fb               L5211:
6024                     ; 1675 	    case 3:  Relays_8to1 |= (uint8_t)0x02;     break; // Relay-02 ON
6026  d7fb 7212005f      	bset	_Relays_8to1,#1
6029  d7ff ccd967        	jra	L3571
6030  d802               L7211:
6031                     ; 1676 	    case 4:  Relays_8to1 &= (uint8_t)(~0x04);  break; // Relay-03 OFF
6033  d802 7215005f      	bres	_Relays_8to1,#2
6036  d806 ccd967        	jra	L3571
6037  d809               L1311:
6038                     ; 1677 	    case 5:  Relays_8to1 |= (uint8_t)0x04;     break; // Relay-03 ON
6040  d809 7214005f      	bset	_Relays_8to1,#2
6043  d80d ccd967        	jra	L3571
6044  d810               L3311:
6045                     ; 1678 	    case 6:  Relays_8to1 &= (uint8_t)(~0x08);  break; // Relay-04 OFF
6047  d810 7217005f      	bres	_Relays_8to1,#3
6050  d814 ccd967        	jra	L3571
6051  d817               L5311:
6052                     ; 1679 	    case 7:  Relays_8to1 |= (uint8_t)0x08;     break; // Relay-04 ON
6054  d817 7216005f      	bset	_Relays_8to1,#3
6057  d81b ccd967        	jra	L3571
6058  d81e               L7311:
6059                     ; 1680 	    case 8:  Relays_8to1 &= (uint8_t)(~0x10);  break; // Relay-05 OFF
6061  d81e 7219005f      	bres	_Relays_8to1,#4
6064  d822 ccd967        	jra	L3571
6065  d825               L1411:
6066                     ; 1681 	    case 9:  Relays_8to1 |= (uint8_t)0x10;     break; // Relay-05 ON
6068  d825 7218005f      	bset	_Relays_8to1,#4
6071  d829 ccd967        	jra	L3571
6072  d82c               L3411:
6073                     ; 1682 	    case 10: Relays_8to1 &= (uint8_t)(~0x20);  break; // Relay-06 OFF
6075  d82c 721b005f      	bres	_Relays_8to1,#5
6078  d830 ccd967        	jra	L3571
6079  d833               L5411:
6080                     ; 1683 	    case 11: Relays_8to1 |= (uint8_t)0x20;     break; // Relay-06 ON
6082  d833 721a005f      	bset	_Relays_8to1,#5
6085  d837 ccd967        	jra	L3571
6086  d83a               L7411:
6087                     ; 1684 	    case 12: Relays_8to1 &= (uint8_t)(~0x40);  break; // Relay-07 OFF
6089  d83a 721d005f      	bres	_Relays_8to1,#6
6092  d83e ccd967        	jra	L3571
6093  d841               L1511:
6094                     ; 1685 	    case 13: Relays_8to1 |= (uint8_t)0x40;     break; // Relay-07 ON
6096  d841 721c005f      	bset	_Relays_8to1,#6
6099  d845 ccd967        	jra	L3571
6100  d848               L3511:
6101                     ; 1686 	    case 14: Relays_8to1 &= (uint8_t)(~0x80);  break; // Relay-08 OFF
6103  d848 721f005f      	bres	_Relays_8to1,#7
6106  d84c ccd967        	jra	L3571
6107  d84f               L5511:
6108                     ; 1687 	    case 15: Relays_8to1 |= (uint8_t)0x80;     break; // Relay-08 ON
6110  d84f 721e005f      	bset	_Relays_8to1,#7
6113  d853 ccd967        	jra	L3571
6114  d856               L7511:
6115                     ; 1688 	    case 16: Relays_16to9 &= (uint8_t)(~0x01); break; // Relay-09 OFF
6117  d856 72110060      	bres	_Relays_16to9,#0
6120  d85a ccd967        	jra	L3571
6121  d85d               L1611:
6122                     ; 1689 	    case 17: Relays_16to9 |= (uint8_t)0x01;    break; // Relay-09 ON
6124  d85d 72100060      	bset	_Relays_16to9,#0
6127  d861 ccd967        	jra	L3571
6128  d864               L3611:
6129                     ; 1690 	    case 18: Relays_16to9 &= (uint8_t)(~0x02); break; // Relay-10 OFF
6131  d864 72130060      	bres	_Relays_16to9,#1
6134  d868 ccd967        	jra	L3571
6135  d86b               L5611:
6136                     ; 1691 	    case 19: Relays_16to9 |= (uint8_t)0x02;    break; // Relay-10 ON
6138  d86b 72120060      	bset	_Relays_16to9,#1
6141  d86f ccd967        	jra	L3571
6142  d872               L7611:
6143                     ; 1692 	    case 20: Relays_16to9 &= (uint8_t)(~0x04); break; // Relay-11 OFF
6145  d872 72150060      	bres	_Relays_16to9,#2
6148  d876 ccd967        	jra	L3571
6149  d879               L1711:
6150                     ; 1693 	    case 21: Relays_16to9 |= (uint8_t)0x04;    break; // Relay-11 ON
6152  d879 72140060      	bset	_Relays_16to9,#2
6155  d87d ccd967        	jra	L3571
6156  d880               L3711:
6157                     ; 1694 	    case 22: Relays_16to9 &= (uint8_t)(~0x08); break; // Relay-12 OFF
6159  d880 72170060      	bres	_Relays_16to9,#3
6162  d884 ccd967        	jra	L3571
6163  d887               L5711:
6164                     ; 1695 	    case 23: Relays_16to9 |= (uint8_t)0x08;    break; // Relay-12 ON
6166  d887 72160060      	bset	_Relays_16to9,#3
6169  d88b ccd967        	jra	L3571
6170  d88e               L7711:
6171                     ; 1696 	    case 24: Relays_16to9 &= (uint8_t)(~0x10); break; // Relay-13 OFF
6173  d88e 72190060      	bres	_Relays_16to9,#4
6176  d892 ccd967        	jra	L3571
6177  d895               L1021:
6178                     ; 1697 	    case 25: Relays_16to9 |= (uint8_t)0x10;    break; // Relay-13 ON
6180  d895 72180060      	bset	_Relays_16to9,#4
6183  d899 ccd967        	jra	L3571
6184  d89c               L3021:
6185                     ; 1698 	    case 26: Relays_16to9 &= (uint8_t)(~0x20); break; // Relay-14 OFF
6187  d89c 721b0060      	bres	_Relays_16to9,#5
6190  d8a0 ccd967        	jra	L3571
6191  d8a3               L5021:
6192                     ; 1699 	    case 27: Relays_16to9 |= (uint8_t)0x20;    break; // Relay-14 ON
6194  d8a3 721a0060      	bset	_Relays_16to9,#5
6197  d8a7 ccd967        	jra	L3571
6198  d8aa               L7021:
6199                     ; 1700 	    case 28: Relays_16to9 &= (uint8_t)(~0x40); break; // Relay-15 OFF
6201  d8aa 721d0060      	bres	_Relays_16to9,#6
6204  d8ae ccd967        	jra	L3571
6205  d8b1               L1121:
6206                     ; 1701 	    case 29: Relays_16to9 |= (uint8_t)0x40;    break; // Relay-15 ON
6208  d8b1 721c0060      	bset	_Relays_16to9,#6
6211  d8b5 ccd967        	jra	L3571
6212  d8b8               L3121:
6213                     ; 1702 	    case 30: Relays_16to9 &= (uint8_t)(~0x80); break; // Relay-16 OFF
6215  d8b8 721f0060      	bres	_Relays_16to9,#7
6218  d8bc ccd967        	jra	L3571
6219  d8bf               L5121:
6220                     ; 1703 	    case 31: Relays_16to9 |= (uint8_t)0x80;    break; // Relay-16 ON
6222  d8bf 721e0060      	bset	_Relays_16to9,#7
6225  d8c3 ccd967        	jra	L3571
6226  d8c6               L7121:
6227                     ; 1704 	    case 55:
6227                     ; 1705   	      Relays_8to1 = (uint8_t)0xff; // Relays 1-8 ON
6229  d8c6 35ff005f      	mov	_Relays_8to1,#255
6230                     ; 1706   	      Relays_16to9 = (uint8_t)0xff; // Relays 9-16 ON
6232  d8ca 35ff0060      	mov	_Relays_16to9,#255
6233                     ; 1707 	      break;
6235  d8ce ccd967        	jra	L3571
6236  d8d1               L1221:
6237                     ; 1708 	    case 56:
6237                     ; 1709               Relays_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
6239  d8d1 725f005f      	clr	_Relays_8to1
6240                     ; 1710               Relays_16to9 = (uint8_t)0x00; // Relays 9-16 OFF
6242  d8d5 725f0060      	clr	_Relays_16to9
6243                     ; 1711 	      break;
6245  d8d9 ccd967        	jra	L3571
6246  d8dc               L3221:
6247                     ; 1713 	    case 60: // Show relay states page
6247                     ; 1714 	      current_webpage = WEBPAGE_DEFAULT;
6248                     ; 1715               pSocket->pData = g_HtmlPageDefault;
6249                     ; 1716               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
6250                     ; 1717               pSocket->nNewlines = 0;
6251                     ; 1718               pSocket->nState = STATE_CONNECTED;
6252                     ; 1719               pSocket->nPrevBytes = 0xFFFF;
6253                     ; 1720 	      break;
6255  d8dc 206e          	jp	L3421
6256  d8de               L5221:
6257                     ; 1722 	    case 61: // Show address settings page
6257                     ; 1723 	      current_webpage = WEBPAGE_ADDRESS;
6259  d8de 3501001b      	mov	_current_webpage,#1
6260                     ; 1724               pSocket->pData = g_HtmlPageAddress;
6262  d8e2 1e0e          	ldw	x,(OFST+7,sp)
6263  d8e4 90ae98ff      	ldw	y,#L71_g_HtmlPageAddress
6264  d8e8 ef01          	ldw	(1,x),y
6265                     ; 1725               pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
6267  d8ea 90ae133a      	ldw	y,#4922
6268                     ; 1726               pSocket->nNewlines = 0;
6269                     ; 1727               pSocket->nState = STATE_CONNECTED;
6270                     ; 1728               pSocket->nPrevBytes = 0xFFFF;
6271                     ; 1729 	      break;
6273  d8ee 206c          	jp	LC020
6274  d8f0               L7221:
6275                     ; 1732 	    case 63: // Show help page 1
6275                     ; 1733 	      current_webpage = WEBPAGE_HELP;
6277  d8f0 3503001b      	mov	_current_webpage,#3
6278                     ; 1734               pSocket->pData = g_HtmlPageHelp;
6280  d8f4 1e0e          	ldw	x,(OFST+7,sp)
6281  d8f6 90aeac3a      	ldw	y,#L12_g_HtmlPageHelp
6282  d8fa ef01          	ldw	(1,x),y
6283                     ; 1735               pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
6285  d8fc 90ae0753      	ldw	y,#1875
6286                     ; 1736               pSocket->nNewlines = 0;
6287                     ; 1737               pSocket->nState = STATE_CONNECTED;
6288                     ; 1738               pSocket->nPrevBytes = 0xFFFF;
6289                     ; 1739 	      break;
6291  d900 205a          	jp	LC020
6292  d902               L1321:
6293                     ; 1741 	    case 64: // Show help page 2
6293                     ; 1742 	      current_webpage = WEBPAGE_HELP2;
6295  d902 3504001b      	mov	_current_webpage,#4
6296                     ; 1743               pSocket->pData = g_HtmlPageHelp2;
6298  d906 1e0e          	ldw	x,(OFST+7,sp)
6299  d908 90aeb38e      	ldw	y,#L32_g_HtmlPageHelp2
6300  d90c ef01          	ldw	(1,x),y
6301                     ; 1744               pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
6303  d90e 90ae02b4      	ldw	y,#692
6304                     ; 1745               pSocket->nNewlines = 0;
6305                     ; 1746               pSocket->nState = STATE_CONNECTED;
6306                     ; 1747               pSocket->nPrevBytes = 0xFFFF;
6307                     ; 1748 	      break;
6309  d912 2048          	jp	LC020
6310  d914               L3321:
6311                     ; 1751 	    case 65: // Flash LED for diagnostics
6311                     ; 1752 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6311                     ; 1753 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6311                     ; 1754 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6311                     ; 1755 	      debugflash();
6313  d914 cde7c2        	call	_debugflash
6315                     ; 1756 	      debugflash();
6317  d917 cde7c2        	call	_debugflash
6319                     ; 1757 	      debugflash();
6321  d91a cde7c2        	call	_debugflash
6323                     ; 1761 	      break;
6325  d91d 2048          	jra	L3571
6326  d91f               L5321:
6327                     ; 1764             case 66: // Show statistics page
6327                     ; 1765 	      current_webpage = WEBPAGE_STATS;
6329  d91f 3505001b      	mov	_current_webpage,#5
6330                     ; 1766               pSocket->pData = g_HtmlPageStats;
6332  d923 1e0e          	ldw	x,(OFST+7,sp)
6333  d925 90aeb643      	ldw	y,#L52_g_HtmlPageStats
6334  d929 ef01          	ldw	(1,x),y
6335                     ; 1767               pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
6337  d92b 90ae0ae5      	ldw	y,#2789
6338                     ; 1768               pSocket->nNewlines = 0;
6339                     ; 1769               pSocket->nState = STATE_CONNECTED;
6340                     ; 1770               pSocket->nPrevBytes = 0xFFFF;
6341                     ; 1771 	      break;
6343  d92f 202b          	jp	LC020
6344  d931               L7321:
6345                     ; 1774 	    case 91: // Reboot
6345                     ; 1775 	      submit_changes = 2;
6347  d931 3502001d      	mov	_submit_changes,#2
6348                     ; 1776 	      break;
6350  d935 2030          	jra	L3571
6351  d937               L1421:
6352                     ; 1778             case 99: // Show simplified relay state page
6352                     ; 1779 	      current_webpage = WEBPAGE_RSTATE;
6354  d937 3506001b      	mov	_current_webpage,#6
6355                     ; 1780               pSocket->pData = g_HtmlPageRstate;
6357  d93b 90aec129      	ldw	y,#L72_g_HtmlPageRstate
6358  d93f ef01          	ldw	(1,x),y
6359                     ; 1781               pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
6361  d941 90ae0084      	ldw	y,#132
6362  d945 ef03          	ldw	(3,x),y
6363                     ; 1782               pSocket->nNewlines = 0;
6365  d947 e705          	ld	(5,x),a
6366                     ; 1783               pSocket->nState = STATE_CONNECTED;
6368  d949 f7            	ld	(x),a
6369                     ; 1784               pSocket->nPrevBytes = 0xFFFF;
6370                     ; 1785 	      break;
6372  d94a 2015          	jp	LC019
6373  d94c               L3421:
6374                     ; 1787 	    default: // Show relay state page
6374                     ; 1788 	      current_webpage = WEBPAGE_DEFAULT;
6376                     ; 1789               pSocket->pData = g_HtmlPageDefault;
6378                     ; 1790               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
6381  d94c 725f001b      	clr	_current_webpage
6383  d950 1e0e          	ldw	x,(OFST+7,sp)
6384  d952 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
6385  d956 ef01          	ldw	(1,x),y
6387  d958 90ae1876      	ldw	y,#6262
6388                     ; 1791               pSocket->nNewlines = 0;
6390                     ; 1792               pSocket->nState = STATE_CONNECTED;
6392  d95c               LC020:
6393  d95c ef03          	ldw	(3,x),y
6399  d95e 6f05          	clr	(5,x)
6405  d960 7f            	clr	(x)
6406                     ; 1793               pSocket->nPrevBytes = 0xFFFF;
6408  d961               LC019:
6415  d961 90aeffff      	ldw	y,#65535
6416  d965 ef0a          	ldw	(10,x),y
6417                     ; 1794 	      break;
6419  d967               L3571:
6420                     ; 1796           pSocket->ParseState = PARSE_DELIM;
6422  d967 1e0e          	ldw	x,(OFST+7,sp)
6423  d969 a605          	ld	a,#5
6424  d96b e709          	ld	(9,x),a
6426  d96d               L7171:
6427                     ; 1810         if (pSocket->nParseLeft == 0) {
6429  d96d 1e0e          	ldw	x,(OFST+7,sp)
6430  d96f e606          	ld	a,(6,x)
6431  d971 261c          	jrne	L5071
6432                     ; 1812           pSocket->nState = STATE_SENDHEADER;
6433                     ; 1813           break;
6435  d973 2015          	jp	LC023
6436  d975               L7471:
6437                     ; 1799         else if (pSocket->ParseState == PARSE_DELIM) {
6439  d975 a105          	cp	a,#5
6440  d977 26f4          	jrne	L7171
6441                     ; 1801           pSocket->ParseState = PARSE_DELIM;
6443  d979 a605          	ld	a,#5
6444  d97b e709          	ld	(9,x),a
6445                     ; 1802           pSocket->nParseLeft--;
6447  d97d 6a06          	dec	(6,x)
6448                     ; 1803           pBuffer++;
6450  d97f 1e08          	ldw	x,(OFST+1,sp)
6451  d981 5c            	incw	x
6452  d982 1f08          	ldw	(OFST+1,sp),x
6453                     ; 1804 	  if (pSocket->nParseLeft == 0) {
6455  d984 1e0e          	ldw	x,(OFST+7,sp)
6456  d986 e606          	ld	a,(6,x)
6457  d988 26e3          	jrne	L7171
6458                     ; 1806             pSocket->nState = STATE_SENDHEADER;
6460  d98a               LC023:
6462  d98a a60b          	ld	a,#11
6463  d98c f7            	ld	(x),a
6464                     ; 1807             break;
6466  d98d 200b          	jra	L1071
6467  d98f               L5071:
6468                     ; 1563       while (nBytes--) {
6470  d98f 1e0c          	ldw	x,(OFST+5,sp)
6471  d991 5a            	decw	x
6472  d992 1f0c          	ldw	(OFST+5,sp),x
6473  d994 5c            	incw	x
6474  d995 2703ccd6f1    	jrne	L3071
6475  d99a               L1071:
6476                     ; 1818     if (pSocket->nState == STATE_SENDHEADER) {
6478  d99a 1e0e          	ldw	x,(OFST+7,sp)
6479  d99c f6            	ld	a,(x)
6480  d99d a10b          	cp	a,#11
6481  d99f 2623          	jrne	L5671
6482                     ; 1819       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
6484  d9a1 ee03          	ldw	x,(3,x)
6485  d9a3 cdfb22        	call	c_uitolx
6487  d9a6 be02          	ldw	x,c_lreg+2
6488  d9a8 89            	pushw	x
6489  d9a9 be00          	ldw	x,c_lreg
6490  d9ab 89            	pushw	x
6491  d9ac ce01d9        	ldw	x,_uip_appdata
6492  d9af cdc98a        	call	L7_CopyHttpHeader
6494  d9b2 5b04          	addw	sp,#4
6495  d9b4 89            	pushw	x
6496  d9b5 ce01d9        	ldw	x,_uip_appdata
6497  d9b8 cdf4ff        	call	_uip_send
6499  d9bb 85            	popw	x
6500                     ; 1820       pSocket->nState = STATE_SENDDATA;
6502  d9bc 1e0e          	ldw	x,(OFST+7,sp)
6503  d9be a60c          	ld	a,#12
6504  d9c0 f7            	ld	(x),a
6505                     ; 1821       return;
6507  d9c1 ccd330        	jra	L613
6508  d9c4               L5671:
6509                     ; 1824     if (pSocket->nState == STATE_SENDDATA) {
6511  d9c4 a10c          	cp	a,#12
6512  d9c6 26f9          	jrne	L613
6513                     ; 1828       pSocket->nPrevBytes = pSocket->nDataLeft;
6515  d9c8 9093          	ldw	y,x
6516  d9ca 90ee03        	ldw	y,(3,y)
6517  d9cd ef0a          	ldw	(10,x),y
6518                     ; 1829       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6520  d9cf ce01d5        	ldw	x,_uip_conn
6521  d9d2 ee12          	ldw	x,(18,x)
6522  d9d4 89            	pushw	x
6523  d9d5 1e10          	ldw	x,(OFST+9,sp)
6524  d9d7 1c0003        	addw	x,#3
6525  d9da 89            	pushw	x
6526  d9db 1e12          	ldw	x,(OFST+11,sp)
6527  d9dd 5c            	incw	x
6528  d9de 89            	pushw	x
6529  d9df ce01d9        	ldw	x,_uip_appdata
6530  d9e2 cdca22        	call	L11_CopyHttpData
6532  d9e5 5b06          	addw	sp,#6
6533  d9e7 1f01          	ldw	(OFST-6,sp),x
6535                     ; 1830       pSocket->nPrevBytes -= pSocket->nDataLeft;
6537  d9e9 1e0e          	ldw	x,(OFST+7,sp)
6538  d9eb e60b          	ld	a,(11,x)
6539  d9ed e004          	sub	a,(4,x)
6540  d9ef e70b          	ld	(11,x),a
6541  d9f1 e60a          	ld	a,(10,x)
6542  d9f3 e203          	sbc	a,(3,x)
6543  d9f5 e70a          	ld	(10,x),a
6544                     ; 1832       if (nBufSize == 0) {
6546  d9f7 1e01          	ldw	x,(OFST-6,sp)
6547  d9f9 262d          	jrne	LC014
6548                     ; 1834         uip_close();
6550  d9fb               LC015:
6552  d9fb 35100088      	mov	_uip_flags,#16
6554  d9ff ccd330        	jra	L613
6555                     ; 1838         uip_send(uip_appdata, nBufSize);
6557                     ; 1840       return;
6559  da02               L5731:
6560                     ; 1844   else if (uip_rexmit()) {
6562  da02 7204008803cc  	btjf	_uip_flags,#2,L3731
6563                     ; 1845     if (pSocket->nPrevBytes == 0xFFFF) {
6565  da0a 160e          	ldw	y,(OFST+7,sp)
6566  da0c 90ee0a        	ldw	y,(10,y)
6567  da0f 905c          	incw	y
6568  da11 2620          	jrne	L1002
6569                     ; 1847       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
6571  da13 1e0e          	ldw	x,(OFST+7,sp)
6572  da15 ee03          	ldw	x,(3,x)
6573  da17 cdfb22        	call	c_uitolx
6575  da1a be02          	ldw	x,c_lreg+2
6576  da1c 89            	pushw	x
6577  da1d be00          	ldw	x,c_lreg
6578  da1f 89            	pushw	x
6579  da20 ce01d9        	ldw	x,_uip_appdata
6580  da23 cdc98a        	call	L7_CopyHttpHeader
6582  da26 5b04          	addw	sp,#4
6584  da28               LC014:
6586  da28 89            	pushw	x
6587  da29 ce01d9        	ldw	x,_uip_appdata
6588  da2c cdf4ff        	call	_uip_send
6589  da2f 85            	popw	x
6591  da30 ccd330        	jra	L613
6592  da33               L1002:
6593                     ; 1850       pSocket->pData -= pSocket->nPrevBytes;
6595  da33 1e0e          	ldw	x,(OFST+7,sp)
6596  da35 e602          	ld	a,(2,x)
6597  da37 e00b          	sub	a,(11,x)
6598  da39 e702          	ld	(2,x),a
6599  da3b e601          	ld	a,(1,x)
6600  da3d e20a          	sbc	a,(10,x)
6601  da3f e701          	ld	(1,x),a
6602                     ; 1851       pSocket->nDataLeft += pSocket->nPrevBytes;
6604  da41 e604          	ld	a,(4,x)
6605  da43 eb0b          	add	a,(11,x)
6606  da45 e704          	ld	(4,x),a
6607  da47 e603          	ld	a,(3,x)
6608  da49 e90a          	adc	a,(10,x)
6609                     ; 1852       pSocket->nPrevBytes = pSocket->nDataLeft;
6611  da4b 9093          	ldw	y,x
6612  da4d e703          	ld	(3,x),a
6613  da4f 90ee03        	ldw	y,(3,y)
6614  da52 ef0a          	ldw	(10,x),y
6615                     ; 1853       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6617  da54 ce01d5        	ldw	x,_uip_conn
6618  da57 ee12          	ldw	x,(18,x)
6619  da59 89            	pushw	x
6620  da5a 1e10          	ldw	x,(OFST+9,sp)
6621  da5c 1c0003        	addw	x,#3
6622  da5f 89            	pushw	x
6623  da60 1e12          	ldw	x,(OFST+11,sp)
6624  da62 5c            	incw	x
6625  da63 89            	pushw	x
6626  da64 ce01d9        	ldw	x,_uip_appdata
6627  da67 cdca22        	call	L11_CopyHttpData
6629  da6a 5b06          	addw	sp,#6
6630  da6c 1f01          	ldw	(OFST-6,sp),x
6632                     ; 1854       pSocket->nPrevBytes -= pSocket->nDataLeft;
6634  da6e 1e0e          	ldw	x,(OFST+7,sp)
6635  da70 e60b          	ld	a,(11,x)
6636  da72 e004          	sub	a,(4,x)
6637  da74 e70b          	ld	(11,x),a
6638  da76 e60a          	ld	a,(10,x)
6639  da78 e203          	sbc	a,(3,x)
6640  da7a e70a          	ld	(10,x),a
6641                     ; 1855       if (nBufSize == 0) {
6643  da7c 1e01          	ldw	x,(OFST-6,sp)
6644                     ; 1857         uip_close();
6646  da7e 2603ccd9fb    	jreq	LC015
6647                     ; 1861         uip_send(uip_appdata, nBufSize);
6649  da83 89            	pushw	x
6650  da84 ce01d9        	ldw	x,_uip_appdata
6651  da87 cdf4ff        	call	_uip_send
6653  da8a 85            	popw	x
6654                     ; 1864     return;
6656  da8b               L3731:
6657                     ; 1866 }
6659  da8b ccd330        	jra	L613
6693                     ; 1869 uint8_t GpioGetPin(uint8_t nGpio)
6693                     ; 1870 {
6694                     	switch	.text
6695  da8e               _GpioGetPin:
6697       00000000      OFST:	set	0
6700                     ; 1872   if(nGpio == 0       && (Relays_8to1  & (uint8_t)(0x01))) return 1; // Relay-01 is ON
6702  da8e 4d            	tnz	a
6703  da8f 2607          	jrne	L5202
6705  da91 7201005f02    	btjf	_Relays_8to1,#0,L5202
6708  da96 4c            	inc	a
6711  da97 81            	ret	
6712  da98               L5202:
6713                     ; 1873   else if(nGpio == 1  && (Relays_8to1  & (uint8_t)(0x02))) return 1; // Relay-02 is ON
6715  da98 a101          	cp	a,#1
6716  da9a 2608          	jrne	L1302
6718  da9c 7203005f03    	btjf	_Relays_8to1,#1,L1302
6721  daa1 a601          	ld	a,#1
6724  daa3 81            	ret	
6725  daa4               L1302:
6726                     ; 1874   else if(nGpio == 2  && (Relays_8to1  & (uint8_t)(0x04))) return 1; // Relay-03 is ON
6728  daa4 a102          	cp	a,#2
6729  daa6 2608          	jrne	L5302
6731  daa8 7205005f03    	btjf	_Relays_8to1,#2,L5302
6734  daad a601          	ld	a,#1
6737  daaf 81            	ret	
6738  dab0               L5302:
6739                     ; 1875   else if(nGpio == 3  && (Relays_8to1  & (uint8_t)(0x08))) return 1; // Relay-04 is ON
6741  dab0 a103          	cp	a,#3
6742  dab2 2608          	jrne	L1402
6744  dab4 7207005f03    	btjf	_Relays_8to1,#3,L1402
6747  dab9 a601          	ld	a,#1
6750  dabb 81            	ret	
6751  dabc               L1402:
6752                     ; 1876   else if(nGpio == 4  && (Relays_8to1  & (uint8_t)(0x10))) return 1; // Relay-05 is ON
6754  dabc a104          	cp	a,#4
6755  dabe 2608          	jrne	L5402
6757  dac0 7209005f03    	btjf	_Relays_8to1,#4,L5402
6760  dac5 a601          	ld	a,#1
6763  dac7 81            	ret	
6764  dac8               L5402:
6765                     ; 1877   else if(nGpio == 5  && (Relays_8to1  & (uint8_t)(0x20))) return 1; // Relay-06 is ON
6767  dac8 a105          	cp	a,#5
6768  daca 2608          	jrne	L1502
6770  dacc 720b005f03    	btjf	_Relays_8to1,#5,L1502
6773  dad1 a601          	ld	a,#1
6776  dad3 81            	ret	
6777  dad4               L1502:
6778                     ; 1878   else if(nGpio == 6  && (Relays_8to1  & (uint8_t)(0x40))) return 1; // Relay-07 is ON
6780  dad4 a106          	cp	a,#6
6781  dad6 2608          	jrne	L5502
6783  dad8 720d005f03    	btjf	_Relays_8to1,#6,L5502
6786  dadd a601          	ld	a,#1
6789  dadf 81            	ret	
6790  dae0               L5502:
6791                     ; 1879   else if(nGpio == 7  && (Relays_8to1  & (uint8_t)(0x80))) return 1; // Relay-08 is ON
6793  dae0 a107          	cp	a,#7
6794  dae2 2608          	jrne	L1602
6796  dae4 720f005f03    	btjf	_Relays_8to1,#7,L1602
6799  dae9 a601          	ld	a,#1
6802  daeb 81            	ret	
6803  daec               L1602:
6804                     ; 1880   else if(nGpio == 8  && (Relays_16to9 & (uint8_t)(0x01))) return 1; // Relay-09 is ON
6806  daec a108          	cp	a,#8
6807  daee 2608          	jrne	L5602
6809  daf0 7201006003    	btjf	_Relays_16to9,#0,L5602
6812  daf5 a601          	ld	a,#1
6815  daf7 81            	ret	
6816  daf8               L5602:
6817                     ; 1881   else if(nGpio == 9  && (Relays_16to9 & (uint8_t)(0x02))) return 1; // Relay-10 is ON
6819  daf8 a109          	cp	a,#9
6820  dafa 2608          	jrne	L1702
6822  dafc 7203006003    	btjf	_Relays_16to9,#1,L1702
6825  db01 a601          	ld	a,#1
6828  db03 81            	ret	
6829  db04               L1702:
6830                     ; 1882   else if(nGpio == 10 && (Relays_16to9 & (uint8_t)(0x04))) return 1; // Relay-11 is ON
6832  db04 a10a          	cp	a,#10
6833  db06 2608          	jrne	L5702
6835  db08 7205006003    	btjf	_Relays_16to9,#2,L5702
6838  db0d a601          	ld	a,#1
6841  db0f 81            	ret	
6842  db10               L5702:
6843                     ; 1883   else if(nGpio == 11 && (Relays_16to9 & (uint8_t)(0x08))) return 1; // Relay-12 is ON
6845  db10 a10b          	cp	a,#11
6846  db12 2608          	jrne	L1012
6848  db14 7207006003    	btjf	_Relays_16to9,#3,L1012
6851  db19 a601          	ld	a,#1
6854  db1b 81            	ret	
6855  db1c               L1012:
6856                     ; 1884   else if(nGpio == 12 && (Relays_16to9 & (uint8_t)(0x10))) return 1; // Relay-13 is ON
6858  db1c a10c          	cp	a,#12
6859  db1e 2608          	jrne	L5012
6861  db20 7209006003    	btjf	_Relays_16to9,#4,L5012
6864  db25 a601          	ld	a,#1
6867  db27 81            	ret	
6868  db28               L5012:
6869                     ; 1885   else if(nGpio == 13 && (Relays_16to9 & (uint8_t)(0x20))) return 1; // Relay-14 is ON
6871  db28 a10d          	cp	a,#13
6872  db2a 2608          	jrne	L1112
6874  db2c 720b006003    	btjf	_Relays_16to9,#5,L1112
6877  db31 a601          	ld	a,#1
6880  db33 81            	ret	
6881  db34               L1112:
6882                     ; 1886   else if(nGpio == 14 && (Relays_16to9 & (uint8_t)(0x40))) return 1; // Relay-15 is ON
6884  db34 a10e          	cp	a,#14
6885  db36 2608          	jrne	L5112
6887  db38 720d006003    	btjf	_Relays_16to9,#6,L5112
6890  db3d a601          	ld	a,#1
6893  db3f 81            	ret	
6894  db40               L5112:
6895                     ; 1887   else if(nGpio == 15 && (Relays_16to9 & (uint8_t)(0x80))) return 1; // Relay-16 is ON
6897  db40 a10f          	cp	a,#15
6898  db42 2608          	jrne	L7202
6900  db44 720f006003    	btjf	_Relays_16to9,#7,L7202
6903  db49 a601          	ld	a,#1
6906  db4b 81            	ret	
6907  db4c               L7202:
6908                     ; 1888   return 0;
6910  db4c 4f            	clr	a
6913  db4d 81            	ret	
6954                     	switch	.const
6955  c278               L623:
6956  c278 db6b          	dc.w	L3212
6957  c27a db7d          	dc.w	L5212
6958  c27c db8f          	dc.w	L7212
6959  c27e dba1          	dc.w	L1312
6960  c280 dbb3          	dc.w	L3312
6961  c282 dbc5          	dc.w	L5312
6962  c284 dbd7          	dc.w	L7312
6963  c286 dbe9          	dc.w	L1412
6964  c288 dbfa          	dc.w	L3412
6965  c28a dc0a          	dc.w	L5412
6966  c28c dc1a          	dc.w	L7412
6967  c28e dc2a          	dc.w	L1512
6968  c290 dc3a          	dc.w	L3512
6969  c292 dc4a          	dc.w	L5512
6970  c294 dc5a          	dc.w	L7512
6971  c296 dc6a          	dc.w	L1612
6972                     ; 1892 void GpioSetPin(uint8_t nGpio, uint8_t nState)
6972                     ; 1893 {
6973                     	switch	.text
6974  db4e               _GpioSetPin:
6976  db4e 89            	pushw	x
6977       00000000      OFST:	set	0
6980                     ; 1897   if(nState != 0 && nState != 1) nState = 1;
6982  db4f 9f            	ld	a,xl
6983  db50 4d            	tnz	a
6984  db51 2708          	jreq	L3022
6986  db53 9f            	ld	a,xl
6987  db54 4a            	dec	a
6988  db55 2704          	jreq	L3022
6991  db57 a601          	ld	a,#1
6992  db59 6b02          	ld	(OFST+2,sp),a
6993  db5b               L3022:
6994                     ; 1899   switch(nGpio)
6996  db5b 7b01          	ld	a,(OFST+1,sp)
6998                     ; 1965   default: break;
6999  db5d a110          	cp	a,#16
7000  db5f 2503ccdc78    	jruge	L7022
7001  db64 5f            	clrw	x
7002  db65 97            	ld	xl,a
7003  db66 58            	sllw	x
7004  db67 dec278        	ldw	x,(L623,x)
7005  db6a fc            	jp	(x)
7006  db6b               L3212:
7007                     ; 1901   case 0:
7007                     ; 1902     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x01); // Relay-01 OFF
7009  db6b 7b02          	ld	a,(OFST+2,sp)
7010  db6d 2607          	jrne	L1122
7013  db6f 7211005f      	bres	_Relays_8to1,#0
7015  db73 ccdc78        	jra	L7022
7016  db76               L1122:
7017                     ; 1903     else Relays_8to1 |= (uint8_t)0x01; // Relay-01 ON
7019  db76 7210005f      	bset	_Relays_8to1,#0
7020  db7a ccdc78        	jra	L7022
7021  db7d               L5212:
7022                     ; 1905   case 1:
7022                     ; 1906     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x02); // Relay-02 OFF
7024  db7d 7b02          	ld	a,(OFST+2,sp)
7025  db7f 2607          	jrne	L5122
7028  db81 7213005f      	bres	_Relays_8to1,#1
7030  db85 ccdc78        	jra	L7022
7031  db88               L5122:
7032                     ; 1907     else Relays_8to1 |= (uint8_t)0x02; // Relay-02 ON
7034  db88 7212005f      	bset	_Relays_8to1,#1
7035  db8c ccdc78        	jra	L7022
7036  db8f               L7212:
7037                     ; 1909   case 2:
7037                     ; 1910     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x04); // Relay-03 OFF
7039  db8f 7b02          	ld	a,(OFST+2,sp)
7040  db91 2607          	jrne	L1222
7043  db93 7215005f      	bres	_Relays_8to1,#2
7045  db97 ccdc78        	jra	L7022
7046  db9a               L1222:
7047                     ; 1911     else Relays_8to1 |= (uint8_t)0x04; // Relay-03 ON
7049  db9a 7214005f      	bset	_Relays_8to1,#2
7050  db9e ccdc78        	jra	L7022
7051  dba1               L1312:
7052                     ; 1913   case 3:
7052                     ; 1914     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x08); // Relay-04 OFF
7054  dba1 7b02          	ld	a,(OFST+2,sp)
7055  dba3 2607          	jrne	L5222
7058  dba5 7217005f      	bres	_Relays_8to1,#3
7060  dba9 ccdc78        	jra	L7022
7061  dbac               L5222:
7062                     ; 1915     else Relays_8to1 |= (uint8_t)0x08; // Relay-04 ON
7064  dbac 7216005f      	bset	_Relays_8to1,#3
7065  dbb0 ccdc78        	jra	L7022
7066  dbb3               L3312:
7067                     ; 1917   case 4:
7067                     ; 1918     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x10); // Relay-05 OFF
7069  dbb3 7b02          	ld	a,(OFST+2,sp)
7070  dbb5 2607          	jrne	L1322
7073  dbb7 7219005f      	bres	_Relays_8to1,#4
7075  dbbb ccdc78        	jra	L7022
7076  dbbe               L1322:
7077                     ; 1919     else Relays_8to1 |= (uint8_t)0x10; // Relay-05 ON
7079  dbbe 7218005f      	bset	_Relays_8to1,#4
7080  dbc2 ccdc78        	jra	L7022
7081  dbc5               L5312:
7082                     ; 1921   case 5:
7082                     ; 1922     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x20); // Relay-06 OFF
7084  dbc5 7b02          	ld	a,(OFST+2,sp)
7085  dbc7 2607          	jrne	L5322
7088  dbc9 721b005f      	bres	_Relays_8to1,#5
7090  dbcd ccdc78        	jra	L7022
7091  dbd0               L5322:
7092                     ; 1923     else Relays_8to1 |= (uint8_t)0x20; // Relay-06 ON
7094  dbd0 721a005f      	bset	_Relays_8to1,#5
7095  dbd4 ccdc78        	jra	L7022
7096  dbd7               L7312:
7097                     ; 1925   case 6:
7097                     ; 1926     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x40); // Relay-07 OFF
7099  dbd7 7b02          	ld	a,(OFST+2,sp)
7100  dbd9 2607          	jrne	L1422
7103  dbdb 721d005f      	bres	_Relays_8to1,#6
7105  dbdf ccdc78        	jra	L7022
7106  dbe2               L1422:
7107                     ; 1927     else Relays_8to1 |= (uint8_t)0x40; // Relay-07 ON
7109  dbe2 721c005f      	bset	_Relays_8to1,#6
7110  dbe6 ccdc78        	jra	L7022
7111  dbe9               L1412:
7112                     ; 1929   case 7:
7112                     ; 1930     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x80); // Relay-08 OFF
7114  dbe9 7b02          	ld	a,(OFST+2,sp)
7115  dbeb 2607          	jrne	L5422
7118  dbed 721f005f      	bres	_Relays_8to1,#7
7120  dbf1 ccdc78        	jra	L7022
7121  dbf4               L5422:
7122                     ; 1931     else Relays_8to1 |= (uint8_t)0x80; // Relay-08 ON
7124  dbf4 721e005f      	bset	_Relays_8to1,#7
7125  dbf8 207e          	jra	L7022
7126  dbfa               L3412:
7127                     ; 1933   case 8:
7127                     ; 1934     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x01); // Relay-09 OFF
7129  dbfa 7b02          	ld	a,(OFST+2,sp)
7130  dbfc 2606          	jrne	L1522
7133  dbfe 72110060      	bres	_Relays_16to9,#0
7135  dc02 2074          	jra	L7022
7136  dc04               L1522:
7137                     ; 1935     else Relays_16to9 |= (uint8_t)0x01; // Relay-09 ON
7139  dc04 72100060      	bset	_Relays_16to9,#0
7140  dc08 206e          	jra	L7022
7141  dc0a               L5412:
7142                     ; 1937   case 9:
7142                     ; 1938     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x02); // Relay-10 OFF
7144  dc0a 7b02          	ld	a,(OFST+2,sp)
7145  dc0c 2606          	jrne	L5522
7148  dc0e 72130060      	bres	_Relays_16to9,#1
7150  dc12 2064          	jra	L7022
7151  dc14               L5522:
7152                     ; 1939     else Relays_16to9 |= (uint8_t)0x02; // Relay-10 ON
7154  dc14 72120060      	bset	_Relays_16to9,#1
7155  dc18 205e          	jra	L7022
7156  dc1a               L7412:
7157                     ; 1941   case 10:
7157                     ; 1942     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x04); // Relay-11 OFF
7159  dc1a 7b02          	ld	a,(OFST+2,sp)
7160  dc1c 2606          	jrne	L1622
7163  dc1e 72150060      	bres	_Relays_16to9,#2
7165  dc22 2054          	jra	L7022
7166  dc24               L1622:
7167                     ; 1943     else Relays_16to9 |= (uint8_t)0x04; // Relay-11 ON
7169  dc24 72140060      	bset	_Relays_16to9,#2
7170  dc28 204e          	jra	L7022
7171  dc2a               L1512:
7172                     ; 1945   case 11:
7172                     ; 1946     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x08); // Relay-12 OFF
7174  dc2a 7b02          	ld	a,(OFST+2,sp)
7175  dc2c 2606          	jrne	L5622
7178  dc2e 72170060      	bres	_Relays_16to9,#3
7180  dc32 2044          	jra	L7022
7181  dc34               L5622:
7182                     ; 1947     else Relays_16to9 |= (uint8_t)0x08; // Relay-12 ON
7184  dc34 72160060      	bset	_Relays_16to9,#3
7185  dc38 203e          	jra	L7022
7186  dc3a               L3512:
7187                     ; 1949   case 12:
7187                     ; 1950     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x10); // Relay-13 OFF
7189  dc3a 7b02          	ld	a,(OFST+2,sp)
7190  dc3c 2606          	jrne	L1722
7193  dc3e 72190060      	bres	_Relays_16to9,#4
7195  dc42 2034          	jra	L7022
7196  dc44               L1722:
7197                     ; 1951     else Relays_16to9 |= (uint8_t)0x10; // Relay-13 ON
7199  dc44 72180060      	bset	_Relays_16to9,#4
7200  dc48 202e          	jra	L7022
7201  dc4a               L5512:
7202                     ; 1953   case 13:
7202                     ; 1954     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x20); // Relay-14 OFF
7204  dc4a 7b02          	ld	a,(OFST+2,sp)
7205  dc4c 2606          	jrne	L5722
7208  dc4e 721b0060      	bres	_Relays_16to9,#5
7210  dc52 2024          	jra	L7022
7211  dc54               L5722:
7212                     ; 1955     else Relays_16to9 |= (uint8_t)0x20; // Relay-14 ON
7214  dc54 721a0060      	bset	_Relays_16to9,#5
7215  dc58 201e          	jra	L7022
7216  dc5a               L7512:
7217                     ; 1957   case 14:
7217                     ; 1958     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x40); // Relay-15 OFF
7219  dc5a 7b02          	ld	a,(OFST+2,sp)
7220  dc5c 2606          	jrne	L1032
7223  dc5e 721d0060      	bres	_Relays_16to9,#6
7225  dc62 2014          	jra	L7022
7226  dc64               L1032:
7227                     ; 1959     else Relays_16to9 |= (uint8_t)0x40; // Relay-15 ON
7229  dc64 721c0060      	bset	_Relays_16to9,#6
7230  dc68 200e          	jra	L7022
7231  dc6a               L1612:
7232                     ; 1961   case 15:
7232                     ; 1962     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x80); // Relay-16 OFF
7234  dc6a 7b02          	ld	a,(OFST+2,sp)
7235  dc6c 2606          	jrne	L5032
7238  dc6e 721f0060      	bres	_Relays_16to9,#7
7240  dc72 2004          	jra	L7022
7241  dc74               L5032:
7242                     ; 1963     else Relays_16to9 |= (uint8_t)0x80; // Relay-16 ON
7244  dc74 721e0060      	bset	_Relays_16to9,#7
7245                     ; 1965   default: break;
7247  dc78               L7022:
7248                     ; 1967 }
7251  dc78 85            	popw	x
7252  dc79 81            	ret	
7342                     	switch	.const
7343  c298               L633:
7344  c298 dcaf          	dc.w	L1132
7345  c29a dcb6          	dc.w	L3132
7346  c29c dcbd          	dc.w	L5132
7347  c29e dcc4          	dc.w	L7132
7348  c2a0 dccb          	dc.w	L1232
7349  c2a2 dcd2          	dc.w	L3232
7350  c2a4 dcd9          	dc.w	L5232
7351  c2a6 dce0          	dc.w	L7232
7352  c2a8 dce7          	dc.w	L1332
7353  c2aa dcee          	dc.w	L3332
7354  c2ac dcf5          	dc.w	L5332
7355  c2ae dcfc          	dc.w	L7332
7356                     ; 1970 void SetAddresses(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
7356                     ; 1971 {
7357                     	switch	.text
7358  dc7a               _SetAddresses:
7360  dc7a 89            	pushw	x
7361  dc7b 5207          	subw	sp,#7
7362       00000007      OFST:	set	7
7365                     ; 1984   temp = 0;
7367                     ; 1985   invalid = 0;
7369  dc7d 0f01          	clr	(OFST-6,sp)
7371                     ; 1988   str[0] = (uint8_t)alpha1;
7373  dc7f 9f            	ld	a,xl
7374  dc80 6b02          	ld	(OFST-5,sp),a
7376                     ; 1989   str[1] = (uint8_t)alpha2;
7378  dc82 7b0c          	ld	a,(OFST+5,sp)
7379  dc84 6b03          	ld	(OFST-4,sp),a
7381                     ; 1990   str[2] = (uint8_t)alpha3;
7383  dc86 7b0d          	ld	a,(OFST+6,sp)
7384  dc88 6b04          	ld	(OFST-3,sp),a
7386                     ; 1991   str[3] = 0;
7388  dc8a 0f05          	clr	(OFST-2,sp)
7390                     ; 1992   temp = atoi(str);
7392  dc8c 96            	ldw	x,sp
7393  dc8d 1c0002        	addw	x,#OFST-5
7394  dc90 cdf8bc        	call	_atoi
7396  dc93 1f06          	ldw	(OFST-1,sp),x
7398                     ; 1993   if (temp > 255) invalid = 1; // If an invalid entry set indicator
7400  dc95 a30100        	cpw	x,#256
7401  dc98 2504          	jrult	L5732
7404  dc9a a601          	ld	a,#1
7405  dc9c 6b01          	ld	(OFST-6,sp),a
7407  dc9e               L5732:
7408                     ; 1995   if(invalid == 0) { // Make change only if valid entry
7410  dc9e 7b01          	ld	a,(OFST-6,sp)
7411  dca0 265f          	jrne	L7732
7412                     ; 1996     switch(itemnum)
7414  dca2 7b08          	ld	a,(OFST+1,sp)
7416                     ; 2010     default: break;
7417  dca4 a10c          	cp	a,#12
7418  dca6 2459          	jruge	L7732
7419  dca8 5f            	clrw	x
7420  dca9 97            	ld	xl,a
7421  dcaa 58            	sllw	x
7422  dcab dec298        	ldw	x,(L633,x)
7423  dcae fc            	jp	(x)
7424  dcaf               L1132:
7425                     ; 1998     case 0:  Pending_hostaddr4 = (uint8_t)temp; break;
7427  dcaf 7b07          	ld	a,(OFST+0,sp)
7428  dcb1 c70037        	ld	_Pending_hostaddr4,a
7431  dcb4 204b          	jra	L7732
7432  dcb6               L3132:
7433                     ; 1999     case 1:  Pending_hostaddr3 = (uint8_t)temp; break;
7435  dcb6 7b07          	ld	a,(OFST+0,sp)
7436  dcb8 c70036        	ld	_Pending_hostaddr3,a
7439  dcbb 2044          	jra	L7732
7440  dcbd               L5132:
7441                     ; 2000     case 2:  Pending_hostaddr2 = (uint8_t)temp; break;
7443  dcbd 7b07          	ld	a,(OFST+0,sp)
7444  dcbf c70035        	ld	_Pending_hostaddr2,a
7447  dcc2 203d          	jra	L7732
7448  dcc4               L7132:
7449                     ; 2001     case 3:  Pending_hostaddr1 = (uint8_t)temp; break;
7451  dcc4 7b07          	ld	a,(OFST+0,sp)
7452  dcc6 c70034        	ld	_Pending_hostaddr1,a
7455  dcc9 2036          	jra	L7732
7456  dccb               L1232:
7457                     ; 2002     case 4:  Pending_draddr4 = (uint8_t)temp; break;
7459  dccb 7b07          	ld	a,(OFST+0,sp)
7460  dccd c70033        	ld	_Pending_draddr4,a
7463  dcd0 202f          	jra	L7732
7464  dcd2               L3232:
7465                     ; 2003     case 5:  Pending_draddr3 = (uint8_t)temp; break;
7467  dcd2 7b07          	ld	a,(OFST+0,sp)
7468  dcd4 c70032        	ld	_Pending_draddr3,a
7471  dcd7 2028          	jra	L7732
7472  dcd9               L5232:
7473                     ; 2004     case 6:  Pending_draddr2 = (uint8_t)temp; break;
7475  dcd9 7b07          	ld	a,(OFST+0,sp)
7476  dcdb c70031        	ld	_Pending_draddr2,a
7479  dcde 2021          	jra	L7732
7480  dce0               L7232:
7481                     ; 2005     case 7:  Pending_draddr1 = (uint8_t)temp; break;
7483  dce0 7b07          	ld	a,(OFST+0,sp)
7484  dce2 c70030        	ld	_Pending_draddr1,a
7487  dce5 201a          	jra	L7732
7488  dce7               L1332:
7489                     ; 2006     case 8:  Pending_netmask4 = (uint8_t)temp; break;
7491  dce7 7b07          	ld	a,(OFST+0,sp)
7492  dce9 c7002f        	ld	_Pending_netmask4,a
7495  dcec 2013          	jra	L7732
7496  dcee               L3332:
7497                     ; 2007     case 9:  Pending_netmask3 = (uint8_t)temp; break;
7499  dcee 7b07          	ld	a,(OFST+0,sp)
7500  dcf0 c7002e        	ld	_Pending_netmask3,a
7503  dcf3 200c          	jra	L7732
7504  dcf5               L5332:
7505                     ; 2008     case 10: Pending_netmask2 = (uint8_t)temp; break;
7507  dcf5 7b07          	ld	a,(OFST+0,sp)
7508  dcf7 c7002d        	ld	_Pending_netmask2,a
7511  dcfa 2005          	jra	L7732
7512  dcfc               L7332:
7513                     ; 2009     case 11: Pending_netmask1 = (uint8_t)temp; break;
7515  dcfc 7b07          	ld	a,(OFST+0,sp)
7516  dcfe c7002c        	ld	_Pending_netmask1,a
7519                     ; 2010     default: break;
7521  dd01               L7732:
7522                     ; 2013 }
7525  dd01 5b09          	addw	sp,#9
7526  dd03 81            	ret	
7619                     ; 2016 void SetPort(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3, uint8_t alpha4, uint8_t alpha5)
7619                     ; 2017 {
7620                     	switch	.text
7621  dd04               _SetPort:
7623  dd04 89            	pushw	x
7624  dd05 5209          	subw	sp,#9
7625       00000009      OFST:	set	9
7628                     ; 2030   temp = 0;
7630  dd07 5f            	clrw	x
7631  dd08 1f01          	ldw	(OFST-8,sp),x
7633                     ; 2031   invalid = 0;
7635  dd0a 0f03          	clr	(OFST-6,sp)
7637                     ; 2034   if(alpha1 > '6') invalid = 1;
7639  dd0c 7b0b          	ld	a,(OFST+2,sp)
7640  dd0e a137          	cp	a,#55
7641  dd10 2506          	jrult	L3442
7644  dd12 a601          	ld	a,#1
7645  dd14 6b03          	ld	(OFST-6,sp),a
7648  dd16 201d          	jra	L5442
7649  dd18               L3442:
7650                     ; 2036     str[0] = (uint8_t)alpha1;
7652  dd18 6b04          	ld	(OFST-5,sp),a
7654                     ; 2037     str[1] = (uint8_t)alpha2;
7656  dd1a 7b0e          	ld	a,(OFST+5,sp)
7657  dd1c 6b05          	ld	(OFST-4,sp),a
7659                     ; 2038     str[2] = (uint8_t)alpha3;
7661  dd1e 7b0f          	ld	a,(OFST+6,sp)
7662  dd20 6b06          	ld	(OFST-3,sp),a
7664                     ; 2039     str[3] = (uint8_t)alpha4;
7666  dd22 7b10          	ld	a,(OFST+7,sp)
7667  dd24 6b07          	ld	(OFST-2,sp),a
7669                     ; 2040     str[4] = (uint8_t)alpha5;
7671  dd26 7b11          	ld	a,(OFST+8,sp)
7672  dd28 6b08          	ld	(OFST-1,sp),a
7674                     ; 2041     str[5] = 0;
7676  dd2a 0f09          	clr	(OFST+0,sp)
7678                     ; 2042     temp = atoi(str);
7680  dd2c 96            	ldw	x,sp
7681  dd2d 1c0004        	addw	x,#OFST-5
7682  dd30 cdf8bc        	call	_atoi
7684  dd33 1f01          	ldw	(OFST-8,sp),x
7686  dd35               L5442:
7687                     ; 2045   if(invalid == 0) { // Make change only if valid entry
7689  dd35 7b03          	ld	a,(OFST-6,sp)
7690  dd37 2603          	jrne	L7442
7691                     ; 2046     Pending_port = (uint16_t)temp;
7693  dd39 cf002a        	ldw	_Pending_port,x
7694  dd3c               L7442:
7695                     ; 2048 }
7698  dd3c 5b0b          	addw	sp,#11
7699  dd3e 81            	ret	
7765                     ; 2051 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7765                     ; 2052 {
7766                     	switch	.text
7767  dd3f               _SetMAC:
7769  dd3f 89            	pushw	x
7770  dd40 5203          	subw	sp,#3
7771       00000003      OFST:	set	3
7774                     ; 2064   temp = 0;
7776                     ; 2065   invalid = 0;
7778  dd42 0f01          	clr	(OFST-2,sp)
7780                     ; 2068   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7782  dd44 9f            	ld	a,xl
7783  dd45 a130          	cp	a,#48
7784  dd47 250b          	jrult	L3152
7786  dd49 9f            	ld	a,xl
7787  dd4a a13a          	cp	a,#58
7788  dd4c 2406          	jruge	L3152
7791  dd4e 7b05          	ld	a,(OFST+2,sp)
7792  dd50 a030          	sub	a,#48
7794  dd52 200c          	jp	LC028
7795  dd54               L3152:
7796                     ; 2069   else if(alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7798  dd54 7b05          	ld	a,(OFST+2,sp)
7799  dd56 a161          	cp	a,#97
7800  dd58 250a          	jrult	L7152
7802  dd5a a167          	cp	a,#103
7803  dd5c 2406          	jruge	L7152
7806  dd5e a057          	sub	a,#87
7807  dd60               LC028:
7808  dd60 6b05          	ld	(OFST+2,sp),a
7810  dd62 2004          	jra	L5152
7811  dd64               L7152:
7812                     ; 2070   else invalid = 1; // If an invalid entry set indicator
7814  dd64 a601          	ld	a,#1
7815  dd66 6b01          	ld	(OFST-2,sp),a
7817  dd68               L5152:
7818                     ; 2072   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7820  dd68 7b08          	ld	a,(OFST+5,sp)
7821  dd6a a130          	cp	a,#48
7822  dd6c 2508          	jrult	L3252
7824  dd6e a13a          	cp	a,#58
7825  dd70 2404          	jruge	L3252
7828  dd72 a030          	sub	a,#48
7830  dd74 200a          	jp	LC029
7831  dd76               L3252:
7832                     ; 2073   else if(alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7834  dd76 a161          	cp	a,#97
7835  dd78 250a          	jrult	L7252
7837  dd7a a167          	cp	a,#103
7838  dd7c 2406          	jruge	L7252
7841  dd7e a057          	sub	a,#87
7842  dd80               LC029:
7843  dd80 6b08          	ld	(OFST+5,sp),a
7845  dd82 2004          	jra	L5252
7846  dd84               L7252:
7847                     ; 2074   else invalid = 1; // If an invalid entry set indicator
7849  dd84 a601          	ld	a,#1
7850  dd86 6b01          	ld	(OFST-2,sp),a
7852  dd88               L5252:
7853                     ; 2076   if (invalid == 0) { // Change value only if valid entry
7855  dd88 7b01          	ld	a,(OFST-2,sp)
7856  dd8a 264a          	jrne	L3352
7857                     ; 2077     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7859  dd8c 7b05          	ld	a,(OFST+2,sp)
7860  dd8e 97            	ld	xl,a
7861  dd8f a610          	ld	a,#16
7862  dd91 42            	mul	x,a
7863  dd92 01            	rrwa	x,a
7864  dd93 1b08          	add	a,(OFST+5,sp)
7865  dd95 5f            	clrw	x
7866  dd96 97            	ld	xl,a
7867  dd97 1f02          	ldw	(OFST-1,sp),x
7869                     ; 2078     switch(itemnum)
7871  dd99 7b04          	ld	a,(OFST+1,sp)
7873                     ; 2086     default: break;
7874  dd9b 2711          	jreq	L1542
7875  dd9d 4a            	dec	a
7876  dd9e 2715          	jreq	L3542
7877  dda0 4a            	dec	a
7878  dda1 2719          	jreq	L5542
7879  dda3 4a            	dec	a
7880  dda4 271d          	jreq	L7542
7881  dda6 4a            	dec	a
7882  dda7 2721          	jreq	L1642
7883  dda9 4a            	dec	a
7884  ddaa 2725          	jreq	L3642
7885  ddac 2028          	jra	L3352
7886  ddae               L1542:
7887                     ; 2080     case 0: Pending_uip_ethaddr1 = (uint8_t)temp; break;
7889  ddae 7b03          	ld	a,(OFST+0,sp)
7890  ddb0 c70024        	ld	_Pending_uip_ethaddr1,a
7893  ddb3 2021          	jra	L3352
7894  ddb5               L3542:
7895                     ; 2081     case 1: Pending_uip_ethaddr2 = (uint8_t)temp; break;
7897  ddb5 7b03          	ld	a,(OFST+0,sp)
7898  ddb7 c70025        	ld	_Pending_uip_ethaddr2,a
7901  ddba 201a          	jra	L3352
7902  ddbc               L5542:
7903                     ; 2082     case 2: Pending_uip_ethaddr3 = (uint8_t)temp; break;
7905  ddbc 7b03          	ld	a,(OFST+0,sp)
7906  ddbe c70026        	ld	_Pending_uip_ethaddr3,a
7909  ddc1 2013          	jra	L3352
7910  ddc3               L7542:
7911                     ; 2083     case 3: Pending_uip_ethaddr4 = (uint8_t)temp; break;
7913  ddc3 7b03          	ld	a,(OFST+0,sp)
7914  ddc5 c70027        	ld	_Pending_uip_ethaddr4,a
7917  ddc8 200c          	jra	L3352
7918  ddca               L1642:
7919                     ; 2084     case 4: Pending_uip_ethaddr5 = (uint8_t)temp; break;
7921  ddca 7b03          	ld	a,(OFST+0,sp)
7922  ddcc c70028        	ld	_Pending_uip_ethaddr5,a
7925  ddcf 2005          	jra	L3352
7926  ddd1               L3642:
7927                     ; 2085     case 5: Pending_uip_ethaddr6 = (uint8_t)temp; break;
7929  ddd1 7b03          	ld	a,(OFST+0,sp)
7930  ddd3 c70029        	ld	_Pending_uip_ethaddr6,a
7933                     ; 2086     default: break;
7935  ddd6               L3352:
7936                     ; 2089 }
7939  ddd6 5b05          	addw	sp,#5
7940  ddd8 81            	ret	
8042                     	switch	.bss
8043  0010               _OctetArray:
8044  0010 000000000000  	ds.b	11
8045                     	xdef	_OctetArray
8046                     	xref	_submit_changes
8047                     	xref	_ex_stored_devicename
8048                     	xref	_uip_ethaddr6
8049                     	xref	_uip_ethaddr5
8050                     	xref	_uip_ethaddr4
8051                     	xref	_uip_ethaddr3
8052                     	xref	_uip_ethaddr2
8053                     	xref	_uip_ethaddr1
8054                     	xref	_ex_stored_port
8055                     	xref	_ex_stored_netmask1
8056                     	xref	_ex_stored_netmask2
8057                     	xref	_ex_stored_netmask3
8058                     	xref	_ex_stored_netmask4
8059                     	xref	_ex_stored_draddr1
8060                     	xref	_ex_stored_draddr2
8061                     	xref	_ex_stored_draddr3
8062                     	xref	_ex_stored_draddr4
8063                     	xref	_ex_stored_hostaddr1
8064                     	xref	_ex_stored_hostaddr2
8065                     	xref	_ex_stored_hostaddr3
8066                     	xref	_ex_stored_hostaddr4
8067                     	xref	_Pending_uip_ethaddr6
8068                     	xref	_Pending_uip_ethaddr5
8069                     	xref	_Pending_uip_ethaddr4
8070                     	xref	_Pending_uip_ethaddr3
8071                     	xref	_Pending_uip_ethaddr2
8072                     	xref	_Pending_uip_ethaddr1
8073                     	xref	_Pending_port
8074                     	xref	_Pending_netmask1
8075                     	xref	_Pending_netmask2
8076                     	xref	_Pending_netmask3
8077                     	xref	_Pending_netmask4
8078                     	xref	_Pending_draddr1
8079                     	xref	_Pending_draddr2
8080                     	xref	_Pending_draddr3
8081                     	xref	_Pending_draddr4
8082                     	xref	_Pending_hostaddr1
8083                     	xref	_Pending_hostaddr2
8084                     	xref	_Pending_hostaddr3
8085                     	xref	_Pending_hostaddr4
8086                     	xref	_invert_output
8087                     	xref	_Relays_8to1
8088                     	xref	_Relays_16to9
8089                     	xref	_Port_Httpd
8090  001b               _current_webpage:
8091  001b 00            	ds.b	1
8092                     	xdef	_current_webpage
8093                     	xref	_atoi
8094                     	xref	_debugflash
8095                     	xref	_uip_flags
8096                     	xref	_uip_stat
8097                     	xref	_uip_conn
8098                     	xref	_uip_appdata
8099                     	xref	_htons
8100                     	xref	_uip_send
8101                     	xref	_uip_listen
8102                     	xdef	_SetMAC
8103                     	xdef	_SetPort
8104                     	xdef	_SetAddresses
8105                     	xdef	_GpioSetPin
8106                     	xdef	_GpioGetPin
8107                     	xdef	_HttpDCall
8108                     	xdef	_HttpDInit
8109                     	xdef	_reverse
8110                     	xdef	_emb_itoa
8111                     	xdef	_two_alpha_to_uint
8112                     	xdef	_three_alpha_to_uint
8113                     	switch	.const
8114  c2b0               L714:
8115  c2b0 436f6e6e6563  	dc.b	"Connection:close",13
8116  c2c1 0a00          	dc.b	10,0
8117  c2c3               L514:
8118  c2c3 436f6e74656e  	dc.b	"Content-Type:text/"
8119  c2d5 68746d6c0d    	dc.b	"html",13
8120  c2da 0a00          	dc.b	10,0
8121  c2dc               L314:
8122  c2dc 436f6e74656e  	dc.b	"Content-Length:",0
8123  c2ec               L114:
8124  c2ec 0d0a00        	dc.b	13,10,0
8125  c2ef               L704:
8126  c2ef 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
8127                     	xref.b	c_lreg
8128                     	xref.b	c_x
8129                     	xref.b	c_y
8149                     	xref	c_uitolx
8150                     	xref	c_ludv
8151                     	xref	c_lumd
8152                     	xref	c_rtol
8153                     	xref	c_ltor
8154                     	xref	c_lzmp
8155                     	end
