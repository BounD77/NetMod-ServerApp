   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     .const:	section	.text
  18  8080               L31_checked:
  19  8080 636865636b65  	dc.b	"checked",0
  20  8088               L51_g_HtmlPageDefault:
  21  8088 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
  22  809a 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
  23  80ac 6561643e3c74  	dc.b	"ead><title>Relay C"
  24  80be 6f6e74726f6c  	dc.b	"ontrol</title><sty"
  25  80d0 6c653e2e7330  	dc.b	"le>.s0 { backgroun"
  26  80e2 642d636f6c6f  	dc.b	"d-color: red; widt"
  27  80f4 683a20333070  	dc.b	"h: 30px; }.s1 { ba"
  28  8106 636b67726f75  	dc.b	"ckground-color: gr"
  29  8118 65656e3b2077  	dc.b	"een; width: 30px; "
  30  812a 7d2e7431636c  	dc.b	"}.t1class { width:"
  31  813c 203130307078  	dc.b	" 100px; }.t2class "
  32  814e 7b2077696474  	dc.b	"{ width: 148px; }."
  33  8160 7433636c6173  	dc.b	"t3class { width: 3"
  34  8172 3070783b207d  	dc.b	"0px; }.t4class { w"
  35  8184 696474        	dc.b	"idt"
  36  8187 683a20313230  	dc.b	"h: 120px; }td { te"
  37  8199 78742d616c69  	dc.b	"xt-align: center; "
  38  81ab 626f72646572  	dc.b	"border: 1px black "
  39  81bd 736f6c69643b  	dc.b	"solid; }</style></"
  40  81cf 686561643e3c  	dc.b	"head><body><h1>Rel"
  41  81e1 617920436f6e  	dc.b	"ay Control</h1><fo"
  42  81f3 726d206d6574  	dc.b	"rm method='POST' a"
  43  8205 6374696f6e3d  	dc.b	"ction='/'><table><"
  44  8217 74723e3c7464  	dc.b	"tr><td class='t1cl"
  45  8229 617373273e4e  	dc.b	"ass'>Name:</td><td"
  46  823b 3e3c696e7075  	dc.b	"><input type='text"
  47  824d 27206e616d65  	dc.b	"' name='a00' class"
  48  825f 3d277432636c  	dc.b	"='t2class' value='"
  49  8271 256130307878  	dc.b	"%a00xxxxxxxxxxxxxx"
  50  8283 787878        	dc.b	"xxx"
  51  8286 787878272070  	dc.b	"xxx' pattern='[0-9"
  52  8298 612d7a412d5a  	dc.b	"a-zA-Z-_*.]{1,20}'"
  53  82aa 207469746c65  	dc.b	" title='1 to 20 le"
  54  82bc 74746572732c  	dc.b	"tters, numbers, an"
  55  82ce 64202d5f2a2e  	dc.b	"d -_*. no spaces' "
  56  82e0 6d61786c656e  	dc.b	"maxlength='20' siz"
  57  82f2 653d27323027  	dc.b	"e='20'></td></tr><"
  58  8304 2f7461626c65  	dc.b	"/table><table><tr>"
  59  8316 3c746420636c  	dc.b	"<td class='t1class"
  60  8328 273e3c2f7464  	dc.b	"'></td><td class='"
  61  833a 7433636c6173  	dc.b	"t3class'></td><td "
  62  834c 636c6173733d  	dc.b	"class='t4class'>SE"
  63  835e 543c2f74643e  	dc.b	"T</td></tr><tr><td"
  64  8370 20636c617373  	dc.b	" class='t1class'>R"
  65  8382 656c61        	dc.b	"ela"
  66  8385 7930313c2f74  	dc.b	"y01</td><td class="
  67  8397 277325693030  	dc.b	"'s%i00'></td><td c"
  68  83a9 6c6173733d27  	dc.b	"lass='t4class'><in"
  69  83bb 707574207479  	dc.b	"put type='radio' i"
  70  83cd 643d2772656c  	dc.b	"d='relay01on' name"
  71  83df 3d276f303027  	dc.b	"='o00' value='1' %"
  72  83f1 6f30303e3c6c  	dc.b	"o00><label for='re"
  73  8403 6c617930316f  	dc.b	"lay01on'>ON</label"
  74  8415 3e3c696e7075  	dc.b	"><input type='radi"
  75  8427 6f272069643d  	dc.b	"o' id='relay01off'"
  76  8439 206e616d653d  	dc.b	" name='o00' value="
  77  844b 273027202570  	dc.b	"'0' %p00><label fo"
  78  845d 723d2772656c  	dc.b	"r='relay01off'>OFF"
  79  846f 3c2f6c616265  	dc.b	"</label></td></tr>"
  80  8481 3c7472        	dc.b	"<tr"
  81  8484 3e3c74642063  	dc.b	"><td class='t1clas"
  82  8496 73273e52656c  	dc.b	"s'>Relay02</td><td"
  83  84a8 20636c617373  	dc.b	" class='s%i01'></t"
  84  84ba 643e3c746420  	dc.b	"d><td class='t4cla"
  85  84cc 7373273e3c69  	dc.b	"ss'><input type='r"
  86  84de 6164696f2720  	dc.b	"adio' id='relay02o"
  87  84f0 6e27206e616d  	dc.b	"n' name='o01' valu"
  88  8502 653d27312720  	dc.b	"e='1' %o01><label "
  89  8514 666f723d2772  	dc.b	"for='relay02on'>ON"
  90  8526 3c2f6c616265  	dc.b	"</label><input typ"
  91  8538 653d27726164  	dc.b	"e='radio' id='rela"
  92  854a 7930326f6666  	dc.b	"y02off' name='o01'"
  93  855c 2076616c7565  	dc.b	" value='0' %p01><l"
  94  856e 6162656c2066  	dc.b	"abel for='relay02o"
  95  8580 666627        	dc.b	"ff'"
  96  8583 3e4f46463c2f  	dc.b	">OFF</label></td><"
  97  8595 2f74723e3c74  	dc.b	"/tr><tr><td class="
  98  85a7 277431636c61  	dc.b	"'t1class'>Relay03<"
  99  85b9 2f74643e3c74  	dc.b	"/td><td class='s%i"
 100  85cb 3032273e3c2f  	dc.b	"02'></td><td class"
 101  85dd 3d277434636c  	dc.b	"='t4class'><input "
 102  85ef 747970653d27  	dc.b	"type='radio' id='r"
 103  8601 656c61793033  	dc.b	"elay03on' name='o0"
 104  8613 32272076616c  	dc.b	"2' value='1' %o02>"
 105  8625 3c6c6162656c  	dc.b	"<label for='relay0"
 106  8637 336f6e273e4f  	dc.b	"3on'>ON</label><in"
 107  8649 707574207479  	dc.b	"put type='radio' i"
 108  865b 643d2772656c  	dc.b	"d='relay03off' nam"
 109  866d 653d276f3032  	dc.b	"e='o02' value='0' "
 110  867f 257030        	dc.b	"%p0"
 111  8682 323e3c6c6162  	dc.b	"2><label for='rela"
 112  8694 7930336f6666  	dc.b	"y03off'>OFF</label"
 113  86a6 3e3c2f74643e  	dc.b	"></td></tr><tr><td"
 114  86b8 20636c617373  	dc.b	" class='t1class'>R"
 115  86ca 656c61793034  	dc.b	"elay04</td><td cla"
 116  86dc 73733d277325  	dc.b	"ss='s%i03'></td><t"
 117  86ee 6420636c6173  	dc.b	"d class='t4class'>"
 118  8700 3c696e707574  	dc.b	"<input type='radio"
 119  8712 272069643d27  	dc.b	"' id='relay04on' n"
 120  8724 616d653d276f  	dc.b	"ame='o03' value='1"
 121  8736 2720256f3033  	dc.b	"' %o03><label for="
 122  8748 2772656c6179  	dc.b	"'relay04on'>ON</la"
 123  875a 62656c3e3c69  	dc.b	"bel><input type='r"
 124  876c 6164696f2720  	dc.b	"adio' id='relay04o"
 125  877e 666627        	dc.b	"ff'"
 126  8781 206e616d653d  	dc.b	" name='o03' value="
 127  8793 273027202570  	dc.b	"'0' %p03><label fo"
 128  87a5 723d2772656c  	dc.b	"r='relay04off'>OFF"
 129  87b7 3c2f6c616265  	dc.b	"</label></td></tr>"
 130  87c9 3c74723e3c74  	dc.b	"<tr><td class='t1c"
 131  87db 6c617373273e  	dc.b	"lass'>Relay05</td>"
 132  87ed 3c746420636c  	dc.b	"<td class='s%i04'>"
 133  87ff 3c2f74643e3c  	dc.b	"</td><td class='t4"
 134  8811 636c61737327  	dc.b	"class'><input type"
 135  8823 3d2772616469  	dc.b	"='radio' id='relay"
 136  8835 30356f6e2720  	dc.b	"05on' name='o04' v"
 137  8847 616c75653d27  	dc.b	"alue='1' %o04><lab"
 138  8859 656c20666f72  	dc.b	"el for='relay05on'"
 139  886b 3e4f4e3c2f6c  	dc.b	">ON</label><input "
 140  887d 747970        	dc.b	"typ"
 141  8880 653d27726164  	dc.b	"e='radio' id='rela"
 142  8892 7930356f6666  	dc.b	"y05off' name='o04'"
 143  88a4 2076616c7565  	dc.b	" value='0' %p04><l"
 144  88b6 6162656c2066  	dc.b	"abel for='relay05o"
 145  88c8 6666273e4f46  	dc.b	"ff'>OFF</label></t"
 146  88da 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 147  88ec 73733d277431  	dc.b	"ss='t1class'>Relay"
 148  88fe 30363c2f7464  	dc.b	"06</td><td class='"
 149  8910 732569303527  	dc.b	"s%i05'></td><td cl"
 150  8922 6173733d2774  	dc.b	"ass='t4class'><inp"
 151  8934 757420747970  	dc.b	"ut type='radio' id"
 152  8946 3d2772656c61  	dc.b	"='relay06on' name="
 153  8958 276f30352720  	dc.b	"'o05' value='1' %o"
 154  896a 30353e3c6c61  	dc.b	"05><label for='rel"
 155  897c 617930        	dc.b	"ay0"
 156  897f 366f6e273e4f  	dc.b	"6on'>ON</label><in"
 157  8991 707574207479  	dc.b	"put type='radio' i"
 158  89a3 643d2772656c  	dc.b	"d='relay06off' nam"
 159  89b5 653d276f3035  	dc.b	"e='o05' value='0' "
 160  89c7 257030353e3c  	dc.b	"%p05><label for='r"
 161  89d9 656c61793036  	dc.b	"elay06off'>OFF</la"
 162  89eb 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
 163  89fd 3c746420636c  	dc.b	"<td class='t1class"
 164  8a0f 273e52656c61  	dc.b	"'>Relay07</td><td "
 165  8a21 636c6173733d  	dc.b	"class='s%i06'></td"
 166  8a33 3e3c74642063  	dc.b	"><td class='t4clas"
 167  8a45 73273e3c696e  	dc.b	"s'><input type='ra"
 168  8a57 64696f272069  	dc.b	"dio' id='relay07on"
 169  8a69 27206e616d65  	dc.b	"' name='o06' value"
 170  8a7b 3d2731        	dc.b	"='1"
 171  8a7e 2720256f3036  	dc.b	"' %o06><label for="
 172  8a90 2772656c6179  	dc.b	"'relay07on'>ON</la"
 173  8aa2 62656c3e3c69  	dc.b	"bel><input type='r"
 174  8ab4 6164696f2720  	dc.b	"adio' id='relay07o"
 175  8ac6 666627206e61  	dc.b	"ff' name='o06' val"
 176  8ad8 75653d273027  	dc.b	"ue='0' %p06><label"
 177  8aea 20666f723d27  	dc.b	" for='relay07off'>"
 178  8afc 4f46463c2f6c  	dc.b	"OFF</label></td></"
 179  8b0e 74723e3c7472  	dc.b	"tr><tr><td class='"
 180  8b20 7431636c6173  	dc.b	"t1class'>Relay08</"
 181  8b32 74643e3c7464  	dc.b	"td><td class='s%i0"
 182  8b44 37273e3c2f74  	dc.b	"7'></td><td class="
 183  8b56 277434636c61  	dc.b	"'t4class'><input t"
 184  8b68 7970653d2772  	dc.b	"ype='radio' id='re"
 185  8b7a 6c6179        	dc.b	"lay"
 186  8b7d 30386f6e2720  	dc.b	"08on' name='o07' v"
 187  8b8f 616c75653d27  	dc.b	"alue='1' %o07><lab"
 188  8ba1 656c20666f72  	dc.b	"el for='relay08on'"
 189  8bb3 3e4f4e3c2f6c  	dc.b	">ON</label><input "
 190  8bc5 747970653d27  	dc.b	"type='radio' id='r"
 191  8bd7 656c61793038  	dc.b	"elay08off' name='o"
 192  8be9 303727207661  	dc.b	"07' value='0' %p07"
 193  8bfb 3e3c6c616265  	dc.b	"><label for='relay"
 194  8c0d 30386f666627  	dc.b	"08off'>OFF</label>"
 195  8c1f 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 196  8c31 636c6173733d  	dc.b	"class='t1class'>Re"
 197  8c43 6c617930393c  	dc.b	"lay09</td><td clas"
 198  8c55 733d27732569  	dc.b	"s='s%i08'></td><td"
 199  8c67 20636c617373  	dc.b	" class='t4class'><"
 200  8c79 696e70        	dc.b	"inp"
 201  8c7c 757420747970  	dc.b	"ut type='radio' id"
 202  8c8e 3d2772656c61  	dc.b	"='relay09on' name="
 203  8ca0 276f30382720  	dc.b	"'o08' value='1' %o"
 204  8cb2 30383e3c6c61  	dc.b	"08><label for='rel"
 205  8cc4 617930396f6e  	dc.b	"ay09on'>ON</label>"
 206  8cd6 3c696e707574  	dc.b	"<input type='radio"
 207  8ce8 272069643d27  	dc.b	"' id='relay09off' "
 208  8cfa 6e616d653d27  	dc.b	"name='o08' value='"
 209  8d0c 302720257030  	dc.b	"0' %p08><label for"
 210  8d1e 3d2772656c61  	dc.b	"='relay09off'>OFF<"
 211  8d30 2f6c6162656c  	dc.b	"/label></td></tr><"
 212  8d42 74723e3c7464  	dc.b	"tr><td class='t1cl"
 213  8d54 617373273e52  	dc.b	"ass'>Relay10</td><"
 214  8d66 746420636c61  	dc.b	"td class='s%i09'><"
 215  8d78 2f7464        	dc.b	"/td"
 216  8d7b 3e3c74642063  	dc.b	"><td class='t4clas"
 217  8d8d 73273e3c696e  	dc.b	"s'><input type='ra"
 218  8d9f 64696f272069  	dc.b	"dio' id='relay10on"
 219  8db1 27206e616d65  	dc.b	"' name='o09' value"
 220  8dc3 3d2731272025  	dc.b	"='1' %o09><label f"
 221  8dd5 6f723d277265  	dc.b	"or='relay10on'>ON<"
 222  8de7 2f6c6162656c  	dc.b	"/label><input type"
 223  8df9 3d2772616469  	dc.b	"='radio' id='relay"
 224  8e0b 31306f666627  	dc.b	"10off' name='o09' "
 225  8e1d 76616c75653d  	dc.b	"value='0' %p09><la"
 226  8e2f 62656c20666f  	dc.b	"bel for='relay10of"
 227  8e41 66273e4f4646  	dc.b	"f'>OFF</label></td"
 228  8e53 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 229  8e65 733d27743163  	dc.b	"s='t1class'>Relay1"
 230  8e77 313c2f        	dc.b	"1</"
 231  8e7a 74643e3c7464  	dc.b	"td><td class='s%i1"
 232  8e8c 30273e3c2f74  	dc.b	"0'></td><td class="
 233  8e9e 277434636c61  	dc.b	"'t4class'><input t"
 234  8eb0 7970653d2772  	dc.b	"ype='radio' id='re"
 235  8ec2 6c617931316f  	dc.b	"lay11on' name='o10"
 236  8ed4 272076616c75  	dc.b	"' value='1' %o10><"
 237  8ee6 6c6162656c20  	dc.b	"label for='relay11"
 238  8ef8 6f6e273e4f4e  	dc.b	"on'>ON</label><inp"
 239  8f0a 757420747970  	dc.b	"ut type='radio' id"
 240  8f1c 3d2772656c61  	dc.b	"='relay11off' name"
 241  8f2e 3d276f313027  	dc.b	"='o10' value='0' %"
 242  8f40 7031303e3c6c  	dc.b	"p10><label for='re"
 243  8f52 6c617931316f  	dc.b	"lay11off'>OFF</lab"
 244  8f64 656c3e3c2f74  	dc.b	"el></td></tr><tr><"
 245  8f76 746420        	dc.b	"td "
 246  8f79 636c6173733d  	dc.b	"class='t1class'>Re"
 247  8f8b 6c617931323c  	dc.b	"lay12</td><td clas"
 248  8f9d 733d27732569  	dc.b	"s='s%i11'></td><td"
 249  8faf 20636c617373  	dc.b	" class='t4class'><"
 250  8fc1 696e70757420  	dc.b	"input type='radio'"
 251  8fd3 2069643d2772  	dc.b	" id='relay12on' na"
 252  8fe5 6d653d276f31  	dc.b	"me='o11' value='1'"
 253  8ff7 20256f31313e  	dc.b	" %o11><label for='"
 254  9009 72656c617931  	dc.b	"relay12on'>ON</lab"
 255  901b 656c3e3c696e  	dc.b	"el><input type='ra"
 256  902d 64696f272069  	dc.b	"dio' id='relay12of"
 257  903f 6627206e616d  	dc.b	"f' name='o11' valu"
 258  9051 653d27302720  	dc.b	"e='0' %p11><label "
 259  9063 666f723d2772  	dc.b	"for='relay12off'>O"
 260  9075 46463c        	dc.b	"FF<"
 261  9078 2f6c6162656c  	dc.b	"/label></td></tr><"
 262  908a 74723e3c7464  	dc.b	"tr><td class='t1cl"
 263  909c 617373273e52  	dc.b	"ass'>Relay13</td><"
 264  90ae 746420636c61  	dc.b	"td class='s%i12'><"
 265  90c0 2f74643e3c74  	dc.b	"/td><td class='t4c"
 266  90d2 6c617373273e  	dc.b	"lass'><input type="
 267  90e4 27726164696f  	dc.b	"'radio' id='relay1"
 268  90f6 336f6e27206e  	dc.b	"3on' name='o12' va"
 269  9108 6c75653d2731  	dc.b	"lue='1' %o12><labe"
 270  911a 6c20666f723d  	dc.b	"l for='relay13on'>"
 271  912c 4f4e3c2f6c61  	dc.b	"ON</label><input t"
 272  913e 7970653d2772  	dc.b	"ype='radio' id='re"
 273  9150 6c617931336f  	dc.b	"lay13off' name='o1"
 274  9162 32272076616c  	dc.b	"2' value='0' %p12>"
 275  9174 3c6c61        	dc.b	"<la"
 276  9177 62656c20666f  	dc.b	"bel for='relay13of"
 277  9189 66273e4f4646  	dc.b	"f'>OFF</label></td"
 278  919b 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 279  91ad 733d27743163  	dc.b	"s='t1class'>Relay1"
 280  91bf 343c2f74643e  	dc.b	"4</td><td class='s"
 281  91d1 25693133273e  	dc.b	"%i13'></td><td cla"
 282  91e3 73733d277434  	dc.b	"ss='t4class'><inpu"
 283  91f5 742074797065  	dc.b	"t type='radio' id="
 284  9207 2772656c6179  	dc.b	"'relay14on' name='"
 285  9219 6f3133272076  	dc.b	"o13' value='1' %o1"
 286  922b 333e3c6c6162  	dc.b	"3><label for='rela"
 287  923d 7931346f6e27  	dc.b	"y14on'>ON</label><"
 288  924f 696e70757420  	dc.b	"input type='radio'"
 289  9261 2069643d2772  	dc.b	" id='relay14off' n"
 290  9273 616d65        	dc.b	"ame"
 291  9276 3d276f313327  	dc.b	"='o13' value='0' %"
 292  9288 7031333e3c6c  	dc.b	"p13><label for='re"
 293  929a 6c617931346f  	dc.b	"lay14off'>OFF</lab"
 294  92ac 656c3e3c2f74  	dc.b	"el></td></tr><tr><"
 295  92be 746420636c61  	dc.b	"td class='t1class'"
 296  92d0 3e52656c6179  	dc.b	">Relay15</td><td c"
 297  92e2 6c6173733d27  	dc.b	"lass='s%i14'></td>"
 298  92f4 3c746420636c  	dc.b	"<td class='t4class"
 299  9306 273e3c696e70  	dc.b	"'><input type='rad"
 300  9318 696f27206964  	dc.b	"io' id='relay15on'"
 301  932a 206e616d653d  	dc.b	" name='o14' value="
 302  933c 27312720256f  	dc.b	"'1' %o14><label fo"
 303  934e 723d2772656c  	dc.b	"r='relay15on'>ON</"
 304  9360 6c6162656c3e  	dc.b	"label><input type="
 305  9372 277261        	dc.b	"'ra"
 306  9375 64696f272069  	dc.b	"dio' id='relay15of"
 307  9387 6627206e616d  	dc.b	"f' name='o14' valu"
 308  9399 653d27302720  	dc.b	"e='0' %p14><label "
 309  93ab 666f723d2772  	dc.b	"for='relay15off'>O"
 310  93bd 46463c2f6c61  	dc.b	"FF</label></td></t"
 311  93cf 723e3c74723e  	dc.b	"r><tr><td class='t"
 312  93e1 31636c617373  	dc.b	"1class'>Relay16</t"
 313  93f3 643e3c746420  	dc.b	"d><td class='s%i15"
 314  9405 273e3c2f7464  	dc.b	"'></td><td class='"
 315  9417 7434636c6173  	dc.b	"t4class'><input ty"
 316  9429 70653d277261  	dc.b	"pe='radio' id='rel"
 317  943b 617931366f6e  	dc.b	"ay16on' name='o15'"
 318  944d 2076616c7565  	dc.b	" value='1' %o15><l"
 319  945f 6162656c2066  	dc.b	"abel for='relay16o"
 320  9471 6e273e        	dc.b	"n'>"
 321  9474 4f4e3c2f6c61  	dc.b	"ON</label><input t"
 322  9486 7970653d2772  	dc.b	"ype='radio' id='re"
 323  9498 6c617931366f  	dc.b	"lay16off' name='o1"
 324  94aa 35272076616c  	dc.b	"5' value='0' %p15>"
 325  94bc 3c6c6162656c  	dc.b	"<label for='relay1"
 326  94ce 366f6666273e  	dc.b	"6off'>OFF</label><"
 327  94e0 2f74643e3c2f  	dc.b	"/td></tr><tr><td c"
 328  94f2 6c6173733d27  	dc.b	"lass='t1class'>Inv"
 329  9504 6572743c2f74  	dc.b	"ert</td><td class="
 330  9516 277433636c61  	dc.b	"'t3class'></td><td"
 331  9528 20636c617373  	dc.b	" class='t4class'><"
 332  953a 696e70757420  	dc.b	"input type='radio'"
 333  954c 2069643d2769  	dc.b	" id='invertOn' nam"
 334  955e 653d27673030  	dc.b	"e='g00' value='1' "
 335  9570 256730        	dc.b	"%g0"
 336  9573 303e3c6c6162  	dc.b	"0><label for='inve"
 337  9585 72744f6e273e  	dc.b	"rtOn'>ON</label><i"
 338  9597 6e7075742074  	dc.b	"nput type='radio' "
 339  95a9 69643d27696e  	dc.b	"id='invertOff' nam"
 340  95bb 653d27673030  	dc.b	"e='g00' value='0' "
 341  95cd 256830303e3c  	dc.b	"%h00><label for='i"
 342  95df 6e766572744f  	dc.b	"nvertOff'>OFF</lab"
 343  95f1 656c3e3c2f74  	dc.b	"el></td></tr></tab"
 344  9603 6c653e3c6275  	dc.b	"le><button type='s"
 345  9615 75626d697427  	dc.b	"ubmit' title='Save"
 346  9627 7320796f7572  	dc.b	"s your changes - d"
 347  9639 6f6573206e6f  	dc.b	"oes not restart th"
 348  964b 65204e657477  	dc.b	"e Network Module'>"
 349  965d 536176653c2f  	dc.b	"Save</button><butt"
 350  966f 6f6e20        	dc.b	"on "
 351  9672 747970653d27  	dc.b	"type='reset' title"
 352  9684 3d27556e2d64  	dc.b	"='Un-does any chan"
 353  9696 676573207468  	dc.b	"ges that have not "
 354  96a8 6265656e2073  	dc.b	"been saved'>Undo A"
 355  96ba 6c6c3c2f6275  	dc.b	"ll</button></form>"
 356  96cc 3c666f726d20  	dc.b	"<form style='displ"
 357  96de 61793a20696e  	dc.b	"ay: inline' action"
 358  96f0 3d2725783030  	dc.b	"='%x00http://192.1"
 359  9702 36382e303031  	dc.b	"68.001.004:08080/6"
 360  9714 3127206d6574  	dc.b	"1' method='GET'><b"
 361  9726 7574746f6e20  	dc.b	"utton title='Save "
 362  9738 666972737421  	dc.b	"first! This button"
 363  974a 2077696c6c20  	dc.b	" will not save you"
 364  975c 72206368616e  	dc.b	"r changes'>Address"
 365  976e 205365        	dc.b	" Se"
 366  9771 7474696e6773  	dc.b	"ttings</button></f"
 367  9783 6f726d3e3c66  	dc.b	"orm><form style='d"
 368  9795 6973706c6179  	dc.b	"isplay: inline' ac"
 369  97a7 74696f6e3d27  	dc.b	"tion='%x00http://1"
 370  97b9 39322e313638  	dc.b	"92.168.001.004:080"
 371  97cb 38302f363627  	dc.b	"80/66' method='GET"
 372  97dd 273e3c627574  	dc.b	"'><button title='S"
 373  97ef 617665206669  	dc.b	"ave first! This bu"
 374  9801 74746f6e2077  	dc.b	"tton will not save"
 375  9813 20796f757220  	dc.b	" your changes'>Net"
 376  9825 776f726b2053  	dc.b	"work Statistics</b"
 377  9837 7574746f6e3e  	dc.b	"utton></form><form"
 378  9849 207374796c65  	dc.b	" style='display: i"
 379  985b 6e6c696e6527  	dc.b	"nline' action='%x0"
 380  986d 306874        	dc.b	"0ht"
 381  9870 74703a2f2f31  	dc.b	"tp://192.168.001.0"
 382  9882 30343a303830  	dc.b	"04:08080/63' metho"
 383  9894 643d27474554  	dc.b	"d='GET'><button ti"
 384  98a6 746c653d2753  	dc.b	"tle='Save first! T"
 385  98b8 686973206275  	dc.b	"his button will no"
 386  98ca 742073617665  	dc.b	"t save your change"
 387  98dc 73273e48656c  	dc.b	"s'>Help</button></"
 388  98ee 666f726d3e3c  	dc.b	"form></body></html"
 389  9900 3e00          	dc.b	">",0
 390  9902               L71_g_HtmlPageAddress:
 391  9902 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 392  9914 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 393  9926 6561643e3c74  	dc.b	"ead><title>Address"
 394  9938 205365747469  	dc.b	" Settings</title><"
 395  994a 7374796c653e  	dc.b	"style>.t1class { w"
 396  995c 696474683a20  	dc.b	"idth: 100px; }.t2c"
 397  996e 6c617373207b  	dc.b	"lass { width: 25px"
 398  9980 3b207d2e7433  	dc.b	"; }.t3class { widt"
 399  9992 683a20313870  	dc.b	"h: 18px; }.t4class"
 400  99a4 207b20776964  	dc.b	" { width: 40px; }t"
 401  99b6 64207b207465  	dc.b	"d { text-align: ce"
 402  99c8 6e7465723b20  	dc.b	"nter; border: 1px "
 403  99da 626c61636b20  	dc.b	"black solid; }</st"
 404  99ec 796c653e3c2f  	dc.b	"yle></head><body><"
 405  99fe 68313e        	dc.b	"h1>"
 406  9a01 416464726573  	dc.b	"Address Settings</"
 407  9a13 68313e3c666f  	dc.b	"h1><form method='P"
 408  9a25 4f5354272061  	dc.b	"OST' action='/'><t"
 409  9a37 61626c653e3c  	dc.b	"able><tr><td class"
 410  9a49 3d277431636c  	dc.b	"='t1class'>IP Addr"
 411  9a5b 3c2f74643e3c  	dc.b	"</td><td><input ty"
 412  9a6d 70653d277465  	dc.b	"pe='text' name='b0"
 413  9a7f 302720636c61  	dc.b	"0' class='t2class'"
 414  9a91 2076616c7565  	dc.b	" value='%b00' patt"
 415  9aa3 65726e3d275b  	dc.b	"ern='[0-9]{3}' tit"
 416  9ab5 6c653d275468  	dc.b	"le='Three digits f"
 417  9ac7 726f6d203030  	dc.b	"rom 000 to 255' ma"
 418  9ad9 786c656e6774  	dc.b	"xlength='3' size='"
 419  9aeb 33273e3c2f74  	dc.b	"3'></td><td><input"
 420  9afd 207479        	dc.b	" ty"
 421  9b00 70653d277465  	dc.b	"pe='text' name='b0"
 422  9b12 312720636c61  	dc.b	"1' class='t2class'"
 423  9b24 2076616c7565  	dc.b	" value='%b01' patt"
 424  9b36 65726e3d275b  	dc.b	"ern='[0-9]{3}' tit"
 425  9b48 6c653d275468  	dc.b	"le='Three digits f"
 426  9b5a 726f6d203030  	dc.b	"rom 000 to 255' ma"
 427  9b6c 786c656e6774  	dc.b	"xlength='3' size='"
 428  9b7e 33273e3c2f74  	dc.b	"3'></td><td><input"
 429  9b90 20747970653d  	dc.b	" type='text' name="
 430  9ba2 276230322720  	dc.b	"'b02' class='t2cla"
 431  9bb4 737327207661  	dc.b	"ss' value='%b02' p"
 432  9bc6 61747465726e  	dc.b	"attern='[0-9]{3}' "
 433  9bd8 7469746c653d  	dc.b	"title='Three digit"
 434  9bea 732066726f6d  	dc.b	"s from 000 to 255'"
 435  9bfc 206d61        	dc.b	" ma"
 436  9bff 786c656e6774  	dc.b	"xlength='3' size='"
 437  9c11 33273e3c2f74  	dc.b	"3'></td><td><input"
 438  9c23 20747970653d  	dc.b	" type='text' name="
 439  9c35 276230332720  	dc.b	"'b03' class='t2cla"
 440  9c47 737327207661  	dc.b	"ss' value='%b03' p"
 441  9c59 61747465726e  	dc.b	"attern='[0-9]{3}' "
 442  9c6b 7469746c653d  	dc.b	"title='Three digit"
 443  9c7d 732066726f6d  	dc.b	"s from 000 to 255'"
 444  9c8f 206d61786c65  	dc.b	" maxlength='3' siz"
 445  9ca1 653d2733273e  	dc.b	"e='3'></td></tr><t"
 446  9cb3 723e3c746420  	dc.b	"r><td class='t1cla"
 447  9cc5 7373273e4761  	dc.b	"ss'>Gateway</td><t"
 448  9cd7 643e3c696e70  	dc.b	"d><input type='tex"
 449  9ce9 7427206e616d  	dc.b	"t' name='b04' clas"
 450  9cfb 733d27        	dc.b	"s='"
 451  9cfe 7432636c6173  	dc.b	"t2class' value='%b"
 452  9d10 303427207061  	dc.b	"04' pattern='[0-9]"
 453  9d22 7b337d272074  	dc.b	"{3}' title='Three "
 454  9d34 646967697473  	dc.b	"digits from 000 to"
 455  9d46 203235352720  	dc.b	" 255' maxlength='3"
 456  9d58 272073697a65  	dc.b	"' size='3'></td><t"
 457  9d6a 643e3c696e70  	dc.b	"d><input type='tex"
 458  9d7c 7427206e616d  	dc.b	"t' name='b05' clas"
 459  9d8e 733d27743263  	dc.b	"s='t2class' value="
 460  9da0 272562303527  	dc.b	"'%b05' pattern='[0"
 461  9db2 2d395d7b337d  	dc.b	"-9]{3}' title='Thr"
 462  9dc4 656520646967  	dc.b	"ee digits from 000"
 463  9dd6 20746f203235  	dc.b	" to 255' maxlength"
 464  9de8 3d2733272073  	dc.b	"='3' size='3'></td"
 465  9dfa 3e3c74        	dc.b	"><t"
 466  9dfd 643e3c696e70  	dc.b	"d><input type='tex"
 467  9e0f 7427206e616d  	dc.b	"t' name='b06' clas"
 468  9e21 733d27743263  	dc.b	"s='t2class' value="
 469  9e33 272562303627  	dc.b	"'%b06' pattern='[0"
 470  9e45 2d395d7b337d  	dc.b	"-9]{3}' title='Thr"
 471  9e57 656520646967  	dc.b	"ee digits from 000"
 472  9e69 20746f203235  	dc.b	" to 255' maxlength"
 473  9e7b 3d2733272073  	dc.b	"='3' size='3'></td"
 474  9e8d 3e3c74643e3c  	dc.b	"><td><input type='"
 475  9e9f 746578742720  	dc.b	"text' name='b07' c"
 476  9eb1 6c6173733d27  	dc.b	"lass='t2class' val"
 477  9ec3 75653d272562  	dc.b	"ue='%b07' pattern="
 478  9ed5 275b302d395d  	dc.b	"'[0-9]{3}' title='"
 479  9ee7 546872656520  	dc.b	"Three digits from "
 480  9ef9 303030        	dc.b	"000"
 481  9efc 20746f203235  	dc.b	" to 255' maxlength"
 482  9f0e 3d2733272073  	dc.b	"='3' size='3'></td"
 483  9f20 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 484  9f32 733d27743163  	dc.b	"s='t1class'>Netmas"
 485  9f44 6b3c2f74643e  	dc.b	"k</td><td><input t"
 486  9f56 7970653d2774  	dc.b	"ype='text' name='b"
 487  9f68 30382720636c  	dc.b	"08' class='t2class"
 488  9f7a 272076616c75  	dc.b	"' value='%b08' pat"
 489  9f8c 7465726e3d27  	dc.b	"tern='[0-9]{3}' ti"
 490  9f9e 746c653d2754  	dc.b	"tle='Three digits "
 491  9fb0 66726f6d2030  	dc.b	"from 000 to 255' m"
 492  9fc2 61786c656e67  	dc.b	"axlength='3' size="
 493  9fd4 2733273e3c2f  	dc.b	"'3'></td><td><inpu"
 494  9fe6 742074797065  	dc.b	"t type='text' name"
 495  9ff8 3d2762        	dc.b	"='b"
 496  9ffb 30392720636c  	dc.b	"09' class='t2class"
 497  a00d 272076616c75  	dc.b	"' value='%b09' pat"
 498  a01f 7465726e3d27  	dc.b	"tern='[0-9]{3}' ti"
 499  a031 746c653d2754  	dc.b	"tle='Three digits "
 500  a043 66726f6d2030  	dc.b	"from 000 to 255' m"
 501  a055 61786c656e67  	dc.b	"axlength='3' size="
 502  a067 2733273e3c2f  	dc.b	"'3'></td><td><inpu"
 503  a079 742074797065  	dc.b	"t type='text' name"
 504  a08b 3d2762313027  	dc.b	"='b10' class='t2cl"
 505  a09d 617373272076  	dc.b	"ass' value='%b10' "
 506  a0af 706174746572  	dc.b	"pattern='[0-9]{3}'"
 507  a0c1 207469746c65  	dc.b	" title='Three digi"
 508  a0d3 74732066726f  	dc.b	"ts from 000 to 255"
 509  a0e5 27206d61786c  	dc.b	"' maxlength='3' si"
 510  a0f7 7a653d        	dc.b	"ze="
 511  a0fa 2733273e3c2f  	dc.b	"'3'></td><td><inpu"
 512  a10c 742074797065  	dc.b	"t type='text' name"
 513  a11e 3d2762313127  	dc.b	"='b11' class='t2cl"
 514  a130 617373272076  	dc.b	"ass' value='%b11' "
 515  a142 706174746572  	dc.b	"pattern='[0-9]{3}'"
 516  a154 207469746c65  	dc.b	" title='Three digi"
 517  a166 74732066726f  	dc.b	"ts from 000 to 255"
 518  a178 27206d61786c  	dc.b	"' maxlength='3' si"
 519  a18a 7a653d273327  	dc.b	"ze='3'></td></tr><"
 520  a19c 2f7461626c65  	dc.b	"/table><table><tr>"
 521  a1ae 3c746420636c  	dc.b	"<td class='t1class"
 522  a1c0 273e506f7274  	dc.b	"'>Port   </td><td>"
 523  a1d2 3c696e707574  	dc.b	"<input type='text'"
 524  a1e4 206e616d653d  	dc.b	" name='c00' class="
 525  a1f6 277434        	dc.b	"'t4"
 526  a1f9 636c61737327  	dc.b	"class' value='%c00"
 527  a20b 272070617474  	dc.b	"' pattern='[0-9]{5"
 528  a21d 7d2720746974  	dc.b	"}' title='Five dig"
 529  a22f 697473206672  	dc.b	"its from 00010 to "
 530  a241 363535333627  	dc.b	"65536' maxlength='"
 531  a253 35272073697a  	dc.b	"5' size='5'></td><"
 532  a265 2f74723e3c2f  	dc.b	"/tr></table><table"
 533  a277 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 534  a289 636c61737327  	dc.b	"class'>MAC Address"
 535  a29b 3c2f74643e3c  	dc.b	"</td><td><input ty"
 536  a2ad 70653d277465  	dc.b	"pe='text' name='d0"
 537  a2bf 302720636c61  	dc.b	"0' class='t3class'"
 538  a2d1 2076616c7565  	dc.b	" value='%d00' patt"
 539  a2e3 65726e3d275b  	dc.b	"ern='[0-9a-f]{2}' "
 540  a2f5 746974        	dc.b	"tit"
 541  a2f8 6c653d275477  	dc.b	"le='Two hex digits"
 542  a30a 2066726f6d20  	dc.b	" from 00 to ff' ma"
 543  a31c 786c656e6774  	dc.b	"xlength='2' size='"
 544  a32e 32273e3c2f74  	dc.b	"2'></td><td><input"
 545  a340 20747970653d  	dc.b	" type='text' name="
 546  a352 276430312720  	dc.b	"'d01' class='t3cla"
 547  a364 737327207661  	dc.b	"ss' value='%d01' p"
 548  a376 61747465726e  	dc.b	"attern='[0-9a-f]{2"
 549  a388 7d2720746974  	dc.b	"}' title='Two hex "
 550  a39a 646967697473  	dc.b	"digits from 00 to "
 551  a3ac 666627206d61  	dc.b	"ff' maxlength='2' "
 552  a3be 73697a653d27  	dc.b	"size='2'></td><td>"
 553  a3d0 3c696e707574  	dc.b	"<input type='text'"
 554  a3e2 206e616d653d  	dc.b	" name='d02' class="
 555  a3f4 277433        	dc.b	"'t3"
 556  a3f7 636c61737327  	dc.b	"class' value='%d02"
 557  a409 272070617474  	dc.b	"' pattern='[0-9a-f"
 558  a41b 5d7b327d2720  	dc.b	"]{2}' title='Two h"
 559  a42d 657820646967  	dc.b	"ex digits from 00 "
 560  a43f 746f20666627  	dc.b	"to ff' maxlength='"
 561  a451 32272073697a  	dc.b	"2' size='2'></td><"
 562  a463 74643e3c696e  	dc.b	"td><input type='te"
 563  a475 787427206e61  	dc.b	"xt' name='d03' cla"
 564  a487 73733d277433  	dc.b	"ss='t3class' value"
 565  a499 3d2725643033  	dc.b	"='%d03' pattern='["
 566  a4ab 302d39612d66  	dc.b	"0-9a-f]{2}' title="
 567  a4bd 2754776f2068  	dc.b	"'Two hex digits fr"
 568  a4cf 6f6d20303020  	dc.b	"om 00 to ff' maxle"
 569  a4e1 6e6774683d27  	dc.b	"ngth='2' size='2'>"
 570  a4f3 3c2f74        	dc.b	"</t"
 571  a4f6 643e3c74643e  	dc.b	"d><td><input type="
 572  a508 277465787427  	dc.b	"'text' name='d04' "
 573  a51a 636c6173733d  	dc.b	"class='t3class' va"
 574  a52c 6c75653d2725  	dc.b	"lue='%d04' pattern"
 575  a53e 3d275b302d39  	dc.b	"='[0-9a-f]{2}' tit"
 576  a550 6c653d275477  	dc.b	"le='Two hex digits"
 577  a562 2066726f6d20  	dc.b	" from 00 to ff' ma"
 578  a574 786c656e6774  	dc.b	"xlength='2' size='"
 579  a586 32273e3c2f74  	dc.b	"2'></td><td><input"
 580  a598 20747970653d  	dc.b	" type='text' name="
 581  a5aa 276430352720  	dc.b	"'d05' class='t3cla"
 582  a5bc 737327207661  	dc.b	"ss' value='%d05' p"
 583  a5ce 61747465726e  	dc.b	"attern='[0-9a-f]{2"
 584  a5e0 7d2720746974  	dc.b	"}' title='Two hex "
 585  a5f2 646967        	dc.b	"dig"
 586  a5f5 697473206672  	dc.b	"its from 00 to ff'"
 587  a607 206d61786c65  	dc.b	" maxlength='2' siz"
 588  a619 653d2732273e  	dc.b	"e='2'></td></tr></"
 589  a62b 7461626c653e  	dc.b	"table><button type"
 590  a63d 3d277375626d  	dc.b	"='submit' title='S"
 591  a64f 617665732079  	dc.b	"aves your changes "
 592  a661 7468656e2072  	dc.b	"then restarts the "
 593  a673 4e6574776f72  	dc.b	"Network Module'>Sa"
 594  a685 76653c2f6275  	dc.b	"ve</button><button"
 595  a697 20747970653d  	dc.b	" type='reset' titl"
 596  a6a9 653d27556e2d  	dc.b	"e='Un-does any cha"
 597  a6bb 6e6765732074  	dc.b	"nges that have not"
 598  a6cd 206265656e20  	dc.b	" been saved'>Undo "
 599  a6df 416c6c3c2f62  	dc.b	"All</button></form"
 600  a6f1 3e3c70        	dc.b	"><p"
 601  a6f4 206c696e652d  	dc.b	" line-height 20px>"
 602  a706 557365206361  	dc.b	"Use caution when c"
 603  a718 68616e67696e  	dc.b	"hanging the above."
 604  a72a 20496620796f  	dc.b	" If you make a mis"
 605  a73c 74616b652079  	dc.b	"take you may have "
 606  a74e 746f3c62723e  	dc.b	"to<br>restore fact"
 607  a760 6f7279206465  	dc.b	"ory defaults by ho"
 608  a772 6c64696e6720  	dc.b	"lding down the res"
 609  a784 657420627574  	dc.b	"et button for 10 s"
 610  a796 65636f6e6473  	dc.b	"econds.<br><br>Mak"
 611  a7a8 652073757265  	dc.b	"e sure the MAC you"
 612  a7ba 206173736967  	dc.b	" assign is unique "
 613  a7cc 746f20796f75  	dc.b	"to your local netw"
 614  a7de 6f726b2e2052  	dc.b	"ork. Recommended<b"
 615  a7f0 723e69        	dc.b	"r>i"
 616  a7f3 732074686174  	dc.b	"s that you just in"
 617  a805 6372656d656e  	dc.b	"crement the lowest"
 618  a817 206f63746574  	dc.b	" octet and then la"
 619  a829 62656c20796f  	dc.b	"bel your devices f"
 620  a83b 6f723c62723e  	dc.b	"or<br>future refer"
 621  a84d 656e63652e3c  	dc.b	"ence.<br><br>If yo"
 622  a85f 75206368616e  	dc.b	"u change the highe"
 623  a871 7374206f6374  	dc.b	"st octet of the MA"
 624  a883 4320796f7520  	dc.b	"C you MUST use an "
 625  a895 6576656e206e  	dc.b	"even number to<br>"
 626  a8a7 666f726d2061  	dc.b	"form a unicast add"
 627  a8b9 726573732e20  	dc.b	"ress. 00, 02, ... "
 628  a8cb 66632c206665  	dc.b	"fc, fe etc work fi"
 629  a8dd 6e652e203031  	dc.b	"ne. 01, 03 ... fd,"
 630  a8ef 206666        	dc.b	" ff"
 631  a8f2 206172652066  	dc.b	" are for<br>multic"
 632  a904 61737420616e  	dc.b	"ast and will not w"
 633  a916 6f726b2e3c2f  	dc.b	"ork.</p><form styl"
 634  a928 653d27646973  	dc.b	"e='display: inline"
 635  a93a 272061637469  	dc.b	"' action='%x00http"
 636  a94c 3a2f2f313932  	dc.b	"://192.168.001.004"
 637  a95e 3a3038303830  	dc.b	":08080/91' method="
 638  a970 27474554273e  	dc.b	"'GET'><button titl"
 639  a982 653d27536176  	dc.b	"e='Save first! Thi"
 640  a994 732062757474  	dc.b	"s button will not "
 641  a9a6 736176652079  	dc.b	"save your changes'"
 642  a9b8 3e5265626f6f  	dc.b	">Reboot</button></"
 643  a9ca 666f726d3e26  	dc.b	"form>&nbsp&nbspNOT"
 644  a9dc 453a20526562  	dc.b	"E: Reboot may caus"
 645  a9ee 652074        	dc.b	"e t"
 646  a9f1 68652072656c  	dc.b	"he relays to cycle"
 647  aa03 2e3c62723e3c  	dc.b	".<br><br><form sty"
 648  aa15 6c653d276469  	dc.b	"le='display: inlin"
 649  aa27 652720616374  	dc.b	"e' action='%x00htt"
 650  aa39 703a2f2f3139  	dc.b	"p://192.168.001.00"
 651  aa4b 343a30383038  	dc.b	"4:08080/60' method"
 652  aa5d 3d2747455427  	dc.b	"='GET'><button tit"
 653  aa6f 6c653d275361  	dc.b	"le='Save first! Th"
 654  aa81 697320627574  	dc.b	"is button will not"
 655  aa93 207361766520  	dc.b	" save your changes"
 656  aaa5 273e52656c61  	dc.b	"'>Relay Controls</"
 657  aab7 627574746f6e  	dc.b	"button></form><for"
 658  aac9 6d207374796c  	dc.b	"m style='display: "
 659  aadb 696e6c696e65  	dc.b	"inline' action='%x"
 660  aaed 303068        	dc.b	"00h"
 661  aaf0 7474703a2f2f  	dc.b	"ttp://192.168.001."
 662  ab02 3030343a3038  	dc.b	"004:08080/66' meth"
 663  ab14 6f643d274745  	dc.b	"od='GET'><button t"
 664  ab26 69746c653d27  	dc.b	"itle='Save first! "
 665  ab38 546869732062  	dc.b	"This button will n"
 666  ab4a 6f7420736176  	dc.b	"ot save your chang"
 667  ab5c 6573273e4e65  	dc.b	"es'>Network Statis"
 668  ab6e 746963733c2f  	dc.b	"tics</button></for"
 669  ab80 6d3e3c666f72  	dc.b	"m><form style='dis"
 670  ab92 706c61793a20  	dc.b	"play: inline' acti"
 671  aba4 6f6e3d272578  	dc.b	"on='%x00http://192"
 672  abb6 2e3136382e30  	dc.b	".168.001.004:08080"
 673  abc8 2f363327206d  	dc.b	"/63' method='GET'>"
 674  abda 3c627574746f  	dc.b	"<button title='Sav"
 675  abec 652066        	dc.b	"e f"
 676  abef 697273742120  	dc.b	"irst! This button "
 677  ac01 77696c6c206e  	dc.b	"will not save your"
 678  ac13 206368616e67  	dc.b	" changes'>Help</bu"
 679  ac25 74746f6e3e3c  	dc.b	"tton></form></body"
 680  ac37 3e3c2f68746d  	dc.b	"></html>",0
 681  ac40               L12_g_HtmlPageHelp:
 682  ac40 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 683  ac52 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 684  ac64 6561643e3c74  	dc.b	"ead><title>Help Pa"
 685  ac76 67653c2f7469  	dc.b	"ge</title><style>t"
 686  ac88 64207b207769  	dc.b	"d { width: 140px; "
 687  ac9a 70616464696e  	dc.b	"padding: 0px; }</s"
 688  acac 74796c653e3c  	dc.b	"tyle></head><body>"
 689  acbe 3c68313e4865  	dc.b	"<h1>Help Page 1</h"
 690  acd0 313e3c70206c  	dc.b	"1><p line-height 2"
 691  ace2 3070783e416e  	dc.b	"0px>An alternative"
 692  acf4 20746f207573  	dc.b	" to using the web "
 693  ad06 696e74657266  	dc.b	"interface for chan"
 694  ad18 67696e672072  	dc.b	"ging relay states "
 695  ad2a 697320746f20  	dc.b	"is to send relay<b"
 696  ad3c 723e73        	dc.b	"r>s"
 697  ad3f 706563696669  	dc.b	"pecific html comma"
 698  ad51 6e64732e2045  	dc.b	"nds. Enter http://"
 699  ad63 49503a506f72  	dc.b	"IP:Port/xx where<b"
 700  ad75 723e2d204950  	dc.b	"r>- IP = the devic"
 701  ad87 652049502041  	dc.b	"e IP Address, for "
 702  ad99 6578616d706c  	dc.b	"example 192.168.1."
 703  adab 343c62723e2d  	dc.b	"4<br>- Port = the "
 704  adbd 646576696365  	dc.b	"device Port number"
 705  adcf 2c20666f7220  	dc.b	", for example 8080"
 706  ade1 3c62723e2d20  	dc.b	"<br>- xx = one of "
 707  adf3 74686520636f  	dc.b	"the codes below:<b"
 708  ae05 723e3c746162  	dc.b	"r><table><tr><td>0"
 709  ae17 30203d205265  	dc.b	"0 = Relay-01 OFF</"
 710  ae29 74643e3c7464  	dc.b	"td><td>09 = Relay-"
 711  ae3b 303520        	dc.b	"05 "
 712  ae3e 4f46463c2f74  	dc.b	"OFF</td><td>17 = R"
 713  ae50 656c61792d30  	dc.b	"elay-09 OFF</td><t"
 714  ae62 643e3235203d  	dc.b	"d>25 = Relay-13 OF"
 715  ae74 463c62723e3c  	dc.b	"F<br></td></tr><tr"
 716  ae86 3e3c74643e30  	dc.b	"><td>01 = Relay-01"
 717  ae98 20204f4e3c2f  	dc.b	"  ON</td><td>10 = "
 718  aeaa 52656c61792d  	dc.b	"Relay-05  ON</td><"
 719  aebc 74643e313820  	dc.b	"td>18 = Relay-09  "
 720  aece 4f4e3c2f7464  	dc.b	"ON</td><td>26 = Re"
 721  aee0 6c61792d3133  	dc.b	"lay-13  ON<br></td"
 722  aef2 3e3c2f74723e  	dc.b	"></tr><tr><td>02 ="
 723  af04 2052656c6179  	dc.b	" Relay-02 OFF</td>"
 724  af16 3c74643e3131  	dc.b	"<td>11 = Relay-06 "
 725  af28 4f46463c2f74  	dc.b	"OFF</td><td>19 = R"
 726  af3a 656c61        	dc.b	"ela"
 727  af3d 792d3130204f  	dc.b	"y-10 OFF</td><td>2"
 728  af4f 37203d205265  	dc.b	"7 = Relay-14 OFF<b"
 729  af61 723e3c2f7464  	dc.b	"r></td></tr><tr><t"
 730  af73 643e3033203d  	dc.b	"d>03 = Relay-02  O"
 731  af85 4e3c2f74643e  	dc.b	"N</td><td>12 = Rel"
 732  af97 61792d303620  	dc.b	"ay-06  ON</td><td>"
 733  afa9 3230203d2052  	dc.b	"20 = Relay-10  ON<"
 734  afbb 2f74643e3c74  	dc.b	"/td><td>28 = Relay"
 735  afcd 2d313420204f  	dc.b	"-14  ON<br></td></"
 736  afdf 74723e3c7472  	dc.b	"tr><tr><td>04 = Re"
 737  aff1 6c61792d3033  	dc.b	"lay-03 OFF</td><td"
 738  b003 3e3133203d20  	dc.b	">13 = Relay-07 OFF"
 739  b015 3c2f74643e3c  	dc.b	"</td><td>21 = Rela"
 740  b027 792d3131204f  	dc.b	"y-11 OFF</td><td>2"
 741  b039 39203d        	dc.b	"9 ="
 742  b03c 2052656c6179  	dc.b	" Relay-15 OFF<br><"
 743  b04e 2f74643e3c2f  	dc.b	"/td></tr><tr><td>0"
 744  b060 35203d205265  	dc.b	"5 = Relay-03  ON</"
 745  b072 74643e3c7464  	dc.b	"td><td>14 = Relay-"
 746  b084 303720204f4e  	dc.b	"07  ON</td><td>22 "
 747  b096 3d2052656c61  	dc.b	"= Relay-11  ON</td"
 748  b0a8 3e3c74643e33  	dc.b	"><td>30 = Relay-15"
 749  b0ba 20204f4e3c62  	dc.b	"  ON<br></td></tr>"
 750  b0cc 3c74723e3c74  	dc.b	"<tr><td>07 = Relay"
 751  b0de 2d3034204f46  	dc.b	"-04 OFF</td><td>15"
 752  b0f0 203d2052656c  	dc.b	" = Relay-08 OFF</t"
 753  b102 643e3c74643e  	dc.b	"d><td>23 = Relay-1"
 754  b114 32204f46463c  	dc.b	"2 OFF</td><td>31 ="
 755  b126 2052656c6179  	dc.b	" Relay-16 OFF<br><"
 756  b138 2f7464        	dc.b	"/td"
 757  b13b 3e3c2f74723e  	dc.b	"></tr><tr><td>08 ="
 758  b14d 2052656c6179  	dc.b	" Relay-04  ON</td>"
 759  b15f 3c74643e3136  	dc.b	"<td>16 = Relay-08 "
 760  b171 204f4e3c2f74  	dc.b	" ON</td><td>24 = R"
 761  b183 656c61792d31  	dc.b	"elay-12  ON</td><t"
 762  b195 643e3332203d  	dc.b	"d>32 = Relay-16  O"
 763  b1a7 4e3c62723e3c  	dc.b	"N<br></td></tr></t"
 764  b1b9 61626c653e35  	dc.b	"able>55 = All Rela"
 765  b1cb 7973204f4e3c  	dc.b	"ys ON<br>56 = All "
 766  b1dd 52656c617973  	dc.b	"Relays OFF<br><br>"
 767  b1ef 54686520666f  	dc.b	"The following are "
 768  b201 616c736f2061  	dc.b	"also available:<br"
 769  b213 3e3630203d20  	dc.b	">60 = Show Relay C"
 770  b225 6f6e74726f6c  	dc.b	"ontrol page<br>61 "
 771  b237 3d2053        	dc.b	"= S"
 772  b23a 686f77204164  	dc.b	"how Address Settin"
 773  b24c 677320706167  	dc.b	"gs page<br>63 = Sh"
 774  b25e 6f772048656c  	dc.b	"ow Help Page 1<br>"
 775  b270 3634203d2053  	dc.b	"64 = Show Help Pag"
 776  b282 6520323c6272  	dc.b	"e 2<br>65 = Flash "
 777  b294 4c45443c6272  	dc.b	"LED<br>66 = Show S"
 778  b2a6 746174697374  	dc.b	"tatistics<br>91 = "
 779  b2b8 5265626f6f74  	dc.b	"Reboot<br>99 = Sho"
 780  b2ca 772053686f72  	dc.b	"w Short Form Relay"
 781  b2dc 205365747469  	dc.b	" Settings<br></p><"
 782  b2ee 666f726d2073  	dc.b	"form style='displa"
 783  b300 793a20696e6c  	dc.b	"y: inline' action="
 784  b312 272578303068  	dc.b	"'%x00http://192.16"
 785  b324 382e3030312e  	dc.b	"8.001.004:08080/64"
 786  b336 27206d        	dc.b	"' m"
 787  b339 6574686f643d  	dc.b	"ethod='GET'><butto"
 788  b34b 6e207469746c  	dc.b	"n title='Go to nex"
 789  b35d 742048656c70  	dc.b	"t Help page'>Next "
 790  b36f 48656c702050  	dc.b	"Help Page</button>"
 791  b381 3c2f666f726d  	dc.b	"</form></body></ht"
 792  b393 6d6c3e00      	dc.b	"ml>",0
 793  b397               L32_g_HtmlPageHelp2:
 794  b397 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 795  b3a9 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 796  b3bb 6561643e3c74  	dc.b	"ead><title>Help Pa"
 797  b3cd 676520323c2f  	dc.b	"ge 2</title><style"
 798  b3df 3e3c2f737479  	dc.b	"></style></head><b"
 799  b3f1 6f64793e3c68  	dc.b	"ody><h1>Help Page "
 800  b403 323c2f68313e  	dc.b	"2</h1><p line-heig"
 801  b415 687420323070  	dc.b	"ht 20px>IP Address"
 802  b427 2c2047617465  	dc.b	", Gateway Address,"
 803  b439 204e65746d61  	dc.b	" Netmask, Port, an"
 804  b44b 64204d414320  	dc.b	"d MAC Address can "
 805  b45d 6f6e6c792062  	dc.b	"only be<br>changed"
 806  b46f 207669612074  	dc.b	" via the web inter"
 807  b481 666163652e20  	dc.b	"face. If the devic"
 808  b493 652062        	dc.b	"e b"
 809  b496 65636f6d6573  	dc.b	"ecomes inaccessibl"
 810  b4a8 6520796f7520  	dc.b	"e you can<br>reset"
 811  b4ba 20746f206661  	dc.b	" to factory defaul"
 812  b4cc 747320627920  	dc.b	"ts by holding the "
 813  b4de 726573657420  	dc.b	"reset button down "
 814  b4f0 666f72203130  	dc.b	"for 10 seconds.<br"
 815  b502 3e4465666175  	dc.b	">Defaults:<br> IP "
 816  b514 3139322e3136  	dc.b	"192.168.1.4<br> Ga"
 817  b526 746577617920  	dc.b	"teway 192.168.1.1<"
 818  b538 62723e204e65  	dc.b	"br> Netmask 255.25"
 819  b54a 352e3235352e  	dc.b	"5.255.0<br> Port 0"
 820  b55c 383038303c62  	dc.b	"8080<br> MAC c2-4d"
 821  b56e 2d36392d3662  	dc.b	"-69-6b-65-00<br><b"
 822  b580 723e436f6465  	dc.b	"r>Code Revision 20"
 823  b592 323030        	dc.b	"200"
 824  b595 363139203133  	dc.b	"619 1346</p><form "
 825  b5a7 7374796c653d  	dc.b	"style='display: in"
 826  b5b9 6c696e652720  	dc.b	"line' action='%x00"
 827  b5cb 687474703a2f  	dc.b	"http://192.168.001"
 828  b5dd 2e3030343a30  	dc.b	".004:08080/60' met"
 829  b5ef 686f643d2747  	dc.b	"hod='GET'><button "
 830  b601 7469746c653d  	dc.b	"title='Go to Relay"
 831  b613 20436f6e7472  	dc.b	" Control Page'>Rel"
 832  b625 617920436f6e  	dc.b	"ay Controls</butto"
 833  b637 6e3e3c2f666f  	dc.b	"n></form></body></"
 834  b649 68746d6c3e00  	dc.b	"html>",0
 835  b64f               L52_g_HtmlPageStats:
 836  b64f 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 837  b661 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 838  b673 6561643e3c74  	dc.b	"ead><title>Network"
 839  b685 205374617469  	dc.b	" Statistics</title"
 840  b697 3e3c7374796c  	dc.b	"><style>.t1class {"
 841  b6a9 207769647468  	dc.b	" width: 100px; }.t"
 842  b6bb 32636c617373  	dc.b	"2class { width: 45"
 843  b6cd 3070783b207d  	dc.b	"0px; }td { border:"
 844  b6df 203170782062  	dc.b	" 1px black solid; "
 845  b6f1 7d3c2f737479  	dc.b	"}</style></head><b"
 846  b703 6f64793e3c68  	dc.b	"ody><h1>Network St"
 847  b715 617469737469  	dc.b	"atistics</h1><p>Va"
 848  b727 6c7565732073  	dc.b	"lues shown are sin"
 849  b739 6365206c6173  	dc.b	"ce last power on o"
 850  b74b 722072        	dc.b	"r r"
 851  b74e 657365743c2f  	dc.b	"eset</p><table><tr"
 852  b760 3e3c74642063  	dc.b	"><td class='t1clas"
 853  b772 73273e256530  	dc.b	"s'>%e00xxxxxxxxxx<"
 854  b784 2f74643e3c74  	dc.b	"/td><td class='t2c"
 855  b796 6c617373273e  	dc.b	"lass'>Dropped pack"
 856  b7a8 657473206174  	dc.b	"ets at the IP laye"
 857  b7ba 723c2f74643e  	dc.b	"r</td></tr><tr><td"
 858  b7cc 20636c617373  	dc.b	" class='t1class'>%"
 859  b7de 653031787878  	dc.b	"e01xxxxxxxxxx</td>"
 860  b7f0 3c746420636c  	dc.b	"<td class='t2class"
 861  b802 273e52656365  	dc.b	"'>Received packets"
 862  b814 206174207468  	dc.b	" at the IP layer</"
 863  b826 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 864  b838 6173733d2774  	dc.b	"ass='t1class'>%e02"
 865  b84a 787878        	dc.b	"xxx"
 866  b84d 787878787878  	dc.b	"xxxxxxx</td><td cl"
 867  b85f 6173733d2774  	dc.b	"ass='t2class'>Sent"
 868  b871 207061636b65  	dc.b	" packets at the IP"
 869  b883 206c61796572  	dc.b	" layer</td></tr><t"
 870  b895 723e3c746420  	dc.b	"r><td class='t1cla"
 871  b8a7 7373273e2565  	dc.b	"ss'>%e03xxxxxxxxxx"
 872  b8b9 3c2f74643e3c  	dc.b	"</td><td class='t2"
 873  b8cb 636c61737327  	dc.b	"class'>Packets dro"
 874  b8dd 707065642064  	dc.b	"pped due to wrong "
 875  b8ef 495020766572  	dc.b	"IP version or head"
 876  b901 6572206c656e  	dc.b	"er length</td></tr"
 877  b913 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 878  b925 636c61737327  	dc.b	"class'>%e04xxxxxxx"
 879  b937 7878783c2f74  	dc.b	"xxx</td><td class="
 880  b949 277432        	dc.b	"'t2"
 881  b94c 636c61737327  	dc.b	"class'>Packets dro"
 882  b95e 707065642064  	dc.b	"pped due to wrong "
 883  b970 4950206c656e  	dc.b	"IP length, high by"
 884  b982 74653c2f7464  	dc.b	"te</td></tr><tr><t"
 885  b994 6420636c6173  	dc.b	"d class='t1class'>"
 886  b9a6 256530357878  	dc.b	"%e05xxxxxxxxxx</td"
 887  b9b8 3e3c74642063  	dc.b	"><td class='t2clas"
 888  b9ca 73273e506163  	dc.b	"s'>Packets dropped"
 889  b9dc 206475652074  	dc.b	" due to wrong IP l"
 890  b9ee 656e6774682c  	dc.b	"ength, low byte</t"
 891  ba00 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 892  ba12 73733d277431  	dc.b	"ss='t1class'>%e06x"
 893  ba24 787878787878  	dc.b	"xxxxxxxxx</td><td "
 894  ba36 636c6173733d  	dc.b	"class='t2class'>Pa"
 895  ba48 636b65        	dc.b	"cke"
 896  ba4b 74732064726f  	dc.b	"ts dropped since t"
 897  ba5d 686579207765  	dc.b	"hey were IP fragme"
 898  ba6f 6e74733c2f74  	dc.b	"nts</td></tr><tr><"
 899  ba81 746420636c61  	dc.b	"td class='t1class'"
 900  ba93 3e2565303778  	dc.b	">%e07xxxxxxxxxx</t"
 901  baa5 643e3c746420  	dc.b	"d><td class='t2cla"
 902  bab7 7373273e5061  	dc.b	"ss'>Packets droppe"
 903  bac9 642064756520  	dc.b	"d due to IP checks"
 904  badb 756d20657272  	dc.b	"um errors</td></tr"
 905  baed 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 906  baff 636c61737327  	dc.b	"class'>%e08xxxxxxx"
 907  bb11 7878783c2f74  	dc.b	"xxx</td><td class="
 908  bb23 277432636c61  	dc.b	"'t2class'>Packets "
 909  bb35 64726f707065  	dc.b	"dropped since they"
 910  bb47 207765        	dc.b	" we"
 911  bb4a 7265206e6f74  	dc.b	"re not ICMP or TCP"
 912  bb5c 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 913  bb6e 636c6173733d  	dc.b	"class='t1class'>%e"
 914  bb80 303978787878  	dc.b	"09xxxxxxxxxx</td><"
 915  bb92 746420636c61  	dc.b	"td class='t2class'"
 916  bba4 3e44726f7070  	dc.b	">Dropped ICMP pack"
 917  bbb6 6574733c2f74  	dc.b	"ets</td></tr><tr><"
 918  bbc8 746420636c61  	dc.b	"td class='t1class'"
 919  bbda 3e2565313078  	dc.b	">%e10xxxxxxxxxx</t"
 920  bbec 643e3c746420  	dc.b	"d><td class='t2cla"
 921  bbfe 7373273e5265  	dc.b	"ss'>Received ICMP "
 922  bc10 7061636b6574  	dc.b	"packets</td></tr><"
 923  bc22 74723e3c7464  	dc.b	"tr><td class='t1cl"
 924  bc34 617373273e25  	dc.b	"ass'>%e11xxxxxxxxx"
 925  bc46 783c2f        	dc.b	"x</"
 926  bc49 74643e3c7464  	dc.b	"td><td class='t2cl"
 927  bc5b 617373273e53  	dc.b	"ass'>Sent ICMP pac"
 928  bc6d 6b6574733c2f  	dc.b	"kets</td></tr><tr>"
 929  bc7f 3c746420636c  	dc.b	"<td class='t1class"
 930  bc91 273e25653132  	dc.b	"'>%e12xxxxxxxxxx</"
 931  bca3 74643e3c7464  	dc.b	"td><td class='t2cl"
 932  bcb5 617373273e49  	dc.b	"ass'>ICMP packets "
 933  bcc7 776974682061  	dc.b	"with a wrong type<"
 934  bcd9 2f74643e3c2f  	dc.b	"/td></tr><tr><td c"
 935  bceb 6c6173733d27  	dc.b	"lass='t1class'>%e1"
 936  bcfd 337878787878  	dc.b	"3xxxxxxxxxx</td><t"
 937  bd0f 6420636c6173  	dc.b	"d class='t2class'>"
 938  bd21 44726f707065  	dc.b	"Dropped TCP segmen"
 939  bd33 74733c2f7464  	dc.b	"ts</td></tr><tr><t"
 940  bd45 642063        	dc.b	"d c"
 941  bd48 6c6173733d27  	dc.b	"lass='t1class'>%e1"
 942  bd5a 347878787878  	dc.b	"4xxxxxxxxxx</td><t"
 943  bd6c 6420636c6173  	dc.b	"d class='t2class'>"
 944  bd7e 526563656976  	dc.b	"Received TCP segme"
 945  bd90 6e74733c2f74  	dc.b	"nts</td></tr><tr><"
 946  bda2 746420636c61  	dc.b	"td class='t1class'"
 947  bdb4 3e2565313578  	dc.b	">%e15xxxxxxxxxx</t"
 948  bdc6 643e3c746420  	dc.b	"d><td class='t2cla"
 949  bdd8 7373273e5365  	dc.b	"ss'>Sent TCP segme"
 950  bdea 6e74733c2f74  	dc.b	"nts</td></tr><tr><"
 951  bdfc 746420636c61  	dc.b	"td class='t1class'"
 952  be0e 3e2565313678  	dc.b	">%e16xxxxxxxxxx</t"
 953  be20 643e3c746420  	dc.b	"d><td class='t2cla"
 954  be32 7373273e5443  	dc.b	"ss'>TCP segments w"
 955  be44 697468        	dc.b	"ith"
 956  be47 206120626164  	dc.b	" a bad checksum</t"
 957  be59 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 958  be6b 73733d277431  	dc.b	"ss='t1class'>%e17x"
 959  be7d 787878787878  	dc.b	"xxxxxxxxx</td><td "
 960  be8f 636c6173733d  	dc.b	"class='t2class'>TC"
 961  bea1 50207365676d  	dc.b	"P segments with a "
 962  beb3 626164204143  	dc.b	"bad ACK number</td"
 963  bec5 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 964  bed7 733d27743163  	dc.b	"s='t1class'>%e18xx"
 965  bee9 787878787878  	dc.b	"xxxxxxxx</td><td c"
 966  befb 6c6173733d27  	dc.b	"lass='t2class'>Rec"
 967  bf0d 656976656420  	dc.b	"eived TCP RST (res"
 968  bf1f 657429207365  	dc.b	"et) segments</td><"
 969  bf31 2f74723e3c74  	dc.b	"/tr><tr><td class="
 970  bf43 277431        	dc.b	"'t1"
 971  bf46 636c61737327  	dc.b	"class'>%e19xxxxxxx"
 972  bf58 7878783c2f74  	dc.b	"xxx</td><td class="
 973  bf6a 277432636c61  	dc.b	"'t2class'>Retransm"
 974  bf7c 697474656420  	dc.b	"itted TCP segments"
 975  bf8e 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 976  bfa0 636c6173733d  	dc.b	"class='t1class'>%e"
 977  bfb2 323078787878  	dc.b	"20xxxxxxxxxx</td><"
 978  bfc4 746420636c61  	dc.b	"td class='t2class'"
 979  bfd6 3e44726f7070  	dc.b	">Dropped SYNs due "
 980  bfe8 746f20746f6f  	dc.b	"to too few connect"
 981  bffa 696f6e732061  	dc.b	"ions avaliable</td"
 982  c00c 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 983  c01e 733d27743163  	dc.b	"s='t1class'>%e21xx"
 984  c030 787878787878  	dc.b	"xxxxxxxx</td><td c"
 985  c042 6c6173        	dc.b	"las"
 986  c045 733d27743263  	dc.b	"s='t2class'>SYNs f"
 987  c057 6f7220636c6f  	dc.b	"or closed ports, t"
 988  c069 726967676572  	dc.b	"riggering a RST</t"
 989  c07b 643e3c2f7472  	dc.b	"d></tr></table><fo"
 990  c08d 726d20737479  	dc.b	"rm style='display:"
 991  c09f 20696e6c696e  	dc.b	" inline' action='%"
 992  c0b1 783030687474  	dc.b	"x00http://192.168."
 993  c0c3 3030312e3030  	dc.b	"001.004:08080/60' "
 994  c0d5 6d6574686f64  	dc.b	"method='GET'><butt"
 995  c0e7 6f6e20746974  	dc.b	"on title='Go to Re"
 996  c0f9 6c617920436f  	dc.b	"lay Control Page'>"
 997  c10b 52656c617920  	dc.b	"Relay Controls</bu"
 998  c11d 74746f6e3e3c  	dc.b	"tton></form></body"
 999  c12f 3e3c2f68746d  	dc.b	"></html>",0
1000  c138               L72_g_HtmlPageRstate:
1001  c138 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
1002  c14a 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
1003  c15c 6561643e3c74  	dc.b	"ead><title>Help Pa"
1004  c16e 676520323c2f  	dc.b	"ge 2</title><style"
1005  c180 3e3c2f737479  	dc.b	"></style></head><b"
1006  c192 6f64793e3c70  	dc.b	"ody><p>%f00xxxxxxx"
1007  c1a4 787878787878  	dc.b	"xxxxxxxxx</p></bod"
1008  c1b6 793e3c2f6874  	dc.b	"y></html>",0
1074                     ; 612 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1074                     ; 613 {
1076                     	switch	.text
1077  c76b               L3_CopyStringP:
1079  c76b 89            	pushw	x
1080  c76c 5203          	subw	sp,#3
1081       00000003      OFST:	set	3
1084                     ; 618   nBytes = 0;
1086  c76e 5f            	clrw	x
1088  c76f 2014          	jra	L17
1089  c771               L56:
1090                     ; 620     **ppBuffer = Character;
1092  c771 1e04          	ldw	x,(OFST+1,sp)
1093  c773 fe            	ldw	x,(x)
1094  c774 f7            	ld	(x),a
1095                     ; 621     *ppBuffer = *ppBuffer + 1;
1097  c775 1e04          	ldw	x,(OFST+1,sp)
1098  c777 9093          	ldw	y,x
1099  c779 fe            	ldw	x,(x)
1100  c77a 5c            	incw	x
1101  c77b 90ff          	ldw	(y),x
1102                     ; 622     pString = pString + 1;
1104  c77d 1e08          	ldw	x,(OFST+5,sp)
1105  c77f 5c            	incw	x
1106  c780 1f08          	ldw	(OFST+5,sp),x
1107                     ; 623     nBytes++;
1109  c782 1e01          	ldw	x,(OFST-2,sp)
1110  c784 5c            	incw	x
1111  c785               L17:
1112  c785 1f01          	ldw	(OFST-2,sp),x
1114                     ; 619   while ((Character = pString[0]) != '\0') {
1114                     ; 620     **ppBuffer = Character;
1114                     ; 621     *ppBuffer = *ppBuffer + 1;
1114                     ; 622     pString = pString + 1;
1114                     ; 623     nBytes++;
1116  c787 1e08          	ldw	x,(OFST+5,sp)
1117  c789 f6            	ld	a,(x)
1118  c78a 6b03          	ld	(OFST+0,sp),a
1120  c78c 26e3          	jrne	L56
1121                     ; 625   return nBytes;
1123  c78e 1e01          	ldw	x,(OFST-2,sp)
1126  c790 5b05          	addw	sp,#5
1127  c792 81            	ret	
1172                     ; 629 static uint16_t CopyValue(uint8_t** ppBuffer, uint32_t nValue)
1172                     ; 630 {
1173                     	switch	.text
1174  c793               L5_CopyValue:
1176  c793 89            	pushw	x
1177       00000000      OFST:	set	0
1180                     ; 638   emb_itoa(nValue, OctetArray, 10, 5);
1182  c794 4b05          	push	#5
1183  c796 4b0a          	push	#10
1184  c798 ae0010        	ldw	x,#_OctetArray
1185  c79b 89            	pushw	x
1186  c79c 1e0b          	ldw	x,(OFST+11,sp)
1187  c79e 89            	pushw	x
1188  c79f 1e0b          	ldw	x,(OFST+11,sp)
1189  c7a1 89            	pushw	x
1190  c7a2 ad53          	call	_emb_itoa
1192  c7a4 5b08          	addw	sp,#8
1193                     ; 640   **ppBuffer = OctetArray[0];
1195  c7a6 1e01          	ldw	x,(OFST+1,sp)
1196  c7a8 fe            	ldw	x,(x)
1197  c7a9 c60010        	ld	a,_OctetArray
1198  c7ac f7            	ld	(x),a
1199                     ; 641   *ppBuffer = *ppBuffer + 1;
1201  c7ad 1e01          	ldw	x,(OFST+1,sp)
1202  c7af 9093          	ldw	y,x
1203  c7b1 fe            	ldw	x,(x)
1204  c7b2 5c            	incw	x
1205  c7b3 90ff          	ldw	(y),x
1206                     ; 643   **ppBuffer = OctetArray[1];
1208  c7b5 1e01          	ldw	x,(OFST+1,sp)
1209  c7b7 fe            	ldw	x,(x)
1210  c7b8 c60011        	ld	a,_OctetArray+1
1211  c7bb f7            	ld	(x),a
1212                     ; 644   *ppBuffer = *ppBuffer + 1;
1214  c7bc 1e01          	ldw	x,(OFST+1,sp)
1215  c7be 9093          	ldw	y,x
1216  c7c0 fe            	ldw	x,(x)
1217  c7c1 5c            	incw	x
1218  c7c2 90ff          	ldw	(y),x
1219                     ; 646   **ppBuffer = OctetArray[2];
1221  c7c4 1e01          	ldw	x,(OFST+1,sp)
1222  c7c6 fe            	ldw	x,(x)
1223  c7c7 c60012        	ld	a,_OctetArray+2
1224  c7ca f7            	ld	(x),a
1225                     ; 647   *ppBuffer = *ppBuffer + 1;
1227  c7cb 1e01          	ldw	x,(OFST+1,sp)
1228  c7cd 9093          	ldw	y,x
1229  c7cf fe            	ldw	x,(x)
1230  c7d0 5c            	incw	x
1231  c7d1 90ff          	ldw	(y),x
1232                     ; 649   **ppBuffer = OctetArray[3];
1234  c7d3 1e01          	ldw	x,(OFST+1,sp)
1235  c7d5 fe            	ldw	x,(x)
1236  c7d6 c60013        	ld	a,_OctetArray+3
1237  c7d9 f7            	ld	(x),a
1238                     ; 650   *ppBuffer = *ppBuffer + 1;
1240  c7da 1e01          	ldw	x,(OFST+1,sp)
1241  c7dc 9093          	ldw	y,x
1242  c7de fe            	ldw	x,(x)
1243  c7df 5c            	incw	x
1244  c7e0 90ff          	ldw	(y),x
1245                     ; 652   **ppBuffer = OctetArray[4];
1247  c7e2 1e01          	ldw	x,(OFST+1,sp)
1248  c7e4 fe            	ldw	x,(x)
1249  c7e5 c60014        	ld	a,_OctetArray+4
1250  c7e8 f7            	ld	(x),a
1251                     ; 653   *ppBuffer = *ppBuffer + 1;
1253  c7e9 1e01          	ldw	x,(OFST+1,sp)
1254  c7eb 9093          	ldw	y,x
1255  c7ed fe            	ldw	x,(x)
1256  c7ee 5c            	incw	x
1257  c7ef 90ff          	ldw	(y),x
1258                     ; 655   return 5;
1260  c7f1 ae0005        	ldw	x,#5
1263  c7f4 5b02          	addw	sp,#2
1264  c7f6 81            	ret	
1336                     ; 659 char* emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
1336                     ; 660 {
1337                     	switch	.text
1338  c7f7               _emb_itoa:
1340  c7f7 5206          	subw	sp,#6
1341       00000006      OFST:	set	6
1344                     ; 675   for (i=0; i < 10; i++) str[i] = '0';
1346  c7f9 4f            	clr	a
1347  c7fa 6b06          	ld	(OFST+0,sp),a
1349  c7fc               L541:
1352  c7fc 5f            	clrw	x
1353  c7fd 97            	ld	xl,a
1354  c7fe 72fb0d        	addw	x,(OFST+7,sp)
1355  c801 a630          	ld	a,#48
1356  c803 f7            	ld	(x),a
1359  c804 0c06          	inc	(OFST+0,sp)
1363  c806 7b06          	ld	a,(OFST+0,sp)
1364  c808 a10a          	cp	a,#10
1365  c80a 25f0          	jrult	L541
1366                     ; 676   str[pad] = '\0';
1368  c80c 7b10          	ld	a,(OFST+10,sp)
1369  c80e 5f            	clrw	x
1370  c80f 97            	ld	xl,a
1371  c810 72fb0d        	addw	x,(OFST+7,sp)
1372  c813 7f            	clr	(x)
1373                     ; 677   if (num == 0) return str;
1375  c814 96            	ldw	x,sp
1376  c815 1c0009        	addw	x,#OFST+3
1377  c818 cdfb13        	call	c_lzmp
1381  c81b 2775          	jreq	L61
1382                     ; 680   i = 0;
1384  c81d 0f06          	clr	(OFST+0,sp)
1387  c81f 2060          	jra	L161
1388  c821               L551:
1389                     ; 682     rem = (uint8_t)(num % base);
1391  c821 7b0f          	ld	a,(OFST+9,sp)
1392  c823 b703          	ld	c_lreg+3,a
1393  c825 3f02          	clr	c_lreg+2
1394  c827 3f01          	clr	c_lreg+1
1395  c829 3f00          	clr	c_lreg
1396  c82b 96            	ldw	x,sp
1397  c82c 5c            	incw	x
1398  c82d cdfb26        	call	c_rtol
1401  c830 96            	ldw	x,sp
1402  c831 1c0009        	addw	x,#OFST+3
1403  c834 cdf9c0        	call	c_ltor
1405  c837 96            	ldw	x,sp
1406  c838 5c            	incw	x
1407  c839 cdfaf9        	call	c_lumd
1409  c83c b603          	ld	a,c_lreg+3
1410  c83e 6b05          	ld	(OFST-1,sp),a
1412                     ; 683     if(rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
1414  c840 a10a          	cp	a,#10
1415  c842 7b06          	ld	a,(OFST+0,sp)
1416  c844 250d          	jrult	L561
1419  c846 0c06          	inc	(OFST+0,sp)
1421  c848 5f            	clrw	x
1422  c849 97            	ld	xl,a
1423  c84a 72fb0d        	addw	x,(OFST+7,sp)
1424  c84d 7b05          	ld	a,(OFST-1,sp)
1425  c84f ab57          	add	a,#87
1427  c851 200b          	jra	L761
1428  c853               L561:
1429                     ; 684     else str[i++] = (uint8_t)(rem + '0');
1431  c853 0c06          	inc	(OFST+0,sp)
1433  c855 5f            	clrw	x
1434  c856 97            	ld	xl,a
1435  c857 72fb0d        	addw	x,(OFST+7,sp)
1436  c85a 7b05          	ld	a,(OFST-1,sp)
1437  c85c ab30          	add	a,#48
1438  c85e               L761:
1439  c85e f7            	ld	(x),a
1440                     ; 685     num = num/base;
1442  c85f 7b0f          	ld	a,(OFST+9,sp)
1443  c861 b703          	ld	c_lreg+3,a
1444  c863 3f02          	clr	c_lreg+2
1445  c865 3f01          	clr	c_lreg+1
1446  c867 3f00          	clr	c_lreg
1447  c869 96            	ldw	x,sp
1448  c86a 5c            	incw	x
1449  c86b cdfb26        	call	c_rtol
1452  c86e 96            	ldw	x,sp
1453  c86f 1c0009        	addw	x,#OFST+3
1454  c872 cdf9c0        	call	c_ltor
1456  c875 96            	ldw	x,sp
1457  c876 5c            	incw	x
1458  c877 cdf9d2        	call	c_ludv
1460  c87a 96            	ldw	x,sp
1461  c87b 1c0009        	addw	x,#OFST+3
1462  c87e cdfb26        	call	c_rtol
1464  c881               L161:
1465                     ; 681   while (num != 0) {
1467  c881 96            	ldw	x,sp
1468  c882 1c0009        	addw	x,#OFST+3
1469  c885 cdfb13        	call	c_lzmp
1471  c888 2697          	jrne	L551
1472                     ; 689   reverse(str, pad);
1474  c88a 7b10          	ld	a,(OFST+10,sp)
1475  c88c 88            	push	a
1476  c88d 1e0e          	ldw	x,(OFST+8,sp)
1477  c88f ad06          	call	_reverse
1479  c891 84            	pop	a
1480                     ; 691   return str;
1483  c892               L61:
1485  c892 1e0d          	ldw	x,(OFST+7,sp)
1487  c894 5b06          	addw	sp,#6
1488  c896 81            	ret	
1551                     ; 696 void reverse(char str[], uint8_t length)
1551                     ; 697 {
1552                     	switch	.text
1553  c897               _reverse:
1555  c897 89            	pushw	x
1556  c898 5203          	subw	sp,#3
1557       00000003      OFST:	set	3
1560                     ; 702   start = 0;
1562  c89a 0f02          	clr	(OFST-1,sp)
1564                     ; 703   end = (uint8_t)(length - 1);
1566  c89c 7b08          	ld	a,(OFST+5,sp)
1567  c89e 4a            	dec	a
1568  c89f 6b03          	ld	(OFST+0,sp),a
1571  c8a1 2029          	jra	L322
1572  c8a3               L712:
1573                     ; 706     temp = str[start];
1575  c8a3 5f            	clrw	x
1576  c8a4 97            	ld	xl,a
1577  c8a5 72fb04        	addw	x,(OFST+1,sp)
1578  c8a8 f6            	ld	a,(x)
1579  c8a9 6b01          	ld	(OFST-2,sp),a
1581                     ; 707     str[start] = str[end];
1583  c8ab 5f            	clrw	x
1584  c8ac 7b02          	ld	a,(OFST-1,sp)
1585  c8ae 97            	ld	xl,a
1586  c8af 72fb04        	addw	x,(OFST+1,sp)
1587  c8b2 7b03          	ld	a,(OFST+0,sp)
1588  c8b4 905f          	clrw	y
1589  c8b6 9097          	ld	yl,a
1590  c8b8 72f904        	addw	y,(OFST+1,sp)
1591  c8bb 90f6          	ld	a,(y)
1592  c8bd f7            	ld	(x),a
1593                     ; 708     str[end] = temp;
1595  c8be 5f            	clrw	x
1596  c8bf 7b03          	ld	a,(OFST+0,sp)
1597  c8c1 97            	ld	xl,a
1598  c8c2 72fb04        	addw	x,(OFST+1,sp)
1599  c8c5 7b01          	ld	a,(OFST-2,sp)
1600  c8c7 f7            	ld	(x),a
1601                     ; 709     start++;
1603  c8c8 0c02          	inc	(OFST-1,sp)
1605                     ; 710     end--;
1607  c8ca 0a03          	dec	(OFST+0,sp)
1609  c8cc               L322:
1610                     ; 705   while (start < end) {
1610                     ; 706     temp = str[start];
1610                     ; 707     str[start] = str[end];
1610                     ; 708     str[end] = temp;
1610                     ; 709     start++;
1610                     ; 710     end--;
1612  c8cc 7b02          	ld	a,(OFST-1,sp)
1613  c8ce 1103          	cp	a,(OFST+0,sp)
1614  c8d0 25d1          	jrult	L712
1615                     ; 712 }
1618  c8d2 5b05          	addw	sp,#5
1619  c8d4 81            	ret	
1680                     ; 715 uint8_t three_alpha_to_uint(uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
1680                     ; 716 {
1681                     	switch	.text
1682  c8d5               _three_alpha_to_uint:
1684  c8d5 89            	pushw	x
1685  c8d6 89            	pushw	x
1686       00000002      OFST:	set	2
1689                     ; 724   value = (uint8_t)((alpha1 - '0') *100);
1691  c8d7 9e            	ld	a,xh
1692  c8d8 97            	ld	xl,a
1693  c8d9 a664          	ld	a,#100
1694  c8db 42            	mul	x,a
1695  c8dc 9f            	ld	a,xl
1696  c8dd a0c0          	sub	a,#192
1697  c8df 6b02          	ld	(OFST+0,sp),a
1699                     ; 725   digit = (uint8_t)((alpha2 - '0') * 10);
1701  c8e1 7b04          	ld	a,(OFST+2,sp)
1702  c8e3 97            	ld	xl,a
1703  c8e4 a60a          	ld	a,#10
1704  c8e6 42            	mul	x,a
1705  c8e7 9f            	ld	a,xl
1706  c8e8 a0e0          	sub	a,#224
1708                     ; 726   value = (uint8_t)(value + digit);
1710  c8ea 1b02          	add	a,(OFST+0,sp)
1711  c8ec 6b02          	ld	(OFST+0,sp),a
1713                     ; 727   digit = (uint8_t)(alpha3 - '0');
1715  c8ee 7b07          	ld	a,(OFST+5,sp)
1716  c8f0 a030          	sub	a,#48
1717  c8f2 6b01          	ld	(OFST-1,sp),a
1719                     ; 728   value = (uint8_t)(value + digit);
1721  c8f4 1b02          	add	a,(OFST+0,sp)
1723                     ; 730   if(value >= 255) value = 0;
1725  c8f6 a1ff          	cp	a,#255
1726  c8f8 2501          	jrult	L352
1729  c8fa 4f            	clr	a
1731  c8fb               L352:
1732                     ; 732   return value;
1736  c8fb 5b04          	addw	sp,#4
1737  c8fd 81            	ret	
1783                     ; 736 uint8_t two_alpha_to_uint(uint8_t alpha1, uint8_t alpha2)
1783                     ; 737 {
1784                     	switch	.text
1785  c8fe               _two_alpha_to_uint:
1787  c8fe 89            	pushw	x
1788  c8ff 88            	push	a
1789       00000001      OFST:	set	1
1792                     ; 744   if (alpha1 >= '0' && alpha1 <= '9') value = (uint8_t)((alpha1 - '0') << 4);
1794  c900 9e            	ld	a,xh
1795  c901 a130          	cp	a,#48
1796  c903 250f          	jrult	L572
1798  c905 9e            	ld	a,xh
1799  c906 a13a          	cp	a,#58
1800  c908 240a          	jruge	L572
1803  c90a 9e            	ld	a,xh
1804  c90b 97            	ld	xl,a
1805  c90c a610          	ld	a,#16
1806  c90e 42            	mul	x,a
1807  c90f 9f            	ld	a,xl
1808  c910 a000          	sub	a,#0
1810  c912 2030          	jp	LC001
1811  c914               L572:
1812                     ; 745   else if(alpha1 == 'a') value = 0xa0;
1814  c914 7b02          	ld	a,(OFST+1,sp)
1815  c916 a161          	cp	a,#97
1816  c918 2604          	jrne	L103
1819  c91a a6a0          	ld	a,#160
1821  c91c 2026          	jp	LC001
1822  c91e               L103:
1823                     ; 746   else if(alpha1 == 'b') value = 0xb0;
1825  c91e a162          	cp	a,#98
1826  c920 2604          	jrne	L503
1829  c922 a6b0          	ld	a,#176
1831  c924 201e          	jp	LC001
1832  c926               L503:
1833                     ; 747   else if(alpha1 == 'c') value = 0xc0;
1835  c926 a163          	cp	a,#99
1836  c928 2604          	jrne	L113
1839  c92a a6c0          	ld	a,#192
1841  c92c 2016          	jp	LC001
1842  c92e               L113:
1843                     ; 748   else if(alpha1 == 'd') value = 0xd0;
1845  c92e a164          	cp	a,#100
1846  c930 2604          	jrne	L513
1849  c932 a6d0          	ld	a,#208
1851  c934 200e          	jp	LC001
1852  c936               L513:
1853                     ; 749   else if(alpha1 == 'e') value = 0xe0;
1855  c936 a165          	cp	a,#101
1856  c938 2604          	jrne	L123
1859  c93a a6e0          	ld	a,#224
1861  c93c 2006          	jp	LC001
1862  c93e               L123:
1863                     ; 750   else if(alpha1 == 'f') value = 0xf0;
1865  c93e a166          	cp	a,#102
1866  c940 2606          	jrne	L523
1869  c942 a6f0          	ld	a,#240
1870  c944               LC001:
1871  c944 6b01          	ld	(OFST+0,sp),a
1874  c946 2002          	jra	L772
1875  c948               L523:
1876                     ; 751   else value = 0; // If an invalid entry is made convert it to 0
1878  c948 0f01          	clr	(OFST+0,sp)
1880  c94a               L772:
1881                     ; 753   if (alpha2 >= '0' && alpha2 <= '9') value = (uint8_t)(value + alpha2 - '0');
1883  c94a 7b03          	ld	a,(OFST+2,sp)
1884  c94c a130          	cp	a,#48
1885  c94e 250c          	jrult	L133
1887  c950 a13a          	cp	a,#58
1888  c952 2408          	jruge	L133
1891  c954 7b01          	ld	a,(OFST+0,sp)
1892  c956 1b03          	add	a,(OFST+2,sp)
1893  c958 a030          	sub	a,#48
1895  c95a 203d          	jp	L333
1896  c95c               L133:
1897                     ; 754   else if(alpha2 == 'a') value = (uint8_t)(value + 0x0a);
1899  c95c a161          	cp	a,#97
1900  c95e 2606          	jrne	L533
1903  c960 7b01          	ld	a,(OFST+0,sp)
1904  c962 ab0a          	add	a,#10
1906  c964 2033          	jp	L333
1907  c966               L533:
1908                     ; 755   else if(alpha2 == 'b') value = (uint8_t)(value + 0x0b);
1910  c966 a162          	cp	a,#98
1911  c968 2606          	jrne	L143
1914  c96a 7b01          	ld	a,(OFST+0,sp)
1915  c96c ab0b          	add	a,#11
1917  c96e 2029          	jp	L333
1918  c970               L143:
1919                     ; 756   else if(alpha2 == 'c') value = (uint8_t)(value + 0x0c);
1921  c970 a163          	cp	a,#99
1922  c972 2606          	jrne	L543
1925  c974 7b01          	ld	a,(OFST+0,sp)
1926  c976 ab0c          	add	a,#12
1928  c978 201f          	jp	L333
1929  c97a               L543:
1930                     ; 757   else if(alpha2 == 'd') value = (uint8_t)(value + 0x0d);
1932  c97a a164          	cp	a,#100
1933  c97c 2606          	jrne	L153
1936  c97e 7b01          	ld	a,(OFST+0,sp)
1937  c980 ab0d          	add	a,#13
1939  c982 2015          	jp	L333
1940  c984               L153:
1941                     ; 758   else if(alpha2 == 'e') value = (uint8_t)(value + 0x0e);
1943  c984 a165          	cp	a,#101
1944  c986 2606          	jrne	L553
1947  c988 7b01          	ld	a,(OFST+0,sp)
1948  c98a ab0e          	add	a,#14
1950  c98c 200b          	jp	L333
1951  c98e               L553:
1952                     ; 759   else if(alpha2 == 'f') value = (uint8_t)(value + 0x0f);
1954  c98e a166          	cp	a,#102
1955  c990 2606          	jrne	L163
1958  c992 7b01          	ld	a,(OFST+0,sp)
1959  c994 ab0f          	add	a,#15
1962  c996 2001          	jra	L333
1963  c998               L163:
1964                     ; 760   else value = 0; // If an invalid entry is made convert it to 0
1966  c998 4f            	clr	a
1968  c999               L333:
1969                     ; 762   return value;
1973  c999 5b03          	addw	sp,#3
1974  c99b 81            	ret	
2025                     ; 766 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint32_t nDataLen)
2025                     ; 767 {
2026                     	switch	.text
2027  c99c               L7_CopyHttpHeader:
2029  c99c 89            	pushw	x
2030  c99d 89            	pushw	x
2031       00000002      OFST:	set	2
2034                     ; 770   nBytes = 0;
2036  c99e 5f            	clrw	x
2037  c99f 1f01          	ldw	(OFST-1,sp),x
2039                     ; 772   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
2041  c9a1 aec301        	ldw	x,#L704
2042  c9a4 89            	pushw	x
2043  c9a5 96            	ldw	x,sp
2044  c9a6 1c0005        	addw	x,#OFST+3
2045  c9a9 cdc76b        	call	L3_CopyStringP
2047  c9ac 5b02          	addw	sp,#2
2048  c9ae 72fb01        	addw	x,(OFST-1,sp)
2049  c9b1 1f01          	ldw	(OFST-1,sp),x
2051                     ; 773   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2053  c9b3 aec2fe        	ldw	x,#L114
2054  c9b6 89            	pushw	x
2055  c9b7 96            	ldw	x,sp
2056  c9b8 1c0005        	addw	x,#OFST+3
2057  c9bb cdc76b        	call	L3_CopyStringP
2059  c9be 5b02          	addw	sp,#2
2060  c9c0 72fb01        	addw	x,(OFST-1,sp)
2061  c9c3 1f01          	ldw	(OFST-1,sp),x
2063                     ; 775   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
2065  c9c5 aec2ee        	ldw	x,#L314
2066  c9c8 89            	pushw	x
2067  c9c9 96            	ldw	x,sp
2068  c9ca 1c0005        	addw	x,#OFST+3
2069  c9cd cdc76b        	call	L3_CopyStringP
2071  c9d0 5b02          	addw	sp,#2
2072  c9d2 72fb01        	addw	x,(OFST-1,sp)
2073  c9d5 1f01          	ldw	(OFST-1,sp),x
2075                     ; 776   nBytes += CopyValue(&pBuffer, nDataLen);
2077  c9d7 1e09          	ldw	x,(OFST+7,sp)
2078  c9d9 89            	pushw	x
2079  c9da 1e09          	ldw	x,(OFST+7,sp)
2080  c9dc 89            	pushw	x
2081  c9dd 96            	ldw	x,sp
2082  c9de 1c0007        	addw	x,#OFST+5
2083  c9e1 cdc793        	call	L5_CopyValue
2085  c9e4 5b04          	addw	sp,#4
2086  c9e6 72fb01        	addw	x,(OFST-1,sp)
2087  c9e9 1f01          	ldw	(OFST-1,sp),x
2089                     ; 777   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2091  c9eb aec2fe        	ldw	x,#L114
2092  c9ee 89            	pushw	x
2093  c9ef 96            	ldw	x,sp
2094  c9f0 1c0005        	addw	x,#OFST+3
2095  c9f3 cdc76b        	call	L3_CopyStringP
2097  c9f6 5b02          	addw	sp,#2
2098  c9f8 72fb01        	addw	x,(OFST-1,sp)
2099  c9fb 1f01          	ldw	(OFST-1,sp),x
2101                     ; 779   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type:text/html\r\n"));
2103  c9fd aec2d5        	ldw	x,#L514
2104  ca00 89            	pushw	x
2105  ca01 96            	ldw	x,sp
2106  ca02 1c0005        	addw	x,#OFST+3
2107  ca05 cdc76b        	call	L3_CopyStringP
2109  ca08 5b02          	addw	sp,#2
2110  ca0a 72fb01        	addw	x,(OFST-1,sp)
2111  ca0d 1f01          	ldw	(OFST-1,sp),x
2113                     ; 780   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
2115  ca0f aec2c2        	ldw	x,#L714
2116  ca12 89            	pushw	x
2117  ca13 96            	ldw	x,sp
2118  ca14 1c0005        	addw	x,#OFST+3
2119  ca17 cdc76b        	call	L3_CopyStringP
2121  ca1a 5b02          	addw	sp,#2
2122  ca1c 72fb01        	addw	x,(OFST-1,sp)
2123  ca1f 1f01          	ldw	(OFST-1,sp),x
2125                     ; 781   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2127  ca21 aec2fe        	ldw	x,#L114
2128  ca24 89            	pushw	x
2129  ca25 96            	ldw	x,sp
2130  ca26 1c0005        	addw	x,#OFST+3
2131  ca29 cdc76b        	call	L3_CopyStringP
2133  ca2c 5b02          	addw	sp,#2
2134  ca2e 72fb01        	addw	x,(OFST-1,sp)
2136                     ; 783   return nBytes;
2140  ca31 5b04          	addw	sp,#4
2141  ca33 81            	ret	
2280                     	switch	.const
2281  c1c0               L421:
2282  c1c0 cbd8          	dc.w	L124
2283  c1c2 cbe6          	dc.w	L324
2284  c1c4 cbf4          	dc.w	L524
2285  c1c6 cc01          	dc.w	L724
2286  c1c8 cc0e          	dc.w	L134
2287  c1ca cc1b          	dc.w	L334
2288  c1cc cc28          	dc.w	L534
2289  c1ce cc35          	dc.w	L734
2290  c1d0 cc42          	dc.w	L144
2291  c1d2 cc4f          	dc.w	L344
2292  c1d4 cc5c          	dc.w	L544
2293  c1d6 cc69          	dc.w	L744
2294  c1d8               L422:
2295  c1d8 cda8          	dc.w	L354
2296  c1da cdba          	dc.w	L554
2297  c1dc cdcc          	dc.w	L754
2298  c1de cdde          	dc.w	L164
2299  c1e0 cdf0          	dc.w	L364
2300  c1e2 ce02          	dc.w	L564
2301  c1e4 ce14          	dc.w	L764
2302  c1e6 ce26          	dc.w	L174
2303  c1e8 ce38          	dc.w	L374
2304  c1ea ce4a          	dc.w	L574
2305  c1ec ce5c          	dc.w	L774
2306  c1ee ce6e          	dc.w	L105
2307  c1f0 ce80          	dc.w	L305
2308  c1f2 ce92          	dc.w	L505
2309  c1f4 cea4          	dc.w	L705
2310  c1f6 ceb6          	dc.w	L115
2311  c1f8 cec7          	dc.w	L315
2312  c1fa ced8          	dc.w	L515
2313  c1fc cee9          	dc.w	L715
2314  c1fe cefa          	dc.w	L125
2315  c200 cf0b          	dc.w	L325
2316  c202 cf1c          	dc.w	L525
2317                     ; 787 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
2317                     ; 788 {
2318                     	switch	.text
2319  ca34               L11_CopyHttpData:
2321  ca34 89            	pushw	x
2322  ca35 5207          	subw	sp,#7
2323       00000007      OFST:	set	7
2326                     ; 804   nBytes = 0;
2328  ca37 5f            	clrw	x
2329  ca38 1f05          	ldw	(OFST-2,sp),x
2331                     ; 840   if(nMaxBytes > 400) nMaxBytes = 400; // limit just in case
2333  ca3a 1e10          	ldw	x,(OFST+9,sp)
2334  ca3c a30191        	cpw	x,#401
2335  ca3f 2403ccd263    	jrult	L306
2338  ca44 ae0190        	ldw	x,#400
2339  ca47 1f10          	ldw	(OFST+9,sp),x
2340  ca49 ccd263        	jra	L306
2341  ca4c               L106:
2342                     ; 863     if (*pDataLeft > 0) {
2344  ca4c 1e0e          	ldw	x,(OFST+7,sp)
2345  ca4e e601          	ld	a,(1,x)
2346  ca50 fa            	or	a,(x)
2347  ca51 2603ccd26c    	jreq	L506
2348                     ; 867       memcpy(&nByte, *ppData, 1);
2350  ca56 96            	ldw	x,sp
2351  ca57 5c            	incw	x
2352  ca58 bf04          	ldw	c_x,x
2353  ca5a 160c          	ldw	y,(OFST+5,sp)
2354  ca5c 90fe          	ldw	y,(y)
2355  ca5e 90bf07        	ldw	c_y,y
2356  ca61 ae0001        	ldw	x,#1
2357  ca64               L25:
2358  ca64 5a            	decw	x
2359  ca65 92d607        	ld	a,([c_y.w],x)
2360  ca68 92d704        	ld	([c_x.w],x),a
2361  ca6b 5d            	tnzw	x
2362  ca6c 26f6          	jrne	L25
2363                     ; 893       if (nByte == '%') {
2365  ca6e 7b01          	ld	a,(OFST-6,sp)
2366  ca70 a125          	cp	a,#37
2367  ca72 2703ccd246    	jrne	L116
2368                     ; 894         *ppData = *ppData + 1;
2370  ca77 1e0c          	ldw	x,(OFST+5,sp)
2371  ca79 9093          	ldw	y,x
2372  ca7b fe            	ldw	x,(x)
2373  ca7c 5c            	incw	x
2374  ca7d 90ff          	ldw	(y),x
2375                     ; 895         *pDataLeft = *pDataLeft - 1;
2377  ca7f 1e0e          	ldw	x,(OFST+7,sp)
2378  ca81 9093          	ldw	y,x
2379  ca83 fe            	ldw	x,(x)
2380  ca84 5a            	decw	x
2381  ca85 90ff          	ldw	(y),x
2382                     ; 900         memcpy(&nParsedMode, *ppData, 1);
2384  ca87 96            	ldw	x,sp
2385  ca88 1c0003        	addw	x,#OFST-4
2386  ca8b bf04          	ldw	c_x,x
2387  ca8d 160c          	ldw	y,(OFST+5,sp)
2388  ca8f 90fe          	ldw	y,(y)
2389  ca91 90bf07        	ldw	c_y,y
2390  ca94 ae0001        	ldw	x,#1
2391  ca97               L45:
2392  ca97 5a            	decw	x
2393  ca98 92d607        	ld	a,([c_y.w],x)
2394  ca9b 92d704        	ld	([c_x.w],x),a
2395  ca9e 5d            	tnzw	x
2396  ca9f 26f6          	jrne	L45
2397                     ; 901         *ppData = *ppData + 1;
2399  caa1 1e0c          	ldw	x,(OFST+5,sp)
2400  caa3 9093          	ldw	y,x
2401  caa5 fe            	ldw	x,(x)
2402  caa6 5c            	incw	x
2403  caa7 90ff          	ldw	(y),x
2404                     ; 902         *pDataLeft = *pDataLeft - 1;
2406  caa9 1e0e          	ldw	x,(OFST+7,sp)
2407  caab 9093          	ldw	y,x
2408  caad fe            	ldw	x,(x)
2409  caae 5a            	decw	x
2410  caaf 90ff          	ldw	(y),x
2411                     ; 906         memcpy(&temp, *ppData, 1);
2413  cab1 96            	ldw	x,sp
2414  cab2 1c0002        	addw	x,#OFST-5
2415  cab5 bf04          	ldw	c_x,x
2416  cab7 160c          	ldw	y,(OFST+5,sp)
2417  cab9 90fe          	ldw	y,(y)
2418  cabb 90bf07        	ldw	c_y,y
2419  cabe ae0001        	ldw	x,#1
2420  cac1               L65:
2421  cac1 5a            	decw	x
2422  cac2 92d607        	ld	a,([c_y.w],x)
2423  cac5 92d704        	ld	([c_x.w],x),a
2424  cac8 5d            	tnzw	x
2425  cac9 26f6          	jrne	L65
2426                     ; 907 	nParsedNum = (uint8_t)((temp - '0') * 10);
2428  cacb 7b02          	ld	a,(OFST-5,sp)
2429  cacd 97            	ld	xl,a
2430  cace a60a          	ld	a,#10
2431  cad0 42            	mul	x,a
2432  cad1 9f            	ld	a,xl
2433  cad2 a0e0          	sub	a,#224
2434  cad4 6b04          	ld	(OFST-3,sp),a
2436                     ; 908         *ppData = *ppData + 1;
2438  cad6 1e0c          	ldw	x,(OFST+5,sp)
2439  cad8 9093          	ldw	y,x
2440  cada fe            	ldw	x,(x)
2441  cadb 5c            	incw	x
2442  cadc 90ff          	ldw	(y),x
2443                     ; 909         *pDataLeft = *pDataLeft - 1;
2445  cade 1e0e          	ldw	x,(OFST+7,sp)
2446  cae0 9093          	ldw	y,x
2447  cae2 fe            	ldw	x,(x)
2448  cae3 5a            	decw	x
2449  cae4 90ff          	ldw	(y),x
2450                     ; 913         memcpy(&temp, *ppData, 1);
2452  cae6 96            	ldw	x,sp
2453  cae7 1c0002        	addw	x,#OFST-5
2454  caea bf04          	ldw	c_x,x
2455  caec 160c          	ldw	y,(OFST+5,sp)
2456  caee 90fe          	ldw	y,(y)
2457  caf0 90bf07        	ldw	c_y,y
2458  caf3 ae0001        	ldw	x,#1
2459  caf6               L06:
2460  caf6 5a            	decw	x
2461  caf7 92d607        	ld	a,([c_y.w],x)
2462  cafa 92d704        	ld	([c_x.w],x),a
2463  cafd 5d            	tnzw	x
2464  cafe 26f6          	jrne	L06
2465                     ; 914 	nParsedNum = (uint8_t)(nParsedNum + temp - '0');
2467  cb00 7b04          	ld	a,(OFST-3,sp)
2468  cb02 1b02          	add	a,(OFST-5,sp)
2469  cb04 a030          	sub	a,#48
2470  cb06 6b04          	ld	(OFST-3,sp),a
2472                     ; 915         *ppData = *ppData + 1;
2474  cb08 1e0c          	ldw	x,(OFST+5,sp)
2475  cb0a 9093          	ldw	y,x
2476  cb0c fe            	ldw	x,(x)
2477  cb0d 5c            	incw	x
2478  cb0e 90ff          	ldw	(y),x
2479                     ; 916         *pDataLeft = *pDataLeft - 1;
2481  cb10 1e0e          	ldw	x,(OFST+7,sp)
2482  cb12 9093          	ldw	y,x
2483  cb14 fe            	ldw	x,(x)
2484  cb15 5a            	decw	x
2485  cb16 90ff          	ldw	(y),x
2486                     ; 926         if (nParsedMode == 'i') {
2488  cb18 7b03          	ld	a,(OFST-4,sp)
2489  cb1a a169          	cp	a,#105
2490  cb1c 2614          	jrne	L316
2491                     ; 930 	  *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
2493  cb1e 7b04          	ld	a,(OFST-3,sp)
2494  cb20 cdda9b        	call	_GpioGetPin
2496  cb23 1e08          	ldw	x,(OFST+1,sp)
2497  cb25 ab30          	add	a,#48
2498  cb27 f7            	ld	(x),a
2499                     ; 931           pBuffer++;
2501  cb28 5c            	incw	x
2502  cb29 1f08          	ldw	(OFST+1,sp),x
2503                     ; 932           nBytes++;
2505  cb2b 1e05          	ldw	x,(OFST-2,sp)
2506  cb2d 5c            	incw	x
2507  cb2e 1f05          	ldw	(OFST-2,sp),x
2510  cb30 204e          	jra	L516
2511  cb32               L316:
2512                     ; 956         else if (nParsedMode == 'o') {
2514  cb32 a16f          	cp	a,#111
2515  cb34 2624          	jrne	L716
2516                     ; 959           if((uint8_t)(GpioGetPin(nParsedNum) == 1)) { // Insert 'checked'
2518  cb36 7b04          	ld	a,(OFST-3,sp)
2519  cb38 cdda9b        	call	_GpioGetPin
2521  cb3b 4a            	dec	a
2522  cb3c 2642          	jrne	L516
2523                     ; 960             for(i=0; i<7; i++) {
2525  cb3e 6b07          	ld	(OFST+0,sp),a
2527  cb40               L326:
2528                     ; 961               *pBuffer = checked[i];
2530  cb40 5f            	clrw	x
2531  cb41 97            	ld	xl,a
2532  cb42 d68080        	ld	a,(L31_checked,x)
2533  cb45 1e08          	ldw	x,(OFST+1,sp)
2534  cb47 f7            	ld	(x),a
2535                     ; 962               pBuffer++;
2537  cb48 5c            	incw	x
2538  cb49 1f08          	ldw	(OFST+1,sp),x
2539                     ; 963               nBytes++;
2541  cb4b 1e05          	ldw	x,(OFST-2,sp)
2542  cb4d 5c            	incw	x
2543  cb4e 1f05          	ldw	(OFST-2,sp),x
2545                     ; 960             for(i=0; i<7; i++) {
2547  cb50 0c07          	inc	(OFST+0,sp)
2551  cb52 7b07          	ld	a,(OFST+0,sp)
2552  cb54 a107          	cp	a,#7
2553  cb56 25e8          	jrult	L326
2555  cb58 2026          	jra	L516
2556  cb5a               L716:
2557                     ; 970         else if (nParsedMode == 'p') {
2559  cb5a a170          	cp	a,#112
2560  cb5c 2622          	jrne	L516
2561                     ; 973           if((uint8_t)(GpioGetPin(nParsedNum) == 0)) { // Insert 'checked'
2563  cb5e 7b04          	ld	a,(OFST-3,sp)
2564  cb60 cdda9b        	call	_GpioGetPin
2566  cb63 4d            	tnz	a
2567  cb64 261a          	jrne	L516
2568                     ; 974             for(i=0; i<7; i++) {
2570  cb66 6b07          	ld	(OFST+0,sp),a
2572  cb68               L146:
2573                     ; 975               *pBuffer = checked[i];
2575  cb68 5f            	clrw	x
2576  cb69 97            	ld	xl,a
2577  cb6a d68080        	ld	a,(L31_checked,x)
2578  cb6d 1e08          	ldw	x,(OFST+1,sp)
2579  cb6f f7            	ld	(x),a
2580                     ; 976               pBuffer++;
2582  cb70 5c            	incw	x
2583  cb71 1f08          	ldw	(OFST+1,sp),x
2584                     ; 977               nBytes++;
2586  cb73 1e05          	ldw	x,(OFST-2,sp)
2587  cb75 5c            	incw	x
2588  cb76 1f05          	ldw	(OFST-2,sp),x
2590                     ; 974             for(i=0; i<7; i++) {
2592  cb78 0c07          	inc	(OFST+0,sp)
2596  cb7a 7b07          	ld	a,(OFST+0,sp)
2597  cb7c a107          	cp	a,#7
2598  cb7e 25e8          	jrult	L146
2600  cb80               L516:
2601                     ; 984         if (nParsedMode == 'a') {
2603  cb80 7b03          	ld	a,(OFST-4,sp)
2604  cb82 a161          	cp	a,#97
2605  cb84 263b          	jrne	L156
2606                     ; 986 	  for(i=0; i<20; i++) {
2608  cb86 4f            	clr	a
2609  cb87 6b07          	ld	(OFST+0,sp),a
2611  cb89               L356:
2612                     ; 987 	    if(ex_stored_devicename[i] != ' ') { // Don't write spaces out - confuses the
2614  cb89 5f            	clrw	x
2615  cb8a 97            	ld	xl,a
2616  cb8b d60038        	ld	a,(_ex_stored_devicename,x)
2617  cb8e a120          	cp	a,#32
2618  cb90 2712          	jreq	L166
2619                     ; 989               *pBuffer = (uint8_t)(ex_stored_devicename[i]);
2621  cb92 7b07          	ld	a,(OFST+0,sp)
2622  cb94 5f            	clrw	x
2623  cb95 97            	ld	xl,a
2624  cb96 d60038        	ld	a,(_ex_stored_devicename,x)
2625  cb99 1e08          	ldw	x,(OFST+1,sp)
2626  cb9b f7            	ld	(x),a
2627                     ; 990               pBuffer++;
2629  cb9c 5c            	incw	x
2630  cb9d 1f08          	ldw	(OFST+1,sp),x
2631                     ; 991               nBytes++;
2633  cb9f 1e05          	ldw	x,(OFST-2,sp)
2634  cba1 5c            	incw	x
2635  cba2 1f05          	ldw	(OFST-2,sp),x
2637  cba4               L166:
2638                     ; 986 	  for(i=0; i<20; i++) {
2640  cba4 0c07          	inc	(OFST+0,sp)
2644  cba6 7b07          	ld	a,(OFST+0,sp)
2645  cba8 a114          	cp	a,#20
2646  cbaa 25dd          	jrult	L356
2647                     ; 1006           *ppData = *ppData + 20;
2649  cbac 1e0c          	ldw	x,(OFST+5,sp)
2650  cbae 9093          	ldw	y,x
2651  cbb0 fe            	ldw	x,(x)
2652  cbb1 1c0014        	addw	x,#20
2653  cbb4 90ff          	ldw	(y),x
2654                     ; 1007           *pDataLeft = *pDataLeft - 20;
2656  cbb6 1e0e          	ldw	x,(OFST+7,sp)
2657  cbb8 9093          	ldw	y,x
2658  cbba fe            	ldw	x,(x)
2659  cbbb 1d0014        	subw	x,#20
2661  cbbe cccf9d        	jp	LC011
2662  cbc1               L156:
2663                     ; 1010         else if (nParsedMode == 'b') {
2665  cbc1 a162          	cp	a,#98
2666  cbc3 2703ccccc1    	jrne	L566
2667                     ; 1015 	  advanceptrs = 0;
2669                     ; 1017           switch (nParsedNum)
2671  cbc8 7b04          	ld	a,(OFST-3,sp)
2673                     ; 1032 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2674  cbca a10c          	cp	a,#12
2675  cbcc 2503cccc83    	jruge	L154
2676  cbd1 5f            	clrw	x
2677  cbd2 97            	ld	xl,a
2678  cbd3 58            	sllw	x
2679  cbd4 dec1c0        	ldw	x,(L421,x)
2680  cbd7 fc            	jp	(x)
2681  cbd8               L124:
2682                     ; 1020 	    case 0:  emb_itoa(ex_stored_hostaddr4, OctetArray, 10, 3); advanceptrs = 1; break;
2684  cbd8 4b03          	push	#3
2685  cbda 4b0a          	push	#10
2686  cbdc ae0010        	ldw	x,#_OctetArray
2687  cbdf 89            	pushw	x
2688  cbe0 c60059        	ld	a,_ex_stored_hostaddr4
2693  cbe3 cccc74        	jp	LC003
2694  cbe6               L324:
2695                     ; 1021 	    case 1:  emb_itoa(ex_stored_hostaddr3, OctetArray, 10, 3); advanceptrs = 1; break;
2697  cbe6 4b03          	push	#3
2698  cbe8 4b0a          	push	#10
2699  cbea ae0010        	ldw	x,#_OctetArray
2700  cbed 89            	pushw	x
2701  cbee c60058        	ld	a,_ex_stored_hostaddr3
2706  cbf1 cccc74        	jp	LC003
2707  cbf4               L524:
2708                     ; 1022 	    case 2:  emb_itoa(ex_stored_hostaddr2, OctetArray, 10, 3); advanceptrs = 1; break;
2710  cbf4 4b03          	push	#3
2711  cbf6 4b0a          	push	#10
2712  cbf8 ae0010        	ldw	x,#_OctetArray
2713  cbfb 89            	pushw	x
2714  cbfc c60057        	ld	a,_ex_stored_hostaddr2
2719  cbff 2073          	jp	LC003
2720  cc01               L724:
2721                     ; 1023 	    case 3:  emb_itoa(ex_stored_hostaddr1, OctetArray, 10, 3); advanceptrs = 1; break;
2723  cc01 4b03          	push	#3
2724  cc03 4b0a          	push	#10
2725  cc05 ae0010        	ldw	x,#_OctetArray
2726  cc08 89            	pushw	x
2727  cc09 c60056        	ld	a,_ex_stored_hostaddr1
2732  cc0c 2066          	jp	LC003
2733  cc0e               L134:
2734                     ; 1024 	    case 4:  emb_itoa(ex_stored_draddr4,   OctetArray, 10, 3); advanceptrs = 1; break;
2736  cc0e 4b03          	push	#3
2737  cc10 4b0a          	push	#10
2738  cc12 ae0010        	ldw	x,#_OctetArray
2739  cc15 89            	pushw	x
2740  cc16 c60055        	ld	a,_ex_stored_draddr4
2745  cc19 2059          	jp	LC003
2746  cc1b               L334:
2747                     ; 1025 	    case 5:  emb_itoa(ex_stored_draddr3,   OctetArray, 10, 3); advanceptrs = 1; break;
2749  cc1b 4b03          	push	#3
2750  cc1d 4b0a          	push	#10
2751  cc1f ae0010        	ldw	x,#_OctetArray
2752  cc22 89            	pushw	x
2753  cc23 c60054        	ld	a,_ex_stored_draddr3
2758  cc26 204c          	jp	LC003
2759  cc28               L534:
2760                     ; 1026 	    case 6:  emb_itoa(ex_stored_draddr2,   OctetArray, 10, 3); advanceptrs = 1; break;
2762  cc28 4b03          	push	#3
2763  cc2a 4b0a          	push	#10
2764  cc2c ae0010        	ldw	x,#_OctetArray
2765  cc2f 89            	pushw	x
2766  cc30 c60053        	ld	a,_ex_stored_draddr2
2771  cc33 203f          	jp	LC003
2772  cc35               L734:
2773                     ; 1027 	    case 7:  emb_itoa(ex_stored_draddr1,   OctetArray, 10, 3); advanceptrs = 1; break;
2775  cc35 4b03          	push	#3
2776  cc37 4b0a          	push	#10
2777  cc39 ae0010        	ldw	x,#_OctetArray
2778  cc3c 89            	pushw	x
2779  cc3d c60052        	ld	a,_ex_stored_draddr1
2784  cc40 2032          	jp	LC003
2785  cc42               L144:
2786                     ; 1028 	    case 8:  emb_itoa(ex_stored_netmask4,  OctetArray, 10, 3); advanceptrs = 1; break;
2788  cc42 4b03          	push	#3
2789  cc44 4b0a          	push	#10
2790  cc46 ae0010        	ldw	x,#_OctetArray
2791  cc49 89            	pushw	x
2792  cc4a c60051        	ld	a,_ex_stored_netmask4
2797  cc4d 2025          	jp	LC003
2798  cc4f               L344:
2799                     ; 1029 	    case 9:  emb_itoa(ex_stored_netmask3,  OctetArray, 10, 3); advanceptrs = 1; break;
2801  cc4f 4b03          	push	#3
2802  cc51 4b0a          	push	#10
2803  cc53 ae0010        	ldw	x,#_OctetArray
2804  cc56 89            	pushw	x
2805  cc57 c60050        	ld	a,_ex_stored_netmask3
2810  cc5a 2018          	jp	LC003
2811  cc5c               L544:
2812                     ; 1030 	    case 10: emb_itoa(ex_stored_netmask2,  OctetArray, 10, 3); advanceptrs = 1; break;
2814  cc5c 4b03          	push	#3
2815  cc5e 4b0a          	push	#10
2816  cc60 ae0010        	ldw	x,#_OctetArray
2817  cc63 89            	pushw	x
2818  cc64 c6004f        	ld	a,_ex_stored_netmask2
2823  cc67 200b          	jp	LC003
2824  cc69               L744:
2825                     ; 1031 	    case 11: emb_itoa(ex_stored_netmask1,  OctetArray, 10, 3); advanceptrs = 1; break;
2827  cc69 4b03          	push	#3
2828  cc6b 4b0a          	push	#10
2829  cc6d ae0010        	ldw	x,#_OctetArray
2830  cc70 89            	pushw	x
2831  cc71 c6004e        	ld	a,_ex_stored_netmask1
2832  cc74               LC003:
2833  cc74 b703          	ld	c_lreg+3,a
2834  cc76 3f02          	clr	c_lreg+2
2835  cc78 3f01          	clr	c_lreg+1
2836  cc7a 3f00          	clr	c_lreg
2837  cc7c be02          	ldw	x,c_lreg+2
2838  cc7e 89            	pushw	x
2839  cc7f be00          	ldw	x,c_lreg
2844  cc81 200a          	jra	L176
2845  cc83               L154:
2846                     ; 1032 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2848  cc83 4b03          	push	#3
2849  cc85 4b0a          	push	#10
2850  cc87 ae0010        	ldw	x,#_OctetArray
2851  cc8a 89            	pushw	x
2852  cc8b 5f            	clrw	x
2853  cc8c 89            	pushw	x
2859  cc8d               L176:
2860  cc8d 89            	pushw	x
2861  cc8e cdc7f7        	call	_emb_itoa
2862  cc91 5b08          	addw	sp,#8
2875  cc93 a601          	ld	a,#1
2876  cc95 6b07          	ld	(OFST+0,sp),a
2878                     ; 1035 	  if(advanceptrs == 1) { // Copy OctetArray and advance pointers if one of the above
2880  cc97 4a            	dec	a
2881  cc98 2703ccd263    	jrne	L306
2882                     ; 1037             *pBuffer = (uint8_t)OctetArray[0];
2884  cc9d 1e08          	ldw	x,(OFST+1,sp)
2885  cc9f c60010        	ld	a,_OctetArray
2886  cca2 f7            	ld	(x),a
2887                     ; 1038             pBuffer++;
2889  cca3 5c            	incw	x
2890  cca4 1f08          	ldw	(OFST+1,sp),x
2891                     ; 1039             nBytes++;
2893  cca6 1e05          	ldw	x,(OFST-2,sp)
2894  cca8 5c            	incw	x
2895  cca9 1f05          	ldw	(OFST-2,sp),x
2897                     ; 1041             *pBuffer = (uint8_t)OctetArray[1];
2899  ccab 1e08          	ldw	x,(OFST+1,sp)
2900  ccad c60011        	ld	a,_OctetArray+1
2901  ccb0 f7            	ld	(x),a
2902                     ; 1042             pBuffer++;
2904  ccb1 5c            	incw	x
2905  ccb2 1f08          	ldw	(OFST+1,sp),x
2906                     ; 1043             nBytes++;
2908  ccb4 1e05          	ldw	x,(OFST-2,sp)
2909  ccb6 5c            	incw	x
2910  ccb7 1f05          	ldw	(OFST-2,sp),x
2912                     ; 1045             *pBuffer = (uint8_t)OctetArray[2];
2914  ccb9 c60012        	ld	a,_OctetArray+2
2915  ccbc 1e08          	ldw	x,(OFST+1,sp)
2916                     ; 1046             pBuffer++;
2917                     ; 1047             nBytes++;
2918  ccbe cccd8d        	jp	LC010
2919  ccc1               L566:
2920                     ; 1051         else if (nParsedMode == 'c') {
2922  ccc1 a163          	cp	a,#99
2923  ccc3 2637          	jrne	L776
2924                     ; 1057           emb_itoa(ex_stored_port, OctetArray, 10, 5);
2926  ccc5 4b05          	push	#5
2927  ccc7 4b0a          	push	#10
2928  ccc9 ae0010        	ldw	x,#_OctetArray
2929  cccc 89            	pushw	x
2930  cccd ce004c        	ldw	x,_ex_stored_port
2931  ccd0 cdfb38        	call	c_uitolx
2933  ccd3 be02          	ldw	x,c_lreg+2
2934  ccd5 89            	pushw	x
2935  ccd6 be00          	ldw	x,c_lreg
2936  ccd8 89            	pushw	x
2937  ccd9 cdc7f7        	call	_emb_itoa
2939  ccdc 5b08          	addw	sp,#8
2940                     ; 1059 	  for(i=0; i<5; i++) {
2942  ccde 4f            	clr	a
2943  ccdf 6b07          	ld	(OFST+0,sp),a
2945  cce1               L107:
2946                     ; 1060             *pBuffer = (uint8_t)OctetArray[i];
2948  cce1 5f            	clrw	x
2949  cce2 97            	ld	xl,a
2950  cce3 d60010        	ld	a,(_OctetArray,x)
2951  cce6 1e08          	ldw	x,(OFST+1,sp)
2952  cce8 f7            	ld	(x),a
2953                     ; 1061             pBuffer++;
2955  cce9 5c            	incw	x
2956  ccea 1f08          	ldw	(OFST+1,sp),x
2957                     ; 1062             nBytes++;
2959  ccec 1e05          	ldw	x,(OFST-2,sp)
2960  ccee 5c            	incw	x
2961  ccef 1f05          	ldw	(OFST-2,sp),x
2963                     ; 1059 	  for(i=0; i<5; i++) {
2965  ccf1 0c07          	inc	(OFST+0,sp)
2969  ccf3 7b07          	ld	a,(OFST+0,sp)
2970  ccf5 a105          	cp	a,#5
2971  ccf7 25e8          	jrult	L107
2973  ccf9 ccd263        	jra	L306
2974  ccfc               L776:
2975                     ; 1066         else if (nParsedMode == 'd') {
2977  ccfc a164          	cp	a,#100
2978  ccfe 2703cccd91    	jrne	L117
2979                     ; 1071 	  if(nParsedNum == 0)      emb_itoa(uip_ethaddr1, OctetArray, 16, 2);
2981  cd03 7b04          	ld	a,(OFST-3,sp)
2982  cd05 260d          	jrne	L317
2985  cd07 4b02          	push	#2
2986  cd09 4b10          	push	#16
2987  cd0b ae0010        	ldw	x,#_OctetArray
2988  cd0e 89            	pushw	x
2989  cd0f c6001e        	ld	a,_uip_ethaddr1
2992  cd12 2053          	jp	LC004
2993  cd14               L317:
2994                     ; 1072 	  else if(nParsedNum == 1) emb_itoa(uip_ethaddr2, OctetArray, 16, 2);
2996  cd14 a101          	cp	a,#1
2997  cd16 260d          	jrne	L717
3000  cd18 4b02          	push	#2
3001  cd1a 4b10          	push	#16
3002  cd1c ae0010        	ldw	x,#_OctetArray
3003  cd1f 89            	pushw	x
3004  cd20 c6001f        	ld	a,_uip_ethaddr2
3007  cd23 2042          	jp	LC004
3008  cd25               L717:
3009                     ; 1073 	  else if(nParsedNum == 2) emb_itoa(uip_ethaddr3, OctetArray, 16, 2);
3011  cd25 a102          	cp	a,#2
3012  cd27 260d          	jrne	L327
3015  cd29 4b02          	push	#2
3016  cd2b 4b10          	push	#16
3017  cd2d ae0010        	ldw	x,#_OctetArray
3018  cd30 89            	pushw	x
3019  cd31 c60020        	ld	a,_uip_ethaddr3
3022  cd34 2031          	jp	LC004
3023  cd36               L327:
3024                     ; 1074 	  else if(nParsedNum == 3) emb_itoa(uip_ethaddr4, OctetArray, 16, 2);
3026  cd36 a103          	cp	a,#3
3027  cd38 260d          	jrne	L727
3030  cd3a 4b02          	push	#2
3031  cd3c 4b10          	push	#16
3032  cd3e ae0010        	ldw	x,#_OctetArray
3033  cd41 89            	pushw	x
3034  cd42 c60021        	ld	a,_uip_ethaddr4
3037  cd45 2020          	jp	LC004
3038  cd47               L727:
3039                     ; 1075 	  else if(nParsedNum == 4) emb_itoa(uip_ethaddr5, OctetArray, 16, 2);
3041  cd47 a104          	cp	a,#4
3042  cd49 260d          	jrne	L337
3045  cd4b 4b02          	push	#2
3046  cd4d 4b10          	push	#16
3047  cd4f ae0010        	ldw	x,#_OctetArray
3048  cd52 89            	pushw	x
3049  cd53 c60022        	ld	a,_uip_ethaddr5
3052  cd56 200f          	jp	LC004
3053  cd58               L337:
3054                     ; 1076 	  else if(nParsedNum == 5) emb_itoa(uip_ethaddr6, OctetArray, 16, 2);
3056  cd58 a105          	cp	a,#5
3057  cd5a 261e          	jrne	L517
3060  cd5c 4b02          	push	#2
3061  cd5e 4b10          	push	#16
3062  cd60 ae0010        	ldw	x,#_OctetArray
3063  cd63 89            	pushw	x
3064  cd64 c60023        	ld	a,_uip_ethaddr6
3066  cd67               LC004:
3067  cd67 b703          	ld	c_lreg+3,a
3068  cd69 3f02          	clr	c_lreg+2
3069  cd6b 3f01          	clr	c_lreg+1
3070  cd6d 3f00          	clr	c_lreg
3071  cd6f be02          	ldw	x,c_lreg+2
3072  cd71 89            	pushw	x
3073  cd72 be00          	ldw	x,c_lreg
3074  cd74 89            	pushw	x
3075  cd75 cdc7f7        	call	_emb_itoa
3076  cd78 5b08          	addw	sp,#8
3077  cd7a               L517:
3078                     ; 1078           *pBuffer = OctetArray[0];
3080  cd7a 1e08          	ldw	x,(OFST+1,sp)
3081  cd7c c60010        	ld	a,_OctetArray
3082  cd7f f7            	ld	(x),a
3083                     ; 1079           pBuffer++;
3085  cd80 5c            	incw	x
3086  cd81 1f08          	ldw	(OFST+1,sp),x
3087                     ; 1080           nBytes++;
3089  cd83 1e05          	ldw	x,(OFST-2,sp)
3090  cd85 5c            	incw	x
3091  cd86 1f05          	ldw	(OFST-2,sp),x
3093                     ; 1082           *pBuffer = OctetArray[1];
3095  cd88 c60011        	ld	a,_OctetArray+1
3096  cd8b 1e08          	ldw	x,(OFST+1,sp)
3097  cd8d               LC010:
3098  cd8d f7            	ld	(x),a
3099                     ; 1083           pBuffer++;
3100                     ; 1084           nBytes++;
3102  cd8e ccd25b        	jp	LC009
3103  cd91               L117:
3104                     ; 1089         else if (nParsedMode == 'e') {
3106  cd91 a165          	cp	a,#101
3107  cd93 2703cccf6c    	jrne	L347
3108                     ; 1116           switch (nParsedNum)
3110  cd98 7b04          	ld	a,(OFST-3,sp)
3112                     ; 1141 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3113  cd9a a116          	cp	a,#22
3114  cd9c 2503cccf2d    	jruge	L725
3115  cda1 5f            	clrw	x
3116  cda2 97            	ld	xl,a
3117  cda3 58            	sllw	x
3118  cda4 dec1d8        	ldw	x,(L422,x)
3119  cda7 fc            	jp	(x)
3120  cda8               L354:
3121                     ; 1119 	    case 0:  emb_itoa(uip_stat.ip.drop,      OctetArray, 10, 10); break;
3123  cda8 4b0a          	push	#10
3124  cdaa 4b0a          	push	#10
3125  cdac ae0010        	ldw	x,#_OctetArray
3126  cdaf 89            	pushw	x
3127  cdb0 ce008b        	ldw	x,_uip_stat+2
3128  cdb3 89            	pushw	x
3129  cdb4 ce0089        	ldw	x,_uip_stat
3133  cdb7 cccf37        	jra	L747
3134  cdba               L554:
3135                     ; 1120 	    case 1:  emb_itoa(uip_stat.ip.recv,      OctetArray, 10, 10); break;
3137  cdba 4b0a          	push	#10
3138  cdbc 4b0a          	push	#10
3139  cdbe ae0010        	ldw	x,#_OctetArray
3140  cdc1 89            	pushw	x
3141  cdc2 ce008f        	ldw	x,_uip_stat+6
3142  cdc5 89            	pushw	x
3143  cdc6 ce008d        	ldw	x,_uip_stat+4
3147  cdc9 cccf37        	jra	L747
3148  cdcc               L754:
3149                     ; 1121 	    case 2:  emb_itoa(uip_stat.ip.sent,      OctetArray, 10, 10); break;
3151  cdcc 4b0a          	push	#10
3152  cdce 4b0a          	push	#10
3153  cdd0 ae0010        	ldw	x,#_OctetArray
3154  cdd3 89            	pushw	x
3155  cdd4 ce0093        	ldw	x,_uip_stat+10
3156  cdd7 89            	pushw	x
3157  cdd8 ce0091        	ldw	x,_uip_stat+8
3161  cddb cccf37        	jra	L747
3162  cdde               L164:
3163                     ; 1122 	    case 3:  emb_itoa(uip_stat.ip.vhlerr,    OctetArray, 10, 10); break;
3165  cdde 4b0a          	push	#10
3166  cde0 4b0a          	push	#10
3167  cde2 ae0010        	ldw	x,#_OctetArray
3168  cde5 89            	pushw	x
3169  cde6 ce0097        	ldw	x,_uip_stat+14
3170  cde9 89            	pushw	x
3171  cdea ce0095        	ldw	x,_uip_stat+12
3175  cded cccf37        	jra	L747
3176  cdf0               L364:
3177                     ; 1123 	    case 4:  emb_itoa(uip_stat.ip.hblenerr,  OctetArray, 10, 10); break;
3179  cdf0 4b0a          	push	#10
3180  cdf2 4b0a          	push	#10
3181  cdf4 ae0010        	ldw	x,#_OctetArray
3182  cdf7 89            	pushw	x
3183  cdf8 ce009b        	ldw	x,_uip_stat+18
3184  cdfb 89            	pushw	x
3185  cdfc ce0099        	ldw	x,_uip_stat+16
3189  cdff cccf37        	jra	L747
3190  ce02               L564:
3191                     ; 1124 	    case 5:  emb_itoa(uip_stat.ip.lblenerr,  OctetArray, 10, 10); break;
3193  ce02 4b0a          	push	#10
3194  ce04 4b0a          	push	#10
3195  ce06 ae0010        	ldw	x,#_OctetArray
3196  ce09 89            	pushw	x
3197  ce0a ce009f        	ldw	x,_uip_stat+22
3198  ce0d 89            	pushw	x
3199  ce0e ce009d        	ldw	x,_uip_stat+20
3203  ce11 cccf37        	jra	L747
3204  ce14               L764:
3205                     ; 1125 	    case 6:  emb_itoa(uip_stat.ip.fragerr,   OctetArray, 10, 10); break;
3207  ce14 4b0a          	push	#10
3208  ce16 4b0a          	push	#10
3209  ce18 ae0010        	ldw	x,#_OctetArray
3210  ce1b 89            	pushw	x
3211  ce1c ce00a3        	ldw	x,_uip_stat+26
3212  ce1f 89            	pushw	x
3213  ce20 ce00a1        	ldw	x,_uip_stat+24
3217  ce23 cccf37        	jra	L747
3218  ce26               L174:
3219                     ; 1126 	    case 7:  emb_itoa(uip_stat.ip.chkerr,    OctetArray, 10, 10); break;
3221  ce26 4b0a          	push	#10
3222  ce28 4b0a          	push	#10
3223  ce2a ae0010        	ldw	x,#_OctetArray
3224  ce2d 89            	pushw	x
3225  ce2e ce00a7        	ldw	x,_uip_stat+30
3226  ce31 89            	pushw	x
3227  ce32 ce00a5        	ldw	x,_uip_stat+28
3231  ce35 cccf37        	jra	L747
3232  ce38               L374:
3233                     ; 1127 	    case 8:  emb_itoa(uip_stat.ip.protoerr,  OctetArray, 10, 10); break;
3235  ce38 4b0a          	push	#10
3236  ce3a 4b0a          	push	#10
3237  ce3c ae0010        	ldw	x,#_OctetArray
3238  ce3f 89            	pushw	x
3239  ce40 ce00ab        	ldw	x,_uip_stat+34
3240  ce43 89            	pushw	x
3241  ce44 ce00a9        	ldw	x,_uip_stat+32
3245  ce47 cccf37        	jra	L747
3246  ce4a               L574:
3247                     ; 1128 	    case 9:  emb_itoa(uip_stat.icmp.drop,    OctetArray, 10, 10); break;
3249  ce4a 4b0a          	push	#10
3250  ce4c 4b0a          	push	#10
3251  ce4e ae0010        	ldw	x,#_OctetArray
3252  ce51 89            	pushw	x
3253  ce52 ce00af        	ldw	x,_uip_stat+38
3254  ce55 89            	pushw	x
3255  ce56 ce00ad        	ldw	x,_uip_stat+36
3259  ce59 cccf37        	jra	L747
3260  ce5c               L774:
3261                     ; 1129 	    case 10: emb_itoa(uip_stat.icmp.recv,    OctetArray, 10, 10); break;
3263  ce5c 4b0a          	push	#10
3264  ce5e 4b0a          	push	#10
3265  ce60 ae0010        	ldw	x,#_OctetArray
3266  ce63 89            	pushw	x
3267  ce64 ce00b3        	ldw	x,_uip_stat+42
3268  ce67 89            	pushw	x
3269  ce68 ce00b1        	ldw	x,_uip_stat+40
3273  ce6b cccf37        	jra	L747
3274  ce6e               L105:
3275                     ; 1130 	    case 11: emb_itoa(uip_stat.icmp.sent,    OctetArray, 10, 10); break;
3277  ce6e 4b0a          	push	#10
3278  ce70 4b0a          	push	#10
3279  ce72 ae0010        	ldw	x,#_OctetArray
3280  ce75 89            	pushw	x
3281  ce76 ce00b7        	ldw	x,_uip_stat+46
3282  ce79 89            	pushw	x
3283  ce7a ce00b5        	ldw	x,_uip_stat+44
3287  ce7d cccf37        	jra	L747
3288  ce80               L305:
3289                     ; 1131 	    case 12: emb_itoa(uip_stat.icmp.typeerr, OctetArray, 10, 10); break;
3291  ce80 4b0a          	push	#10
3292  ce82 4b0a          	push	#10
3293  ce84 ae0010        	ldw	x,#_OctetArray
3294  ce87 89            	pushw	x
3295  ce88 ce00bb        	ldw	x,_uip_stat+50
3296  ce8b 89            	pushw	x
3297  ce8c ce00b9        	ldw	x,_uip_stat+48
3301  ce8f cccf37        	jra	L747
3302  ce92               L505:
3303                     ; 1132 	    case 13: emb_itoa(uip_stat.tcp.drop,     OctetArray, 10, 10); break;
3305  ce92 4b0a          	push	#10
3306  ce94 4b0a          	push	#10
3307  ce96 ae0010        	ldw	x,#_OctetArray
3308  ce99 89            	pushw	x
3309  ce9a ce00bf        	ldw	x,_uip_stat+54
3310  ce9d 89            	pushw	x
3311  ce9e ce00bd        	ldw	x,_uip_stat+52
3315  cea1 cccf37        	jra	L747
3316  cea4               L705:
3317                     ; 1133 	    case 14: emb_itoa(uip_stat.tcp.recv,     OctetArray, 10, 10); break;
3319  cea4 4b0a          	push	#10
3320  cea6 4b0a          	push	#10
3321  cea8 ae0010        	ldw	x,#_OctetArray
3322  ceab 89            	pushw	x
3323  ceac ce00c3        	ldw	x,_uip_stat+58
3324  ceaf 89            	pushw	x
3325  ceb0 ce00c1        	ldw	x,_uip_stat+56
3329  ceb3 cccf37        	jra	L747
3330  ceb6               L115:
3331                     ; 1134 	    case 15: emb_itoa(uip_stat.tcp.sent,     OctetArray, 10, 10); break;
3333  ceb6 4b0a          	push	#10
3334  ceb8 4b0a          	push	#10
3335  ceba ae0010        	ldw	x,#_OctetArray
3336  cebd 89            	pushw	x
3337  cebe ce00c7        	ldw	x,_uip_stat+62
3338  cec1 89            	pushw	x
3339  cec2 ce00c5        	ldw	x,_uip_stat+60
3343  cec5 2070          	jra	L747
3344  cec7               L315:
3345                     ; 1135 	    case 16: emb_itoa(uip_stat.tcp.chkerr,   OctetArray, 10, 10); break;
3347  cec7 4b0a          	push	#10
3348  cec9 4b0a          	push	#10
3349  cecb ae0010        	ldw	x,#_OctetArray
3350  cece 89            	pushw	x
3351  cecf ce00cb        	ldw	x,_uip_stat+66
3352  ced2 89            	pushw	x
3353  ced3 ce00c9        	ldw	x,_uip_stat+64
3357  ced6 205f          	jra	L747
3358  ced8               L515:
3359                     ; 1136 	    case 17: emb_itoa(uip_stat.tcp.ackerr,   OctetArray, 10, 10); break;
3361  ced8 4b0a          	push	#10
3362  ceda 4b0a          	push	#10
3363  cedc ae0010        	ldw	x,#_OctetArray
3364  cedf 89            	pushw	x
3365  cee0 ce00cf        	ldw	x,_uip_stat+70
3366  cee3 89            	pushw	x
3367  cee4 ce00cd        	ldw	x,_uip_stat+68
3371  cee7 204e          	jra	L747
3372  cee9               L715:
3373                     ; 1137 	    case 18: emb_itoa(uip_stat.tcp.rst,      OctetArray, 10, 10); break;
3375  cee9 4b0a          	push	#10
3376  ceeb 4b0a          	push	#10
3377  ceed ae0010        	ldw	x,#_OctetArray
3378  cef0 89            	pushw	x
3379  cef1 ce00d3        	ldw	x,_uip_stat+74
3380  cef4 89            	pushw	x
3381  cef5 ce00d1        	ldw	x,_uip_stat+72
3385  cef8 203d          	jra	L747
3386  cefa               L125:
3387                     ; 1138 	    case 19: emb_itoa(uip_stat.tcp.rexmit,   OctetArray, 10, 10); break;
3389  cefa 4b0a          	push	#10
3390  cefc 4b0a          	push	#10
3391  cefe ae0010        	ldw	x,#_OctetArray
3392  cf01 89            	pushw	x
3393  cf02 ce00d7        	ldw	x,_uip_stat+78
3394  cf05 89            	pushw	x
3395  cf06 ce00d5        	ldw	x,_uip_stat+76
3399  cf09 202c          	jra	L747
3400  cf0b               L325:
3401                     ; 1139 	    case 20: emb_itoa(uip_stat.tcp.syndrop,  OctetArray, 10, 10); break;
3403  cf0b 4b0a          	push	#10
3404  cf0d 4b0a          	push	#10
3405  cf0f ae0010        	ldw	x,#_OctetArray
3406  cf12 89            	pushw	x
3407  cf13 ce00db        	ldw	x,_uip_stat+82
3408  cf16 89            	pushw	x
3409  cf17 ce00d9        	ldw	x,_uip_stat+80
3413  cf1a 201b          	jra	L747
3414  cf1c               L525:
3415                     ; 1140 	    case 21: emb_itoa(uip_stat.tcp.synrst,   OctetArray, 10, 10); break;
3417  cf1c 4b0a          	push	#10
3418  cf1e 4b0a          	push	#10
3419  cf20 ae0010        	ldw	x,#_OctetArray
3420  cf23 89            	pushw	x
3421  cf24 ce00df        	ldw	x,_uip_stat+86
3422  cf27 89            	pushw	x
3423  cf28 ce00dd        	ldw	x,_uip_stat+84
3427  cf2b 200a          	jra	L747
3428  cf2d               L725:
3429                     ; 1141 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3431  cf2d 4b0a          	push	#10
3432  cf2f 4b0a          	push	#10
3433  cf31 ae0010        	ldw	x,#_OctetArray
3434  cf34 89            	pushw	x
3435  cf35 5f            	clrw	x
3436  cf36 89            	pushw	x
3440  cf37               L747:
3441  cf37 89            	pushw	x
3442  cf38 cdc7f7        	call	_emb_itoa
3443  cf3b 5b08          	addw	sp,#8
3444                     ; 1144 	  for (i=0; i<10; i++) {
3446  cf3d 4f            	clr	a
3447  cf3e 6b07          	ld	(OFST+0,sp),a
3449  cf40               L157:
3450                     ; 1145             *pBuffer = OctetArray[i];
3452  cf40 5f            	clrw	x
3453  cf41 97            	ld	xl,a
3454  cf42 d60010        	ld	a,(_OctetArray,x)
3455  cf45 1e08          	ldw	x,(OFST+1,sp)
3456  cf47 f7            	ld	(x),a
3457                     ; 1146             pBuffer++;
3459  cf48 5c            	incw	x
3460  cf49 1f08          	ldw	(OFST+1,sp),x
3461                     ; 1147             nBytes++;
3463  cf4b 1e05          	ldw	x,(OFST-2,sp)
3464  cf4d 5c            	incw	x
3465  cf4e 1f05          	ldw	(OFST-2,sp),x
3467                     ; 1144 	  for (i=0; i<10; i++) {
3469  cf50 0c07          	inc	(OFST+0,sp)
3473  cf52 7b07          	ld	a,(OFST+0,sp)
3474  cf54 a10a          	cp	a,#10
3475  cf56 25e8          	jrult	L157
3476                     ; 1152           *ppData = *ppData + 10;
3478  cf58 1e0c          	ldw	x,(OFST+5,sp)
3479  cf5a 9093          	ldw	y,x
3480  cf5c fe            	ldw	x,(x)
3481  cf5d 1c000a        	addw	x,#10
3482  cf60 90ff          	ldw	(y),x
3483                     ; 1153           *pDataLeft = *pDataLeft - 10;
3485  cf62 1e0e          	ldw	x,(OFST+7,sp)
3486  cf64 9093          	ldw	y,x
3487  cf66 fe            	ldw	x,(x)
3488  cf67 1d000a        	subw	x,#10
3490  cf6a 2031          	jp	LC011
3491  cf6c               L347:
3492                     ; 1158         else if (nParsedMode == 'f') {
3494  cf6c a166          	cp	a,#102
3495  cf6e 2632          	jrne	L167
3496                     ; 1161 	  for(i=0; i<16; i++) {
3498  cf70 4f            	clr	a
3499  cf71 6b07          	ld	(OFST+0,sp),a
3501  cf73               L367:
3502                     ; 1162 	    *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
3504  cf73 cdda9b        	call	_GpioGetPin
3506  cf76 1e08          	ldw	x,(OFST+1,sp)
3507  cf78 ab30          	add	a,#48
3508  cf7a f7            	ld	(x),a
3509                     ; 1163             pBuffer++;
3511  cf7b 5c            	incw	x
3512  cf7c 1f08          	ldw	(OFST+1,sp),x
3513                     ; 1164             nBytes++;
3515  cf7e 1e05          	ldw	x,(OFST-2,sp)
3516  cf80 5c            	incw	x
3517  cf81 1f05          	ldw	(OFST-2,sp),x
3519                     ; 1161 	  for(i=0; i<16; i++) {
3521  cf83 0c07          	inc	(OFST+0,sp)
3525  cf85 7b07          	ld	a,(OFST+0,sp)
3526  cf87 a110          	cp	a,#16
3527  cf89 25e8          	jrult	L367
3528                     ; 1168           *ppData = *ppData + 16;
3530  cf8b 1e0c          	ldw	x,(OFST+5,sp)
3531  cf8d 9093          	ldw	y,x
3532  cf8f fe            	ldw	x,(x)
3533  cf90 1c0010        	addw	x,#16
3534  cf93 90ff          	ldw	(y),x
3535                     ; 1169           *pDataLeft = *pDataLeft - 16;
3537  cf95 1e0e          	ldw	x,(OFST+7,sp)
3538  cf97 9093          	ldw	y,x
3539  cf99 fe            	ldw	x,(x)
3540  cf9a 1d0010        	subw	x,#16
3541  cf9d               LC011:
3542  cf9d 90ff          	ldw	(y),x
3544  cf9f ccd263        	jra	L306
3545  cfa2               L167:
3546                     ; 1172         else if (nParsedMode == 'g') {
3548  cfa2 a167          	cp	a,#103
3549  cfa4 2623          	jrne	L377
3550                     ; 1176 	  if (invert_output == 1) {  // Insert 'checked'
3552  cfa6 c6005e        	ld	a,_invert_output
3553  cfa9 4a            	dec	a
3554  cfaa 26f3          	jrne	L306
3555                     ; 1177             for(i=0; i<7; i++) {
3557  cfac 6b07          	ld	(OFST+0,sp),a
3559  cfae               L777:
3560                     ; 1178               *pBuffer = checked[i];
3562  cfae 5f            	clrw	x
3563  cfaf 97            	ld	xl,a
3564  cfb0 d68080        	ld	a,(L31_checked,x)
3565  cfb3 1e08          	ldw	x,(OFST+1,sp)
3566  cfb5 f7            	ld	(x),a
3567                     ; 1179               pBuffer++;
3569  cfb6 5c            	incw	x
3570  cfb7 1f08          	ldw	(OFST+1,sp),x
3571                     ; 1180               nBytes++;
3573  cfb9 1e05          	ldw	x,(OFST-2,sp)
3574  cfbb 5c            	incw	x
3575  cfbc 1f05          	ldw	(OFST-2,sp),x
3577                     ; 1177             for(i=0; i<7; i++) {
3579  cfbe 0c07          	inc	(OFST+0,sp)
3583  cfc0 7b07          	ld	a,(OFST+0,sp)
3584  cfc2 a107          	cp	a,#7
3585  cfc4 25e8          	jrult	L777
3586  cfc6 ccd263        	jra	L306
3587  cfc9               L377:
3588                     ; 1185         else if (nParsedMode == 'h') {
3590  cfc9 a168          	cp	a,#104
3591  cfcb 2622          	jrne	L7001
3592                     ; 1190 	  if (invert_output == 0) {  // Insert 'checked'
3594  cfcd c6005e        	ld	a,_invert_output
3595  cfd0 26f4          	jrne	L306
3596                     ; 1191             for(i=0; i<7; i++) {
3598  cfd2 6b07          	ld	(OFST+0,sp),a
3600  cfd4               L3101:
3601                     ; 1192               *pBuffer = checked[i];
3603  cfd4 5f            	clrw	x
3604  cfd5 97            	ld	xl,a
3605  cfd6 d68080        	ld	a,(L31_checked,x)
3606  cfd9 1e08          	ldw	x,(OFST+1,sp)
3607  cfdb f7            	ld	(x),a
3608                     ; 1193               pBuffer++;
3610  cfdc 5c            	incw	x
3611  cfdd 1f08          	ldw	(OFST+1,sp),x
3612                     ; 1194               nBytes++;
3614  cfdf 1e05          	ldw	x,(OFST-2,sp)
3615  cfe1 5c            	incw	x
3616  cfe2 1f05          	ldw	(OFST-2,sp),x
3618                     ; 1191             for(i=0; i<7; i++) {
3620  cfe4 0c07          	inc	(OFST+0,sp)
3624  cfe6 7b07          	ld	a,(OFST+0,sp)
3625  cfe8 a107          	cp	a,#7
3626  cfea 25e8          	jrult	L3101
3627  cfec ccd263        	jra	L306
3628  cfef               L7001:
3629                     ; 1199         else if (nParsedMode == 'x') {
3631  cfef a178          	cp	a,#120
3632  cff1 26f9          	jrne	L306
3633                     ; 1209           *pBuffer = 'h'; pBuffer++; nBytes++;
3635  cff3 1e08          	ldw	x,(OFST+1,sp)
3636  cff5 a668          	ld	a,#104
3637  cff7 f7            	ld	(x),a
3640  cff8 5c            	incw	x
3641  cff9 1f08          	ldw	(OFST+1,sp),x
3644  cffb 1e05          	ldw	x,(OFST-2,sp)
3645  cffd 5c            	incw	x
3646  cffe 1f05          	ldw	(OFST-2,sp),x
3648                     ; 1210           *pBuffer = 't'; pBuffer++; nBytes++;
3650  d000 1e08          	ldw	x,(OFST+1,sp)
3651  d002 a674          	ld	a,#116
3652  d004 f7            	ld	(x),a
3655  d005 5c            	incw	x
3656  d006 1f08          	ldw	(OFST+1,sp),x
3659  d008 1e05          	ldw	x,(OFST-2,sp)
3660  d00a 5c            	incw	x
3661  d00b 1f05          	ldw	(OFST-2,sp),x
3663                     ; 1211           *pBuffer = 't'; pBuffer++; nBytes++;
3665  d00d 1e08          	ldw	x,(OFST+1,sp)
3666  d00f f7            	ld	(x),a
3669  d010 5c            	incw	x
3670  d011 1f08          	ldw	(OFST+1,sp),x
3673  d013 1e05          	ldw	x,(OFST-2,sp)
3674  d015 5c            	incw	x
3675  d016 1f05          	ldw	(OFST-2,sp),x
3677                     ; 1212           *pBuffer = 'p'; pBuffer++; nBytes++;
3679  d018 1e08          	ldw	x,(OFST+1,sp)
3680  d01a a670          	ld	a,#112
3681  d01c f7            	ld	(x),a
3684  d01d 5c            	incw	x
3685  d01e 1f08          	ldw	(OFST+1,sp),x
3688  d020 1e05          	ldw	x,(OFST-2,sp)
3689  d022 5c            	incw	x
3690  d023 1f05          	ldw	(OFST-2,sp),x
3692                     ; 1213           *pBuffer = ':'; pBuffer++; nBytes++;
3694  d025 1e08          	ldw	x,(OFST+1,sp)
3695  d027 a63a          	ld	a,#58
3696  d029 f7            	ld	(x),a
3699  d02a 5c            	incw	x
3700  d02b 1f08          	ldw	(OFST+1,sp),x
3703  d02d 1e05          	ldw	x,(OFST-2,sp)
3704  d02f 5c            	incw	x
3705  d030 1f05          	ldw	(OFST-2,sp),x
3707                     ; 1214           *pBuffer = '/'; pBuffer++; nBytes++;
3709  d032 1e08          	ldw	x,(OFST+1,sp)
3710  d034 a62f          	ld	a,#47
3711  d036 f7            	ld	(x),a
3714  d037 5c            	incw	x
3715  d038 1f08          	ldw	(OFST+1,sp),x
3718  d03a 1e05          	ldw	x,(OFST-2,sp)
3719  d03c 5c            	incw	x
3720  d03d 1f05          	ldw	(OFST-2,sp),x
3722                     ; 1215           *pBuffer = '/'; pBuffer++; nBytes++;
3724  d03f 1e08          	ldw	x,(OFST+1,sp)
3725  d041 f7            	ld	(x),a
3728  d042 5c            	incw	x
3729  d043 1f08          	ldw	(OFST+1,sp),x
3732  d045 1e05          	ldw	x,(OFST-2,sp)
3733  d047 5c            	incw	x
3734  d048 1f05          	ldw	(OFST-2,sp),x
3736                     ; 1219           emb_itoa(ex_stored_hostaddr4,  OctetArray, 10, 3);
3738  d04a 4b03          	push	#3
3739  d04c 4b0a          	push	#10
3740  d04e ae0010        	ldw	x,#_OctetArray
3741  d051 89            	pushw	x
3742  d052 5500590003    	mov	c_lreg+3,_ex_stored_hostaddr4
3743  d057 3f02          	clr	c_lreg+2
3744  d059 3f01          	clr	c_lreg+1
3745  d05b 3f00          	clr	c_lreg
3746  d05d be02          	ldw	x,c_lreg+2
3747  d05f 89            	pushw	x
3748  d060 be00          	ldw	x,c_lreg
3749  d062 89            	pushw	x
3750  d063 cdc7f7        	call	_emb_itoa
3752  d066 5b08          	addw	sp,#8
3753                     ; 1221 	  if (OctetArray[0] != '0') {
3755  d068 c60010        	ld	a,_OctetArray
3756  d06b a130          	cp	a,#48
3757  d06d 270b          	jreq	L5201
3758                     ; 1222 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3760  d06f 1e08          	ldw	x,(OFST+1,sp)
3761  d071 f7            	ld	(x),a
3764  d072 5c            	incw	x
3765  d073 1f08          	ldw	(OFST+1,sp),x
3768  d075 1e05          	ldw	x,(OFST-2,sp)
3769  d077 5c            	incw	x
3770  d078 1f05          	ldw	(OFST-2,sp),x
3772  d07a               L5201:
3773                     ; 1224 	  if (OctetArray[0] != '0') {
3775  d07a a130          	cp	a,#48
3776  d07c 2707          	jreq	L7201
3777                     ; 1225             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3779  d07e 1e08          	ldw	x,(OFST+1,sp)
3780  d080 c60011        	ld	a,_OctetArray+1
3784  d083 2009          	jp	LC005
3785  d085               L7201:
3786                     ; 1227 	  else if (OctetArray[1] != '0') {
3788  d085 c60011        	ld	a,_OctetArray+1
3789  d088 a130          	cp	a,#48
3790  d08a 270b          	jreq	L1301
3791                     ; 1228             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3793  d08c 1e08          	ldw	x,(OFST+1,sp)
3798  d08e               LC005:
3799  d08e f7            	ld	(x),a
3801  d08f 5c            	incw	x
3802  d090 1f08          	ldw	(OFST+1,sp),x
3804  d092 1e05          	ldw	x,(OFST-2,sp)
3805  d094 5c            	incw	x
3806  d095 1f05          	ldw	(OFST-2,sp),x
3808  d097               L1301:
3809                     ; 1230           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3811  d097 1e08          	ldw	x,(OFST+1,sp)
3812  d099 c60012        	ld	a,_OctetArray+2
3813  d09c f7            	ld	(x),a
3816  d09d 5c            	incw	x
3817  d09e 1f08          	ldw	(OFST+1,sp),x
3820  d0a0 1e05          	ldw	x,(OFST-2,sp)
3821  d0a2 5c            	incw	x
3822  d0a3 1f05          	ldw	(OFST-2,sp),x
3824                     ; 1232           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3826  d0a5 1e08          	ldw	x,(OFST+1,sp)
3827  d0a7 a62e          	ld	a,#46
3828  d0a9 f7            	ld	(x),a
3831  d0aa 5c            	incw	x
3832  d0ab 1f08          	ldw	(OFST+1,sp),x
3835  d0ad 1e05          	ldw	x,(OFST-2,sp)
3836  d0af 5c            	incw	x
3837  d0b0 1f05          	ldw	(OFST-2,sp),x
3839                     ; 1235           emb_itoa(ex_stored_hostaddr3,  OctetArray, 10, 3);
3841  d0b2 4b03          	push	#3
3842  d0b4 4b0a          	push	#10
3843  d0b6 ae0010        	ldw	x,#_OctetArray
3844  d0b9 89            	pushw	x
3845  d0ba 5500580003    	mov	c_lreg+3,_ex_stored_hostaddr3
3846  d0bf 3f02          	clr	c_lreg+2
3847  d0c1 3f01          	clr	c_lreg+1
3848  d0c3 3f00          	clr	c_lreg
3849  d0c5 be02          	ldw	x,c_lreg+2
3850  d0c7 89            	pushw	x
3851  d0c8 be00          	ldw	x,c_lreg
3852  d0ca 89            	pushw	x
3853  d0cb cdc7f7        	call	_emb_itoa
3855  d0ce 5b08          	addw	sp,#8
3856                     ; 1237 	  if (OctetArray[0] != '0') {
3858  d0d0 c60010        	ld	a,_OctetArray
3859  d0d3 a130          	cp	a,#48
3860  d0d5 270b          	jreq	L5301
3861                     ; 1238 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3863  d0d7 1e08          	ldw	x,(OFST+1,sp)
3864  d0d9 f7            	ld	(x),a
3867  d0da 5c            	incw	x
3868  d0db 1f08          	ldw	(OFST+1,sp),x
3871  d0dd 1e05          	ldw	x,(OFST-2,sp)
3872  d0df 5c            	incw	x
3873  d0e0 1f05          	ldw	(OFST-2,sp),x
3875  d0e2               L5301:
3876                     ; 1240 	  if (OctetArray[0] != '0') {
3878  d0e2 a130          	cp	a,#48
3879  d0e4 2707          	jreq	L7301
3880                     ; 1241             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3882  d0e6 1e08          	ldw	x,(OFST+1,sp)
3883  d0e8 c60011        	ld	a,_OctetArray+1
3887  d0eb 2009          	jp	LC006
3888  d0ed               L7301:
3889                     ; 1243 	  else if (OctetArray[1] != '0') {
3891  d0ed c60011        	ld	a,_OctetArray+1
3892  d0f0 a130          	cp	a,#48
3893  d0f2 270b          	jreq	L1401
3894                     ; 1244             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3896  d0f4 1e08          	ldw	x,(OFST+1,sp)
3901  d0f6               LC006:
3902  d0f6 f7            	ld	(x),a
3904  d0f7 5c            	incw	x
3905  d0f8 1f08          	ldw	(OFST+1,sp),x
3907  d0fa 1e05          	ldw	x,(OFST-2,sp)
3908  d0fc 5c            	incw	x
3909  d0fd 1f05          	ldw	(OFST-2,sp),x
3911  d0ff               L1401:
3912                     ; 1246           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3914  d0ff 1e08          	ldw	x,(OFST+1,sp)
3915  d101 c60012        	ld	a,_OctetArray+2
3916  d104 f7            	ld	(x),a
3919  d105 5c            	incw	x
3920  d106 1f08          	ldw	(OFST+1,sp),x
3923  d108 1e05          	ldw	x,(OFST-2,sp)
3924  d10a 5c            	incw	x
3925  d10b 1f05          	ldw	(OFST-2,sp),x
3927                     ; 1248           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3929  d10d 1e08          	ldw	x,(OFST+1,sp)
3930  d10f a62e          	ld	a,#46
3931  d111 f7            	ld	(x),a
3934  d112 5c            	incw	x
3935  d113 1f08          	ldw	(OFST+1,sp),x
3938  d115 1e05          	ldw	x,(OFST-2,sp)
3939  d117 5c            	incw	x
3940  d118 1f05          	ldw	(OFST-2,sp),x
3942                     ; 1251           emb_itoa(ex_stored_hostaddr2,  OctetArray, 10, 3);
3944  d11a 4b03          	push	#3
3945  d11c 4b0a          	push	#10
3946  d11e ae0010        	ldw	x,#_OctetArray
3947  d121 89            	pushw	x
3948  d122 5500570003    	mov	c_lreg+3,_ex_stored_hostaddr2
3949  d127 3f02          	clr	c_lreg+2
3950  d129 3f01          	clr	c_lreg+1
3951  d12b 3f00          	clr	c_lreg
3952  d12d be02          	ldw	x,c_lreg+2
3953  d12f 89            	pushw	x
3954  d130 be00          	ldw	x,c_lreg
3955  d132 89            	pushw	x
3956  d133 cdc7f7        	call	_emb_itoa
3958  d136 5b08          	addw	sp,#8
3959                     ; 1253 	  if (OctetArray[0] != '0') {
3961  d138 c60010        	ld	a,_OctetArray
3962  d13b a130          	cp	a,#48
3963  d13d 270b          	jreq	L5401
3964                     ; 1254 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3966  d13f 1e08          	ldw	x,(OFST+1,sp)
3967  d141 f7            	ld	(x),a
3970  d142 5c            	incw	x
3971  d143 1f08          	ldw	(OFST+1,sp),x
3974  d145 1e05          	ldw	x,(OFST-2,sp)
3975  d147 5c            	incw	x
3976  d148 1f05          	ldw	(OFST-2,sp),x
3978  d14a               L5401:
3979                     ; 1256 	  if (OctetArray[0] != '0') {
3981  d14a a130          	cp	a,#48
3982  d14c 2707          	jreq	L7401
3983                     ; 1257             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3985  d14e 1e08          	ldw	x,(OFST+1,sp)
3986  d150 c60011        	ld	a,_OctetArray+1
3990  d153 2009          	jp	LC007
3991  d155               L7401:
3992                     ; 1259 	  else if (OctetArray[1] != '0') {
3994  d155 c60011        	ld	a,_OctetArray+1
3995  d158 a130          	cp	a,#48
3996  d15a 270b          	jreq	L1501
3997                     ; 1260             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3999  d15c 1e08          	ldw	x,(OFST+1,sp)
4004  d15e               LC007:
4005  d15e f7            	ld	(x),a
4007  d15f 5c            	incw	x
4008  d160 1f08          	ldw	(OFST+1,sp),x
4010  d162 1e05          	ldw	x,(OFST-2,sp)
4011  d164 5c            	incw	x
4012  d165 1f05          	ldw	(OFST-2,sp),x
4014  d167               L1501:
4015                     ; 1262           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
4017  d167 1e08          	ldw	x,(OFST+1,sp)
4018  d169 c60012        	ld	a,_OctetArray+2
4019  d16c f7            	ld	(x),a
4022  d16d 5c            	incw	x
4023  d16e 1f08          	ldw	(OFST+1,sp),x
4026  d170 1e05          	ldw	x,(OFST-2,sp)
4027  d172 5c            	incw	x
4028  d173 1f05          	ldw	(OFST-2,sp),x
4030                     ; 1264           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
4032  d175 1e08          	ldw	x,(OFST+1,sp)
4033  d177 a62e          	ld	a,#46
4034  d179 f7            	ld	(x),a
4037  d17a 5c            	incw	x
4038  d17b 1f08          	ldw	(OFST+1,sp),x
4041  d17d 1e05          	ldw	x,(OFST-2,sp)
4042  d17f 5c            	incw	x
4043  d180 1f05          	ldw	(OFST-2,sp),x
4045                     ; 1267           emb_itoa(ex_stored_hostaddr1,  OctetArray, 10, 3);
4047  d182 4b03          	push	#3
4048  d184 4b0a          	push	#10
4049  d186 ae0010        	ldw	x,#_OctetArray
4050  d189 89            	pushw	x
4051  d18a 5500560003    	mov	c_lreg+3,_ex_stored_hostaddr1
4052  d18f 3f02          	clr	c_lreg+2
4053  d191 3f01          	clr	c_lreg+1
4054  d193 3f00          	clr	c_lreg
4055  d195 be02          	ldw	x,c_lreg+2
4056  d197 89            	pushw	x
4057  d198 be00          	ldw	x,c_lreg
4058  d19a 89            	pushw	x
4059  d19b cdc7f7        	call	_emb_itoa
4061  d19e 5b08          	addw	sp,#8
4062                     ; 1269 	  if (OctetArray[0] != '0') {
4064  d1a0 c60010        	ld	a,_OctetArray
4065  d1a3 a130          	cp	a,#48
4066  d1a5 270b          	jreq	L5501
4067                     ; 1270 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
4069  d1a7 1e08          	ldw	x,(OFST+1,sp)
4070  d1a9 f7            	ld	(x),a
4073  d1aa 5c            	incw	x
4074  d1ab 1f08          	ldw	(OFST+1,sp),x
4077  d1ad 1e05          	ldw	x,(OFST-2,sp)
4078  d1af 5c            	incw	x
4079  d1b0 1f05          	ldw	(OFST-2,sp),x
4081  d1b2               L5501:
4082                     ; 1272 	  if (OctetArray[0] != '0') {
4084  d1b2 a130          	cp	a,#48
4085  d1b4 2707          	jreq	L7501
4086                     ; 1273             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
4088  d1b6 1e08          	ldw	x,(OFST+1,sp)
4089  d1b8 c60011        	ld	a,_OctetArray+1
4093  d1bb 2009          	jp	LC008
4094  d1bd               L7501:
4095                     ; 1275 	  else if (OctetArray[1] != '0') {
4097  d1bd c60011        	ld	a,_OctetArray+1
4098  d1c0 a130          	cp	a,#48
4099  d1c2 270b          	jreq	L1601
4100                     ; 1276             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
4102  d1c4 1e08          	ldw	x,(OFST+1,sp)
4107  d1c6               LC008:
4108  d1c6 f7            	ld	(x),a
4110  d1c7 5c            	incw	x
4111  d1c8 1f08          	ldw	(OFST+1,sp),x
4113  d1ca 1e05          	ldw	x,(OFST-2,sp)
4114  d1cc 5c            	incw	x
4115  d1cd 1f05          	ldw	(OFST-2,sp),x
4117  d1cf               L1601:
4118                     ; 1278           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
4120  d1cf 1e08          	ldw	x,(OFST+1,sp)
4121  d1d1 c60012        	ld	a,_OctetArray+2
4122  d1d4 f7            	ld	(x),a
4125  d1d5 5c            	incw	x
4126  d1d6 1f08          	ldw	(OFST+1,sp),x
4129  d1d8 1e05          	ldw	x,(OFST-2,sp)
4130  d1da 5c            	incw	x
4131  d1db 1f05          	ldw	(OFST-2,sp),x
4133                     ; 1280           *pBuffer = ':'; pBuffer++; nBytes++; // Output ':'
4135  d1dd 1e08          	ldw	x,(OFST+1,sp)
4136  d1df a63a          	ld	a,#58
4137  d1e1 f7            	ld	(x),a
4140  d1e2 5c            	incw	x
4141  d1e3 1f08          	ldw	(OFST+1,sp),x
4144  d1e5 1e05          	ldw	x,(OFST-2,sp)
4145  d1e7 5c            	incw	x
4146  d1e8 1f05          	ldw	(OFST-2,sp),x
4148                     ; 1283   	  emb_itoa(ex_stored_port, OctetArray, 10, 5);
4150  d1ea 4b05          	push	#5
4151  d1ec 4b0a          	push	#10
4152  d1ee ae0010        	ldw	x,#_OctetArray
4153  d1f1 89            	pushw	x
4154  d1f2 ce004c        	ldw	x,_ex_stored_port
4155  d1f5 cdfb38        	call	c_uitolx
4157  d1f8 be02          	ldw	x,c_lreg+2
4158  d1fa 89            	pushw	x
4159  d1fb be00          	ldw	x,c_lreg
4160  d1fd 89            	pushw	x
4161  d1fe cdc7f7        	call	_emb_itoa
4163  d201 5b08          	addw	sp,#8
4164                     ; 1285 	  for(i=0; i<5; i++) {
4166  d203 4f            	clr	a
4167  d204 6b07          	ld	(OFST+0,sp),a
4169  d206               L5601:
4170                     ; 1286 	    if (OctetArray[i] != '0') break;
4172  d206 5f            	clrw	x
4173  d207 97            	ld	xl,a
4174  d208 d60010        	ld	a,(_OctetArray,x)
4175  d20b a130          	cp	a,#48
4176  d20d 261c          	jrne	L7701
4179                     ; 1285 	  for(i=0; i<5; i++) {
4181  d20f 0c07          	inc	(OFST+0,sp)
4185  d211 7b07          	ld	a,(OFST+0,sp)
4186  d213 a105          	cp	a,#5
4187  d215 25ef          	jrult	L5601
4188  d217 2012          	jra	L7701
4189  d219               L5701:
4190                     ; 1289 	    *pBuffer = OctetArray[i]; pBuffer++; nBytes++;
4192  d219 5f            	clrw	x
4193  d21a 97            	ld	xl,a
4194  d21b d60010        	ld	a,(_OctetArray,x)
4195  d21e 1e08          	ldw	x,(OFST+1,sp)
4196  d220 f7            	ld	(x),a
4199  d221 5c            	incw	x
4200  d222 1f08          	ldw	(OFST+1,sp),x
4203  d224 1e05          	ldw	x,(OFST-2,sp)
4204  d226 5c            	incw	x
4205  d227 1f05          	ldw	(OFST-2,sp),x
4207                     ; 1290 	    i++;
4209  d229 0c07          	inc	(OFST+0,sp)
4211  d22b               L7701:
4212                     ; 1288 	  while(i<5) {
4214  d22b 7b07          	ld	a,(OFST+0,sp)
4215  d22d a105          	cp	a,#5
4216  d22f 25e8          	jrult	L5701
4217                     ; 1295           *ppData = *ppData + 28;
4219  d231 1e0c          	ldw	x,(OFST+5,sp)
4220  d233 9093          	ldw	y,x
4221  d235 fe            	ldw	x,(x)
4222  d236 1c001c        	addw	x,#28
4223  d239 90ff          	ldw	(y),x
4224                     ; 1296           *pDataLeft = *pDataLeft - 28;
4226  d23b 1e0e          	ldw	x,(OFST+7,sp)
4227  d23d 9093          	ldw	y,x
4228  d23f fe            	ldw	x,(x)
4229  d240 1d001c        	subw	x,#28
4230  d243 cccf9d        	jp	LC011
4231  d246               L116:
4232                     ; 1300         *pBuffer = nByte;
4234  d246 1e08          	ldw	x,(OFST+1,sp)
4235  d248 f7            	ld	(x),a
4236                     ; 1301         *ppData = *ppData + 1;
4238  d249 1e0c          	ldw	x,(OFST+5,sp)
4239  d24b 9093          	ldw	y,x
4240  d24d fe            	ldw	x,(x)
4241  d24e 5c            	incw	x
4242  d24f 90ff          	ldw	(y),x
4243                     ; 1302         *pDataLeft = *pDataLeft - 1;
4245  d251 1e0e          	ldw	x,(OFST+7,sp)
4246  d253 9093          	ldw	y,x
4247  d255 fe            	ldw	x,(x)
4248  d256 5a            	decw	x
4249  d257 90ff          	ldw	(y),x
4250                     ; 1303         pBuffer++;
4252  d259 1e08          	ldw	x,(OFST+1,sp)
4253                     ; 1304         nBytes++;
4255  d25b               LC009:
4258  d25b 5c            	incw	x
4259  d25c 1f08          	ldw	(OFST+1,sp),x
4262  d25e 1e05          	ldw	x,(OFST-2,sp)
4263  d260 5c            	incw	x
4264  d261 1f05          	ldw	(OFST-2,sp),x
4266  d263               L306:
4267                     ; 842   while (nBytes < nMaxBytes) {
4269  d263 1e05          	ldw	x,(OFST-2,sp)
4270  d265 1310          	cpw	x,(OFST+9,sp)
4271  d267 2403ccca4c    	jrult	L106
4272  d26c               L506:
4273                     ; 1309   return nBytes;
4275  d26c 1e05          	ldw	x,(OFST-2,sp)
4278  d26e 5b09          	addw	sp,#9
4279  d270 81            	ret	
4306                     ; 1313 void HttpDInit()
4306                     ; 1314 {
4307                     	switch	.text
4308  d271               _HttpDInit:
4312                     ; 1316   uip_listen(htons(Port_Httpd));
4314  d271 ce0061        	ldw	x,_Port_Httpd
4315  d274 cdf514        	call	_htons
4317  d277 cdebd4        	call	_uip_listen
4319                     ; 1317   current_webpage = WEBPAGE_DEFAULT;
4321  d27a 725f001b      	clr	_current_webpage
4322                     ; 1318 }
4325  d27e 81            	ret	
4531                     	switch	.const
4532  c204               L472:
4533  c204 d7f3          	dc.w	L7111
4534  c206 d7fa          	dc.w	L1211
4535  c208 d801          	dc.w	L3211
4536  c20a d808          	dc.w	L5211
4537  c20c d80f          	dc.w	L7211
4538  c20e d816          	dc.w	L1311
4539  c210 d81d          	dc.w	L3311
4540  c212 d824          	dc.w	L5311
4541  c214 d82b          	dc.w	L7311
4542  c216 d832          	dc.w	L1411
4543  c218 d839          	dc.w	L3411
4544  c21a d840          	dc.w	L5411
4545  c21c d847          	dc.w	L7411
4546  c21e d84e          	dc.w	L1511
4547  c220 d855          	dc.w	L3511
4548  c222 d85c          	dc.w	L5511
4549  c224 d863          	dc.w	L7511
4550  c226 d86a          	dc.w	L1611
4551  c228 d871          	dc.w	L3611
4552  c22a d878          	dc.w	L5611
4553  c22c d87f          	dc.w	L7611
4554  c22e d886          	dc.w	L1711
4555  c230 d88d          	dc.w	L3711
4556  c232 d894          	dc.w	L5711
4557  c234 d89b          	dc.w	L7711
4558  c236 d8a2          	dc.w	L1021
4559  c238 d8a9          	dc.w	L3021
4560  c23a d8b0          	dc.w	L5021
4561  c23c d8b7          	dc.w	L7021
4562  c23e d8be          	dc.w	L1121
4563  c240 d8c5          	dc.w	L3121
4564  c242 d8cc          	dc.w	L5121
4565  c244 d959          	dc.w	L3421
4566  c246 d959          	dc.w	L3421
4567  c248 d959          	dc.w	L3421
4568  c24a d959          	dc.w	L3421
4569  c24c d959          	dc.w	L3421
4570  c24e d959          	dc.w	L3421
4571  c250 d959          	dc.w	L3421
4572  c252 d959          	dc.w	L3421
4573  c254 d959          	dc.w	L3421
4574  c256 d959          	dc.w	L3421
4575  c258 d959          	dc.w	L3421
4576  c25a d959          	dc.w	L3421
4577  c25c d959          	dc.w	L3421
4578  c25e d959          	dc.w	L3421
4579  c260 d959          	dc.w	L3421
4580  c262 d959          	dc.w	L3421
4581  c264 d959          	dc.w	L3421
4582  c266 d959          	dc.w	L3421
4583  c268 d959          	dc.w	L3421
4584  c26a d959          	dc.w	L3421
4585  c26c d959          	dc.w	L3421
4586  c26e d959          	dc.w	L3421
4587  c270 d959          	dc.w	L3421
4588  c272 d8d3          	dc.w	L7121
4589  c274 d8de          	dc.w	L1221
4590  c276 d959          	dc.w	L3421
4591  c278 d959          	dc.w	L3421
4592  c27a d959          	dc.w	L3421
4593  c27c d8e9          	dc.w	L3221
4594  c27e d8eb          	dc.w	L5221
4595  c280 d959          	dc.w	L3421
4596  c282 d8fd          	dc.w	L7221
4597  c284 d90f          	dc.w	L1321
4598  c286 d921          	dc.w	L3321
4599  c288 d92c          	dc.w	L5321
4600                     ; 1321 void HttpDCall(	uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
4600                     ; 1322 {
4601                     	switch	.text
4602  d27f               _HttpDCall:
4604  d27f 89            	pushw	x
4605  d280 5207          	subw	sp,#7
4606       00000007      OFST:	set	7
4609                     ; 1332   alpha_1 = '0';
4611                     ; 1333   alpha_2 = '0';
4613                     ; 1334   alpha_3 = '0';
4615                     ; 1335   alpha_4 = '0';
4617                     ; 1336   alpha_5 = '0';
4619                     ; 1338   if(uip_connected()) {
4621  d282 720d00887a    	btjf	_uip_flags,#6,L3431
4622                     ; 1340     if(current_webpage == WEBPAGE_DEFAULT) {
4624  d287 c6001b        	ld	a,_current_webpage
4625  d28a 260e          	jrne	L5431
4626                     ; 1341       pSocket->pData = g_HtmlPageDefault;
4628  d28c 1e0e          	ldw	x,(OFST+7,sp)
4629  d28e 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
4630  d292 ef01          	ldw	(1,x),y
4631                     ; 1342       pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
4633  d294 90ae1879      	ldw	y,#6265
4635  d298 2058          	jp	LC012
4636  d29a               L5431:
4637                     ; 1346     else if(current_webpage == WEBPAGE_ADDRESS) {
4639  d29a a101          	cp	a,#1
4640  d29c 260e          	jrne	L1531
4641                     ; 1347       pSocket->pData = g_HtmlPageAddress;
4643  d29e 1e0e          	ldw	x,(OFST+7,sp)
4644  d2a0 90ae9902      	ldw	y,#L71_g_HtmlPageAddress
4645  d2a4 ef01          	ldw	(1,x),y
4646                     ; 1348       pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
4648  d2a6 90ae133d      	ldw	y,#4925
4650  d2aa 2046          	jp	LC012
4651  d2ac               L1531:
4652                     ; 1352     else if(current_webpage == WEBPAGE_HELP) {
4654  d2ac a103          	cp	a,#3
4655  d2ae 260e          	jrne	L5531
4656                     ; 1353       pSocket->pData = g_HtmlPageHelp;
4658  d2b0 1e0e          	ldw	x,(OFST+7,sp)
4659  d2b2 90aeac40      	ldw	y,#L12_g_HtmlPageHelp
4660  d2b6 ef01          	ldw	(1,x),y
4661                     ; 1354       pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
4663  d2b8 90ae0756      	ldw	y,#1878
4665  d2bc 2034          	jp	LC012
4666  d2be               L5531:
4667                     ; 1356     else if(current_webpage == WEBPAGE_HELP2) {
4669  d2be a104          	cp	a,#4
4670  d2c0 260e          	jrne	L1631
4671                     ; 1357       pSocket->pData = g_HtmlPageHelp2;
4673  d2c2 1e0e          	ldw	x,(OFST+7,sp)
4674  d2c4 90aeb397      	ldw	y,#L32_g_HtmlPageHelp2
4675  d2c8 ef01          	ldw	(1,x),y
4676                     ; 1358       pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
4678  d2ca 90ae02b7      	ldw	y,#695
4680  d2ce 2022          	jp	LC012
4681  d2d0               L1631:
4682                     ; 1363     else if(current_webpage == WEBPAGE_STATS) {
4684  d2d0 a105          	cp	a,#5
4685  d2d2 260e          	jrne	L5631
4686                     ; 1364       pSocket->pData = g_HtmlPageStats;
4688  d2d4 1e0e          	ldw	x,(OFST+7,sp)
4689  d2d6 90aeb64f      	ldw	y,#L52_g_HtmlPageStats
4690  d2da ef01          	ldw	(1,x),y
4691                     ; 1365       pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
4693  d2dc 90ae0ae8      	ldw	y,#2792
4695  d2e0 2010          	jp	LC012
4696  d2e2               L5631:
4697                     ; 1368     else if(current_webpage == WEBPAGE_RSTATE) {
4699  d2e2 a106          	cp	a,#6
4700  d2e4 260e          	jrne	L7431
4701                     ; 1369       pSocket->pData = g_HtmlPageRstate;
4703  d2e6 1e0e          	ldw	x,(OFST+7,sp)
4704  d2e8 90aec138      	ldw	y,#L72_g_HtmlPageRstate
4705  d2ec ef01          	ldw	(1,x),y
4706                     ; 1370       pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
4708  d2ee 90ae0087      	ldw	y,#135
4709  d2f2               LC012:
4710  d2f2 ef03          	ldw	(3,x),y
4711  d2f4               L7431:
4712                     ; 1372     pSocket->nNewlines = 0;
4714  d2f4 1e0e          	ldw	x,(OFST+7,sp)
4715                     ; 1373     pSocket->nState = STATE_CONNECTED;
4717  d2f6 7f            	clr	(x)
4718  d2f7 6f05          	clr	(5,x)
4719                     ; 1374     pSocket->nPrevBytes = 0xFFFF;
4721  d2f9 90aeffff      	ldw	y,#65535
4722  d2fd ef0a          	ldw	(10,x),y
4724  d2ff 2041          	jra	L613
4725  d301               L3431:
4726                     ; 1376   else if (uip_newdata() || uip_acked()) {
4728  d301 7202008808    	btjt	_uip_flags,#1,L7731
4730  d306 7200008803cc  	btjf	_uip_flags,#0,L5731
4731  d30e               L7731:
4732                     ; 1377     if (pSocket->nState == STATE_CONNECTED) {
4734  d30e 1e0e          	ldw	x,(OFST+7,sp)
4735  d310 f6            	ld	a,(x)
4736  d311 2627          	jrne	L1041
4737                     ; 1378       if (nBytes == 0) return;
4739  d313 1e0c          	ldw	x,(OFST+5,sp)
4740  d315 272b          	jreq	L613
4743                     ; 1379       if (*pBuffer == 'G') pSocket->nState = STATE_GET_G;
4745  d317 1e08          	ldw	x,(OFST+1,sp)
4746  d319 f6            	ld	a,(x)
4747  d31a a147          	cp	a,#71
4748  d31c 2606          	jrne	L5041
4751  d31e 1e0e          	ldw	x,(OFST+7,sp)
4752  d320 a601          	ld	a,#1
4754  d322 2008          	jp	LC013
4755  d324               L5041:
4756                     ; 1380       else if (*pBuffer == 'P') pSocket->nState = STATE_POST_P;
4758  d324 a150          	cp	a,#80
4759  d326 2605          	jrne	L7041
4762  d328 1e0e          	ldw	x,(OFST+7,sp)
4763  d32a a604          	ld	a,#4
4764  d32c               LC013:
4765  d32c f7            	ld	(x),a
4766  d32d               L7041:
4767                     ; 1381       nBytes--;
4769  d32d 1e0c          	ldw	x,(OFST+5,sp)
4770  d32f 5a            	decw	x
4771  d330 1f0c          	ldw	(OFST+5,sp),x
4772                     ; 1382       pBuffer++;
4774  d332 1e08          	ldw	x,(OFST+1,sp)
4775  d334 5c            	incw	x
4776  d335 1f08          	ldw	(OFST+1,sp),x
4777  d337 1e0e          	ldw	x,(OFST+7,sp)
4778  d339 f6            	ld	a,(x)
4779  d33a               L1041:
4780                     ; 1385     if (pSocket->nState == STATE_GET_G) {
4782  d33a a101          	cp	a,#1
4783  d33c 2620          	jrne	L3141
4784                     ; 1386       if (nBytes == 0) return;
4786  d33e 1e0c          	ldw	x,(OFST+5,sp)
4787  d340 2603          	jrne	L5141
4789  d342               L613:
4792  d342 5b09          	addw	sp,#9
4793  d344 81            	ret	
4794  d345               L5141:
4795                     ; 1387       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
4797  d345 1e08          	ldw	x,(OFST+1,sp)
4798  d347 f6            	ld	a,(x)
4799  d348 a145          	cp	a,#69
4800  d34a 2605          	jrne	L7141
4803  d34c 1e0e          	ldw	x,(OFST+7,sp)
4804  d34e a602          	ld	a,#2
4805  d350 f7            	ld	(x),a
4806  d351               L7141:
4807                     ; 1388       nBytes--;
4809  d351 1e0c          	ldw	x,(OFST+5,sp)
4810  d353 5a            	decw	x
4811  d354 1f0c          	ldw	(OFST+5,sp),x
4812                     ; 1389       pBuffer++;
4814  d356 1e08          	ldw	x,(OFST+1,sp)
4815  d358 5c            	incw	x
4816  d359 1f08          	ldw	(OFST+1,sp),x
4817  d35b 1e0e          	ldw	x,(OFST+7,sp)
4818  d35d f6            	ld	a,(x)
4819  d35e               L3141:
4820                     ; 1392     if (pSocket->nState == STATE_GET_GE) {
4822  d35e a102          	cp	a,#2
4823  d360 261d          	jrne	L1241
4824                     ; 1393       if (nBytes == 0) return;
4826  d362 1e0c          	ldw	x,(OFST+5,sp)
4827  d364 27dc          	jreq	L613
4830                     ; 1394       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
4832  d366 1e08          	ldw	x,(OFST+1,sp)
4833  d368 f6            	ld	a,(x)
4834  d369 a154          	cp	a,#84
4835  d36b 2605          	jrne	L5241
4838  d36d 1e0e          	ldw	x,(OFST+7,sp)
4839  d36f a603          	ld	a,#3
4840  d371 f7            	ld	(x),a
4841  d372               L5241:
4842                     ; 1395       nBytes--;
4844  d372 1e0c          	ldw	x,(OFST+5,sp)
4845  d374 5a            	decw	x
4846  d375 1f0c          	ldw	(OFST+5,sp),x
4847                     ; 1396       pBuffer++;
4849  d377 1e08          	ldw	x,(OFST+1,sp)
4850  d379 5c            	incw	x
4851  d37a 1f08          	ldw	(OFST+1,sp),x
4852  d37c 1e0e          	ldw	x,(OFST+7,sp)
4853  d37e f6            	ld	a,(x)
4854  d37f               L1241:
4855                     ; 1399     if (pSocket->nState == STATE_GET_GET) {
4857  d37f a103          	cp	a,#3
4858  d381 261d          	jrne	L7241
4859                     ; 1400       if (nBytes == 0) return;
4861  d383 1e0c          	ldw	x,(OFST+5,sp)
4862  d385 27bb          	jreq	L613
4865                     ; 1401       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
4867  d387 1e08          	ldw	x,(OFST+1,sp)
4868  d389 f6            	ld	a,(x)
4869  d38a a120          	cp	a,#32
4870  d38c 2605          	jrne	L3341
4873  d38e 1e0e          	ldw	x,(OFST+7,sp)
4874  d390 a608          	ld	a,#8
4875  d392 f7            	ld	(x),a
4876  d393               L3341:
4877                     ; 1402       nBytes--;
4879  d393 1e0c          	ldw	x,(OFST+5,sp)
4880  d395 5a            	decw	x
4881  d396 1f0c          	ldw	(OFST+5,sp),x
4882                     ; 1403       pBuffer++;
4884  d398 1e08          	ldw	x,(OFST+1,sp)
4885  d39a 5c            	incw	x
4886  d39b 1f08          	ldw	(OFST+1,sp),x
4887  d39d 1e0e          	ldw	x,(OFST+7,sp)
4888  d39f f6            	ld	a,(x)
4889  d3a0               L7241:
4890                     ; 1406     if (pSocket->nState == STATE_POST_P) {
4892  d3a0 a104          	cp	a,#4
4893  d3a2 261d          	jrne	L5341
4894                     ; 1407       if (nBytes == 0) return;
4896  d3a4 1e0c          	ldw	x,(OFST+5,sp)
4897  d3a6 279a          	jreq	L613
4900                     ; 1408       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
4902  d3a8 1e08          	ldw	x,(OFST+1,sp)
4903  d3aa f6            	ld	a,(x)
4904  d3ab a14f          	cp	a,#79
4905  d3ad 2605          	jrne	L1441
4908  d3af 1e0e          	ldw	x,(OFST+7,sp)
4909  d3b1 a605          	ld	a,#5
4910  d3b3 f7            	ld	(x),a
4911  d3b4               L1441:
4912                     ; 1409       nBytes--;
4914  d3b4 1e0c          	ldw	x,(OFST+5,sp)
4915  d3b6 5a            	decw	x
4916  d3b7 1f0c          	ldw	(OFST+5,sp),x
4917                     ; 1410       pBuffer++;
4919  d3b9 1e08          	ldw	x,(OFST+1,sp)
4920  d3bb 5c            	incw	x
4921  d3bc 1f08          	ldw	(OFST+1,sp),x
4922  d3be 1e0e          	ldw	x,(OFST+7,sp)
4923  d3c0 f6            	ld	a,(x)
4924  d3c1               L5341:
4925                     ; 1413     if (pSocket->nState == STATE_POST_PO) {
4927  d3c1 a105          	cp	a,#5
4928  d3c3 2620          	jrne	L3441
4929                     ; 1414       if (nBytes == 0) return;
4931  d3c5 1e0c          	ldw	x,(OFST+5,sp)
4932  d3c7 2603ccd342    	jreq	L613
4935                     ; 1415       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
4937  d3cc 1e08          	ldw	x,(OFST+1,sp)
4938  d3ce f6            	ld	a,(x)
4939  d3cf a153          	cp	a,#83
4940  d3d1 2605          	jrne	L7441
4943  d3d3 1e0e          	ldw	x,(OFST+7,sp)
4944  d3d5 a606          	ld	a,#6
4945  d3d7 f7            	ld	(x),a
4946  d3d8               L7441:
4947                     ; 1416       nBytes--;
4949  d3d8 1e0c          	ldw	x,(OFST+5,sp)
4950  d3da 5a            	decw	x
4951  d3db 1f0c          	ldw	(OFST+5,sp),x
4952                     ; 1417       pBuffer++;
4954  d3dd 1e08          	ldw	x,(OFST+1,sp)
4955  d3df 5c            	incw	x
4956  d3e0 1f08          	ldw	(OFST+1,sp),x
4957  d3e2 1e0e          	ldw	x,(OFST+7,sp)
4958  d3e4 f6            	ld	a,(x)
4959  d3e5               L3441:
4960                     ; 1420     if (pSocket->nState == STATE_POST_POS) {
4962  d3e5 a106          	cp	a,#6
4963  d3e7 261d          	jrne	L1541
4964                     ; 1421       if (nBytes == 0) return;
4966  d3e9 1e0c          	ldw	x,(OFST+5,sp)
4967  d3eb 27dc          	jreq	L613
4970                     ; 1422       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
4972  d3ed 1e08          	ldw	x,(OFST+1,sp)
4973  d3ef f6            	ld	a,(x)
4974  d3f0 a154          	cp	a,#84
4975  d3f2 2605          	jrne	L5541
4978  d3f4 1e0e          	ldw	x,(OFST+7,sp)
4979  d3f6 a607          	ld	a,#7
4980  d3f8 f7            	ld	(x),a
4981  d3f9               L5541:
4982                     ; 1423       nBytes--;
4984  d3f9 1e0c          	ldw	x,(OFST+5,sp)
4985  d3fb 5a            	decw	x
4986  d3fc 1f0c          	ldw	(OFST+5,sp),x
4987                     ; 1424       pBuffer++;
4989  d3fe 1e08          	ldw	x,(OFST+1,sp)
4990  d400 5c            	incw	x
4991  d401 1f08          	ldw	(OFST+1,sp),x
4992  d403 1e0e          	ldw	x,(OFST+7,sp)
4993  d405 f6            	ld	a,(x)
4994  d406               L1541:
4995                     ; 1427     if (pSocket->nState == STATE_POST_POST) {
4997  d406 a107          	cp	a,#7
4998  d408 261d          	jrne	L7541
4999                     ; 1428       if (nBytes == 0) return;
5001  d40a 1e0c          	ldw	x,(OFST+5,sp)
5002  d40c 27bb          	jreq	L613
5005                     ; 1429       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
5007  d40e 1e08          	ldw	x,(OFST+1,sp)
5008  d410 f6            	ld	a,(x)
5009  d411 a120          	cp	a,#32
5010  d413 2605          	jrne	L3641
5013  d415 1e0e          	ldw	x,(OFST+7,sp)
5014  d417 a609          	ld	a,#9
5015  d419 f7            	ld	(x),a
5016  d41a               L3641:
5017                     ; 1430       nBytes--;
5019  d41a 1e0c          	ldw	x,(OFST+5,sp)
5020  d41c 5a            	decw	x
5021  d41d 1f0c          	ldw	(OFST+5,sp),x
5022                     ; 1431       pBuffer++;
5024  d41f 1e08          	ldw	x,(OFST+1,sp)
5025  d421 5c            	incw	x
5026  d422 1f08          	ldw	(OFST+1,sp),x
5027  d424 1e0e          	ldw	x,(OFST+7,sp)
5028  d426 f6            	ld	a,(x)
5029  d427               L7541:
5030                     ; 1434     if (pSocket->nState == STATE_GOTPOST) {
5032  d427 a109          	cp	a,#9
5033  d429 2647          	jrne	L5641
5035  d42b 2041          	jra	L1741
5036  d42d               L7641:
5037                     ; 1437         if (*pBuffer == '\n') pSocket->nNewlines++;
5039  d42d 1e08          	ldw	x,(OFST+1,sp)
5040  d42f f6            	ld	a,(x)
5041  d430 a10a          	cp	a,#10
5042  d432 2606          	jrne	L5741
5045  d434 1e0e          	ldw	x,(OFST+7,sp)
5046  d436 6c05          	inc	(5,x)
5048  d438 2008          	jra	L7741
5049  d43a               L5741:
5050                     ; 1438         else if (*pBuffer == '\r') { }
5052  d43a a10d          	cp	a,#13
5053  d43c 2704          	jreq	L7741
5055                     ; 1439         else pSocket->nNewlines = 0;
5057  d43e 1e0e          	ldw	x,(OFST+7,sp)
5058  d440 6f05          	clr	(5,x)
5059  d442               L7741:
5060                     ; 1440         pBuffer++;
5062  d442 1e08          	ldw	x,(OFST+1,sp)
5063  d444 5c            	incw	x
5064  d445 1f08          	ldw	(OFST+1,sp),x
5065                     ; 1441         nBytes--;
5067  d447 1e0c          	ldw	x,(OFST+5,sp)
5068  d449 5a            	decw	x
5069  d44a 1f0c          	ldw	(OFST+5,sp),x
5070                     ; 1442         if (pSocket->nNewlines == 2) {
5072  d44c 1e0e          	ldw	x,(OFST+7,sp)
5073  d44e e605          	ld	a,(5,x)
5074  d450 a102          	cp	a,#2
5075  d452 261a          	jrne	L1741
5076                     ; 1445           if(current_webpage == WEBPAGE_DEFAULT) pSocket->nParseLeft = PARSEBYTES_DEFAULT;
5078  d454 c6001b        	ld	a,_current_webpage
5079  d457 2607          	jrne	L7051
5082  d459 a67e          	ld	a,#126
5083  d45b e706          	ld	(6,x),a
5084  d45d c6001b        	ld	a,_current_webpage
5085  d460               L7051:
5086                     ; 1446           if(current_webpage == WEBPAGE_ADDRESS) pSocket->nParseLeft = PARSEBYTES_ADDRESS;
5088  d460 4a            	dec	a
5089  d461 2604          	jrne	L1151
5092  d463 a693          	ld	a,#147
5093  d465 e706          	ld	(6,x),a
5094  d467               L1151:
5095                     ; 1447           pSocket->ParseState = PARSE_CMD;
5097  d467 6f09          	clr	(9,x)
5098                     ; 1449           pSocket->nState = STATE_PARSEPOST;
5100  d469 a60a          	ld	a,#10
5101  d46b f7            	ld	(x),a
5102                     ; 1450           break;
5104  d46c 2004          	jra	L5641
5105  d46e               L1741:
5106                     ; 1436       while (nBytes != 0) {
5108  d46e 1e0c          	ldw	x,(OFST+5,sp)
5109  d470 26bb          	jrne	L7641
5110  d472               L5641:
5111                     ; 1455     if (pSocket->nState == STATE_GOTGET) {
5113  d472 1e0e          	ldw	x,(OFST+7,sp)
5114  d474 f6            	ld	a,(x)
5115  d475 a108          	cp	a,#8
5116  d477 2609          	jrne	L3151
5117                     ; 1459       pSocket->nParseLeft = 6;
5119  d479 a606          	ld	a,#6
5120  d47b e706          	ld	(6,x),a
5121                     ; 1460       pSocket->ParseState = PARSE_SLASH1;
5123  d47d e709          	ld	(9,x),a
5124                     ; 1462       pSocket->nState = STATE_PARSEGET;
5126  d47f a60d          	ld	a,#13
5127  d481 f7            	ld	(x),a
5128  d482               L3151:
5129                     ; 1465     if (pSocket->nState == STATE_PARSEPOST) {
5131  d482 a10a          	cp	a,#10
5132  d484 2703ccd6f4    	jrne	L5151
5134  d489 ccd6e5        	jra	L1251
5135  d48c               L7151:
5136                     ; 1475         if (pSocket->ParseState == PARSE_CMD) {
5138  d48c 1e0e          	ldw	x,(OFST+7,sp)
5139  d48e e609          	ld	a,(9,x)
5140  d490 263e          	jrne	L5251
5141                     ; 1476           pSocket->ParseCmd = *pBuffer;
5143  d492 1e08          	ldw	x,(OFST+1,sp)
5144  d494 f6            	ld	a,(x)
5145  d495 1e0e          	ldw	x,(OFST+7,sp)
5146  d497 e707          	ld	(7,x),a
5147                     ; 1477           pSocket->ParseState = PARSE_NUM10;
5149  d499 a601          	ld	a,#1
5150  d49b e709          	ld	(9,x),a
5151                     ; 1478 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5153  d49d e606          	ld	a,(6,x)
5154  d49f 2704          	jreq	L7251
5157  d4a1 6a06          	dec	(6,x)
5159  d4a3 2004          	jra	L1351
5160  d4a5               L7251:
5161                     ; 1479 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5163  d4a5 a605          	ld	a,#5
5164  d4a7 e709          	ld	(9,x),a
5165  d4a9               L1351:
5166                     ; 1480           pBuffer++;
5168  d4a9 1e08          	ldw	x,(OFST+1,sp)
5169  d4ab 5c            	incw	x
5170  d4ac 1f08          	ldw	(OFST+1,sp),x
5171                     ; 1482 	  if (pSocket->ParseCmd == 'o' ||
5171                     ; 1483 	      pSocket->ParseCmd == 'a' ||
5171                     ; 1484 	      pSocket->ParseCmd == 'b' ||
5171                     ; 1485 	      pSocket->ParseCmd == 'c' ||
5171                     ; 1486 	      pSocket->ParseCmd == 'd' ||
5171                     ; 1487 	      pSocket->ParseCmd == 'g') { }
5173  d4ae 1e0e          	ldw	x,(OFST+7,sp)
5174  d4b0 e607          	ld	a,(7,x)
5175  d4b2 a16f          	cp	a,#111
5176  d4b4 2603ccd6d7    	jreq	L1551
5178  d4b9 a161          	cp	a,#97
5179  d4bb 27f9          	jreq	L1551
5181  d4bd a162          	cp	a,#98
5182  d4bf 27f5          	jreq	L1551
5184  d4c1 a163          	cp	a,#99
5185  d4c3 27f1          	jreq	L1551
5187  d4c5 a164          	cp	a,#100
5188  d4c7 27ed          	jreq	L1551
5190  d4c9 a167          	cp	a,#103
5191  d4cb 27e9          	jreq	L1551
5192                     ; 1488 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5193  d4cd ccd6bc        	jp	LC018
5194  d4d0               L5251:
5195                     ; 1490         else if (pSocket->ParseState == PARSE_NUM10) {
5197  d4d0 a101          	cp	a,#1
5198  d4d2 2619          	jrne	L3551
5199                     ; 1491           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5201  d4d4 1e08          	ldw	x,(OFST+1,sp)
5202  d4d6 f6            	ld	a,(x)
5203  d4d7 97            	ld	xl,a
5204  d4d8 a60a          	ld	a,#10
5205  d4da 42            	mul	x,a
5206  d4db 9f            	ld	a,xl
5207  d4dc 1e0e          	ldw	x,(OFST+7,sp)
5208  d4de a0e0          	sub	a,#224
5209  d4e0 e708          	ld	(8,x),a
5210                     ; 1492           pSocket->ParseState = PARSE_NUM1;
5212  d4e2 a602          	ld	a,#2
5213  d4e4 e709          	ld	(9,x),a
5214                     ; 1493 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5216  d4e6 e606          	ld	a,(6,x)
5217  d4e8 2719          	jreq	L5651
5220  d4ea ccd6cc        	jp	LC025
5221                     ; 1494 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5222                     ; 1495           pBuffer++;
5224  d4ed               L3551:
5225                     ; 1497         else if (pSocket->ParseState == PARSE_NUM1) {
5227  d4ed a102          	cp	a,#2
5228  d4ef 2616          	jrne	L3651
5229                     ; 1498           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5231  d4f1 1608          	ldw	y,(OFST+1,sp)
5232  d4f3 90f6          	ld	a,(y)
5233  d4f5 a030          	sub	a,#48
5234  d4f7 eb08          	add	a,(8,x)
5235  d4f9 e708          	ld	(8,x),a
5236                     ; 1499           pSocket->ParseState = PARSE_EQUAL;
5238  d4fb a603          	ld	a,#3
5239  d4fd e709          	ld	(9,x),a
5240                     ; 1500 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5242  d4ff e606          	ld	a,(6,x)
5245  d501 26e7          	jrne	LC025
5246  d503               L5651:
5247                     ; 1501 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5250  d503 a605          	ld	a,#5
5251                     ; 1502           pBuffer++;
5253  d505 200d          	jp	LC026
5254  d507               L3651:
5255                     ; 1504         else if (pSocket->ParseState == PARSE_EQUAL) {
5257  d507 a103          	cp	a,#3
5258  d509 260e          	jrne	L3751
5259                     ; 1505           pSocket->ParseState = PARSE_VAL;
5261  d50b a604          	ld	a,#4
5262  d50d e709          	ld	(9,x),a
5263                     ; 1506 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5265  d50f 6d06          	tnz	(6,x)
5268  d511 26d7          	jrne	LC025
5269                     ; 1507 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5271  d513 4c            	inc	a
5272  d514               LC026:
5273  d514 e709          	ld	(9,x),a
5274                     ; 1508           pBuffer++;
5276  d516 ccd6ce        	jp	LC017
5277  d519               L3751:
5278                     ; 1510         else if (pSocket->ParseState == PARSE_VAL) {
5280  d519 a104          	cp	a,#4
5281  d51b 2703ccd6c2    	jrne	L3061
5282                     ; 1518           if (pSocket->ParseCmd == 'o') {
5284  d520 e607          	ld	a,(7,x)
5285  d522 a16f          	cp	a,#111
5286  d524 2625          	jrne	L5061
5287                     ; 1521             if ((uint8_t)(*pBuffer) == '1') GpioSetPin(pSocket->ParseNum, (uint8_t)1);
5289  d526 1e08          	ldw	x,(OFST+1,sp)
5290  d528 f6            	ld	a,(x)
5291  d529 a131          	cp	a,#49
5292  d52b 2609          	jrne	L7061
5295  d52d 1e0e          	ldw	x,(OFST+7,sp)
5296  d52f e608          	ld	a,(8,x)
5297  d531 ae0001        	ldw	x,#1
5300  d534 2005          	jra	L1161
5301  d536               L7061:
5302                     ; 1522             else GpioSetPin(pSocket->ParseNum, (uint8_t)0);
5304  d536 1e0e          	ldw	x,(OFST+7,sp)
5305  d538 e608          	ld	a,(8,x)
5306  d53a 5f            	clrw	x
5308  d53b               L1161:
5309  d53b 95            	ld	xh,a
5310  d53c cddb5b        	call	_GpioSetPin
5311                     ; 1523 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5313  d53f 1e0e          	ldw	x,(OFST+7,sp)
5314  d541 e606          	ld	a,(6,x)
5315  d543 2603ccd6b5    	jreq	L3661
5317                     ; 1524             pBuffer++;
5319  d548 ccd6b3        	jp	LC024
5320  d54b               L5061:
5321                     ; 1527           else if (pSocket->ParseCmd == 'a') {
5323  d54b a161          	cp	a,#97
5324  d54d 2656          	jrne	L7161
5325                     ; 1537             ex_stored_devicename[0] = (uint8_t)(*pBuffer);
5327  d54f 1e08          	ldw	x,(OFST+1,sp)
5328  d551 f6            	ld	a,(x)
5329  d552 c70038        	ld	_ex_stored_devicename,a
5330                     ; 1538             pSocket->nParseLeft--;
5332  d555 1e0e          	ldw	x,(OFST+7,sp)
5333  d557 6a06          	dec	(6,x)
5334                     ; 1539             pBuffer++; // nBytes already decremented for first char
5336  d559 1e08          	ldw	x,(OFST+1,sp)
5337  d55b 5c            	incw	x
5338  d55c 1f08          	ldw	(OFST+1,sp),x
5339                     ; 1543 	    amp_found = 0;
5341  d55e 0f06          	clr	(OFST-1,sp)
5343                     ; 1544 	    for(i=1; i<20; i++) {
5345  d560 a601          	ld	a,#1
5346  d562 6b07          	ld	(OFST+0,sp),a
5348  d564               L1261:
5349                     ; 1545 	      if((uint8_t)(*pBuffer) == 38) amp_found = 1;
5351  d564 1e08          	ldw	x,(OFST+1,sp)
5352  d566 f6            	ld	a,(x)
5353  d567 a126          	cp	a,#38
5354  d569 2604          	jrne	L7261
5357  d56b a601          	ld	a,#1
5358  d56d 6b06          	ld	(OFST-1,sp),a
5360  d56f               L7261:
5361                     ; 1546 	      if(amp_found == 0) {
5363  d56f 7b06          	ld	a,(OFST-1,sp)
5364  d571 261a          	jrne	L1361
5365                     ; 1548                 ex_stored_devicename[i] = (uint8_t)(*pBuffer);
5367  d573 7b07          	ld	a,(OFST+0,sp)
5368  d575 5f            	clrw	x
5369  d576 1608          	ldw	y,(OFST+1,sp)
5370  d578 97            	ld	xl,a
5371  d579 90f6          	ld	a,(y)
5372  d57b d70038        	ld	(_ex_stored_devicename,x),a
5373                     ; 1549                 pSocket->nParseLeft--;
5375  d57e 1e0e          	ldw	x,(OFST+7,sp)
5376  d580 6a06          	dec	(6,x)
5377                     ; 1550                 pBuffer++;
5379  d582 93            	ldw	x,y
5380  d583 5c            	incw	x
5381  d584 1f08          	ldw	(OFST+1,sp),x
5382                     ; 1551                 nBytes--; // Must subtract 1 from nBytes for extra byte read
5384  d586 1e0c          	ldw	x,(OFST+5,sp)
5385  d588 5a            	decw	x
5386  d589 1f0c          	ldw	(OFST+5,sp),x
5388  d58b 200d          	jra	L3361
5389  d58d               L1361:
5390                     ; 1555 	        ex_stored_devicename[i] = ' ';
5392  d58d 7b07          	ld	a,(OFST+0,sp)
5393  d58f 5f            	clrw	x
5394  d590 97            	ld	xl,a
5395  d591 a620          	ld	a,#32
5396  d593 d70038        	ld	(_ex_stored_devicename,x),a
5397                     ; 1564                 pSocket->nParseLeft--;
5399  d596 1e0e          	ldw	x,(OFST+7,sp)
5400  d598 6a06          	dec	(6,x)
5401  d59a               L3361:
5402                     ; 1544 	    for(i=1; i<20; i++) {
5404  d59a 0c07          	inc	(OFST+0,sp)
5408  d59c 7b07          	ld	a,(OFST+0,sp)
5409  d59e a114          	cp	a,#20
5410  d5a0 25c2          	jrult	L1261
5412  d5a2 ccd6ba        	jra	L5161
5413  d5a5               L7161:
5414                     ; 1569           else if (pSocket->ParseCmd == 'b') {
5416  d5a5 a162          	cp	a,#98
5417  d5a7 2646          	jrne	L7361
5418                     ; 1576 	    alpha_1 = '-';
5420                     ; 1577 	    alpha_2 = '-';
5422                     ; 1578 	    alpha_3 = '-';
5424                     ; 1580             alpha_1 = (uint8_t)(*pBuffer);
5426  d5a9 1e08          	ldw	x,(OFST+1,sp)
5427  d5ab f6            	ld	a,(x)
5428  d5ac 6b07          	ld	(OFST+0,sp),a
5430                     ; 1581             pSocket->nParseLeft--;
5432  d5ae 1e0e          	ldw	x,(OFST+7,sp)
5433  d5b0 6a06          	dec	(6,x)
5434                     ; 1582             pBuffer++; // nBytes already decremented for first char
5436  d5b2 1e08          	ldw	x,(OFST+1,sp)
5437  d5b4 5c            	incw	x
5438  d5b5 1f08          	ldw	(OFST+1,sp),x
5439                     ; 1584 	    alpha_2 = (uint8_t)(*pBuffer);
5441  d5b7 f6            	ld	a,(x)
5442  d5b8 6b05          	ld	(OFST-2,sp),a
5444                     ; 1585             pSocket->nParseLeft--;
5446  d5ba 1e0e          	ldw	x,(OFST+7,sp)
5447  d5bc 6a06          	dec	(6,x)
5448                     ; 1586             pBuffer++;
5450  d5be 1e08          	ldw	x,(OFST+1,sp)
5451  d5c0 5c            	incw	x
5452  d5c1 1f08          	ldw	(OFST+1,sp),x
5453                     ; 1587 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5455  d5c3 1e0c          	ldw	x,(OFST+5,sp)
5456  d5c5 5a            	decw	x
5457  d5c6 1f0c          	ldw	(OFST+5,sp),x
5458                     ; 1589 	    alpha_3 = (uint8_t)(*pBuffer);
5460  d5c8 1e08          	ldw	x,(OFST+1,sp)
5461  d5ca f6            	ld	a,(x)
5462  d5cb 6b06          	ld	(OFST-1,sp),a
5464                     ; 1590             pSocket->nParseLeft--;
5466  d5cd 1e0e          	ldw	x,(OFST+7,sp)
5467  d5cf 6a06          	dec	(6,x)
5468                     ; 1591             pBuffer++;
5470  d5d1 1e08          	ldw	x,(OFST+1,sp)
5471  d5d3 5c            	incw	x
5472  d5d4 1f08          	ldw	(OFST+1,sp),x
5473                     ; 1592 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5475  d5d6 1e0c          	ldw	x,(OFST+5,sp)
5476  d5d8 5a            	decw	x
5477  d5d9 1f0c          	ldw	(OFST+5,sp),x
5478                     ; 1594 	    SetAddresses(pSocket->ParseNum, (uint8_t)alpha_1, (uint8_t)alpha_2, (uint8_t)alpha_3);
5480  d5db 88            	push	a
5481  d5dc 7b06          	ld	a,(OFST-1,sp)
5482  d5de 88            	push	a
5483  d5df 7b09          	ld	a,(OFST+2,sp)
5484  d5e1 1610          	ldw	y,(OFST+9,sp)
5485  d5e3 97            	ld	xl,a
5486  d5e4 90e608        	ld	a,(8,y)
5487  d5e7 95            	ld	xh,a
5488  d5e8 cddc87        	call	_SetAddresses
5490  d5eb 85            	popw	x
5492  d5ec ccd6ba        	jra	L5161
5493  d5ef               L7361:
5494                     ; 1597           else if (pSocket->ParseCmd == 'c') {
5496  d5ef a163          	cp	a,#99
5497  d5f1 2672          	jrne	L3461
5498                     ; 1603 	    alpha_1 = '-';
5500                     ; 1604 	    alpha_2 = '-';
5502                     ; 1605 	    alpha_3 = '-';
5504                     ; 1606 	    alpha_4 = '-';
5506                     ; 1607 	    alpha_5 = '-';
5508                     ; 1610   	    alpha_1 = (uint8_t)(*pBuffer);
5510  d5f3 1e08          	ldw	x,(OFST+1,sp)
5511  d5f5 f6            	ld	a,(x)
5512  d5f6 6b07          	ld	(OFST+0,sp),a
5514                     ; 1611             pSocket->nParseLeft--;
5516  d5f8 1e0e          	ldw	x,(OFST+7,sp)
5517  d5fa 6a06          	dec	(6,x)
5518                     ; 1612             pBuffer++; // nBytes already decremented for first char
5520  d5fc 1e08          	ldw	x,(OFST+1,sp)
5521  d5fe 5c            	incw	x
5522  d5ff 1f08          	ldw	(OFST+1,sp),x
5523                     ; 1614 	    alpha_2 = (uint8_t)(*pBuffer);
5525  d601 f6            	ld	a,(x)
5526  d602 6b05          	ld	(OFST-2,sp),a
5528                     ; 1615             pSocket->nParseLeft--;
5530  d604 1e0e          	ldw	x,(OFST+7,sp)
5531  d606 6a06          	dec	(6,x)
5532                     ; 1616             pBuffer++;
5534  d608 1e08          	ldw	x,(OFST+1,sp)
5535  d60a 5c            	incw	x
5536  d60b 1f08          	ldw	(OFST+1,sp),x
5537                     ; 1617 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5539  d60d 1e0c          	ldw	x,(OFST+5,sp)
5540  d60f 5a            	decw	x
5541  d610 1f0c          	ldw	(OFST+5,sp),x
5542                     ; 1619 	    alpha_3 = (uint8_t)(*pBuffer);
5544  d612 1e08          	ldw	x,(OFST+1,sp)
5545  d614 f6            	ld	a,(x)
5546  d615 6b06          	ld	(OFST-1,sp),a
5548                     ; 1620             pSocket->nParseLeft--;
5550  d617 1e0e          	ldw	x,(OFST+7,sp)
5551  d619 6a06          	dec	(6,x)
5552                     ; 1621             pBuffer++;
5554  d61b 1e08          	ldw	x,(OFST+1,sp)
5555  d61d 5c            	incw	x
5556  d61e 1f08          	ldw	(OFST+1,sp),x
5557                     ; 1622 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5559  d620 1e0c          	ldw	x,(OFST+5,sp)
5560  d622 5a            	decw	x
5561  d623 1f0c          	ldw	(OFST+5,sp),x
5562                     ; 1624 	    alpha_4 = (uint8_t)(*pBuffer);
5564  d625 1e08          	ldw	x,(OFST+1,sp)
5565  d627 f6            	ld	a,(x)
5566  d628 6b03          	ld	(OFST-4,sp),a
5568                     ; 1625             pSocket->nParseLeft--;
5570  d62a 1e0e          	ldw	x,(OFST+7,sp)
5571  d62c 6a06          	dec	(6,x)
5572                     ; 1626             pBuffer++;
5574  d62e 1e08          	ldw	x,(OFST+1,sp)
5575  d630 5c            	incw	x
5576  d631 1f08          	ldw	(OFST+1,sp),x
5577                     ; 1627 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5579  d633 1e0c          	ldw	x,(OFST+5,sp)
5580  d635 5a            	decw	x
5581  d636 1f0c          	ldw	(OFST+5,sp),x
5582                     ; 1629             alpha_5 = (uint8_t)(*pBuffer);
5584  d638 1e08          	ldw	x,(OFST+1,sp)
5585  d63a f6            	ld	a,(x)
5586  d63b 6b04          	ld	(OFST-3,sp),a
5588                     ; 1630             pSocket->nParseLeft--;
5590  d63d 1e0e          	ldw	x,(OFST+7,sp)
5591  d63f 6a06          	dec	(6,x)
5592                     ; 1631             pBuffer++;
5594  d641 1e08          	ldw	x,(OFST+1,sp)
5595  d643 5c            	incw	x
5596  d644 1f08          	ldw	(OFST+1,sp),x
5597                     ; 1632 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5599  d646 1e0c          	ldw	x,(OFST+5,sp)
5600  d648 5a            	decw	x
5601  d649 1f0c          	ldw	(OFST+5,sp),x
5602                     ; 1634 	    SetPort(pSocket->ParseNum,
5602                     ; 1635 	            (uint8_t)alpha_1,
5602                     ; 1636 		    (uint8_t)alpha_2,
5602                     ; 1637 		    (uint8_t)alpha_3,
5602                     ; 1638 		    (uint8_t)alpha_4,
5602                     ; 1639 		    (uint8_t)alpha_5);
5604  d64b 88            	push	a
5605  d64c 7b04          	ld	a,(OFST-3,sp)
5606  d64e 88            	push	a
5607  d64f 7b08          	ld	a,(OFST+1,sp)
5608  d651 88            	push	a
5609  d652 7b08          	ld	a,(OFST+1,sp)
5610  d654 88            	push	a
5611  d655 7b0b          	ld	a,(OFST+4,sp)
5612  d657 1612          	ldw	y,(OFST+11,sp)
5613  d659 97            	ld	xl,a
5614  d65a 90e608        	ld	a,(8,y)
5615  d65d 95            	ld	xh,a
5616  d65e cddd11        	call	_SetPort
5618  d661 5b04          	addw	sp,#4
5620  d663 2055          	jra	L5161
5621  d665               L3461:
5622                     ; 1642           else if (pSocket->ParseCmd == 'd') {
5624  d665 a164          	cp	a,#100
5625  d667 262f          	jrne	L7461
5626                     ; 1648 	    alpha_1 = (uint8_t)(*pBuffer);
5628  d669 1e08          	ldw	x,(OFST+1,sp)
5629  d66b f6            	ld	a,(x)
5630  d66c 6b07          	ld	(OFST+0,sp),a
5632                     ; 1649             pSocket->nParseLeft--;
5634  d66e 1e0e          	ldw	x,(OFST+7,sp)
5635  d670 6a06          	dec	(6,x)
5636                     ; 1650             pBuffer++; // nBytes already decremented for first char
5638  d672 1e08          	ldw	x,(OFST+1,sp)
5639  d674 5c            	incw	x
5640  d675 1f08          	ldw	(OFST+1,sp),x
5641                     ; 1652 	    alpha_2 = (uint8_t)(*pBuffer);
5643  d677 f6            	ld	a,(x)
5644  d678 6b05          	ld	(OFST-2,sp),a
5646                     ; 1653             pSocket->nParseLeft--;
5648  d67a 1e0e          	ldw	x,(OFST+7,sp)
5649  d67c 6a06          	dec	(6,x)
5650                     ; 1654             pBuffer++;
5652  d67e 1e08          	ldw	x,(OFST+1,sp)
5653  d680 5c            	incw	x
5654  d681 1f08          	ldw	(OFST+1,sp),x
5655                     ; 1655 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5657  d683 1e0c          	ldw	x,(OFST+5,sp)
5658  d685 5a            	decw	x
5659  d686 1f0c          	ldw	(OFST+5,sp),x
5660                     ; 1657 	    SetMAC(pSocket->ParseNum, alpha_1, alpha_2);
5662  d688 88            	push	a
5663  d689 7b08          	ld	a,(OFST+1,sp)
5664  d68b 160f          	ldw	y,(OFST+8,sp)
5665  d68d 97            	ld	xl,a
5666  d68e 90e608        	ld	a,(8,y)
5667  d691 95            	ld	xh,a
5668  d692 cddd55        	call	_SetMAC
5670  d695 84            	pop	a
5672  d696 2022          	jra	L5161
5673  d698               L7461:
5674                     ; 1660 	  else if (pSocket->ParseCmd == 'g') {
5676  d698 a167          	cp	a,#103
5677  d69a 261e          	jrne	L5161
5678                     ; 1663             if ((uint8_t)(*pBuffer) == '1') invert_output = 1;
5680  d69c 1e08          	ldw	x,(OFST+1,sp)
5681  d69e f6            	ld	a,(x)
5682  d69f a131          	cp	a,#49
5683  d6a1 2606          	jrne	L5561
5686  d6a3 3501005e      	mov	_invert_output,#1
5688  d6a7 2004          	jra	L7561
5689  d6a9               L5561:
5690                     ; 1664             else invert_output = 0;
5692  d6a9 725f005e      	clr	_invert_output
5693  d6ad               L7561:
5694                     ; 1665 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--;
5696  d6ad 1e0e          	ldw	x,(OFST+7,sp)
5697  d6af e606          	ld	a,(6,x)
5698  d6b1 2702          	jreq	L3661
5701  d6b3               LC024:
5703  d6b3 6a06          	dec	(6,x)
5705  d6b5               L3661:
5706                     ; 1667             pBuffer++;
5709  d6b5 1e08          	ldw	x,(OFST+1,sp)
5710  d6b7 5c            	incw	x
5711  d6b8 1f08          	ldw	(OFST+1,sp),x
5712  d6ba               L5161:
5713                     ; 1670           pSocket->ParseState = PARSE_DELIM;
5715  d6ba 1e0e          	ldw	x,(OFST+7,sp)
5716  d6bc               LC018:
5718  d6bc a605          	ld	a,#5
5719  d6be e709          	ld	(9,x),a
5721  d6c0 2015          	jra	L1551
5722  d6c2               L3061:
5723                     ; 1673         else if (pSocket->ParseState == PARSE_DELIM) {
5725  d6c2 a105          	cp	a,#5
5726  d6c4 2611          	jrne	L1551
5727                     ; 1674           if(pSocket->nParseLeft > 0) {
5729  d6c6 e606          	ld	a,(6,x)
5730  d6c8 270b          	jreq	L1761
5731                     ; 1675             pSocket->ParseState = PARSE_CMD;
5733  d6ca 6f09          	clr	(9,x)
5734                     ; 1676             pSocket->nParseLeft--;
5736  d6cc               LC025:
5740  d6cc 6a06          	dec	(6,x)
5741                     ; 1677             pBuffer++;
5743  d6ce               LC017:
5747  d6ce 1e08          	ldw	x,(OFST+1,sp)
5748  d6d0 5c            	incw	x
5749  d6d1 1f08          	ldw	(OFST+1,sp),x
5751  d6d3 2002          	jra	L1551
5752  d6d5               L1761:
5753                     ; 1680             pSocket->nParseLeft = 0; // Something out of sync - end the parsing
5755  d6d5 e706          	ld	(6,x),a
5756  d6d7               L1551:
5757                     ; 1684         if (pSocket->nParseLeft == 0) {
5759  d6d7 1e0e          	ldw	x,(OFST+7,sp)
5760  d6d9 e606          	ld	a,(6,x)
5761  d6db 2608          	jrne	L1251
5762                     ; 1686           pSocket->nState = STATE_SENDHEADER;
5764  d6dd a60b          	ld	a,#11
5765  d6df f7            	ld	(x),a
5766                     ; 1687           break;
5767  d6e0               L3251:
5768                     ; 1691       pSocket->nState = STATE_SENDHEADER;
5770  d6e0 1e0e          	ldw	x,(OFST+7,sp)
5771  d6e2 f7            	ld	(x),a
5772  d6e3 200f          	jra	L5151
5773  d6e5               L1251:
5774                     ; 1474       while (nBytes--) {
5776  d6e5 1e0c          	ldw	x,(OFST+5,sp)
5777  d6e7 5a            	decw	x
5778  d6e8 1f0c          	ldw	(OFST+5,sp),x
5779  d6ea 5c            	incw	x
5780  d6eb 2703ccd48c    	jrne	L7151
5781  d6f0 a60b          	ld	a,#11
5782  d6f2 20ec          	jra	L3251
5783  d6f4               L5151:
5784                     ; 1694     if (pSocket->nState == STATE_PARSEGET) {
5786  d6f4 a10d          	cp	a,#13
5787  d6f6 2703ccd9a7    	jrne	L7761
5789  d6fb ccd99c        	jra	L3071
5790  d6fe               L1071:
5791                     ; 1708         if (pSocket->ParseState == PARSE_SLASH1) {
5793  d6fe 1e0e          	ldw	x,(OFST+7,sp)
5794  d700 e609          	ld	a,(9,x)
5795  d702 a106          	cp	a,#6
5796  d704 263e          	jrne	L7071
5797                     ; 1711           pSocket->ParseCmd = *pBuffer;
5799  d706 1e08          	ldw	x,(OFST+1,sp)
5800  d708 f6            	ld	a,(x)
5801  d709 1e0e          	ldw	x,(OFST+7,sp)
5802  d70b e707          	ld	(7,x),a
5803                     ; 1712           pSocket->nParseLeft--;
5805  d70d 6a06          	dec	(6,x)
5806                     ; 1713           pBuffer++;
5808  d70f 1e08          	ldw	x,(OFST+1,sp)
5809  d711 5c            	incw	x
5810  d712 1f08          	ldw	(OFST+1,sp),x
5811                     ; 1714 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
5813  d714 1e0e          	ldw	x,(OFST+7,sp)
5814  d716 e607          	ld	a,(7,x)
5815  d718 a12f          	cp	a,#47
5816  d71a 2604          	jrne	L1171
5817                     ; 1715 	    pSocket->ParseState = PARSE_NUM10;
5819  d71c a601          	ld	a,#1
5820  d71e e709          	ld	(9,x),a
5821  d720               L1171:
5822                     ; 1717 	  if (pSocket->nParseLeft == 0) {
5824  d720 e606          	ld	a,(6,x)
5825  d722 2703ccd97a    	jrne	L5171
5826                     ; 1719 	    current_webpage = WEBPAGE_DEFAULT;
5828  d727 c7001b        	ld	_current_webpage,a
5829                     ; 1720             pSocket->pData = g_HtmlPageDefault;
5831  d72a 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5832  d72e ef01          	ldw	(1,x),y
5833                     ; 1721             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5835  d730 90ae1879      	ldw	y,#6265
5836  d734 ef03          	ldw	(3,x),y
5837                     ; 1722             pSocket->nNewlines = 0;
5839  d736 e705          	ld	(5,x),a
5840                     ; 1723             pSocket->nState = STATE_SENDHEADER;
5842  d738 a60b          	ld	a,#11
5843  d73a f7            	ld	(x),a
5844                     ; 1724             pSocket->nPrevBytes = 0xFFFF;
5846  d73b 90aeffff      	ldw	y,#65535
5847  d73f ef0a          	ldw	(10,x),y
5848                     ; 1725             break;
5850  d741 ccd9a7        	jra	L7761
5851  d744               L7071:
5852                     ; 1728         else if (pSocket->ParseState == PARSE_NUM10) {
5854  d744 a101          	cp	a,#1
5855  d746 264e          	jrne	L7171
5856                     ; 1733 	  if(*pBuffer == ' ') {
5858  d748 1e08          	ldw	x,(OFST+1,sp)
5859  d74a f6            	ld	a,(x)
5860  d74b a120          	cp	a,#32
5861  d74d 2620          	jrne	L1271
5862                     ; 1734 	    current_webpage = WEBPAGE_DEFAULT;
5864  d74f 725f001b      	clr	_current_webpage
5865                     ; 1735             pSocket->pData = g_HtmlPageDefault;
5867  d753 1e0e          	ldw	x,(OFST+7,sp)
5868  d755 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5869  d759 ef01          	ldw	(1,x),y
5870                     ; 1736             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5872  d75b 90ae1879      	ldw	y,#6265
5873  d75f ef03          	ldw	(3,x),y
5874                     ; 1737             pSocket->nNewlines = 0;
5876  d761 6f05          	clr	(5,x)
5877                     ; 1738             pSocket->nState = STATE_SENDHEADER;
5879  d763 a60b          	ld	a,#11
5880  d765 f7            	ld	(x),a
5881                     ; 1739             pSocket->nPrevBytes = 0xFFFF;
5883  d766 90aeffff      	ldw	y,#65535
5884  d76a ef0a          	ldw	(10,x),y
5885                     ; 1740 	    break;
5887  d76c ccd9a7        	jra	L7761
5888  d76f               L1271:
5889                     ; 1743 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5891  d76f a130          	cp	a,#48
5892  d771 2504          	jrult	L3271
5894  d773 a13a          	cp	a,#58
5895  d775 2506          	jrult	L5271
5897  d777               L3271:
5898                     ; 1744 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5900  d777 1e0e          	ldw	x,(OFST+7,sp)
5901  d779 a605          	ld	a,#5
5902  d77b e709          	ld	(9,x),a
5903  d77d               L5271:
5904                     ; 1745           if (pSocket->ParseState == PARSE_NUM10) {      // Still good - parse number
5906  d77d 1e0e          	ldw	x,(OFST+7,sp)
5907  d77f e609          	ld	a,(9,x)
5908  d781 4a            	dec	a
5909  d782 26a0          	jrne	L5171
5910                     ; 1746             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5912  d784 1e08          	ldw	x,(OFST+1,sp)
5913  d786 f6            	ld	a,(x)
5914  d787 97            	ld	xl,a
5915  d788 a60a          	ld	a,#10
5916  d78a 42            	mul	x,a
5917  d78b 9f            	ld	a,xl
5918  d78c 1e0e          	ldw	x,(OFST+7,sp)
5919  d78e a0e0          	sub	a,#224
5920  d790 e708          	ld	(8,x),a
5921                     ; 1747 	    pSocket->ParseState = PARSE_NUM1;
5923  d792 a602          	ld	a,#2
5924                     ; 1748             pSocket->nParseLeft--;
5925                     ; 1749             pBuffer++;
5926  d794 202c          	jp	LC022
5927  d796               L7171:
5928                     ; 1753         else if (pSocket->ParseState == PARSE_NUM1) {
5930  d796 a102          	cp	a,#2
5931  d798 2634          	jrne	L3371
5932                     ; 1754 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5934  d79a 1e08          	ldw	x,(OFST+1,sp)
5935  d79c f6            	ld	a,(x)
5936  d79d a130          	cp	a,#48
5937  d79f 2504          	jrult	L5371
5939  d7a1 a13a          	cp	a,#58
5940  d7a3 2506          	jrult	L7371
5942  d7a5               L5371:
5943                     ; 1755 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5945  d7a5 1e0e          	ldw	x,(OFST+7,sp)
5946  d7a7 a605          	ld	a,#5
5947  d7a9 e709          	ld	(9,x),a
5948  d7ab               L7371:
5949                     ; 1756           if (pSocket->ParseState == PARSE_NUM1) {       // Still good - parse number
5951  d7ab 1e0e          	ldw	x,(OFST+7,sp)
5952  d7ad e609          	ld	a,(9,x)
5953  d7af a102          	cp	a,#2
5954  d7b1 2703ccd97a    	jrne	L5171
5955                     ; 1757             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5957  d7b6 1608          	ldw	y,(OFST+1,sp)
5958  d7b8 90f6          	ld	a,(y)
5959  d7ba a030          	sub	a,#48
5960  d7bc eb08          	add	a,(8,x)
5961  d7be e708          	ld	(8,x),a
5962                     ; 1758             pSocket->ParseState = PARSE_VAL;
5964  d7c0 a604          	ld	a,#4
5965                     ; 1759             pSocket->nParseLeft--;
5967                     ; 1760             pBuffer++;
5969  d7c2               LC022:
5970  d7c2 e709          	ld	(9,x),a
5972  d7c4 6a06          	dec	(6,x)
5974  d7c6 1e08          	ldw	x,(OFST+1,sp)
5975  d7c8 5c            	incw	x
5976  d7c9 1f08          	ldw	(OFST+1,sp),x
5977  d7cb ccd97a        	jra	L5171
5978  d7ce               L3371:
5979                     ; 1763         else if (pSocket->ParseState == PARSE_VAL) {
5981  d7ce a104          	cp	a,#4
5982  d7d0 2703ccd982    	jrne	L5471
5983                     ; 1814           switch(pSocket->ParseNum)
5985  d7d5 e608          	ld	a,(8,x)
5987                     ; 1938 	      break;
5988  d7d7 a143          	cp	a,#67
5989  d7d9 2407          	jruge	L272
5990  d7db 5f            	clrw	x
5991  d7dc 97            	ld	xl,a
5992  d7dd 58            	sllw	x
5993  d7de dec204        	ldw	x,(L472,x)
5994  d7e1 fc            	jp	(x)
5995  d7e2               L272:
5996  d7e2 a05b          	sub	a,#91
5997  d7e4 2603ccd93e    	jreq	L7321
5998  d7e9 a008          	sub	a,#8
5999  d7eb 2603ccd944    	jreq	L1421
6000  d7f0 ccd959        	jra	L3421
6001  d7f3               L7111:
6002                     ; 1816 	    case 0:  Relays_8to1 &= (uint8_t)(~0x01);  break; // Relay-01 OFF
6004  d7f3 7211005f      	bres	_Relays_8to1,#0
6007  d7f7 ccd974        	jra	L1571
6008  d7fa               L1211:
6009                     ; 1817 	    case 1:  Relays_8to1 |= (uint8_t)0x01;     break; // Relay-01 ON
6011  d7fa 7210005f      	bset	_Relays_8to1,#0
6014  d7fe ccd974        	jra	L1571
6015  d801               L3211:
6016                     ; 1818 	    case 2:  Relays_8to1 &= (uint8_t)(~0x02);  break; // Relay-02 OFF
6018  d801 7213005f      	bres	_Relays_8to1,#1
6021  d805 ccd974        	jra	L1571
6022  d808               L5211:
6023                     ; 1819 	    case 3:  Relays_8to1 |= (uint8_t)0x02;     break; // Relay-02 ON
6025  d808 7212005f      	bset	_Relays_8to1,#1
6028  d80c ccd974        	jra	L1571
6029  d80f               L7211:
6030                     ; 1820 	    case 4:  Relays_8to1 &= (uint8_t)(~0x04);  break; // Relay-03 OFF
6032  d80f 7215005f      	bres	_Relays_8to1,#2
6035  d813 ccd974        	jra	L1571
6036  d816               L1311:
6037                     ; 1821 	    case 5:  Relays_8to1 |= (uint8_t)0x04;     break; // Relay-03 ON
6039  d816 7214005f      	bset	_Relays_8to1,#2
6042  d81a ccd974        	jra	L1571
6043  d81d               L3311:
6044                     ; 1822 	    case 6:  Relays_8to1 &= (uint8_t)(~0x08);  break; // Relay-04 OFF
6046  d81d 7217005f      	bres	_Relays_8to1,#3
6049  d821 ccd974        	jra	L1571
6050  d824               L5311:
6051                     ; 1823 	    case 7:  Relays_8to1 |= (uint8_t)0x08;     break; // Relay-04 ON
6053  d824 7216005f      	bset	_Relays_8to1,#3
6056  d828 ccd974        	jra	L1571
6057  d82b               L7311:
6058                     ; 1824 	    case 8:  Relays_8to1 &= (uint8_t)(~0x10);  break; // Relay-05 OFF
6060  d82b 7219005f      	bres	_Relays_8to1,#4
6063  d82f ccd974        	jra	L1571
6064  d832               L1411:
6065                     ; 1825 	    case 9:  Relays_8to1 |= (uint8_t)0x10;     break; // Relay-05 ON
6067  d832 7218005f      	bset	_Relays_8to1,#4
6070  d836 ccd974        	jra	L1571
6071  d839               L3411:
6072                     ; 1826 	    case 10: Relays_8to1 &= (uint8_t)(~0x20);  break; // Relay-06 OFF
6074  d839 721b005f      	bres	_Relays_8to1,#5
6077  d83d ccd974        	jra	L1571
6078  d840               L5411:
6079                     ; 1827 	    case 11: Relays_8to1 |= (uint8_t)0x20;     break; // Relay-06 ON
6081  d840 721a005f      	bset	_Relays_8to1,#5
6084  d844 ccd974        	jra	L1571
6085  d847               L7411:
6086                     ; 1828 	    case 12: Relays_8to1 &= (uint8_t)(~0x40);  break; // Relay-07 OFF
6088  d847 721d005f      	bres	_Relays_8to1,#6
6091  d84b ccd974        	jra	L1571
6092  d84e               L1511:
6093                     ; 1829 	    case 13: Relays_8to1 |= (uint8_t)0x40;     break; // Relay-07 ON
6095  d84e 721c005f      	bset	_Relays_8to1,#6
6098  d852 ccd974        	jra	L1571
6099  d855               L3511:
6100                     ; 1830 	    case 14: Relays_8to1 &= (uint8_t)(~0x80);  break; // Relay-08 OFF
6102  d855 721f005f      	bres	_Relays_8to1,#7
6105  d859 ccd974        	jra	L1571
6106  d85c               L5511:
6107                     ; 1831 	    case 15: Relays_8to1 |= (uint8_t)0x80;     break; // Relay-08 ON
6109  d85c 721e005f      	bset	_Relays_8to1,#7
6112  d860 ccd974        	jra	L1571
6113  d863               L7511:
6114                     ; 1832 	    case 16: Relays_16to9 &= (uint8_t)(~0x01); break; // Relay-09 OFF
6116  d863 72110060      	bres	_Relays_16to9,#0
6119  d867 ccd974        	jra	L1571
6120  d86a               L1611:
6121                     ; 1833 	    case 17: Relays_16to9 |= (uint8_t)0x01;    break; // Relay-09 ON
6123  d86a 72100060      	bset	_Relays_16to9,#0
6126  d86e ccd974        	jra	L1571
6127  d871               L3611:
6128                     ; 1834 	    case 18: Relays_16to9 &= (uint8_t)(~0x02); break; // Relay-10 OFF
6130  d871 72130060      	bres	_Relays_16to9,#1
6133  d875 ccd974        	jra	L1571
6134  d878               L5611:
6135                     ; 1835 	    case 19: Relays_16to9 |= (uint8_t)0x02;    break; // Relay-10 ON
6137  d878 72120060      	bset	_Relays_16to9,#1
6140  d87c ccd974        	jra	L1571
6141  d87f               L7611:
6142                     ; 1836 	    case 20: Relays_16to9 &= (uint8_t)(~0x04); break; // Relay-11 OFF
6144  d87f 72150060      	bres	_Relays_16to9,#2
6147  d883 ccd974        	jra	L1571
6148  d886               L1711:
6149                     ; 1837 	    case 21: Relays_16to9 |= (uint8_t)0x04;    break; // Relay-11 ON
6151  d886 72140060      	bset	_Relays_16to9,#2
6154  d88a ccd974        	jra	L1571
6155  d88d               L3711:
6156                     ; 1838 	    case 22: Relays_16to9 &= (uint8_t)(~0x08); break; // Relay-12 OFF
6158  d88d 72170060      	bres	_Relays_16to9,#3
6161  d891 ccd974        	jra	L1571
6162  d894               L5711:
6163                     ; 1839 	    case 23: Relays_16to9 |= (uint8_t)0x08;    break; // Relay-12 ON
6165  d894 72160060      	bset	_Relays_16to9,#3
6168  d898 ccd974        	jra	L1571
6169  d89b               L7711:
6170                     ; 1840 	    case 24: Relays_16to9 &= (uint8_t)(~0x10); break; // Relay-13 OFF
6172  d89b 72190060      	bres	_Relays_16to9,#4
6175  d89f ccd974        	jra	L1571
6176  d8a2               L1021:
6177                     ; 1841 	    case 25: Relays_16to9 |= (uint8_t)0x10;    break; // Relay-13 ON
6179  d8a2 72180060      	bset	_Relays_16to9,#4
6182  d8a6 ccd974        	jra	L1571
6183  d8a9               L3021:
6184                     ; 1842 	    case 26: Relays_16to9 &= (uint8_t)(~0x20); break; // Relay-14 OFF
6186  d8a9 721b0060      	bres	_Relays_16to9,#5
6189  d8ad ccd974        	jra	L1571
6190  d8b0               L5021:
6191                     ; 1843 	    case 27: Relays_16to9 |= (uint8_t)0x20;    break; // Relay-14 ON
6193  d8b0 721a0060      	bset	_Relays_16to9,#5
6196  d8b4 ccd974        	jra	L1571
6197  d8b7               L7021:
6198                     ; 1844 	    case 28: Relays_16to9 &= (uint8_t)(~0x40); break; // Relay-15 OFF
6200  d8b7 721d0060      	bres	_Relays_16to9,#6
6203  d8bb ccd974        	jra	L1571
6204  d8be               L1121:
6205                     ; 1845 	    case 29: Relays_16to9 |= (uint8_t)0x40;    break; // Relay-15 ON
6207  d8be 721c0060      	bset	_Relays_16to9,#6
6210  d8c2 ccd974        	jra	L1571
6211  d8c5               L3121:
6212                     ; 1846 	    case 30: Relays_16to9 &= (uint8_t)(~0x80); break; // Relay-16 OFF
6214  d8c5 721f0060      	bres	_Relays_16to9,#7
6217  d8c9 ccd974        	jra	L1571
6218  d8cc               L5121:
6219                     ; 1847 	    case 31: Relays_16to9 |= (uint8_t)0x80;    break; // Relay-16 ON
6221  d8cc 721e0060      	bset	_Relays_16to9,#7
6224  d8d0 ccd974        	jra	L1571
6225  d8d3               L7121:
6226                     ; 1848 	    case 55:
6226                     ; 1849   	      Relays_8to1 = (uint8_t)0xff; // Relays 1-8 ON
6228  d8d3 35ff005f      	mov	_Relays_8to1,#255
6229                     ; 1850   	      Relays_16to9 = (uint8_t)0xff; // Relays 9-16 ON
6231  d8d7 35ff0060      	mov	_Relays_16to9,#255
6232                     ; 1851 	      break;
6234  d8db ccd974        	jra	L1571
6235  d8de               L1221:
6236                     ; 1852 	    case 56:
6236                     ; 1853               Relays_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
6238  d8de 725f005f      	clr	_Relays_8to1
6239                     ; 1854               Relays_16to9 = (uint8_t)0x00; // Relays 9-16 OFF
6241  d8e2 725f0060      	clr	_Relays_16to9
6242                     ; 1855 	      break;
6244  d8e6 ccd974        	jra	L1571
6245  d8e9               L3221:
6246                     ; 1857 	    case 60: // Show relay states page
6246                     ; 1858 	      current_webpage = WEBPAGE_DEFAULT;
6247                     ; 1859               pSocket->pData = g_HtmlPageDefault;
6248                     ; 1860               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
6249                     ; 1861               pSocket->nNewlines = 0;
6250                     ; 1862               pSocket->nState = STATE_CONNECTED;
6251                     ; 1863               pSocket->nPrevBytes = 0xFFFF;
6252                     ; 1864 	      break;
6254  d8e9 206e          	jp	L3421
6255  d8eb               L5221:
6256                     ; 1866 	    case 61: // Show address settings page
6256                     ; 1867 	      current_webpage = WEBPAGE_ADDRESS;
6258  d8eb 3501001b      	mov	_current_webpage,#1
6259                     ; 1868               pSocket->pData = g_HtmlPageAddress;
6261  d8ef 1e0e          	ldw	x,(OFST+7,sp)
6262  d8f1 90ae9902      	ldw	y,#L71_g_HtmlPageAddress
6263  d8f5 ef01          	ldw	(1,x),y
6264                     ; 1869               pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
6266  d8f7 90ae133d      	ldw	y,#4925
6267                     ; 1870               pSocket->nNewlines = 0;
6268                     ; 1871               pSocket->nState = STATE_CONNECTED;
6269                     ; 1872               pSocket->nPrevBytes = 0xFFFF;
6270                     ; 1873 	      break;
6272  d8fb 206c          	jp	LC020
6273  d8fd               L7221:
6274                     ; 1876 	    case 63: // Show help page 1
6274                     ; 1877 	      current_webpage = WEBPAGE_HELP;
6276  d8fd 3503001b      	mov	_current_webpage,#3
6277                     ; 1878               pSocket->pData = g_HtmlPageHelp;
6279  d901 1e0e          	ldw	x,(OFST+7,sp)
6280  d903 90aeac40      	ldw	y,#L12_g_HtmlPageHelp
6281  d907 ef01          	ldw	(1,x),y
6282                     ; 1879               pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
6284  d909 90ae0756      	ldw	y,#1878
6285                     ; 1880               pSocket->nNewlines = 0;
6286                     ; 1881               pSocket->nState = STATE_CONNECTED;
6287                     ; 1882               pSocket->nPrevBytes = 0xFFFF;
6288                     ; 1883 	      break;
6290  d90d 205a          	jp	LC020
6291  d90f               L1321:
6292                     ; 1885 	    case 64: // Show help page 2
6292                     ; 1886 	      current_webpage = WEBPAGE_HELP2;
6294  d90f 3504001b      	mov	_current_webpage,#4
6295                     ; 1887               pSocket->pData = g_HtmlPageHelp2;
6297  d913 1e0e          	ldw	x,(OFST+7,sp)
6298  d915 90aeb397      	ldw	y,#L32_g_HtmlPageHelp2
6299  d919 ef01          	ldw	(1,x),y
6300                     ; 1888               pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
6302  d91b 90ae02b7      	ldw	y,#695
6303                     ; 1889               pSocket->nNewlines = 0;
6304                     ; 1890               pSocket->nState = STATE_CONNECTED;
6305                     ; 1891               pSocket->nPrevBytes = 0xFFFF;
6306                     ; 1892 	      break;
6308  d91f 2048          	jp	LC020
6309  d921               L3321:
6310                     ; 1895 	    case 65: // Flash LED for diagnostics
6310                     ; 1896 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6310                     ; 1897 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6310                     ; 1898 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6310                     ; 1899 	      debugflash();
6312  d921 cde7d8        	call	_debugflash
6314                     ; 1900 	      debugflash();
6316  d924 cde7d8        	call	_debugflash
6318                     ; 1901 	      debugflash();
6320  d927 cde7d8        	call	_debugflash
6322                     ; 1905 	      break;
6324  d92a 2048          	jra	L1571
6325  d92c               L5321:
6326                     ; 1908             case 66: // Show statistics page
6326                     ; 1909 	      current_webpage = WEBPAGE_STATS;
6328  d92c 3505001b      	mov	_current_webpage,#5
6329                     ; 1910               pSocket->pData = g_HtmlPageStats;
6331  d930 1e0e          	ldw	x,(OFST+7,sp)
6332  d932 90aeb64f      	ldw	y,#L52_g_HtmlPageStats
6333  d936 ef01          	ldw	(1,x),y
6334                     ; 1911               pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
6336  d938 90ae0ae8      	ldw	y,#2792
6337                     ; 1912               pSocket->nNewlines = 0;
6338                     ; 1913               pSocket->nState = STATE_CONNECTED;
6339                     ; 1914               pSocket->nPrevBytes = 0xFFFF;
6340                     ; 1915 	      break;
6342  d93c 202b          	jp	LC020
6343  d93e               L7321:
6344                     ; 1918 	    case 91: // Reboot
6344                     ; 1919 	      submit_changes = 2;
6346  d93e 3502001d      	mov	_submit_changes,#2
6347                     ; 1920 	      break;
6349  d942 2030          	jra	L1571
6350  d944               L1421:
6351                     ; 1922             case 99: // Show simplified relay state page
6351                     ; 1923 	      current_webpage = WEBPAGE_RSTATE;
6353  d944 3506001b      	mov	_current_webpage,#6
6354                     ; 1924               pSocket->pData = g_HtmlPageRstate;
6356  d948 90aec138      	ldw	y,#L72_g_HtmlPageRstate
6357  d94c ef01          	ldw	(1,x),y
6358                     ; 1925               pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
6360  d94e 90ae0087      	ldw	y,#135
6361  d952 ef03          	ldw	(3,x),y
6362                     ; 1926               pSocket->nNewlines = 0;
6364  d954 e705          	ld	(5,x),a
6365                     ; 1927               pSocket->nState = STATE_CONNECTED;
6367  d956 f7            	ld	(x),a
6368                     ; 1928               pSocket->nPrevBytes = 0xFFFF;
6369                     ; 1929 	      break;
6371  d957 2015          	jp	LC019
6372  d959               L3421:
6373                     ; 1931 	    default: // Show relay state page
6373                     ; 1932 	      current_webpage = WEBPAGE_DEFAULT;
6375                     ; 1933               pSocket->pData = g_HtmlPageDefault;
6377                     ; 1934               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
6380  d959 725f001b      	clr	_current_webpage
6382  d95d 1e0e          	ldw	x,(OFST+7,sp)
6383  d95f 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
6384  d963 ef01          	ldw	(1,x),y
6386  d965 90ae1879      	ldw	y,#6265
6387                     ; 1935               pSocket->nNewlines = 0;
6389                     ; 1936               pSocket->nState = STATE_CONNECTED;
6391  d969               LC020:
6392  d969 ef03          	ldw	(3,x),y
6398  d96b 6f05          	clr	(5,x)
6404  d96d 7f            	clr	(x)
6405                     ; 1937               pSocket->nPrevBytes = 0xFFFF;
6407  d96e               LC019:
6414  d96e 90aeffff      	ldw	y,#65535
6415  d972 ef0a          	ldw	(10,x),y
6416                     ; 1938 	      break;
6418  d974               L1571:
6419                     ; 1940           pSocket->ParseState = PARSE_DELIM;
6421  d974 1e0e          	ldw	x,(OFST+7,sp)
6422  d976 a605          	ld	a,#5
6423  d978 e709          	ld	(9,x),a
6425  d97a               L5171:
6426                     ; 1954         if (pSocket->nParseLeft == 0) {
6428  d97a 1e0e          	ldw	x,(OFST+7,sp)
6429  d97c e606          	ld	a,(6,x)
6430  d97e 261c          	jrne	L3071
6431                     ; 1956           pSocket->nState = STATE_SENDHEADER;
6432                     ; 1957           break;
6434  d980 2015          	jp	LC023
6435  d982               L5471:
6436                     ; 1943         else if (pSocket->ParseState == PARSE_DELIM) {
6438  d982 a105          	cp	a,#5
6439  d984 26f4          	jrne	L5171
6440                     ; 1945           pSocket->ParseState = PARSE_DELIM;
6442  d986 a605          	ld	a,#5
6443  d988 e709          	ld	(9,x),a
6444                     ; 1946           pSocket->nParseLeft--;
6446  d98a 6a06          	dec	(6,x)
6447                     ; 1947           pBuffer++;
6449  d98c 1e08          	ldw	x,(OFST+1,sp)
6450  d98e 5c            	incw	x
6451  d98f 1f08          	ldw	(OFST+1,sp),x
6452                     ; 1948 	  if (pSocket->nParseLeft == 0) {
6454  d991 1e0e          	ldw	x,(OFST+7,sp)
6455  d993 e606          	ld	a,(6,x)
6456  d995 26e3          	jrne	L5171
6457                     ; 1950             pSocket->nState = STATE_SENDHEADER;
6459  d997               LC023:
6461  d997 a60b          	ld	a,#11
6462  d999 f7            	ld	(x),a
6463                     ; 1951             break;
6465  d99a 200b          	jra	L7761
6466  d99c               L3071:
6467                     ; 1707       while (nBytes--) {
6469  d99c 1e0c          	ldw	x,(OFST+5,sp)
6470  d99e 5a            	decw	x
6471  d99f 1f0c          	ldw	(OFST+5,sp),x
6472  d9a1 5c            	incw	x
6473  d9a2 2703ccd6fe    	jrne	L1071
6474  d9a7               L7761:
6475                     ; 1962     if (pSocket->nState == STATE_SENDHEADER) {
6477  d9a7 1e0e          	ldw	x,(OFST+7,sp)
6478  d9a9 f6            	ld	a,(x)
6479  d9aa a10b          	cp	a,#11
6480  d9ac 2623          	jrne	L3671
6481                     ; 1963       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
6483  d9ae ee03          	ldw	x,(3,x)
6484  d9b0 cdfb38        	call	c_uitolx
6486  d9b3 be02          	ldw	x,c_lreg+2
6487  d9b5 89            	pushw	x
6488  d9b6 be00          	ldw	x,c_lreg
6489  d9b8 89            	pushw	x
6490  d9b9 ce01d9        	ldw	x,_uip_appdata
6491  d9bc cdc99c        	call	L7_CopyHttpHeader
6493  d9bf 5b04          	addw	sp,#4
6494  d9c1 89            	pushw	x
6495  d9c2 ce01d9        	ldw	x,_uip_appdata
6496  d9c5 cdf515        	call	_uip_send
6498  d9c8 85            	popw	x
6499                     ; 1964       pSocket->nState = STATE_SENDDATA;
6501  d9c9 1e0e          	ldw	x,(OFST+7,sp)
6502  d9cb a60c          	ld	a,#12
6503  d9cd f7            	ld	(x),a
6504                     ; 1965       return;
6506  d9ce ccd342        	jra	L613
6507  d9d1               L3671:
6508                     ; 1968     if (pSocket->nState == STATE_SENDDATA) {
6510  d9d1 a10c          	cp	a,#12
6511  d9d3 26f9          	jrne	L613
6512                     ; 1972       pSocket->nPrevBytes = pSocket->nDataLeft;
6514  d9d5 9093          	ldw	y,x
6515  d9d7 90ee03        	ldw	y,(3,y)
6516  d9da ef0a          	ldw	(10,x),y
6517                     ; 1973       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6519  d9dc ce01d5        	ldw	x,_uip_conn
6520  d9df ee12          	ldw	x,(18,x)
6521  d9e1 89            	pushw	x
6522  d9e2 1e10          	ldw	x,(OFST+9,sp)
6523  d9e4 1c0003        	addw	x,#3
6524  d9e7 89            	pushw	x
6525  d9e8 1e12          	ldw	x,(OFST+11,sp)
6526  d9ea 5c            	incw	x
6527  d9eb 89            	pushw	x
6528  d9ec ce01d9        	ldw	x,_uip_appdata
6529  d9ef cdca34        	call	L11_CopyHttpData
6531  d9f2 5b06          	addw	sp,#6
6532  d9f4 1f01          	ldw	(OFST-6,sp),x
6534                     ; 1974       pSocket->nPrevBytes -= pSocket->nDataLeft;
6536  d9f6 1e0e          	ldw	x,(OFST+7,sp)
6537  d9f8 e60b          	ld	a,(11,x)
6538  d9fa e004          	sub	a,(4,x)
6539  d9fc e70b          	ld	(11,x),a
6540  d9fe e60a          	ld	a,(10,x)
6541  da00 e203          	sbc	a,(3,x)
6542  da02 e70a          	ld	(10,x),a
6543                     ; 1976       if (nBufSize == 0) {
6545  da04 1e01          	ldw	x,(OFST-6,sp)
6546  da06 262d          	jrne	LC014
6547                     ; 1978         uip_close();
6549  da08               LC015:
6551  da08 35100088      	mov	_uip_flags,#16
6553  da0c ccd342        	jra	L613
6554                     ; 1982         uip_send(uip_appdata, nBufSize);
6556                     ; 1984       return;
6558  da0f               L5731:
6559                     ; 1988   else if (uip_rexmit()) {
6561  da0f 7204008803cc  	btjf	_uip_flags,#2,L3731
6562                     ; 1989     if (pSocket->nPrevBytes == 0xFFFF) {
6564  da17 160e          	ldw	y,(OFST+7,sp)
6565  da19 90ee0a        	ldw	y,(10,y)
6566  da1c 905c          	incw	y
6567  da1e 2620          	jrne	L7771
6568                     ; 1991       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
6570  da20 1e0e          	ldw	x,(OFST+7,sp)
6571  da22 ee03          	ldw	x,(3,x)
6572  da24 cdfb38        	call	c_uitolx
6574  da27 be02          	ldw	x,c_lreg+2
6575  da29 89            	pushw	x
6576  da2a be00          	ldw	x,c_lreg
6577  da2c 89            	pushw	x
6578  da2d ce01d9        	ldw	x,_uip_appdata
6579  da30 cdc99c        	call	L7_CopyHttpHeader
6581  da33 5b04          	addw	sp,#4
6583  da35               LC014:
6585  da35 89            	pushw	x
6586  da36 ce01d9        	ldw	x,_uip_appdata
6587  da39 cdf515        	call	_uip_send
6588  da3c 85            	popw	x
6590  da3d ccd342        	jra	L613
6591  da40               L7771:
6592                     ; 1994       pSocket->pData -= pSocket->nPrevBytes;
6594  da40 1e0e          	ldw	x,(OFST+7,sp)
6595  da42 e602          	ld	a,(2,x)
6596  da44 e00b          	sub	a,(11,x)
6597  da46 e702          	ld	(2,x),a
6598  da48 e601          	ld	a,(1,x)
6599  da4a e20a          	sbc	a,(10,x)
6600  da4c e701          	ld	(1,x),a
6601                     ; 1995       pSocket->nDataLeft += pSocket->nPrevBytes;
6603  da4e e604          	ld	a,(4,x)
6604  da50 eb0b          	add	a,(11,x)
6605  da52 e704          	ld	(4,x),a
6606  da54 e603          	ld	a,(3,x)
6607  da56 e90a          	adc	a,(10,x)
6608                     ; 1996       pSocket->nPrevBytes = pSocket->nDataLeft;
6610  da58 9093          	ldw	y,x
6611  da5a e703          	ld	(3,x),a
6612  da5c 90ee03        	ldw	y,(3,y)
6613  da5f ef0a          	ldw	(10,x),y
6614                     ; 1997       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6616  da61 ce01d5        	ldw	x,_uip_conn
6617  da64 ee12          	ldw	x,(18,x)
6618  da66 89            	pushw	x
6619  da67 1e10          	ldw	x,(OFST+9,sp)
6620  da69 1c0003        	addw	x,#3
6621  da6c 89            	pushw	x
6622  da6d 1e12          	ldw	x,(OFST+11,sp)
6623  da6f 5c            	incw	x
6624  da70 89            	pushw	x
6625  da71 ce01d9        	ldw	x,_uip_appdata
6626  da74 cdca34        	call	L11_CopyHttpData
6628  da77 5b06          	addw	sp,#6
6629  da79 1f01          	ldw	(OFST-6,sp),x
6631                     ; 1998       pSocket->nPrevBytes -= pSocket->nDataLeft;
6633  da7b 1e0e          	ldw	x,(OFST+7,sp)
6634  da7d e60b          	ld	a,(11,x)
6635  da7f e004          	sub	a,(4,x)
6636  da81 e70b          	ld	(11,x),a
6637  da83 e60a          	ld	a,(10,x)
6638  da85 e203          	sbc	a,(3,x)
6639  da87 e70a          	ld	(10,x),a
6640                     ; 1999       if (nBufSize == 0) {
6642  da89 1e01          	ldw	x,(OFST-6,sp)
6643                     ; 2001         uip_close();
6645  da8b 2603ccda08    	jreq	LC015
6646                     ; 2005         uip_send(uip_appdata, nBufSize);
6648  da90 89            	pushw	x
6649  da91 ce01d9        	ldw	x,_uip_appdata
6650  da94 cdf515        	call	_uip_send
6652  da97 85            	popw	x
6653                     ; 2008     return;
6655  da98               L3731:
6656                     ; 2010 }
6658  da98 ccd342        	jra	L613
6692                     ; 2013 uint8_t GpioGetPin(uint8_t nGpio)
6692                     ; 2014 {
6693                     	switch	.text
6694  da9b               _GpioGetPin:
6696       00000000      OFST:	set	0
6699                     ; 2016   if(nGpio == 0       && (Relays_8to1  & (uint8_t)(0x01))) return 1; // Relay-01 is ON
6701  da9b 4d            	tnz	a
6702  da9c 2607          	jrne	L3202
6704  da9e 7201005f02    	btjf	_Relays_8to1,#0,L3202
6707  daa3 4c            	inc	a
6710  daa4 81            	ret	
6711  daa5               L3202:
6712                     ; 2017   else if(nGpio == 1  && (Relays_8to1  & (uint8_t)(0x02))) return 1; // Relay-02 is ON
6714  daa5 a101          	cp	a,#1
6715  daa7 2608          	jrne	L7202
6717  daa9 7203005f03    	btjf	_Relays_8to1,#1,L7202
6720  daae a601          	ld	a,#1
6723  dab0 81            	ret	
6724  dab1               L7202:
6725                     ; 2018   else if(nGpio == 2  && (Relays_8to1  & (uint8_t)(0x04))) return 1; // Relay-03 is ON
6727  dab1 a102          	cp	a,#2
6728  dab3 2608          	jrne	L3302
6730  dab5 7205005f03    	btjf	_Relays_8to1,#2,L3302
6733  daba a601          	ld	a,#1
6736  dabc 81            	ret	
6737  dabd               L3302:
6738                     ; 2019   else if(nGpio == 3  && (Relays_8to1  & (uint8_t)(0x08))) return 1; // Relay-04 is ON
6740  dabd a103          	cp	a,#3
6741  dabf 2608          	jrne	L7302
6743  dac1 7207005f03    	btjf	_Relays_8to1,#3,L7302
6746  dac6 a601          	ld	a,#1
6749  dac8 81            	ret	
6750  dac9               L7302:
6751                     ; 2020   else if(nGpio == 4  && (Relays_8to1  & (uint8_t)(0x10))) return 1; // Relay-05 is ON
6753  dac9 a104          	cp	a,#4
6754  dacb 2608          	jrne	L3402
6756  dacd 7209005f03    	btjf	_Relays_8to1,#4,L3402
6759  dad2 a601          	ld	a,#1
6762  dad4 81            	ret	
6763  dad5               L3402:
6764                     ; 2021   else if(nGpio == 5  && (Relays_8to1  & (uint8_t)(0x20))) return 1; // Relay-06 is ON
6766  dad5 a105          	cp	a,#5
6767  dad7 2608          	jrne	L7402
6769  dad9 720b005f03    	btjf	_Relays_8to1,#5,L7402
6772  dade a601          	ld	a,#1
6775  dae0 81            	ret	
6776  dae1               L7402:
6777                     ; 2022   else if(nGpio == 6  && (Relays_8to1  & (uint8_t)(0x40))) return 1; // Relay-07 is ON
6779  dae1 a106          	cp	a,#6
6780  dae3 2608          	jrne	L3502
6782  dae5 720d005f03    	btjf	_Relays_8to1,#6,L3502
6785  daea a601          	ld	a,#1
6788  daec 81            	ret	
6789  daed               L3502:
6790                     ; 2023   else if(nGpio == 7  && (Relays_8to1  & (uint8_t)(0x80))) return 1; // Relay-08 is ON
6792  daed a107          	cp	a,#7
6793  daef 2608          	jrne	L7502
6795  daf1 720f005f03    	btjf	_Relays_8to1,#7,L7502
6798  daf6 a601          	ld	a,#1
6801  daf8 81            	ret	
6802  daf9               L7502:
6803                     ; 2024   else if(nGpio == 8  && (Relays_16to9 & (uint8_t)(0x01))) return 1; // Relay-09 is ON
6805  daf9 a108          	cp	a,#8
6806  dafb 2608          	jrne	L3602
6808  dafd 7201006003    	btjf	_Relays_16to9,#0,L3602
6811  db02 a601          	ld	a,#1
6814  db04 81            	ret	
6815  db05               L3602:
6816                     ; 2025   else if(nGpio == 9  && (Relays_16to9 & (uint8_t)(0x02))) return 1; // Relay-10 is ON
6818  db05 a109          	cp	a,#9
6819  db07 2608          	jrne	L7602
6821  db09 7203006003    	btjf	_Relays_16to9,#1,L7602
6824  db0e a601          	ld	a,#1
6827  db10 81            	ret	
6828  db11               L7602:
6829                     ; 2026   else if(nGpio == 10 && (Relays_16to9 & (uint8_t)(0x04))) return 1; // Relay-11 is ON
6831  db11 a10a          	cp	a,#10
6832  db13 2608          	jrne	L3702
6834  db15 7205006003    	btjf	_Relays_16to9,#2,L3702
6837  db1a a601          	ld	a,#1
6840  db1c 81            	ret	
6841  db1d               L3702:
6842                     ; 2027   else if(nGpio == 11 && (Relays_16to9 & (uint8_t)(0x08))) return 1; // Relay-12 is ON
6844  db1d a10b          	cp	a,#11
6845  db1f 2608          	jrne	L7702
6847  db21 7207006003    	btjf	_Relays_16to9,#3,L7702
6850  db26 a601          	ld	a,#1
6853  db28 81            	ret	
6854  db29               L7702:
6855                     ; 2028   else if(nGpio == 12 && (Relays_16to9 & (uint8_t)(0x10))) return 1; // Relay-13 is ON
6857  db29 a10c          	cp	a,#12
6858  db2b 2608          	jrne	L3012
6860  db2d 7209006003    	btjf	_Relays_16to9,#4,L3012
6863  db32 a601          	ld	a,#1
6866  db34 81            	ret	
6867  db35               L3012:
6868                     ; 2029   else if(nGpio == 13 && (Relays_16to9 & (uint8_t)(0x20))) return 1; // Relay-14 is ON
6870  db35 a10d          	cp	a,#13
6871  db37 2608          	jrne	L7012
6873  db39 720b006003    	btjf	_Relays_16to9,#5,L7012
6876  db3e a601          	ld	a,#1
6879  db40 81            	ret	
6880  db41               L7012:
6881                     ; 2030   else if(nGpio == 14 && (Relays_16to9 & (uint8_t)(0x40))) return 1; // Relay-15 is ON
6883  db41 a10e          	cp	a,#14
6884  db43 2608          	jrne	L3112
6886  db45 720d006003    	btjf	_Relays_16to9,#6,L3112
6889  db4a a601          	ld	a,#1
6892  db4c 81            	ret	
6893  db4d               L3112:
6894                     ; 2031   else if(nGpio == 15 && (Relays_16to9 & (uint8_t)(0x80))) return 1; // Relay-16 is ON
6896  db4d a10f          	cp	a,#15
6897  db4f 2608          	jrne	L5202
6899  db51 720f006003    	btjf	_Relays_16to9,#7,L5202
6902  db56 a601          	ld	a,#1
6905  db58 81            	ret	
6906  db59               L5202:
6907                     ; 2032   return 0;
6909  db59 4f            	clr	a
6912  db5a 81            	ret	
6953                     	switch	.const
6954  c28a               L623:
6955  c28a db78          	dc.w	L1212
6956  c28c db8a          	dc.w	L3212
6957  c28e db9c          	dc.w	L5212
6958  c290 dbae          	dc.w	L7212
6959  c292 dbc0          	dc.w	L1312
6960  c294 dbd2          	dc.w	L3312
6961  c296 dbe4          	dc.w	L5312
6962  c298 dbf6          	dc.w	L7312
6963  c29a dc07          	dc.w	L1412
6964  c29c dc17          	dc.w	L3412
6965  c29e dc27          	dc.w	L5412
6966  c2a0 dc37          	dc.w	L7412
6967  c2a2 dc47          	dc.w	L1512
6968  c2a4 dc57          	dc.w	L3512
6969  c2a6 dc67          	dc.w	L5512
6970  c2a8 dc77          	dc.w	L7512
6971                     ; 2036 void GpioSetPin(uint8_t nGpio, uint8_t nState)
6971                     ; 2037 {
6972                     	switch	.text
6973  db5b               _GpioSetPin:
6975  db5b 89            	pushw	x
6976       00000000      OFST:	set	0
6979                     ; 2041   if(nState != 0 && nState != 1) nState = 1;
6981  db5c 9f            	ld	a,xl
6982  db5d 4d            	tnz	a
6983  db5e 2708          	jreq	L1022
6985  db60 9f            	ld	a,xl
6986  db61 4a            	dec	a
6987  db62 2704          	jreq	L1022
6990  db64 a601          	ld	a,#1
6991  db66 6b02          	ld	(OFST+2,sp),a
6992  db68               L1022:
6993                     ; 2043   switch(nGpio)
6995  db68 7b01          	ld	a,(OFST+1,sp)
6997                     ; 2109   default: break;
6998  db6a a110          	cp	a,#16
6999  db6c 2503ccdc85    	jruge	L5022
7000  db71 5f            	clrw	x
7001  db72 97            	ld	xl,a
7002  db73 58            	sllw	x
7003  db74 dec28a        	ldw	x,(L623,x)
7004  db77 fc            	jp	(x)
7005  db78               L1212:
7006                     ; 2045   case 0:
7006                     ; 2046     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x01); // Relay-01 OFF
7008  db78 7b02          	ld	a,(OFST+2,sp)
7009  db7a 2607          	jrne	L7022
7012  db7c 7211005f      	bres	_Relays_8to1,#0
7014  db80 ccdc85        	jra	L5022
7015  db83               L7022:
7016                     ; 2047     else Relays_8to1 |= (uint8_t)0x01; // Relay-01 ON
7018  db83 7210005f      	bset	_Relays_8to1,#0
7019  db87 ccdc85        	jra	L5022
7020  db8a               L3212:
7021                     ; 2049   case 1:
7021                     ; 2050     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x02); // Relay-02 OFF
7023  db8a 7b02          	ld	a,(OFST+2,sp)
7024  db8c 2607          	jrne	L3122
7027  db8e 7213005f      	bres	_Relays_8to1,#1
7029  db92 ccdc85        	jra	L5022
7030  db95               L3122:
7031                     ; 2051     else Relays_8to1 |= (uint8_t)0x02; // Relay-02 ON
7033  db95 7212005f      	bset	_Relays_8to1,#1
7034  db99 ccdc85        	jra	L5022
7035  db9c               L5212:
7036                     ; 2053   case 2:
7036                     ; 2054     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x04); // Relay-03 OFF
7038  db9c 7b02          	ld	a,(OFST+2,sp)
7039  db9e 2607          	jrne	L7122
7042  dba0 7215005f      	bres	_Relays_8to1,#2
7044  dba4 ccdc85        	jra	L5022
7045  dba7               L7122:
7046                     ; 2055     else Relays_8to1 |= (uint8_t)0x04; // Relay-03 ON
7048  dba7 7214005f      	bset	_Relays_8to1,#2
7049  dbab ccdc85        	jra	L5022
7050  dbae               L7212:
7051                     ; 2057   case 3:
7051                     ; 2058     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x08); // Relay-04 OFF
7053  dbae 7b02          	ld	a,(OFST+2,sp)
7054  dbb0 2607          	jrne	L3222
7057  dbb2 7217005f      	bres	_Relays_8to1,#3
7059  dbb6 ccdc85        	jra	L5022
7060  dbb9               L3222:
7061                     ; 2059     else Relays_8to1 |= (uint8_t)0x08; // Relay-04 ON
7063  dbb9 7216005f      	bset	_Relays_8to1,#3
7064  dbbd ccdc85        	jra	L5022
7065  dbc0               L1312:
7066                     ; 2061   case 4:
7066                     ; 2062     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x10); // Relay-05 OFF
7068  dbc0 7b02          	ld	a,(OFST+2,sp)
7069  dbc2 2607          	jrne	L7222
7072  dbc4 7219005f      	bres	_Relays_8to1,#4
7074  dbc8 ccdc85        	jra	L5022
7075  dbcb               L7222:
7076                     ; 2063     else Relays_8to1 |= (uint8_t)0x10; // Relay-05 ON
7078  dbcb 7218005f      	bset	_Relays_8to1,#4
7079  dbcf ccdc85        	jra	L5022
7080  dbd2               L3312:
7081                     ; 2065   case 5:
7081                     ; 2066     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x20); // Relay-06 OFF
7083  dbd2 7b02          	ld	a,(OFST+2,sp)
7084  dbd4 2607          	jrne	L3322
7087  dbd6 721b005f      	bres	_Relays_8to1,#5
7089  dbda ccdc85        	jra	L5022
7090  dbdd               L3322:
7091                     ; 2067     else Relays_8to1 |= (uint8_t)0x20; // Relay-06 ON
7093  dbdd 721a005f      	bset	_Relays_8to1,#5
7094  dbe1 ccdc85        	jra	L5022
7095  dbe4               L5312:
7096                     ; 2069   case 6:
7096                     ; 2070     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x40); // Relay-07 OFF
7098  dbe4 7b02          	ld	a,(OFST+2,sp)
7099  dbe6 2607          	jrne	L7322
7102  dbe8 721d005f      	bres	_Relays_8to1,#6
7104  dbec ccdc85        	jra	L5022
7105  dbef               L7322:
7106                     ; 2071     else Relays_8to1 |= (uint8_t)0x40; // Relay-07 ON
7108  dbef 721c005f      	bset	_Relays_8to1,#6
7109  dbf3 ccdc85        	jra	L5022
7110  dbf6               L7312:
7111                     ; 2073   case 7:
7111                     ; 2074     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x80); // Relay-08 OFF
7113  dbf6 7b02          	ld	a,(OFST+2,sp)
7114  dbf8 2607          	jrne	L3422
7117  dbfa 721f005f      	bres	_Relays_8to1,#7
7119  dbfe ccdc85        	jra	L5022
7120  dc01               L3422:
7121                     ; 2075     else Relays_8to1 |= (uint8_t)0x80; // Relay-08 ON
7123  dc01 721e005f      	bset	_Relays_8to1,#7
7124  dc05 207e          	jra	L5022
7125  dc07               L1412:
7126                     ; 2077   case 8:
7126                     ; 2078     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x01); // Relay-09 OFF
7128  dc07 7b02          	ld	a,(OFST+2,sp)
7129  dc09 2606          	jrne	L7422
7132  dc0b 72110060      	bres	_Relays_16to9,#0
7134  dc0f 2074          	jra	L5022
7135  dc11               L7422:
7136                     ; 2079     else Relays_16to9 |= (uint8_t)0x01; // Relay-09 ON
7138  dc11 72100060      	bset	_Relays_16to9,#0
7139  dc15 206e          	jra	L5022
7140  dc17               L3412:
7141                     ; 2081   case 9:
7141                     ; 2082     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x02); // Relay-10 OFF
7143  dc17 7b02          	ld	a,(OFST+2,sp)
7144  dc19 2606          	jrne	L3522
7147  dc1b 72130060      	bres	_Relays_16to9,#1
7149  dc1f 2064          	jra	L5022
7150  dc21               L3522:
7151                     ; 2083     else Relays_16to9 |= (uint8_t)0x02; // Relay-10 ON
7153  dc21 72120060      	bset	_Relays_16to9,#1
7154  dc25 205e          	jra	L5022
7155  dc27               L5412:
7156                     ; 2085   case 10:
7156                     ; 2086     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x04); // Relay-11 OFF
7158  dc27 7b02          	ld	a,(OFST+2,sp)
7159  dc29 2606          	jrne	L7522
7162  dc2b 72150060      	bres	_Relays_16to9,#2
7164  dc2f 2054          	jra	L5022
7165  dc31               L7522:
7166                     ; 2087     else Relays_16to9 |= (uint8_t)0x04; // Relay-11 ON
7168  dc31 72140060      	bset	_Relays_16to9,#2
7169  dc35 204e          	jra	L5022
7170  dc37               L7412:
7171                     ; 2089   case 11:
7171                     ; 2090     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x08); // Relay-12 OFF
7173  dc37 7b02          	ld	a,(OFST+2,sp)
7174  dc39 2606          	jrne	L3622
7177  dc3b 72170060      	bres	_Relays_16to9,#3
7179  dc3f 2044          	jra	L5022
7180  dc41               L3622:
7181                     ; 2091     else Relays_16to9 |= (uint8_t)0x08; // Relay-12 ON
7183  dc41 72160060      	bset	_Relays_16to9,#3
7184  dc45 203e          	jra	L5022
7185  dc47               L1512:
7186                     ; 2093   case 12:
7186                     ; 2094     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x10); // Relay-13 OFF
7188  dc47 7b02          	ld	a,(OFST+2,sp)
7189  dc49 2606          	jrne	L7622
7192  dc4b 72190060      	bres	_Relays_16to9,#4
7194  dc4f 2034          	jra	L5022
7195  dc51               L7622:
7196                     ; 2095     else Relays_16to9 |= (uint8_t)0x10; // Relay-13 ON
7198  dc51 72180060      	bset	_Relays_16to9,#4
7199  dc55 202e          	jra	L5022
7200  dc57               L3512:
7201                     ; 2097   case 13:
7201                     ; 2098     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x20); // Relay-14 OFF
7203  dc57 7b02          	ld	a,(OFST+2,sp)
7204  dc59 2606          	jrne	L3722
7207  dc5b 721b0060      	bres	_Relays_16to9,#5
7209  dc5f 2024          	jra	L5022
7210  dc61               L3722:
7211                     ; 2099     else Relays_16to9 |= (uint8_t)0x20; // Relay-14 ON
7213  dc61 721a0060      	bset	_Relays_16to9,#5
7214  dc65 201e          	jra	L5022
7215  dc67               L5512:
7216                     ; 2101   case 14:
7216                     ; 2102     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x40); // Relay-15 OFF
7218  dc67 7b02          	ld	a,(OFST+2,sp)
7219  dc69 2606          	jrne	L7722
7222  dc6b 721d0060      	bres	_Relays_16to9,#6
7224  dc6f 2014          	jra	L5022
7225  dc71               L7722:
7226                     ; 2103     else Relays_16to9 |= (uint8_t)0x40; // Relay-15 ON
7228  dc71 721c0060      	bset	_Relays_16to9,#6
7229  dc75 200e          	jra	L5022
7230  dc77               L7512:
7231                     ; 2105   case 15:
7231                     ; 2106     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x80); // Relay-16 OFF
7233  dc77 7b02          	ld	a,(OFST+2,sp)
7234  dc79 2606          	jrne	L3032
7237  dc7b 721f0060      	bres	_Relays_16to9,#7
7239  dc7f 2004          	jra	L5022
7240  dc81               L3032:
7241                     ; 2107     else Relays_16to9 |= (uint8_t)0x80; // Relay-16 ON
7243  dc81 721e0060      	bset	_Relays_16to9,#7
7244                     ; 2109   default: break;
7246  dc85               L5022:
7247                     ; 2111 }
7250  dc85 85            	popw	x
7251  dc86 81            	ret	
7341                     	switch	.const
7342  c2aa               L633:
7343  c2aa dcbc          	dc.w	L7032
7344  c2ac dcc3          	dc.w	L1132
7345  c2ae dcca          	dc.w	L3132
7346  c2b0 dcd1          	dc.w	L5132
7347  c2b2 dcd8          	dc.w	L7132
7348  c2b4 dcdf          	dc.w	L1232
7349  c2b6 dce6          	dc.w	L3232
7350  c2b8 dced          	dc.w	L5232
7351  c2ba dcf4          	dc.w	L7232
7352  c2bc dcfb          	dc.w	L1332
7353  c2be dd02          	dc.w	L3332
7354  c2c0 dd09          	dc.w	L5332
7355                     ; 2114 void SetAddresses(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
7355                     ; 2115 {
7356                     	switch	.text
7357  dc87               _SetAddresses:
7359  dc87 89            	pushw	x
7360  dc88 5207          	subw	sp,#7
7361       00000007      OFST:	set	7
7364                     ; 2128   temp = 0;
7366                     ; 2129   invalid = 0;
7368  dc8a 0f01          	clr	(OFST-6,sp)
7370                     ; 2132   str[0] = (uint8_t)alpha1;
7372  dc8c 9f            	ld	a,xl
7373  dc8d 6b02          	ld	(OFST-5,sp),a
7375                     ; 2133   str[1] = (uint8_t)alpha2;
7377  dc8f 7b0c          	ld	a,(OFST+5,sp)
7378  dc91 6b03          	ld	(OFST-4,sp),a
7380                     ; 2134   str[2] = (uint8_t)alpha3;
7382  dc93 7b0d          	ld	a,(OFST+6,sp)
7383  dc95 6b04          	ld	(OFST-3,sp),a
7385                     ; 2135   str[3] = 0;
7387  dc97 0f05          	clr	(OFST-2,sp)
7389                     ; 2136   temp = atoi(str);
7391  dc99 96            	ldw	x,sp
7392  dc9a 1c0002        	addw	x,#OFST-5
7393  dc9d cdf8d2        	call	_atoi
7395  dca0 1f06          	ldw	(OFST-1,sp),x
7397                     ; 2137   if (temp > 255) invalid = 1; // If an invalid entry set indicator
7399  dca2 a30100        	cpw	x,#256
7400  dca5 2504          	jrult	L3732
7403  dca7 a601          	ld	a,#1
7404  dca9 6b01          	ld	(OFST-6,sp),a
7406  dcab               L3732:
7407                     ; 2139   if(invalid == 0) { // Make change only if valid entry
7409  dcab 7b01          	ld	a,(OFST-6,sp)
7410  dcad 265f          	jrne	L5732
7411                     ; 2140     switch(itemnum)
7413  dcaf 7b08          	ld	a,(OFST+1,sp)
7415                     ; 2154     default: break;
7416  dcb1 a10c          	cp	a,#12
7417  dcb3 2459          	jruge	L5732
7418  dcb5 5f            	clrw	x
7419  dcb6 97            	ld	xl,a
7420  dcb7 58            	sllw	x
7421  dcb8 dec2aa        	ldw	x,(L633,x)
7422  dcbb fc            	jp	(x)
7423  dcbc               L7032:
7424                     ; 2142     case 0:  Pending_hostaddr4 = (uint8_t)temp; break;
7426  dcbc 7b07          	ld	a,(OFST+0,sp)
7427  dcbe c70037        	ld	_Pending_hostaddr4,a
7430  dcc1 204b          	jra	L5732
7431  dcc3               L1132:
7432                     ; 2143     case 1:  Pending_hostaddr3 = (uint8_t)temp; break;
7434  dcc3 7b07          	ld	a,(OFST+0,sp)
7435  dcc5 c70036        	ld	_Pending_hostaddr3,a
7438  dcc8 2044          	jra	L5732
7439  dcca               L3132:
7440                     ; 2144     case 2:  Pending_hostaddr2 = (uint8_t)temp; break;
7442  dcca 7b07          	ld	a,(OFST+0,sp)
7443  dccc c70035        	ld	_Pending_hostaddr2,a
7446  dccf 203d          	jra	L5732
7447  dcd1               L5132:
7448                     ; 2145     case 3:  Pending_hostaddr1 = (uint8_t)temp; break;
7450  dcd1 7b07          	ld	a,(OFST+0,sp)
7451  dcd3 c70034        	ld	_Pending_hostaddr1,a
7454  dcd6 2036          	jra	L5732
7455  dcd8               L7132:
7456                     ; 2146     case 4:  Pending_draddr4 = (uint8_t)temp; break;
7458  dcd8 7b07          	ld	a,(OFST+0,sp)
7459  dcda c70033        	ld	_Pending_draddr4,a
7462  dcdd 202f          	jra	L5732
7463  dcdf               L1232:
7464                     ; 2147     case 5:  Pending_draddr3 = (uint8_t)temp; break;
7466  dcdf 7b07          	ld	a,(OFST+0,sp)
7467  dce1 c70032        	ld	_Pending_draddr3,a
7470  dce4 2028          	jra	L5732
7471  dce6               L3232:
7472                     ; 2148     case 6:  Pending_draddr2 = (uint8_t)temp; break;
7474  dce6 7b07          	ld	a,(OFST+0,sp)
7475  dce8 c70031        	ld	_Pending_draddr2,a
7478  dceb 2021          	jra	L5732
7479  dced               L5232:
7480                     ; 2149     case 7:  Pending_draddr1 = (uint8_t)temp; break;
7482  dced 7b07          	ld	a,(OFST+0,sp)
7483  dcef c70030        	ld	_Pending_draddr1,a
7486  dcf2 201a          	jra	L5732
7487  dcf4               L7232:
7488                     ; 2150     case 8:  Pending_netmask4 = (uint8_t)temp; break;
7490  dcf4 7b07          	ld	a,(OFST+0,sp)
7491  dcf6 c7002f        	ld	_Pending_netmask4,a
7494  dcf9 2013          	jra	L5732
7495  dcfb               L1332:
7496                     ; 2151     case 9:  Pending_netmask3 = (uint8_t)temp; break;
7498  dcfb 7b07          	ld	a,(OFST+0,sp)
7499  dcfd c7002e        	ld	_Pending_netmask3,a
7502  dd00 200c          	jra	L5732
7503  dd02               L3332:
7504                     ; 2152     case 10: Pending_netmask2 = (uint8_t)temp; break;
7506  dd02 7b07          	ld	a,(OFST+0,sp)
7507  dd04 c7002d        	ld	_Pending_netmask2,a
7510  dd07 2005          	jra	L5732
7511  dd09               L5332:
7512                     ; 2153     case 11: Pending_netmask1 = (uint8_t)temp; break;
7514  dd09 7b07          	ld	a,(OFST+0,sp)
7515  dd0b c7002c        	ld	_Pending_netmask1,a
7518                     ; 2154     default: break;
7520  dd0e               L5732:
7521                     ; 2157 }
7524  dd0e 5b09          	addw	sp,#9
7525  dd10 81            	ret	
7618                     ; 2160 void SetPort(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3, uint8_t alpha4, uint8_t alpha5)
7618                     ; 2161 {
7619                     	switch	.text
7620  dd11               _SetPort:
7622  dd11 89            	pushw	x
7623  dd12 5209          	subw	sp,#9
7624       00000009      OFST:	set	9
7627                     ; 2174   temp = 0;
7629  dd14 5f            	clrw	x
7630  dd15 1f01          	ldw	(OFST-8,sp),x
7632                     ; 2175   invalid = 0;
7634  dd17 0f03          	clr	(OFST-6,sp)
7636                     ; 2178   if(alpha1 > '6') invalid = 1;
7638  dd19 7b0b          	ld	a,(OFST+2,sp)
7639  dd1b a137          	cp	a,#55
7640  dd1d 2506          	jrult	L1442
7643  dd1f a601          	ld	a,#1
7644  dd21 6b03          	ld	(OFST-6,sp),a
7647  dd23 201d          	jra	L3442
7648  dd25               L1442:
7649                     ; 2180     str[0] = (uint8_t)alpha1;
7651  dd25 6b04          	ld	(OFST-5,sp),a
7653                     ; 2181     str[1] = (uint8_t)alpha2;
7655  dd27 7b0e          	ld	a,(OFST+5,sp)
7656  dd29 6b05          	ld	(OFST-4,sp),a
7658                     ; 2182     str[2] = (uint8_t)alpha3;
7660  dd2b 7b0f          	ld	a,(OFST+6,sp)
7661  dd2d 6b06          	ld	(OFST-3,sp),a
7663                     ; 2183     str[3] = (uint8_t)alpha4;
7665  dd2f 7b10          	ld	a,(OFST+7,sp)
7666  dd31 6b07          	ld	(OFST-2,sp),a
7668                     ; 2184     str[4] = (uint8_t)alpha5;
7670  dd33 7b11          	ld	a,(OFST+8,sp)
7671  dd35 6b08          	ld	(OFST-1,sp),a
7673                     ; 2185     str[5] = 0;
7675  dd37 0f09          	clr	(OFST+0,sp)
7677                     ; 2186     temp = atoi(str);
7679  dd39 96            	ldw	x,sp
7680  dd3a 1c0004        	addw	x,#OFST-5
7681  dd3d cdf8d2        	call	_atoi
7683  dd40 1f01          	ldw	(OFST-8,sp),x
7685  dd42               L3442:
7686                     ; 2189   if(temp < 10) invalid = 1;
7688  dd42 a3000a        	cpw	x,#10
7689  dd45 2404          	jruge	L5442
7692  dd47 a601          	ld	a,#1
7693  dd49 6b03          	ld	(OFST-6,sp),a
7695  dd4b               L5442:
7696                     ; 2191   if(invalid == 0) { // Make change only if valid entry
7698  dd4b 7b03          	ld	a,(OFST-6,sp)
7699  dd4d 2603          	jrne	L7442
7700                     ; 2192     Pending_port = (uint16_t)temp;
7702  dd4f cf002a        	ldw	_Pending_port,x
7703  dd52               L7442:
7704                     ; 2194 }
7707  dd52 5b0b          	addw	sp,#11
7708  dd54 81            	ret	
7774                     ; 2197 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7774                     ; 2198 {
7775                     	switch	.text
7776  dd55               _SetMAC:
7778  dd55 89            	pushw	x
7779  dd56 5203          	subw	sp,#3
7780       00000003      OFST:	set	3
7783                     ; 2210   temp = 0;
7785                     ; 2211   invalid = 0;
7787  dd58 0f01          	clr	(OFST-2,sp)
7789                     ; 2214   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7791  dd5a 9f            	ld	a,xl
7792  dd5b a130          	cp	a,#48
7793  dd5d 250b          	jrult	L3152
7795  dd5f 9f            	ld	a,xl
7796  dd60 a13a          	cp	a,#58
7797  dd62 2406          	jruge	L3152
7800  dd64 7b05          	ld	a,(OFST+2,sp)
7801  dd66 a030          	sub	a,#48
7803  dd68 200c          	jp	LC028
7804  dd6a               L3152:
7805                     ; 2215   else if(alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7807  dd6a 7b05          	ld	a,(OFST+2,sp)
7808  dd6c a161          	cp	a,#97
7809  dd6e 250a          	jrult	L7152
7811  dd70 a167          	cp	a,#103
7812  dd72 2406          	jruge	L7152
7815  dd74 a057          	sub	a,#87
7816  dd76               LC028:
7817  dd76 6b05          	ld	(OFST+2,sp),a
7819  dd78 2004          	jra	L5152
7820  dd7a               L7152:
7821                     ; 2216   else invalid = 1; // If an invalid entry set indicator
7823  dd7a a601          	ld	a,#1
7824  dd7c 6b01          	ld	(OFST-2,sp),a
7826  dd7e               L5152:
7827                     ; 2218   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7829  dd7e 7b08          	ld	a,(OFST+5,sp)
7830  dd80 a130          	cp	a,#48
7831  dd82 2508          	jrult	L3252
7833  dd84 a13a          	cp	a,#58
7834  dd86 2404          	jruge	L3252
7837  dd88 a030          	sub	a,#48
7839  dd8a 200a          	jp	LC029
7840  dd8c               L3252:
7841                     ; 2219   else if(alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7843  dd8c a161          	cp	a,#97
7844  dd8e 250a          	jrult	L7252
7846  dd90 a167          	cp	a,#103
7847  dd92 2406          	jruge	L7252
7850  dd94 a057          	sub	a,#87
7851  dd96               LC029:
7852  dd96 6b08          	ld	(OFST+5,sp),a
7854  dd98 2004          	jra	L5252
7855  dd9a               L7252:
7856                     ; 2220   else invalid = 1; // If an invalid entry set indicator
7858  dd9a a601          	ld	a,#1
7859  dd9c 6b01          	ld	(OFST-2,sp),a
7861  dd9e               L5252:
7862                     ; 2222   if (invalid == 0) { // Change value only if valid entry
7864  dd9e 7b01          	ld	a,(OFST-2,sp)
7865  dda0 264a          	jrne	L3352
7866                     ; 2223     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7868  dda2 7b05          	ld	a,(OFST+2,sp)
7869  dda4 97            	ld	xl,a
7870  dda5 a610          	ld	a,#16
7871  dda7 42            	mul	x,a
7872  dda8 01            	rrwa	x,a
7873  dda9 1b08          	add	a,(OFST+5,sp)
7874  ddab 5f            	clrw	x
7875  ddac 97            	ld	xl,a
7876  ddad 1f02          	ldw	(OFST-1,sp),x
7878                     ; 2224     switch(itemnum)
7880  ddaf 7b04          	ld	a,(OFST+1,sp)
7882                     ; 2232     default: break;
7883  ddb1 2711          	jreq	L1542
7884  ddb3 4a            	dec	a
7885  ddb4 2715          	jreq	L3542
7886  ddb6 4a            	dec	a
7887  ddb7 2719          	jreq	L5542
7888  ddb9 4a            	dec	a
7889  ddba 271d          	jreq	L7542
7890  ddbc 4a            	dec	a
7891  ddbd 2721          	jreq	L1642
7892  ddbf 4a            	dec	a
7893  ddc0 2725          	jreq	L3642
7894  ddc2 2028          	jra	L3352
7895  ddc4               L1542:
7896                     ; 2226     case 0: Pending_uip_ethaddr1 = (uint8_t)temp; break;
7898  ddc4 7b03          	ld	a,(OFST+0,sp)
7899  ddc6 c70024        	ld	_Pending_uip_ethaddr1,a
7902  ddc9 2021          	jra	L3352
7903  ddcb               L3542:
7904                     ; 2227     case 1: Pending_uip_ethaddr2 = (uint8_t)temp; break;
7906  ddcb 7b03          	ld	a,(OFST+0,sp)
7907  ddcd c70025        	ld	_Pending_uip_ethaddr2,a
7910  ddd0 201a          	jra	L3352
7911  ddd2               L5542:
7912                     ; 2228     case 2: Pending_uip_ethaddr3 = (uint8_t)temp; break;
7914  ddd2 7b03          	ld	a,(OFST+0,sp)
7915  ddd4 c70026        	ld	_Pending_uip_ethaddr3,a
7918  ddd7 2013          	jra	L3352
7919  ddd9               L7542:
7920                     ; 2229     case 3: Pending_uip_ethaddr4 = (uint8_t)temp; break;
7922  ddd9 7b03          	ld	a,(OFST+0,sp)
7923  dddb c70027        	ld	_Pending_uip_ethaddr4,a
7926  ddde 200c          	jra	L3352
7927  dde0               L1642:
7928                     ; 2230     case 4: Pending_uip_ethaddr5 = (uint8_t)temp; break;
7930  dde0 7b03          	ld	a,(OFST+0,sp)
7931  dde2 c70028        	ld	_Pending_uip_ethaddr5,a
7934  dde5 2005          	jra	L3352
7935  dde7               L3642:
7936                     ; 2231     case 5: Pending_uip_ethaddr6 = (uint8_t)temp; break;
7938  dde7 7b03          	ld	a,(OFST+0,sp)
7939  dde9 c70029        	ld	_Pending_uip_ethaddr6,a
7942                     ; 2232     default: break;
7944  ddec               L3352:
7945                     ; 2235 }
7948  ddec 5b05          	addw	sp,#5
7949  ddee 81            	ret	
8051                     	switch	.bss
8052  0010               _OctetArray:
8053  0010 000000000000  	ds.b	11
8054                     	xdef	_OctetArray
8055                     	xref	_submit_changes
8056                     	xref	_ex_stored_devicename
8057                     	xref	_uip_ethaddr6
8058                     	xref	_uip_ethaddr5
8059                     	xref	_uip_ethaddr4
8060                     	xref	_uip_ethaddr3
8061                     	xref	_uip_ethaddr2
8062                     	xref	_uip_ethaddr1
8063                     	xref	_ex_stored_port
8064                     	xref	_ex_stored_netmask1
8065                     	xref	_ex_stored_netmask2
8066                     	xref	_ex_stored_netmask3
8067                     	xref	_ex_stored_netmask4
8068                     	xref	_ex_stored_draddr1
8069                     	xref	_ex_stored_draddr2
8070                     	xref	_ex_stored_draddr3
8071                     	xref	_ex_stored_draddr4
8072                     	xref	_ex_stored_hostaddr1
8073                     	xref	_ex_stored_hostaddr2
8074                     	xref	_ex_stored_hostaddr3
8075                     	xref	_ex_stored_hostaddr4
8076                     	xref	_Pending_uip_ethaddr6
8077                     	xref	_Pending_uip_ethaddr5
8078                     	xref	_Pending_uip_ethaddr4
8079                     	xref	_Pending_uip_ethaddr3
8080                     	xref	_Pending_uip_ethaddr2
8081                     	xref	_Pending_uip_ethaddr1
8082                     	xref	_Pending_port
8083                     	xref	_Pending_netmask1
8084                     	xref	_Pending_netmask2
8085                     	xref	_Pending_netmask3
8086                     	xref	_Pending_netmask4
8087                     	xref	_Pending_draddr1
8088                     	xref	_Pending_draddr2
8089                     	xref	_Pending_draddr3
8090                     	xref	_Pending_draddr4
8091                     	xref	_Pending_hostaddr1
8092                     	xref	_Pending_hostaddr2
8093                     	xref	_Pending_hostaddr3
8094                     	xref	_Pending_hostaddr4
8095                     	xref	_invert_output
8096                     	xref	_Relays_8to1
8097                     	xref	_Relays_16to9
8098                     	xref	_Port_Httpd
8099  001b               _current_webpage:
8100  001b 00            	ds.b	1
8101                     	xdef	_current_webpage
8102                     	xref	_atoi
8103                     	xref	_debugflash
8104                     	xref	_uip_flags
8105                     	xref	_uip_stat
8106                     	xref	_uip_conn
8107                     	xref	_uip_appdata
8108                     	xref	_htons
8109                     	xref	_uip_send
8110                     	xref	_uip_listen
8111                     	xdef	_SetMAC
8112                     	xdef	_SetPort
8113                     	xdef	_SetAddresses
8114                     	xdef	_GpioSetPin
8115                     	xdef	_GpioGetPin
8116                     	xdef	_HttpDCall
8117                     	xdef	_HttpDInit
8118                     	xdef	_reverse
8119                     	xdef	_emb_itoa
8120                     	xdef	_two_alpha_to_uint
8121                     	xdef	_three_alpha_to_uint
8122                     	switch	.const
8123  c2c2               L714:
8124  c2c2 436f6e6e6563  	dc.b	"Connection:close",13
8125  c2d3 0a00          	dc.b	10,0
8126  c2d5               L514:
8127  c2d5 436f6e74656e  	dc.b	"Content-Type:text/"
8128  c2e7 68746d6c0d    	dc.b	"html",13
8129  c2ec 0a00          	dc.b	10,0
8130  c2ee               L314:
8131  c2ee 436f6e74656e  	dc.b	"Content-Length:",0
8132  c2fe               L114:
8133  c2fe 0d0a00        	dc.b	13,10,0
8134  c301               L704:
8135  c301 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
8136                     	xref.b	c_lreg
8137                     	xref.b	c_x
8138                     	xref.b	c_y
8158                     	xref	c_uitolx
8159                     	xref	c_ludv
8160                     	xref	c_lumd
8161                     	xref	c_rtol
8162                     	xref	c_ltor
8163                     	xref	c_lzmp
8164                     	end
