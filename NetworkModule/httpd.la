   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     .const:	section	.text
  18  8080               L31_checked:
  19  8080 636865636b65  	dc.b	"checked",0
  20  8088               L51_g_HtmlPageDefault:
  21  8088 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
  22  809a 4c49432022    	dc.b	"LIC ",34
  23  809f 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
  24  80b1 2e3031205472  	dc.b	".01 Transitional//"
  25  80c3 454e22        	dc.b	"EN",34
  26  80c6 3e3c68746d6c  	dc.b	"><html><head><titl"
  27  80d8 653e52656c61  	dc.b	"e>Relay Control</t"
  28  80ea 69746c653e3c  	dc.b	"itle><style type='"
  29  80fc 746578742f63  	dc.b	"text/css'>.s0 { ba"
  30  810e 636b67726f75  	dc.b	"ckground-color: re"
  31  8120 643b207d2e73  	dc.b	"d; }.s1 { backgrou"
  32  8132 6e642d636f6c  	dc.b	"nd-color: green; }"
  33  8144 7464207b2074  	dc.b	"td { text-align: c"
  34  8156 656e7465723b  	dc.b	"enter; }.tclass { "
  35  8168 77696474683a  	dc.b	"width: 145px; }</s"
  36  817a 74796c653e3c  	dc.b	"tyle></head><"
  37  8187 626f64793e3c  	dc.b	"body><h1>Relay Con"
  38  8199 74726f6c3c2f  	dc.b	"trol</h1><form met"
  39  81ab 686f643d2750  	dc.b	"hod='POST' action="
  40  81bd 272f273e3c74  	dc.b	"'/'><table border="
  41  81cf 27317078273e  	dc.b	"'1px'><colgroup><c"
  42  81e1 6f6c20776964  	dc.b	"ol width='100px'><"
  43  81f3 636f6c207769  	dc.b	"col width='152px'>"
  44  8205 3c2f636f6c67  	dc.b	"</colgroup><tr><td"
  45  8217 3e4e616d653a  	dc.b	">Name:</td><td><in"
  46  8229 707574207479  	dc.b	"put type='text' na"
  47  823b 6d653d276130  	dc.b	"me='a00' class='tc"
  48  824d 6c6173732720  	dc.b	"lass' value='%a00x"
  49  825f 787878787878  	dc.b	"xxxxxxxxxxxxxxxxxx"
  50  8271 782720706174  	dc.b	"x' pattern='[0-9a-"
  51  8283 7a412d        	dc.b	"zA-"
  52  8286 5a2d5f2a2e5d  	dc.b	"Z-_*.]{1,20}' titl"
  53  8298 653d27312074  	dc.b	"e='1 to 20 letters"
  54  82aa 2c206e756d62  	dc.b	", numbers, and -_*"
  55  82bc 2e206e6f2073  	dc.b	". no spaces' maxle"
  56  82ce 6e6774683d27  	dc.b	"ngth='20' size='20"
  57  82e0 273e3c2f7464  	dc.b	"'></td></tr></tabl"
  58  82f2 653e3c746162  	dc.b	"e><table border='1"
  59  8304 7078273e3c63  	dc.b	"px'><colgroup><col"
  60  8316 207769647468  	dc.b	" width='100px'><co"
  61  8328 6c2077696474  	dc.b	"l width='30px'><co"
  62  833a 6c2077696474  	dc.b	"l width='120px'></"
  63  834c 636f6c67726f  	dc.b	"colgroup><tr><td><"
  64  835e 2f74643e3c74  	dc.b	"/td><td></td><td>S"
  65  8370 45543c2f7464  	dc.b	"ET</td></tr><tr><t"
  66  8382 643e52        	dc.b	"d>R"
  67  8385 656c61793031  	dc.b	"elay01</td><td cla"
  68  8397 73733d277325  	dc.b	"ss='s%i00'></td><t"
  69  83a9 643e3c696e70  	dc.b	"d><input type='rad"
  70  83bb 696f27206964  	dc.b	"io' id='relay01on'"
  71  83cd 206e616d653d  	dc.b	" name='o00' value="
  72  83df 27312720256f  	dc.b	"'1' %o00><label fo"
  73  83f1 723d2772656c  	dc.b	"r='relay01on'>ON</"
  74  8403 6c6162656c3e  	dc.b	"label><input type="
  75  8415 27726164696f  	dc.b	"'radio' id='relay0"
  76  8427 316f66662720  	dc.b	"1off' name='o00' v"
  77  8439 616c75653d27  	dc.b	"alue='0' %p00><lab"
  78  844b 656c20666f72  	dc.b	"el for='relay01off"
  79  845d 273e4f46463c  	dc.b	"'>OFF</label></td>"
  80  846f 3c2f74723e3c  	dc.b	"</tr><tr><td>Relay"
  81  8481 30323c        	dc.b	"02<"
  82  8484 2f74643e3c74  	dc.b	"/td><td class='s%i"
  83  8496 3031273e3c2f  	dc.b	"01'></td><td><inpu"
  84  84a8 742074797065  	dc.b	"t type='radio' id="
  85  84ba 2772656c6179  	dc.b	"'relay02on' name='"
  86  84cc 6f3031272076  	dc.b	"o01' value='1' %o0"
  87  84de 313e3c6c6162  	dc.b	"1><label for='rela"
  88  84f0 7930326f6e27  	dc.b	"y02on'>ON</label><"
  89  8502 696e70757420  	dc.b	"input type='radio'"
  90  8514 2069643d2772  	dc.b	" id='relay02off' n"
  91  8526 616d653d276f  	dc.b	"ame='o01' value='0"
  92  8538 272025703031  	dc.b	"' %p01><label for="
  93  854a 2772656c6179  	dc.b	"'relay02off'>OFF</"
  94  855c 6c6162656c3e  	dc.b	"label></td></tr><t"
  95  856e 723e3c74643e  	dc.b	"r><td>Relay03</td>"
  96  8580 3c7464        	dc.b	"<td"
  97  8583 20636c617373  	dc.b	" class='s%i02'></t"
  98  8595 643e3c74643e  	dc.b	"d><td><input type="
  99  85a7 27726164696f  	dc.b	"'radio' id='relay0"
 100  85b9 336f6e27206e  	dc.b	"3on' name='o02' va"
 101  85cb 6c75653d2731  	dc.b	"lue='1' %o02><labe"
 102  85dd 6c20666f723d  	dc.b	"l for='relay03on'>"
 103  85ef 4f4e3c2f6c61  	dc.b	"ON</label><input t"
 104  8601 7970653d2772  	dc.b	"ype='radio' id='re"
 105  8613 6c617930336f  	dc.b	"lay03off' name='o0"
 106  8625 32272076616c  	dc.b	"2' value='0' %p02>"
 107  8637 3c6c6162656c  	dc.b	"<label for='relay0"
 108  8649 336f6666273e  	dc.b	"3off'>OFF</label><"
 109  865b 2f74643e3c2f  	dc.b	"/td></tr><tr><td>R"
 110  866d 656c61793034  	dc.b	"elay04</td><td cla"
 111  867f 73733d        	dc.b	"ss="
 112  8682 277325693033  	dc.b	"'s%i03'></td><td><"
 113  8694 696e70757420  	dc.b	"input type='radio'"
 114  86a6 2069643d2772  	dc.b	" id='relay04on' na"
 115  86b8 6d653d276f30  	dc.b	"me='o03' value='1'"
 116  86ca 20256f30333e  	dc.b	" %o03><label for='"
 117  86dc 72656c617930  	dc.b	"relay04on'>ON</lab"
 118  86ee 656c3e3c696e  	dc.b	"el><input type='ra"
 119  8700 64696f272069  	dc.b	"dio' id='relay04of"
 120  8712 6627206e616d  	dc.b	"f' name='o03' valu"
 121  8724 653d27302720  	dc.b	"e='0' %p03><label "
 122  8736 666f723d2772  	dc.b	"for='relay04off'>O"
 123  8748 46463c2f6c61  	dc.b	"FF</label></td></t"
 124  875a 723e3c74723e  	dc.b	"r><tr><td>Relay05<"
 125  876c 2f74643e3c74  	dc.b	"/td><td class='s%i"
 126  877e 303427        	dc.b	"04'"
 127  8781 3e3c2f74643e  	dc.b	"></td><td><input t"
 128  8793 7970653d2772  	dc.b	"ype='radio' id='re"
 129  87a5 6c617930356f  	dc.b	"lay05on' name='o04"
 130  87b7 272076616c75  	dc.b	"' value='1' %o04><"
 131  87c9 6c6162656c20  	dc.b	"label for='relay05"
 132  87db 6f6e273e4f4e  	dc.b	"on'>ON</label><inp"
 133  87ed 757420747970  	dc.b	"ut type='radio' id"
 134  87ff 3d2772656c61  	dc.b	"='relay05off' name"
 135  8811 3d276f303427  	dc.b	"='o04' value='0' %"
 136  8823 7030343e3c6c  	dc.b	"p04><label for='re"
 137  8835 6c617930356f  	dc.b	"lay05off'>OFF</lab"
 138  8847 656c3e3c2f74  	dc.b	"el></td></tr><tr><"
 139  8859 74643e52656c  	dc.b	"td>Relay06</td><td"
 140  886b 20636c617373  	dc.b	" class='s%i05'></t"
 141  887d 643e3c        	dc.b	"d><"
 142  8880 74643e3c696e  	dc.b	"td><input type='ra"
 143  8892 64696f272069  	dc.b	"dio' id='relay06on"
 144  88a4 27206e616d65  	dc.b	"' name='o05' value"
 145  88b6 3d2731272025  	dc.b	"='1' %o05><label f"
 146  88c8 6f723d277265  	dc.b	"or='relay06on'>ON<"
 147  88da 2f6c6162656c  	dc.b	"/label><input type"
 148  88ec 3d2772616469  	dc.b	"='radio' id='relay"
 149  88fe 30366f666627  	dc.b	"06off' name='o05' "
 150  8910 76616c75653d  	dc.b	"value='0' %p05><la"
 151  8922 62656c20666f  	dc.b	"bel for='relay06of"
 152  8934 66273e4f4646  	dc.b	"f'>OFF</label></td"
 153  8946 3e3c2f74723e  	dc.b	"></tr><tr><td>Rela"
 154  8958 7930373c2f74  	dc.b	"y07</td><td class="
 155  896a 277325693036  	dc.b	"'s%i06'></td><td><"
 156  897c 696e70        	dc.b	"inp"
 157  897f 757420747970  	dc.b	"ut type='radio' id"
 158  8991 3d2772656c61  	dc.b	"='relay07on' name="
 159  89a3 276f30362720  	dc.b	"'o06' value='1' %o"
 160  89b5 30363e3c6c61  	dc.b	"06><label for='rel"
 161  89c7 617930376f6e  	dc.b	"ay07on'>ON</label>"
 162  89d9 3c696e707574  	dc.b	"<input type='radio"
 163  89eb 272069643d27  	dc.b	"' id='relay07off' "
 164  89fd 6e616d653d27  	dc.b	"name='o06' value='"
 165  8a0f 302720257030  	dc.b	"0' %p06><label for"
 166  8a21 3d2772656c61  	dc.b	"='relay07off'>OFF<"
 167  8a33 2f6c6162656c  	dc.b	"/label></td></tr><"
 168  8a45 74723e3c7464  	dc.b	"tr><td>Relay08</td"
 169  8a57 3e3c74642063  	dc.b	"><td class='s%i07'"
 170  8a69 3e3c2f74643e  	dc.b	"></td><td><input t"
 171  8a7b 797065        	dc.b	"ype"
 172  8a7e 3d2772616469  	dc.b	"='radio' id='relay"
 173  8a90 30386f6e2720  	dc.b	"08on' name='o07' v"
 174  8aa2 616c75653d27  	dc.b	"alue='1' %o07><lab"
 175  8ab4 656c20666f72  	dc.b	"el for='relay08on'"
 176  8ac6 3e4f4e3c2f6c  	dc.b	">ON</label><input "
 177  8ad8 747970653d27  	dc.b	"type='radio' id='r"
 178  8aea 656c61793038  	dc.b	"elay08off' name='o"
 179  8afc 303727207661  	dc.b	"07' value='0' %p07"
 180  8b0e 3e3c6c616265  	dc.b	"><label for='relay"
 181  8b20 30386f666627  	dc.b	"08off'>OFF</label>"
 182  8b32 3c2f74643e3c  	dc.b	"</td></tr><tr><td>"
 183  8b44 52656c617930  	dc.b	"Relay09</td><td cl"
 184  8b56 6173733d2773  	dc.b	"ass='s%i08'></td><"
 185  8b68 74643e3c696e  	dc.b	"td><input type='ra"
 186  8b7a 64696f        	dc.b	"dio"
 187  8b7d 272069643d27  	dc.b	"' id='relay09on' n"
 188  8b8f 616d653d276f  	dc.b	"ame='o08' value='1"
 189  8ba1 2720256f3038  	dc.b	"' %o08><label for="
 190  8bb3 2772656c6179  	dc.b	"'relay09on'>ON</la"
 191  8bc5 62656c3e3c69  	dc.b	"bel><input type='r"
 192  8bd7 6164696f2720  	dc.b	"adio' id='relay09o"
 193  8be9 666627206e61  	dc.b	"ff' name='o08' val"
 194  8bfb 75653d273027  	dc.b	"ue='0' %p08><label"
 195  8c0d 20666f723d27  	dc.b	" for='relay09off'>"
 196  8c1f 4f46463c2f6c  	dc.b	"OFF</label></td></"
 197  8c31 74723e3c7472  	dc.b	"tr><tr><td>Relay10"
 198  8c43 3c2f74643e3c  	dc.b	"</td><td class='s%"
 199  8c55 693039273e3c  	dc.b	"i09'></td><td><inp"
 200  8c67 757420747970  	dc.b	"ut type='radio' id"
 201  8c79 3d2772        	dc.b	"='r"
 202  8c7c 656c61793130  	dc.b	"elay10on' name='o0"
 203  8c8e 39272076616c  	dc.b	"9' value='1' %o09>"
 204  8ca0 3c6c6162656c  	dc.b	"<label for='relay1"
 205  8cb2 306f6e273e4f  	dc.b	"0on'>ON</label><in"
 206  8cc4 707574207479  	dc.b	"put type='radio' i"
 207  8cd6 643d2772656c  	dc.b	"d='relay10off' nam"
 208  8ce8 653d276f3039  	dc.b	"e='o09' value='0' "
 209  8cfa 257030393e3c  	dc.b	"%p09><label for='r"
 210  8d0c 656c61793130  	dc.b	"elay10off'>OFF</la"
 211  8d1e 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
 212  8d30 3c74643e5265  	dc.b	"<td>Relay11</td><t"
 213  8d42 6420636c6173  	dc.b	"d class='s%i10'></"
 214  8d54 74643e3c7464  	dc.b	"td><td><input type"
 215  8d66 3d2772616469  	dc.b	"='radio' id='relay"
 216  8d78 31316f        	dc.b	"11o"
 217  8d7b 6e27206e616d  	dc.b	"n' name='o10' valu"
 218  8d8d 653d27312720  	dc.b	"e='1' %o10><label "
 219  8d9f 666f723d2772  	dc.b	"for='relay11on'>ON"
 220  8db1 3c2f6c616265  	dc.b	"</label><input typ"
 221  8dc3 653d27726164  	dc.b	"e='radio' id='rela"
 222  8dd5 7931316f6666  	dc.b	"y11off' name='o10'"
 223  8de7 2076616c7565  	dc.b	" value='0' %p10><l"
 224  8df9 6162656c2066  	dc.b	"abel for='relay11o"
 225  8e0b 6666273e4f46  	dc.b	"ff'>OFF</label></t"
 226  8e1d 643e3c2f7472  	dc.b	"d></tr><tr><td>Rel"
 227  8e2f 617931323c2f  	dc.b	"ay12</td><td class"
 228  8e41 3d2773256931  	dc.b	"='s%i11'></td><td>"
 229  8e53 3c696e707574  	dc.b	"<input type='radio"
 230  8e65 272069643d27  	dc.b	"' id='relay12on' n"
 231  8e77 616d65        	dc.b	"ame"
 232  8e7a 3d276f313127  	dc.b	"='o11' value='1' %"
 233  8e8c 6f31313e3c6c  	dc.b	"o11><label for='re"
 234  8e9e 6c617931326f  	dc.b	"lay12on'>ON</label"
 235  8eb0 3e3c696e7075  	dc.b	"><input type='radi"
 236  8ec2 6f272069643d  	dc.b	"o' id='relay12off'"
 237  8ed4 206e616d653d  	dc.b	" name='o11' value="
 238  8ee6 273027202570  	dc.b	"'0' %p11><label fo"
 239  8ef8 723d2772656c  	dc.b	"r='relay12off'>OFF"
 240  8f0a 3c2f6c616265  	dc.b	"</label></td></tr>"
 241  8f1c 3c74723e3c74  	dc.b	"<tr><td>Relay13</t"
 242  8f2e 643e3c746420  	dc.b	"d><td class='s%i12"
 243  8f40 273e3c2f7464  	dc.b	"'></td><td><input "
 244  8f52 747970653d27  	dc.b	"type='radio' id='r"
 245  8f64 656c61793133  	dc.b	"elay13on' name='o1"
 246  8f76 322720        	dc.b	"2' "
 247  8f79 76616c75653d  	dc.b	"value='1' %o12><la"
 248  8f8b 62656c20666f  	dc.b	"bel for='relay13on"
 249  8f9d 273e4f4e3c2f  	dc.b	"'>ON</label><input"
 250  8faf 20747970653d  	dc.b	" type='radio' id='"
 251  8fc1 72656c617931  	dc.b	"relay13off' name='"
 252  8fd3 6f3132272076  	dc.b	"o12' value='0' %p1"
 253  8fe5 323e3c6c6162  	dc.b	"2><label for='rela"
 254  8ff7 7931336f6666  	dc.b	"y13off'>OFF</label"
 255  9009 3e3c2f74643e  	dc.b	"></td></tr><tr><td"
 256  901b 3e52656c6179  	dc.b	">Relay14</td><td c"
 257  902d 6c6173733d27  	dc.b	"lass='s%i13'></td>"
 258  903f 3c74643e3c69  	dc.b	"<td><input type='r"
 259  9051 6164696f2720  	dc.b	"adio' id='relay14o"
 260  9063 6e27206e616d  	dc.b	"n' name='o13' valu"
 261  9075 653d27        	dc.b	"e='"
 262  9078 312720256f31  	dc.b	"1' %o13><label for"
 263  908a 3d2772656c61  	dc.b	"='relay14on'>ON</l"
 264  909c 6162656c3e3c  	dc.b	"abel><input type='"
 265  90ae 726164696f27  	dc.b	"radio' id='relay14"
 266  90c0 6f666627206e  	dc.b	"off' name='o13' va"
 267  90d2 6c75653d2730  	dc.b	"lue='0' %p13><labe"
 268  90e4 6c20666f723d  	dc.b	"l for='relay14off'"
 269  90f6 3e4f46463c2f  	dc.b	">OFF</label></td><"
 270  9108 2f74723e3c74  	dc.b	"/tr><tr><td>Relay1"
 271  911a 353c2f74643e  	dc.b	"5</td><td class='s"
 272  912c 25693134273e  	dc.b	"%i14'></td><td><in"
 273  913e 707574207479  	dc.b	"put type='radio' i"
 274  9150 643d2772656c  	dc.b	"d='relay15on' name"
 275  9162 3d276f313427  	dc.b	"='o14' value='1' %"
 276  9174 6f3134        	dc.b	"o14"
 277  9177 3e3c6c616265  	dc.b	"><label for='relay"
 278  9189 31356f6e273e  	dc.b	"15on'>ON</label><i"
 279  919b 6e7075742074  	dc.b	"nput type='radio' "
 280  91ad 69643d277265  	dc.b	"id='relay15off' na"
 281  91bf 6d653d276f31  	dc.b	"me='o14' value='0'"
 282  91d1 20257031343e  	dc.b	" %p14><label for='"
 283  91e3 72656c617931  	dc.b	"relay15off'>OFF</l"
 284  91f5 6162656c3e3c  	dc.b	"abel></td></tr><tr"
 285  9207 3e3c74643e52  	dc.b	"><td>Relay16</td><"
 286  9219 746420636c61  	dc.b	"td class='s%i15'><"
 287  922b 2f74643e3c74  	dc.b	"/td><td><input typ"
 288  923d 653d27726164  	dc.b	"e='radio' id='rela"
 289  924f 7931366f6e27  	dc.b	"y16on' name='o15' "
 290  9261 76616c75653d  	dc.b	"value='1' %o15><la"
 291  9273 62656c        	dc.b	"bel"
 292  9276 20666f723d27  	dc.b	" for='relay16on'>O"
 293  9288 4e3c2f6c6162  	dc.b	"N</label><input ty"
 294  929a 70653d277261  	dc.b	"pe='radio' id='rel"
 295  92ac 617931366f66  	dc.b	"ay16off' name='o15"
 296  92be 272076616c75  	dc.b	"' value='0' %p15><"
 297  92d0 6c6162656c20  	dc.b	"label for='relay16"
 298  92e2 6f6666273e4f  	dc.b	"off'>OFF</label></"
 299  92f4 74643e3c2f74  	dc.b	"td></tr><tr><td>In"
 300  9306 766572743c2f  	dc.b	"vert</td><td></td>"
 301  9318 3c74643e3c69  	dc.b	"<td><input type='r"
 302  932a 6164696f2720  	dc.b	"adio' id='invertOn"
 303  933c 27206e616d65  	dc.b	"' name='g00' value"
 304  934e 3d2731272025  	dc.b	"='1' %g00><label f"
 305  9360 6f723d27696e  	dc.b	"or='invertOn'>ON</"
 306  9372 6c6162        	dc.b	"lab"
 307  9375 656c3e3c696e  	dc.b	"el><input type='ra"
 308  9387 64696f272069  	dc.b	"dio' id='invertOff"
 309  9399 27206e616d65  	dc.b	"' name='g00' value"
 310  93ab 3d2730272025  	dc.b	"='0' %h00><label f"
 311  93bd 6f723d27696e  	dc.b	"or='invertOff'>OFF"
 312  93cf 3c2f6c616265  	dc.b	"</label></td></tr>"
 313  93e1 3c2f7461626c  	dc.b	"</table><button ty"
 314  93f3 70653d277375  	dc.b	"pe='submit' title="
 315  9405 275361766573  	dc.b	"'Saves your change"
 316  9417 73202d20646f  	dc.b	"s - does not resta"
 317  9429 727420746865  	dc.b	"rt the Network Mod"
 318  943b 756c65273e53  	dc.b	"ule'>Save</button>"
 319  944d 3c627574746f  	dc.b	"<button type='rese"
 320  945f 742720746974  	dc.b	"t' title='Un-does "
 321  9471 616e79        	dc.b	"any"
 322  9474 206368616e67  	dc.b	" changes that have"
 323  9486 206e6f742062  	dc.b	" not been saved'>U"
 324  9498 6e646f20416c  	dc.b	"ndo All</button></"
 325  94aa 666f726d3e3c  	dc.b	"form><a href='%x00"
 326  94bc 687474703a2f  	dc.b	"http://192.168.001"
 327  94ce 2e3030343a30  	dc.b	".004:08080/61'><bu"
 328  94e0 74746f6e2074  	dc.b	"tton title='Save f"
 329  94f2 697273742120  	dc.b	"irst! This button "
 330  9504 77696c6c206e  	dc.b	"will not save your"
 331  9516 206368616e67  	dc.b	" changes'>Address "
 332  9528 53657474696e  	dc.b	"Settings</button><"
 333  953a 2f613e3c6120  	dc.b	"/a><a href='%x00ht"
 334  954c 74703a2f2f31  	dc.b	"tp://192.168.001.0"
 335  955e 30343a303830  	dc.b	"04:08080/66'><butt"
 336  9570 6f6e20        	dc.b	"on "
 337  9573 7469746c653d  	dc.b	"title='Save first!"
 338  9585 205468697320  	dc.b	" This button will "
 339  9597 6e6f74207361  	dc.b	"not save your chan"
 340  95a9 676573273e4e  	dc.b	"ges'>Network Stati"
 341  95bb 73746963733c  	dc.b	"stics</button></a>"
 342  95cd 3c6120687265  	dc.b	"<a href='%x00http:"
 343  95df 2f2f3139322e  	dc.b	"//192.168.001.004:"
 344  95f1 30383038302f  	dc.b	"08080/63'><button "
 345  9603 7469746c653d  	dc.b	"title='Save first!"
 346  9615 205468697320  	dc.b	" This button will "
 347  9627 6e6f74207361  	dc.b	"not save your chan"
 348  9639 676573273e48  	dc.b	"ges'>Help</button>"
 349  964b 3c2f613e3c2f  	dc.b	"</a></body></html>",0
 350  965e               L71_g_HtmlPageAddress:
 351  965e 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
 352  9670 4c49432022    	dc.b	"LIC ",34
 353  9675 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
 354  9687 2e3031205472  	dc.b	".01 Transitional//"
 355  9699 454e22        	dc.b	"EN",34
 356  969c 3e3c68746d6c  	dc.b	"><html><head><titl"
 357  96ae 653e41646472  	dc.b	"e>Address Settings"
 358  96c0 3c2f7469746c  	dc.b	"</title><style typ"
 359  96d2 653d27746578  	dc.b	"e='text/css'>td { "
 360  96e4 746578742d61  	dc.b	"text-align: center"
 361  96f6 3b207d2e7463  	dc.b	"; }.tclass { width"
 362  9708 3a2032357078  	dc.b	": 25px; }.tclass1 "
 363  971a 7b2077696474  	dc.b	"{ width: 30px; }.t"
 364  972c 636c61737332  	dc.b	"class2 { width: 46"
 365  973e 70783b207d3c  	dc.b	"px; }</style></hea"
 366  9750 643e3c626f64  	dc.b	"d><body><h1>A"
 367  975d 646472657373  	dc.b	"ddress Settings</h"
 368  976f 313e3c666f72  	dc.b	"1><form method='PO"
 369  9781 535427206163  	dc.b	"ST' action='/'><ta"
 370  9793 626c6520626f  	dc.b	"ble border='1px'><"
 371  97a5 636f6c67726f  	dc.b	"colgroup><col widt"
 372  97b7 683d27313030  	dc.b	"h='100px'><col wid"
 373  97c9 74683d273435  	dc.b	"th='45px'><col wid"
 374  97db 74683d273435  	dc.b	"th='45px'><col wid"
 375  97ed 74683d273435  	dc.b	"th='45px'><col wid"
 376  97ff 74683d273434  	dc.b	"th='44px'></colgro"
 377  9811 75703e3c7472  	dc.b	"up><tr><td>IP Addr"
 378  9823 3c2f74643e3c  	dc.b	"</td><td><input ty"
 379  9835 70653d277465  	dc.b	"pe='text' name='b0"
 380  9847 302720636c61  	dc.b	"0' class='tclass1'"
 381  9859 207661        	dc.b	" va"
 382  985c 6c75653d2725  	dc.b	"lue='%b00' pattern"
 383  986e 3d275b302d39  	dc.b	"='[0-9]{3}' title="
 384  9880 275468726565  	dc.b	"'Three digits from"
 385  9892 203030302074  	dc.b	" 000 to 255' maxle"
 386  98a4 6e6774683d27  	dc.b	"ngth='3' size='3'>"
 387  98b6 3c2f74643e3c  	dc.b	"</td><td><input ty"
 388  98c8 70653d277465  	dc.b	"pe='text' name='b0"
 389  98da 312720636c61  	dc.b	"1' class='tclass1'"
 390  98ec 2076616c7565  	dc.b	" value='%b01' patt"
 391  98fe 65726e3d275b  	dc.b	"ern='[0-9]{3}' tit"
 392  9910 6c653d275468  	dc.b	"le='Three digits f"
 393  9922 726f6d203030  	dc.b	"rom 000 to 255' ma"
 394  9934 786c656e6774  	dc.b	"xlength='3' size='"
 395  9946 33273e3c2f74  	dc.b	"3'></td><td><input"
 396  9958 207479        	dc.b	" ty"
 397  995b 70653d277465  	dc.b	"pe='text' name='b0"
 398  996d 322720636c61  	dc.b	"2' class='tclass1'"
 399  997f 2076616c7565  	dc.b	" value='%b02' patt"
 400  9991 65726e3d275b  	dc.b	"ern='[0-9]{3}' tit"
 401  99a3 6c653d275468  	dc.b	"le='Three digits f"
 402  99b5 726f6d203030  	dc.b	"rom 000 to 255' ma"
 403  99c7 786c656e6774  	dc.b	"xlength='3' size='"
 404  99d9 33273e3c2f74  	dc.b	"3'></td><td><input"
 405  99eb 20747970653d  	dc.b	" type='text' name="
 406  99fd 276230332720  	dc.b	"'b03' class='tclas"
 407  9a0f 733127207661  	dc.b	"s1' value='%b03' p"
 408  9a21 61747465726e  	dc.b	"attern='[0-9]{3}' "
 409  9a33 7469746c653d  	dc.b	"title='Three digit"
 410  9a45 732066726f6d  	dc.b	"s from 000 to 255'"
 411  9a57 206d61        	dc.b	" ma"
 412  9a5a 786c656e6774  	dc.b	"xlength='3' size='"
 413  9a6c 33273e3c2f74  	dc.b	"3'></td></tr><tr><"
 414  9a7e 74643e476174  	dc.b	"td>Gateway</td><td"
 415  9a90 3e3c696e7075  	dc.b	"><input type='text"
 416  9aa2 27206e616d65  	dc.b	"' name='b04' class"
 417  9ab4 3d2774636c61  	dc.b	"='tclass1' value='"
 418  9ac6 256230342720  	dc.b	"%b04' pattern='[0-"
 419  9ad8 395d7b337d27  	dc.b	"9]{3}' title='Thre"
 420  9aea 652064696769  	dc.b	"e digits from 000 "
 421  9afc 746f20323535  	dc.b	"to 255' maxlength="
 422  9b0e 273327207369  	dc.b	"'3' size='3'></td>"
 423  9b20 3c74643e3c69  	dc.b	"<td><input type='t"
 424  9b32 65787427206e  	dc.b	"ext' name='b05' cl"
 425  9b44 6173733d2774  	dc.b	"ass='tclass1' valu"
 426  9b56 653d27        	dc.b	"e='"
 427  9b59 256230352720  	dc.b	"%b05' pattern='[0-"
 428  9b6b 395d7b337d27  	dc.b	"9]{3}' title='Thre"
 429  9b7d 652064696769  	dc.b	"e digits from 000 "
 430  9b8f 746f20323535  	dc.b	"to 255' maxlength="
 431  9ba1 273327207369  	dc.b	"'3' size='3'></td>"
 432  9bb3 3c74643e3c69  	dc.b	"<td><input type='t"
 433  9bc5 65787427206e  	dc.b	"ext' name='b06' cl"
 434  9bd7 6173733d2774  	dc.b	"ass='tclass1' valu"
 435  9be9 653d27256230  	dc.b	"e='%b06' pattern='"
 436  9bfb 5b302d395d7b  	dc.b	"[0-9]{3}' title='T"
 437  9c0d 687265652064  	dc.b	"hree digits from 0"
 438  9c1f 303020746f20  	dc.b	"00 to 255' maxleng"
 439  9c31 74683d273327  	dc.b	"th='3' size='3'></"
 440  9c43 74643e3c7464  	dc.b	"td><td><input type"
 441  9c55 3d2774        	dc.b	"='t"
 442  9c58 65787427206e  	dc.b	"ext' name='b07' cl"
 443  9c6a 6173733d2774  	dc.b	"ass='tclass1' valu"
 444  9c7c 653d27256230  	dc.b	"e='%b07' pattern='"
 445  9c8e 5b302d395d7b  	dc.b	"[0-9]{3}' title='T"
 446  9ca0 687265652064  	dc.b	"hree digits from 0"
 447  9cb2 303020746f20  	dc.b	"00 to 255' maxleng"
 448  9cc4 74683d273327  	dc.b	"th='3' size='3'></"
 449  9cd6 74643e3c2f74  	dc.b	"td></tr><tr><td>Ne"
 450  9ce8 746d61736b3c  	dc.b	"tmask</td><td><inp"
 451  9cfa 757420747970  	dc.b	"ut type='text' nam"
 452  9d0c 653d27623038  	dc.b	"e='b08' class='tcl"
 453  9d1e 617373312720  	dc.b	"ass1' value='%b08'"
 454  9d30 207061747465  	dc.b	" pattern='[0-9]{3}"
 455  9d42 27207469746c  	dc.b	"' title='Three dig"
 456  9d54 697473        	dc.b	"its"
 457  9d57 2066726f6d20  	dc.b	" from 000 to 255' "
 458  9d69 6d61786c656e  	dc.b	"maxlength='3' size"
 459  9d7b 3d2733273e3c  	dc.b	"='3'></td><td><inp"
 460  9d8d 757420747970  	dc.b	"ut type='text' nam"
 461  9d9f 653d27623039  	dc.b	"e='b09' class='tcl"
 462  9db1 617373312720  	dc.b	"ass1' value='%b09'"
 463  9dc3 207061747465  	dc.b	" pattern='[0-9]{3}"
 464  9dd5 27207469746c  	dc.b	"' title='Three dig"
 465  9de7 697473206672  	dc.b	"its from 000 to 25"
 466  9df9 3527206d6178  	dc.b	"5' maxlength='3' s"
 467  9e0b 697a653d2733  	dc.b	"ize='3'></td><td><"
 468  9e1d 696e70757420  	dc.b	"input type='text' "
 469  9e2f 6e616d653d27  	dc.b	"name='b10' class='"
 470  9e41 74636c617373  	dc.b	"tclass1' value='%b"
 471  9e53 313027        	dc.b	"10'"
 472  9e56 207061747465  	dc.b	" pattern='[0-9]{3}"
 473  9e68 27207469746c  	dc.b	"' title='Three dig"
 474  9e7a 697473206672  	dc.b	"its from 000 to 25"
 475  9e8c 3527206d6178  	dc.b	"5' maxlength='3' s"
 476  9e9e 697a653d2733  	dc.b	"ize='3'></td><td><"
 477  9eb0 696e70757420  	dc.b	"input type='text' "
 478  9ec2 6e616d653d27  	dc.b	"name='b11' class='"
 479  9ed4 74636c617373  	dc.b	"tclass1' value='%b"
 480  9ee6 313127207061  	dc.b	"11' pattern='[0-9]"
 481  9ef8 7b337d272074  	dc.b	"{3}' title='Three "
 482  9f0a 646967697473  	dc.b	"digits from 000 to"
 483  9f1c 203235352720  	dc.b	" 255' maxlength='3"
 484  9f2e 272073697a65  	dc.b	"' size='3'></td></"
 485  9f40 74723e3c7472  	dc.b	"tr><tr><td>Port   "
 486  9f52 3c2f74        	dc.b	"</t"
 487  9f55 643e3c74643e  	dc.b	"d><td><input type="
 488  9f67 277465787427  	dc.b	"'text' name='c00' "
 489  9f79 636c6173733d  	dc.b	"class='tclass2' va"
 490  9f8b 6c75653d2725  	dc.b	"lue='%c00' pattern"
 491  9f9d 3d275b302d39  	dc.b	"='[0-9]{5}' title="
 492  9faf 274669766520  	dc.b	"'Five digits from "
 493  9fc1 303030303020  	dc.b	"00000 to 65536' ma"
 494  9fd3 786c656e6774  	dc.b	"xlength='5' size='"
 495  9fe5 35273e3c2f74  	dc.b	"5'></td></tr></tab"
 496  9ff7 6c653e3c7461  	dc.b	"le><table border='"
 497  a009 317078273e3c  	dc.b	"1px'><colgroup><co"
 498  a01b 6c2077696474  	dc.b	"l width='100px'><c"
 499  a02d 6f6c20776964  	dc.b	"ol width='30px'><c"
 500  a03f 6f6c20776964  	dc.b	"ol width='30px'><c"
 501  a051 6f6c20        	dc.b	"ol "
 502  a054 77696474683d  	dc.b	"width='30px'><col "
 503  a066 77696474683d  	dc.b	"width='30px'><col "
 504  a078 77696474683d  	dc.b	"width='30px'><col "
 505  a08a 77696474683d  	dc.b	"width='30px'></col"
 506  a09c 67726f75703e  	dc.b	"group><tr><td>MAC "
 507  a0ae 416464726573  	dc.b	"Address</td><td><i"
 508  a0c0 6e7075742074  	dc.b	"nput type='text' n"
 509  a0d2 616d653d2764  	dc.b	"ame='d00' class='t"
 510  a0e4 636c61737327  	dc.b	"class' value='%d00"
 511  a0f6 272070617474  	dc.b	"' pattern='[0-9a-f"
 512  a108 5d7b327d2720  	dc.b	"]{2}' title='Two h"
 513  a11a 657820646967  	dc.b	"ex digits from 00 "
 514  a12c 746f20666627  	dc.b	"to ff' maxlength='"
 515  a13e 32272073697a  	dc.b	"2' size='2'></td><"
 516  a150 74643e        	dc.b	"td>"
 517  a153 3c696e707574  	dc.b	"<input type='text'"
 518  a165 206e616d653d  	dc.b	" name='d01' class="
 519  a177 2774636c6173  	dc.b	"'tclass' value='%d"
 520  a189 303127207061  	dc.b	"01' pattern='[0-9a"
 521  a19b 2d665d7b327d  	dc.b	"-f]{2}' title='Two"
 522  a1ad 206865782064  	dc.b	" hex digits from 0"
 523  a1bf 3020746f2066  	dc.b	"0 to ff' maxlength"
 524  a1d1 3d2732272073  	dc.b	"='2' size='2'></td"
 525  a1e3 3e3c74643e3c  	dc.b	"><td><input type='"
 526  a1f5 746578742720  	dc.b	"text' name='d02' c"
 527  a207 6c6173733d27  	dc.b	"lass='tclass' valu"
 528  a219 653d27256430  	dc.b	"e='%d02' pattern='"
 529  a22b 5b302d39612d  	dc.b	"[0-9a-f]{2}' title"
 530  a23d 3d2754776f20  	dc.b	"='Two hex digits f"
 531  a24f 726f6d        	dc.b	"rom"
 532  a252 20303020746f  	dc.b	" 00 to ff' maxleng"
 533  a264 74683d273227  	dc.b	"th='2' size='2'></"
 534  a276 74643e3c7464  	dc.b	"td><td><input type"
 535  a288 3d2774657874  	dc.b	"='text' name='d03'"
 536  a29a 20636c617373  	dc.b	" class='tclass' va"
 537  a2ac 6c75653d2725  	dc.b	"lue='%d03' pattern"
 538  a2be 3d275b302d39  	dc.b	"='[0-9a-f]{2}' tit"
 539  a2d0 6c653d275477  	dc.b	"le='Two hex digits"
 540  a2e2 2066726f6d20  	dc.b	" from 00 to ff' ma"
 541  a2f4 786c656e6774  	dc.b	"xlength='2' size='"
 542  a306 32273e3c2f74  	dc.b	"2'></td><td><input"
 543  a318 20747970653d  	dc.b	" type='text' name="
 544  a32a 276430342720  	dc.b	"'d04' class='tclas"
 545  a33c 73272076616c  	dc.b	"s' value='%d04' pa"
 546  a34e 747465        	dc.b	"tte"
 547  a351 726e3d275b30  	dc.b	"rn='[0-9a-f]{2}' t"
 548  a363 69746c653d27  	dc.b	"itle='Two hex digi"
 549  a375 74732066726f  	dc.b	"ts from 00 to ff' "
 550  a387 6d61786c656e  	dc.b	"maxlength='2' size"
 551  a399 3d2732273e3c  	dc.b	"='2'></td><td><inp"
 552  a3ab 757420747970  	dc.b	"ut type='text' nam"
 553  a3bd 653d27643035  	dc.b	"e='d05' class='tcl"
 554  a3cf 617373272076  	dc.b	"ass' value='%d05' "
 555  a3e1 706174746572  	dc.b	"pattern='[0-9a-f]{"
 556  a3f3 327d27207469  	dc.b	"2}' title='Two hex"
 557  a405 206469676974  	dc.b	" digits from 00 to"
 558  a417 20666627206d  	dc.b	" ff' maxlength='2'"
 559  a429 2073697a653d  	dc.b	" size='2'></td></t"
 560  a43b 723e3c2f7461  	dc.b	"r></table><button "
 561  a44d 747970        	dc.b	"typ"
 562  a450 653d27737562  	dc.b	"e='submit' title='"
 563  a462 536176657320  	dc.b	"Saves your changes"
 564  a474 207468656e20  	dc.b	" then restarts the"
 565  a486 204e6574776f  	dc.b	" Network Module'>S"
 566  a498 6176653c2f62  	dc.b	"ave</button><butto"
 567  a4aa 6e2074797065  	dc.b	"n type='reset' tit"
 568  a4bc 6c653d27556e  	dc.b	"le='Un-does any ch"
 569  a4ce 616e67657320  	dc.b	"anges that have no"
 570  a4e0 74206265656e  	dc.b	"t been saved'>Undo"
 571  a4f2 20416c6c3c2f  	dc.b	" All</button></for"
 572  a504 6d3e3c70206c  	dc.b	"m><p line-height 2"
 573  a516 3070783e5573  	dc.b	"0px>Use caution wh"
 574  a528 656e20636861  	dc.b	"en changing the ab"
 575  a53a 6f76652e2049  	dc.b	"ove. If you make a"
 576  a54c 206d69        	dc.b	" mi"
 577  a54f 7374616b6520  	dc.b	"stake you may have"
 578  a561 20746f3c6272  	dc.b	" to<br>restore fac"
 579  a573 746f72792064  	dc.b	"tory defaults by h"
 580  a585 6f6c64696e67  	dc.b	"olding down the re"
 581  a597 736574206275  	dc.b	"set button for 10 "
 582  a5a9 7365636f6e64  	dc.b	"seconds.<br><br>Ma"
 583  a5bb 6b6520737572  	dc.b	"ke sure the MAC yo"
 584  a5cd 752061737369  	dc.b	"u assign is unique"
 585  a5df 20746f20796f  	dc.b	" to your local net"
 586  a5f1 776f726b2e20  	dc.b	"work. Recommended<"
 587  a603 62723e697320  	dc.b	"br>is that you jus"
 588  a615 7420696e6372  	dc.b	"t increment the lo"
 589  a627 77657374206f  	dc.b	"west octet and the"
 590  a639 6e206c616265  	dc.b	"n label your devic"
 591  a64b 657320        	dc.b	"es "
 592  a64e 666f723c6272  	dc.b	"for<br>future refe"
 593  a660 72656e63652e  	dc.b	"rence.<br><br>If y"
 594  a672 6f7520636861  	dc.b	"ou change the high"
 595  a684 657374206f63  	dc.b	"est octet of the M"
 596  a696 414320796f75  	dc.b	"AC you MUST use an"
 597  a6a8 206576656e20  	dc.b	" even number to<br"
 598  a6ba 3e666f726d20  	dc.b	">form a unicast ad"
 599  a6cc 64726573732e  	dc.b	"dress. 00, 02, ..."
 600  a6de 2066632c2066  	dc.b	" fc, fe etc work f"
 601  a6f0 696e652e2030  	dc.b	"ine. 01, 03 ... fd"
 602  a702 2c2066662061  	dc.b	", ff are for<br>mu"
 603  a714 6c7469636173  	dc.b	"lticast and will n"
 604  a726 6f7420776f72  	dc.b	"ot work.</p><a hre"
 605  a738 663d27257830  	dc.b	"f='%x00http://192."
 606  a74a 313638        	dc.b	"168"
 607  a74d 2e3030312e30  	dc.b	".001.004:08080/91'"
 608  a75f 3e3c62757474  	dc.b	"><button title='Sa"
 609  a771 766520666972  	dc.b	"ve first! This but"
 610  a783 746f6e207769  	dc.b	"ton will not save "
 611  a795 796f75722063  	dc.b	"your changes'>Rebo"
 612  a7a7 6f743c2f6275  	dc.b	"ot</button></a>&nb"
 613  a7b9 7370266e6273  	dc.b	"sp&nbspNOTE: Reboo"
 614  a7cb 74206d617920  	dc.b	"t may cause the re"
 615  a7dd 6c6179732074  	dc.b	"lays to cycle.<br>"
 616  a7ef 3c62723e3c61  	dc.b	"<br><a href='%x00h"
 617  a801 7474703a2f2f  	dc.b	"ttp://192.168.001."
 618  a813 3030343a3038  	dc.b	"004:08080/60'><but"
 619  a825 746f6e207469  	dc.b	"ton title='Save fi"
 620  a837 727374212054  	dc.b	"rst! This button w"
 621  a849 696c6c        	dc.b	"ill"
 622  a84c 206e6f742073  	dc.b	" not save your cha"
 623  a85e 6e676573273e  	dc.b	"nges'>Relay Contro"
 624  a870 6c733c2f6275  	dc.b	"ls</button></a><a "
 625  a882 687265663d27  	dc.b	"href='%x00http://1"
 626  a894 39322e313638  	dc.b	"92.168.001.004:080"
 627  a8a6 38302f363627  	dc.b	"80/66'><button tit"
 628  a8b8 6c653d275361  	dc.b	"le='Save first! Th"
 629  a8ca 697320627574  	dc.b	"is button will not"
 630  a8dc 207361766520  	dc.b	" save your changes"
 631  a8ee 273e4e657477  	dc.b	"'>Network Statisti"
 632  a900 63733c2f6275  	dc.b	"cs</button></a><a "
 633  a912 687265663d27  	dc.b	"href='%x00http://1"
 634  a924 39322e313638  	dc.b	"92.168.001.004:080"
 635  a936 38302f363327  	dc.b	"80/63'><button tit"
 636  a948 6c653d        	dc.b	"le="
 637  a94b 275361766520  	dc.b	"'Save first! This "
 638  a95d 627574746f6e  	dc.b	"button will not sa"
 639  a96f 766520796f75  	dc.b	"ve your changes'>H"
 640  a981 656c703c2f62  	dc.b	"elp</button></a></"
 641  a993 626f64793e3c  	dc.b	"body></html>",0
 642  a9a0               L12_g_HtmlPageHelp:
 643  a9a0 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
 644  a9b2 4c49432022    	dc.b	"LIC ",34
 645  a9b7 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
 646  a9c9 2e3031205472  	dc.b	".01 Transitional//"
 647  a9db 454e22        	dc.b	"EN",34
 648  a9de 3e3c68746d6c  	dc.b	"><html><head><titl"
 649  a9f0 653e48656c70  	dc.b	"e>Help Page</title"
 650  aa02 3e3c7374796c  	dc.b	"><style type='text"
 651  aa14 2f637373273e  	dc.b	"/css'>td { width: "
 652  aa26 31343070783b  	dc.b	"140px; padding: 0p"
 653  aa38 783b207d3c2f  	dc.b	"x; }</style></head"
 654  aa4a 3e3c626f6479  	dc.b	"><body><h1>Help Pa"
 655  aa5c 676520313c2f  	dc.b	"ge 1</h1><p line-h"
 656  aa6e 656967687420  	dc.b	"eight 20px>An alte"
 657  aa80 726e61746976  	dc.b	"rnative to using t"
 658  aa92 686520776562  	dc.b	"he web interf"
 659  aa9f 61636520666f  	dc.b	"ace for changing r"
 660  aab1 656c61792073  	dc.b	"elay states is to "
 661  aac3 73656e642072  	dc.b	"send relay<br>spec"
 662  aad5 696669632068  	dc.b	"ific html commands"
 663  aae7 2e20456e7465  	dc.b	". Enter http://IP:"
 664  aaf9 506f72742f78  	dc.b	"Port/xx where<br>-"
 665  ab0b 204950203d20  	dc.b	" IP = the device I"
 666  ab1d 502041646472  	dc.b	"P Address, for exa"
 667  ab2f 6d706c652031  	dc.b	"mple 192.168.1.4<b"
 668  ab41 723e2d20506f  	dc.b	"r>- Port = the dev"
 669  ab53 69636520506f  	dc.b	"ice Port number, f"
 670  ab65 6f7220657861  	dc.b	"or example 8080<br"
 671  ab77 3e2d20787820  	dc.b	">- xx = one of the"
 672  ab89 20636f646573  	dc.b	" codes below:<br><"
 673  ab9b 746162        	dc.b	"tab"
 674  ab9e 6c653e3c7472  	dc.b	"le><tr><td>00 = Re"
 675  abb0 6c61792d3031  	dc.b	"lay-01 OFF</td><td"
 676  abc2 3e3039203d20  	dc.b	">09 = Relay-05 OFF"
 677  abd4 3c2f74643e3c  	dc.b	"</td><td>17 = Rela"
 678  abe6 792d3039204f  	dc.b	"y-09 OFF</td><td>2"
 679  abf8 35203d205265  	dc.b	"5 = Relay-13 OFF<b"
 680  ac0a 723e3c2f7464  	dc.b	"r></td></tr><tr><t"
 681  ac1c 643e3031203d  	dc.b	"d>01 = Relay-01  O"
 682  ac2e 4e3c2f74643e  	dc.b	"N</td><td>10 = Rel"
 683  ac40 61792d303520  	dc.b	"ay-05  ON</td><td>"
 684  ac52 3138203d2052  	dc.b	"18 = Relay-09  ON<"
 685  ac64 2f74643e3c74  	dc.b	"/td><td>26 = Relay"
 686  ac76 2d313320204f  	dc.b	"-13  ON<br></td></"
 687  ac88 74723e3c7472  	dc.b	"tr><tr><td>02 = Re"
 688  ac9a 6c6179        	dc.b	"lay"
 689  ac9d 2d3032204f46  	dc.b	"-02 OFF</td><td>11"
 690  acaf 203d2052656c  	dc.b	" = Relay-06 OFF</t"
 691  acc1 643e3c74643e  	dc.b	"d><td>19 = Relay-1"
 692  acd3 30204f46463c  	dc.b	"0 OFF</td><td>27 ="
 693  ace5 2052656c6179  	dc.b	" Relay-14 OFF<br><"
 694  acf7 2f74643e3c2f  	dc.b	"/td></tr><tr><td>0"
 695  ad09 33203d205265  	dc.b	"3 = Relay-02  ON</"
 696  ad1b 74643e3c7464  	dc.b	"td><td>12 = Relay-"
 697  ad2d 303620204f4e  	dc.b	"06  ON</td><td>20 "
 698  ad3f 3d2052656c61  	dc.b	"= Relay-10  ON</td"
 699  ad51 3e3c74643e32  	dc.b	"><td>28 = Relay-14"
 700  ad63 20204f4e3c62  	dc.b	"  ON<br></td></tr>"
 701  ad75 3c74723e3c74  	dc.b	"<tr><td>04 = Relay"
 702  ad87 2d3033204f46  	dc.b	"-03 OFF</td><td>13"
 703  ad99 203d20        	dc.b	" = "
 704  ad9c 52656c61792d  	dc.b	"Relay-07 OFF</td><"
 705  adae 74643e323120  	dc.b	"td>21 = Relay-11 O"
 706  adc0 46463c2f7464  	dc.b	"FF</td><td>29 = Re"
 707  add2 6c61792d3135  	dc.b	"lay-15 OFF<br></td"
 708  ade4 3e3c2f74723e  	dc.b	"></tr><tr><td>05 ="
 709  adf6 2052656c6179  	dc.b	" Relay-03  ON</td>"
 710  ae08 3c74643e3134  	dc.b	"<td>14 = Relay-07 "
 711  ae1a 204f4e3c2f74  	dc.b	" ON</td><td>22 = R"
 712  ae2c 656c61792d31  	dc.b	"elay-11  ON</td><t"
 713  ae3e 643e3330203d  	dc.b	"d>30 = Relay-15  O"
 714  ae50 4e3c62723e3c  	dc.b	"N<br></td></tr><tr"
 715  ae62 3e3c74643e30  	dc.b	"><td>07 = Relay-04"
 716  ae74 204f46463c2f  	dc.b	" OFF</td><td>15 = "
 717  ae86 52656c61792d  	dc.b	"Relay-08 OFF</td><"
 718  ae98 74643e        	dc.b	"td>"
 719  ae9b 3233203d2052  	dc.b	"23 = Relay-12 OFF<"
 720  aead 2f74643e3c74  	dc.b	"/td><td>31 = Relay"
 721  aebf 2d3136204f46  	dc.b	"-16 OFF<br></td></"
 722  aed1 74723e3c7472  	dc.b	"tr><tr><td>08 = Re"
 723  aee3 6c61792d3034  	dc.b	"lay-04  ON</td><td"
 724  aef5 3e3136203d20  	dc.b	">16 = Relay-08  ON"
 725  af07 3c2f74643e3c  	dc.b	"</td><td>24 = Rela"
 726  af19 792d31322020  	dc.b	"y-12  ON</td><td>3"
 727  af2b 32203d205265  	dc.b	"2 = Relay-16  ON<b"
 728  af3d 723e3c2f7464  	dc.b	"r></td></tr></tabl"
 729  af4f 653e3535203d  	dc.b	"e>55 = All Relays "
 730  af61 4f4e3c62723e  	dc.b	"ON<br>56 = All Rel"
 731  af73 617973204f46  	dc.b	"ays OFF<br><br>The"
 732  af85 20666f6c6c6f  	dc.b	" following are als"
 733  af97 6f2061        	dc.b	"o a"
 734  af9a 7661696c6162  	dc.b	"vailable:<br>60 = "
 735  afac 53686f772052  	dc.b	"Show Relay Control"
 736  afbe 20706167653c  	dc.b	" page<br>61 = Show"
 737  afd0 204164647265  	dc.b	" Address Settings "
 738  afe2 706167653c62  	dc.b	"page<br>63 = Show "
 739  aff4 48656c702050  	dc.b	"Help Page 1<br>64 "
 740  b006 3d2053686f77  	dc.b	"= Show Help Page 2"
 741  b018 3c62723e3635  	dc.b	"<br>65 = Flash LED"
 742  b02a 3c62723e3636  	dc.b	"<br>66 = Show Stat"
 743  b03c 697374696373  	dc.b	"istics<br>91 = Reb"
 744  b04e 6f6f743c6272  	dc.b	"oot<br>99 = Show S"
 745  b060 686f72742046  	dc.b	"hort Form Relay Se"
 746  b072 7474696e6773  	dc.b	"ttings<br></p><a h"
 747  b084 7265663d2725  	dc.b	"ref='%x00http://19"
 748  b096 322e31        	dc.b	"2.1"
 749  b099 36382e303031  	dc.b	"68.001.004:08080/6"
 750  b0ab 34273e3c6275  	dc.b	"4'><button title='"
 751  b0bd 476f20746f20  	dc.b	"Go to next Help pa"
 752  b0cf 6765273e4e65  	dc.b	"ge'>Next Help Page"
 753  b0e1 3c2f62757474  	dc.b	"</button></a></bod"
 754  b0f3 793e3c2f6874  	dc.b	"y></html>",0
 755  b0fd               L32_g_HtmlPageHelp2:
 756  b0fd 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
 757  b10f 4c49432022    	dc.b	"LIC ",34
 758  b114 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
 759  b126 2e3031205472  	dc.b	".01 Transitional//"
 760  b138 454e22        	dc.b	"EN",34
 761  b13b 3e3c68746d6c  	dc.b	"><html><head><titl"
 762  b14d 653e48656c70  	dc.b	"e>Help Page</title"
 763  b15f 3e3c7374796c  	dc.b	"><style type='text"
 764  b171 2f637373273e  	dc.b	"/css'></style></he"
 765  b183 61643e3c626f  	dc.b	"ad><body><h1>Help "
 766  b195 506167652032  	dc.b	"Page 2</h1><p line"
 767  b1a7 2d6865696768  	dc.b	"-height 20px>IP Ad"
 768  b1b9 64726573732c  	dc.b	"dress, Gateway Add"
 769  b1cb 726573732c20  	dc.b	"ress, Netmask, Por"
 770  b1dd 742c20616e64  	dc.b	"t, and MAC Address"
 771  b1ef 2063616e206f  	dc.b	" can only be<"
 772  b1fc 62723e636861  	dc.b	"br>changed via the"
 773  b20e 207765622069  	dc.b	" web interface. If"
 774  b220 207468652064  	dc.b	" the device become"
 775  b232 7320696e6163  	dc.b	"s inaccessible you"
 776  b244 2063616e3c62  	dc.b	" can<br>reset to f"
 777  b256 6163746f7279  	dc.b	"actory defaults by"
 778  b268 20686f6c6469  	dc.b	" holding the reset"
 779  b27a 20627574746f  	dc.b	" button down for 1"
 780  b28c 30207365636f  	dc.b	"0 seconds.<br>Defa"
 781  b29e 756c74733a3c  	dc.b	"ults:<br> IP 192.1"
 782  b2b0 36382e312e34  	dc.b	"68.1.4<br> Gateway"
 783  b2c2 203139322e31  	dc.b	" 192.168.1.1<br> N"
 784  b2d4 65746d61736b  	dc.b	"etmask 255.255.255"
 785  b2e6 2e303c62723e  	dc.b	".0<br> Port 08080<"
 786  b2f8 62723e        	dc.b	"br>"
 787  b2fb 204d41432063  	dc.b	" MAC c2-4d-69-6b-6"
 788  b30d 352d30303c62  	dc.b	"5-00<br><br>Code R"
 789  b31f 65766973696f  	dc.b	"evision 20200617 1"
 790  b331 3131333c2f70  	dc.b	"113</p><a href='%x"
 791  b343 303068747470  	dc.b	"00http://192.168.0"
 792  b355 30312e303034  	dc.b	"01.004:08080/60'><"
 793  b367 627574746f6e  	dc.b	"button title='Go t"
 794  b379 6f2052656c61  	dc.b	"o Relay Control Pa"
 795  b38b 6765273e5265  	dc.b	"ge'>Relay Controls"
 796  b39d 3c2f62757474  	dc.b	"</button></a></bod"
 797  b3af 793e3c2f6874  	dc.b	"y></html>",0
 798  b3b9               L52_g_HtmlPageStats:
 799  b3b9 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
 800  b3cb 4c49432022    	dc.b	"LIC ",34
 801  b3d0 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
 802  b3e2 2e3031205472  	dc.b	".01 Transitional//"
 803  b3f4 454e22        	dc.b	"EN",34
 804  b3f7 3e3c68746d6c  	dc.b	"><html><head><titl"
 805  b409 653e53746174  	dc.b	"e>Statistics</titl"
 806  b41b 653e3c737479  	dc.b	"e><style type='tex"
 807  b42d 742f63737327  	dc.b	"t/css'>.tclass { w"
 808  b43f 696474683a20  	dc.b	"idth: 450px; }</st"
 809  b451 796c653e3c2f  	dc.b	"yle></head><body><"
 810  b463 68313e4e6574  	dc.b	"h1>Network Statist"
 811  b475 6963733c2f68  	dc.b	"ics</h1><p>Values "
 812  b487 73686f776e20  	dc.b	"shown are since la"
 813  b499 737420706f77  	dc.b	"st power on or res"
 814  b4ab 65743c2f703e  	dc.b	"et</p><table "
 815  b4b8 626f72646572  	dc.b	"border='1px'><colg"
 816  b4ca 726f75703e3c  	dc.b	"roup><col width='1"
 817  b4dc 30307078273e  	dc.b	"00px'><col width='"
 818  b4ee 343530707827  	dc.b	"450px'></colgroup>"
 819  b500 3c74723e3c74  	dc.b	"<tr><td>%e00xxxxxx"
 820  b512 787878783c2f  	dc.b	"xxxx</td><td class"
 821  b524 3d2774636c61  	dc.b	"='tclass'>Dropped "
 822  b536 7061636b6574  	dc.b	"packets at the IP "
 823  b548 6c617965723c  	dc.b	"layer</td></tr><tr"
 824  b55a 3e3c74643e25  	dc.b	"><td>%e01xxxxxxxxx"
 825  b56c 783c2f74643e  	dc.b	"x</td><td class='t"
 826  b57e 636c61737327  	dc.b	"class'>Received pa"
 827  b590 636b65747320  	dc.b	"ckets at the IP la"
 828  b5a2 7965723c2f74  	dc.b	"yer</td></tr><tr><"
 829  b5b4 74643e        	dc.b	"td>"
 830  b5b7 256530327878  	dc.b	"%e02xxxxxxxxxx</td"
 831  b5c9 3e3c74642063  	dc.b	"><td class='tclass"
 832  b5db 273e53656e74  	dc.b	"'>Sent packets at "
 833  b5ed 746865204950  	dc.b	"the IP layer</td><"
 834  b5ff 2f74723e3c74  	dc.b	"/tr><tr><td>%e03xx"
 835  b611 787878787878  	dc.b	"xxxxxxxx</td><td c"
 836  b623 6c6173733d27  	dc.b	"lass='tclass'>Pack"
 837  b635 657473206472  	dc.b	"ets dropped due to"
 838  b647 2077726f6e67  	dc.b	" wrong IP version "
 839  b659 6f7220686561  	dc.b	"or header length</"
 840  b66b 74643e3c2f74  	dc.b	"td></tr><tr><td>%e"
 841  b67d 303478787878  	dc.b	"04xxxxxxxxxx</td><"
 842  b68f 746420636c61  	dc.b	"td class='tclass'>"
 843  b6a1 5061636b6574  	dc.b	"Packets dropped du"
 844  b6b3 652074        	dc.b	"e t"
 845  b6b6 6f2077726f6e  	dc.b	"o wrong IP length,"
 846  b6c8 206869676820  	dc.b	" high byte</td></t"
 847  b6da 723e3c74723e  	dc.b	"r><tr><td>%e05xxxx"
 848  b6ec 787878787878  	dc.b	"xxxxxx</td><td cla"
 849  b6fe 73733d277463  	dc.b	"ss='tclass'>Packet"
 850  b710 732064726f70  	dc.b	"s dropped due to w"
 851  b722 726f6e672049  	dc.b	"rong IP length, lo"
 852  b734 772062797465  	dc.b	"w byte</td></tr><t"
 853  b746 723e3c74643e  	dc.b	"r><td>%e06xxxxxxxx"
 854  b758 78783c2f7464  	dc.b	"xx</td><td class='"
 855  b76a 74636c617373  	dc.b	"tclass'>Packets dr"
 856  b77c 6f7070656420  	dc.b	"opped since they w"
 857  b78e 657265204950  	dc.b	"ere IP fragments</"
 858  b7a0 74643e3c2f74  	dc.b	"td></tr><tr><td>%e"
 859  b7b2 303778        	dc.b	"07x"
 860  b7b5 787878787878  	dc.b	"xxxxxxxxx</td><td "
 861  b7c7 636c6173733d  	dc.b	"class='tclass'>Pac"
 862  b7d9 6b6574732064  	dc.b	"kets dropped due t"
 863  b7eb 6f2049502063  	dc.b	"o IP checksum erro"
 864  b7fd 72733c2f7464  	dc.b	"rs</td></tr><tr><t"
 865  b80f 643e25653038  	dc.b	"d>%e08xxxxxxxxxx</"
 866  b821 74643e3c7464  	dc.b	"td><td class='tcla"
 867  b833 7373273e5061  	dc.b	"ss'>Packets droppe"
 868  b845 642073696e63  	dc.b	"d since they were "
 869  b857 6e6f74204943  	dc.b	"not ICMP or TCP</t"
 870  b869 643e3c2f7472  	dc.b	"d></tr><tr><td>%e0"
 871  b87b 397878787878  	dc.b	"9xxxxxxxxxx</td><t"
 872  b88d 6420636c6173  	dc.b	"d class='tclass'>D"
 873  b89f 726f70706564  	dc.b	"ropped ICMP packet"
 874  b8b1 733c2f        	dc.b	"s</"
 875  b8b4 74643e3c2f74  	dc.b	"td></tr><tr><td>%e"
 876  b8c6 313078787878  	dc.b	"10xxxxxxxxxx</td><"
 877  b8d8 746420636c61  	dc.b	"td class='tclass'>"
 878  b8ea 526563656976  	dc.b	"Received ICMP pack"
 879  b8fc 6574733c2f74  	dc.b	"ets</td></tr><tr><"
 880  b90e 74643e256531  	dc.b	"td>%e11xxxxxxxxxx<"
 881  b920 2f74643e3c74  	dc.b	"/td><td class='tcl"
 882  b932 617373273e53  	dc.b	"ass'>Sent ICMP pac"
 883  b944 6b6574733c2f  	dc.b	"kets</td></tr><tr>"
 884  b956 3c74643e2565  	dc.b	"<td>%e12xxxxxxxxxx"
 885  b968 3c2f74643e3c  	dc.b	"</td><td class='tc"
 886  b97a 6c617373273e  	dc.b	"lass'>ICMP packets"
 887  b98c 207769746820  	dc.b	" with a wrong type"
 888  b99e 3c2f74643e3c  	dc.b	"</td></tr><tr><td>"
 889  b9b0 256531        	dc.b	"%e1"
 890  b9b3 337878787878  	dc.b	"3xxxxxxxxxx</td><t"
 891  b9c5 6420636c6173  	dc.b	"d class='tclass'>D"
 892  b9d7 726f70706564  	dc.b	"ropped TCP segment"
 893  b9e9 733c2f74643e  	dc.b	"s</td></tr><tr><td"
 894  b9fb 3e2565313478  	dc.b	">%e14xxxxxxxxxx</t"
 895  ba0d 643e3c746420  	dc.b	"d><td class='tclas"
 896  ba1f 73273e526563  	dc.b	"s'>Received TCP se"
 897  ba31 676d656e7473  	dc.b	"gments</td></tr><t"
 898  ba43 723e3c74643e  	dc.b	"r><td>%e15xxxxxxxx"
 899  ba55 78783c2f7464  	dc.b	"xx</td><td class='"
 900  ba67 74636c617373  	dc.b	"tclass'>Sent TCP s"
 901  ba79 65676d656e74  	dc.b	"egments</td></tr><"
 902  ba8b 74723e3c7464  	dc.b	"tr><td>%e16xxxxxxx"
 903  ba9d 7878783c2f74  	dc.b	"xxx</td><td class="
 904  baaf 277463        	dc.b	"'tc"
 905  bab2 6c617373273e  	dc.b	"lass'>TCP segments"
 906  bac4 207769746820  	dc.b	" with a bad checks"
 907  bad6 756d3c2f7464  	dc.b	"um</td></tr><tr><t"
 908  bae8 643e25653137  	dc.b	"d>%e17xxxxxxxxxx</"
 909  bafa 74643e3c7464  	dc.b	"td><td class='tcla"
 910  bb0c 7373273e5443  	dc.b	"ss'>TCP segments w"
 911  bb1e 697468206120  	dc.b	"ith a bad ACK numb"
 912  bb30 65723c2f7464  	dc.b	"er</td></tr><tr><t"
 913  bb42 643e25653138  	dc.b	"d>%e18xxxxxxxxxx</"
 914  bb54 74643e3c7464  	dc.b	"td><td class='tcla"
 915  bb66 7373273e5265  	dc.b	"ss'>Received TCP R"
 916  bb78 535420287265  	dc.b	"ST (reset) segment"
 917  bb8a 733c2f74643e  	dc.b	"s</td></tr><tr><td"
 918  bb9c 3e2565313978  	dc.b	">%e19xxxxxxxxxx</t"
 919  bbae 643e3c        	dc.b	"d><"
 920  bbb1 746420636c61  	dc.b	"td class='tclass'>"
 921  bbc3 52657472616e  	dc.b	"Retransmitted TCP "
 922  bbd5 7365676d656e  	dc.b	"segments</td></tr>"
 923  bbe7 3c74723e3c74  	dc.b	"<tr><td>%e20xxxxxx"
 924  bbf9 787878783c2f  	dc.b	"xxxx</td><td class"
 925  bc0b 3d2774636c61  	dc.b	"='tclass'>Dropped "
 926  bc1d 53594e732064  	dc.b	"SYNs due to too fe"
 927  bc2f 7720636f6e6e  	dc.b	"w connections aval"
 928  bc41 6961626c653c  	dc.b	"iable</td></tr><tr"
 929  bc53 3e3c74643e25  	dc.b	"><td>%e21xxxxxxxxx"
 930  bc65 783c2f74643e  	dc.b	"x</td><td class='t"
 931  bc77 636c61737327  	dc.b	"class'>SYNs for cl"
 932  bc89 6f7365642070  	dc.b	"osed ports, trigge"
 933  bc9b 72696e672061  	dc.b	"ring a RST</td></t"
 934  bcad 723e3c        	dc.b	"r><"
 935  bcb0 2f7461626c65  	dc.b	"/table><a href='%x"
 936  bcc2 303068747470  	dc.b	"00http://192.168.0"
 937  bcd4 30312e303034  	dc.b	"01.004:08080/60'><"
 938  bce6 627574746f6e  	dc.b	"button title='Go t"
 939  bcf8 6f2052656c61  	dc.b	"o Relay Control Pa"
 940  bd0a 6765273e5265  	dc.b	"ge'>Relay Controls"
 941  bd1c 3c2f62757474  	dc.b	"</button></a></bod"
 942  bd2e 793e3c2f6874  	dc.b	"y></html>",0
 943  bd38               L72_g_HtmlPageRstate:
 944  bd38 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
 945  bd4a 4c49432022    	dc.b	"LIC ",34
 946  bd4f 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
 947  bd61 2e3031205472  	dc.b	".01 Transitional//"
 948  bd73 454e22        	dc.b	"EN",34
 949  bd76 3e3c68746d6c  	dc.b	"><html><head><styl"
 950  bd88 652074797065  	dc.b	"e type='text/css'>"
 951  bd9a 3c2f7374796c  	dc.b	"</style></head><bo"
 952  bdac 64793e3c703e  	dc.b	"dy><p>%f00xxxxxxxx"
 953  bdbe 787878787878  	dc.b	"xxxxxxxx</p></body"
 954  bdd0 3e3c2f68746d  	dc.b	"></html>",0
1020                     ; 459 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1020                     ; 460 {
1022                     	switch	.text
1023  c384               L3_CopyStringP:
1025  c384 89            	pushw	x
1026  c385 5203          	subw	sp,#3
1027       00000003      OFST:	set	3
1030                     ; 465   nBytes = 0;
1032  c387 5f            	clrw	x
1034  c388 2014          	jra	L17
1035  c38a               L56:
1036                     ; 467     **ppBuffer = Character;
1038  c38a 1e04          	ldw	x,(OFST+1,sp)
1039  c38c fe            	ldw	x,(x)
1040  c38d f7            	ld	(x),a
1041                     ; 468     *ppBuffer = *ppBuffer + 1;
1043  c38e 1e04          	ldw	x,(OFST+1,sp)
1044  c390 9093          	ldw	y,x
1045  c392 fe            	ldw	x,(x)
1046  c393 5c            	incw	x
1047  c394 90ff          	ldw	(y),x
1048                     ; 469     pString = pString + 1;
1050  c396 1e08          	ldw	x,(OFST+5,sp)
1051  c398 5c            	incw	x
1052  c399 1f08          	ldw	(OFST+5,sp),x
1053                     ; 470     nBytes++;
1055  c39b 1e01          	ldw	x,(OFST-2,sp)
1056  c39d 5c            	incw	x
1057  c39e               L17:
1058  c39e 1f01          	ldw	(OFST-2,sp),x
1060                     ; 466   while ((Character = pString[0]) != '\0') {
1060                     ; 467     **ppBuffer = Character;
1060                     ; 468     *ppBuffer = *ppBuffer + 1;
1060                     ; 469     pString = pString + 1;
1060                     ; 470     nBytes++;
1062  c3a0 1e08          	ldw	x,(OFST+5,sp)
1063  c3a2 f6            	ld	a,(x)
1064  c3a3 6b03          	ld	(OFST+0,sp),a
1066  c3a5 26e3          	jrne	L56
1067                     ; 472   return nBytes;
1069  c3a7 1e01          	ldw	x,(OFST-2,sp)
1072  c3a9 5b05          	addw	sp,#5
1073  c3ab 81            	ret	
1118                     ; 476 static uint16_t CopyValue(uint8_t** ppBuffer, uint32_t nValue)
1118                     ; 477 {
1119                     	switch	.text
1120  c3ac               L5_CopyValue:
1122  c3ac 89            	pushw	x
1123       00000000      OFST:	set	0
1126                     ; 485   emb_itoa(nValue, OctetArray, 10, 5);
1128  c3ad 4b05          	push	#5
1129  c3af 4b0a          	push	#10
1130  c3b1 ae0010        	ldw	x,#_OctetArray
1131  c3b4 89            	pushw	x
1132  c3b5 1e0b          	ldw	x,(OFST+11,sp)
1133  c3b7 89            	pushw	x
1134  c3b8 1e0b          	ldw	x,(OFST+11,sp)
1135  c3ba 89            	pushw	x
1136  c3bb ad53          	call	_emb_itoa
1138  c3bd 5b08          	addw	sp,#8
1139                     ; 487   **ppBuffer = OctetArray[0];
1141  c3bf 1e01          	ldw	x,(OFST+1,sp)
1142  c3c1 fe            	ldw	x,(x)
1143  c3c2 c60010        	ld	a,_OctetArray
1144  c3c5 f7            	ld	(x),a
1145                     ; 488   *ppBuffer = *ppBuffer + 1;
1147  c3c6 1e01          	ldw	x,(OFST+1,sp)
1148  c3c8 9093          	ldw	y,x
1149  c3ca fe            	ldw	x,(x)
1150  c3cb 5c            	incw	x
1151  c3cc 90ff          	ldw	(y),x
1152                     ; 490   **ppBuffer = OctetArray[1];
1154  c3ce 1e01          	ldw	x,(OFST+1,sp)
1155  c3d0 fe            	ldw	x,(x)
1156  c3d1 c60011        	ld	a,_OctetArray+1
1157  c3d4 f7            	ld	(x),a
1158                     ; 491   *ppBuffer = *ppBuffer + 1;
1160  c3d5 1e01          	ldw	x,(OFST+1,sp)
1161  c3d7 9093          	ldw	y,x
1162  c3d9 fe            	ldw	x,(x)
1163  c3da 5c            	incw	x
1164  c3db 90ff          	ldw	(y),x
1165                     ; 493   **ppBuffer = OctetArray[2];
1167  c3dd 1e01          	ldw	x,(OFST+1,sp)
1168  c3df fe            	ldw	x,(x)
1169  c3e0 c60012        	ld	a,_OctetArray+2
1170  c3e3 f7            	ld	(x),a
1171                     ; 494   *ppBuffer = *ppBuffer + 1;
1173  c3e4 1e01          	ldw	x,(OFST+1,sp)
1174  c3e6 9093          	ldw	y,x
1175  c3e8 fe            	ldw	x,(x)
1176  c3e9 5c            	incw	x
1177  c3ea 90ff          	ldw	(y),x
1178                     ; 496   **ppBuffer = OctetArray[3];
1180  c3ec 1e01          	ldw	x,(OFST+1,sp)
1181  c3ee fe            	ldw	x,(x)
1182  c3ef c60013        	ld	a,_OctetArray+3
1183  c3f2 f7            	ld	(x),a
1184                     ; 497   *ppBuffer = *ppBuffer + 1;
1186  c3f3 1e01          	ldw	x,(OFST+1,sp)
1187  c3f5 9093          	ldw	y,x
1188  c3f7 fe            	ldw	x,(x)
1189  c3f8 5c            	incw	x
1190  c3f9 90ff          	ldw	(y),x
1191                     ; 499   **ppBuffer = OctetArray[4];
1193  c3fb 1e01          	ldw	x,(OFST+1,sp)
1194  c3fd fe            	ldw	x,(x)
1195  c3fe c60014        	ld	a,_OctetArray+4
1196  c401 f7            	ld	(x),a
1197                     ; 500   *ppBuffer = *ppBuffer + 1;
1199  c402 1e01          	ldw	x,(OFST+1,sp)
1200  c404 9093          	ldw	y,x
1201  c406 fe            	ldw	x,(x)
1202  c407 5c            	incw	x
1203  c408 90ff          	ldw	(y),x
1204                     ; 502   return 5;
1206  c40a ae0005        	ldw	x,#5
1209  c40d 5b02          	addw	sp,#2
1210  c40f 81            	ret	
1282                     ; 506 char* emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
1282                     ; 507 {
1283                     	switch	.text
1284  c410               _emb_itoa:
1286  c410 5206          	subw	sp,#6
1287       00000006      OFST:	set	6
1290                     ; 522   for (i=0; i < 10; i++) str[i] = '0';
1292  c412 4f            	clr	a
1293  c413 6b06          	ld	(OFST+0,sp),a
1295  c415               L541:
1298  c415 5f            	clrw	x
1299  c416 97            	ld	xl,a
1300  c417 72fb0d        	addw	x,(OFST+7,sp)
1301  c41a a630          	ld	a,#48
1302  c41c f7            	ld	(x),a
1305  c41d 0c06          	inc	(OFST+0,sp)
1309  c41f 7b06          	ld	a,(OFST+0,sp)
1310  c421 a10a          	cp	a,#10
1311  c423 25f0          	jrult	L541
1312                     ; 523   str[pad] = '\0';
1314  c425 7b10          	ld	a,(OFST+10,sp)
1315  c427 5f            	clrw	x
1316  c428 97            	ld	xl,a
1317  c429 72fb0d        	addw	x,(OFST+7,sp)
1318  c42c 7f            	clr	(x)
1319                     ; 524   if (num == 0) return str;
1321  c42d 96            	ldw	x,sp
1322  c42e 1c0009        	addw	x,#OFST+3
1323  c431 cdf5ea        	call	c_lzmp
1327  c434 2775          	jreq	L61
1328                     ; 527   i = 0;
1330  c436 0f06          	clr	(OFST+0,sp)
1333  c438 2060          	jra	L161
1334  c43a               L551:
1335                     ; 529     rem = (uint8_t)(num % base);
1337  c43a 7b0f          	ld	a,(OFST+9,sp)
1338  c43c b703          	ld	c_lreg+3,a
1339  c43e 3f02          	clr	c_lreg+2
1340  c440 3f01          	clr	c_lreg+1
1341  c442 3f00          	clr	c_lreg
1342  c444 96            	ldw	x,sp
1343  c445 5c            	incw	x
1344  c446 cdf5fd        	call	c_rtol
1347  c449 96            	ldw	x,sp
1348  c44a 1c0009        	addw	x,#OFST+3
1349  c44d cdf497        	call	c_ltor
1351  c450 96            	ldw	x,sp
1352  c451 5c            	incw	x
1353  c452 cdf5d0        	call	c_lumd
1355  c455 b603          	ld	a,c_lreg+3
1356  c457 6b05          	ld	(OFST-1,sp),a
1358                     ; 530     if(rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
1360  c459 a10a          	cp	a,#10
1361  c45b 7b06          	ld	a,(OFST+0,sp)
1362  c45d 250d          	jrult	L561
1365  c45f 0c06          	inc	(OFST+0,sp)
1367  c461 5f            	clrw	x
1368  c462 97            	ld	xl,a
1369  c463 72fb0d        	addw	x,(OFST+7,sp)
1370  c466 7b05          	ld	a,(OFST-1,sp)
1371  c468 ab57          	add	a,#87
1373  c46a 200b          	jra	L761
1374  c46c               L561:
1375                     ; 531     else str[i++] = (uint8_t)(rem + '0');
1377  c46c 0c06          	inc	(OFST+0,sp)
1379  c46e 5f            	clrw	x
1380  c46f 97            	ld	xl,a
1381  c470 72fb0d        	addw	x,(OFST+7,sp)
1382  c473 7b05          	ld	a,(OFST-1,sp)
1383  c475 ab30          	add	a,#48
1384  c477               L761:
1385  c477 f7            	ld	(x),a
1386                     ; 532     num = num/base;
1388  c478 7b0f          	ld	a,(OFST+9,sp)
1389  c47a b703          	ld	c_lreg+3,a
1390  c47c 3f02          	clr	c_lreg+2
1391  c47e 3f01          	clr	c_lreg+1
1392  c480 3f00          	clr	c_lreg
1393  c482 96            	ldw	x,sp
1394  c483 5c            	incw	x
1395  c484 cdf5fd        	call	c_rtol
1398  c487 96            	ldw	x,sp
1399  c488 1c0009        	addw	x,#OFST+3
1400  c48b cdf497        	call	c_ltor
1402  c48e 96            	ldw	x,sp
1403  c48f 5c            	incw	x
1404  c490 cdf4a9        	call	c_ludv
1406  c493 96            	ldw	x,sp
1407  c494 1c0009        	addw	x,#OFST+3
1408  c497 cdf5fd        	call	c_rtol
1410  c49a               L161:
1411                     ; 528   while (num != 0) {
1413  c49a 96            	ldw	x,sp
1414  c49b 1c0009        	addw	x,#OFST+3
1415  c49e cdf5ea        	call	c_lzmp
1417  c4a1 2697          	jrne	L551
1418                     ; 536   reverse(str, pad);
1420  c4a3 7b10          	ld	a,(OFST+10,sp)
1421  c4a5 88            	push	a
1422  c4a6 1e0e          	ldw	x,(OFST+8,sp)
1423  c4a8 ad06          	call	_reverse
1425  c4aa 84            	pop	a
1426                     ; 538   return str;
1429  c4ab               L61:
1431  c4ab 1e0d          	ldw	x,(OFST+7,sp)
1433  c4ad 5b06          	addw	sp,#6
1434  c4af 81            	ret	
1497                     ; 543 void reverse(char str[], uint8_t length)
1497                     ; 544 {
1498                     	switch	.text
1499  c4b0               _reverse:
1501  c4b0 89            	pushw	x
1502  c4b1 5203          	subw	sp,#3
1503       00000003      OFST:	set	3
1506                     ; 549   start = 0;
1508  c4b3 0f02          	clr	(OFST-1,sp)
1510                     ; 550   end = (uint8_t)(length - 1);
1512  c4b5 7b08          	ld	a,(OFST+5,sp)
1513  c4b7 4a            	dec	a
1514  c4b8 6b03          	ld	(OFST+0,sp),a
1517  c4ba 2029          	jra	L322
1518  c4bc               L712:
1519                     ; 553     temp = str[start];
1521  c4bc 5f            	clrw	x
1522  c4bd 97            	ld	xl,a
1523  c4be 72fb04        	addw	x,(OFST+1,sp)
1524  c4c1 f6            	ld	a,(x)
1525  c4c2 6b01          	ld	(OFST-2,sp),a
1527                     ; 554     str[start] = str[end];
1529  c4c4 5f            	clrw	x
1530  c4c5 7b02          	ld	a,(OFST-1,sp)
1531  c4c7 97            	ld	xl,a
1532  c4c8 72fb04        	addw	x,(OFST+1,sp)
1533  c4cb 7b03          	ld	a,(OFST+0,sp)
1534  c4cd 905f          	clrw	y
1535  c4cf 9097          	ld	yl,a
1536  c4d1 72f904        	addw	y,(OFST+1,sp)
1537  c4d4 90f6          	ld	a,(y)
1538  c4d6 f7            	ld	(x),a
1539                     ; 555     str[end] = temp;
1541  c4d7 5f            	clrw	x
1542  c4d8 7b03          	ld	a,(OFST+0,sp)
1543  c4da 97            	ld	xl,a
1544  c4db 72fb04        	addw	x,(OFST+1,sp)
1545  c4de 7b01          	ld	a,(OFST-2,sp)
1546  c4e0 f7            	ld	(x),a
1547                     ; 556     start++;
1549  c4e1 0c02          	inc	(OFST-1,sp)
1551                     ; 557     end--;
1553  c4e3 0a03          	dec	(OFST+0,sp)
1555  c4e5               L322:
1556                     ; 552   while (start < end) {
1556                     ; 553     temp = str[start];
1556                     ; 554     str[start] = str[end];
1556                     ; 555     str[end] = temp;
1556                     ; 556     start++;
1556                     ; 557     end--;
1558  c4e5 7b02          	ld	a,(OFST-1,sp)
1559  c4e7 1103          	cp	a,(OFST+0,sp)
1560  c4e9 25d1          	jrult	L712
1561                     ; 559 }
1564  c4eb 5b05          	addw	sp,#5
1565  c4ed 81            	ret	
1626                     ; 562 uint8_t three_alpha_to_uint(uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
1626                     ; 563 {
1627                     	switch	.text
1628  c4ee               _three_alpha_to_uint:
1630  c4ee 89            	pushw	x
1631  c4ef 89            	pushw	x
1632       00000002      OFST:	set	2
1635                     ; 571   value = (uint8_t)((alpha1 - '0') *100);
1637  c4f0 9e            	ld	a,xh
1638  c4f1 97            	ld	xl,a
1639  c4f2 a664          	ld	a,#100
1640  c4f4 42            	mul	x,a
1641  c4f5 9f            	ld	a,xl
1642  c4f6 a0c0          	sub	a,#192
1643  c4f8 6b02          	ld	(OFST+0,sp),a
1645                     ; 572   digit = (uint8_t)((alpha2 - '0') * 10);
1647  c4fa 7b04          	ld	a,(OFST+2,sp)
1648  c4fc 97            	ld	xl,a
1649  c4fd a60a          	ld	a,#10
1650  c4ff 42            	mul	x,a
1651  c500 9f            	ld	a,xl
1652  c501 a0e0          	sub	a,#224
1654                     ; 573   value = (uint8_t)(value + digit);
1656  c503 1b02          	add	a,(OFST+0,sp)
1657  c505 6b02          	ld	(OFST+0,sp),a
1659                     ; 574   digit = (uint8_t)(alpha3 - '0');
1661  c507 7b07          	ld	a,(OFST+5,sp)
1662  c509 a030          	sub	a,#48
1663  c50b 6b01          	ld	(OFST-1,sp),a
1665                     ; 575   value = (uint8_t)(value + digit);
1667  c50d 1b02          	add	a,(OFST+0,sp)
1669                     ; 577   if(value >= 255) value = 0;
1671  c50f a1ff          	cp	a,#255
1672  c511 2501          	jrult	L352
1675  c513 4f            	clr	a
1677  c514               L352:
1678                     ; 579   return value;
1682  c514 5b04          	addw	sp,#4
1683  c516 81            	ret	
1729                     ; 583 uint8_t two_alpha_to_uint(uint8_t alpha1, uint8_t alpha2)
1729                     ; 584 {
1730                     	switch	.text
1731  c517               _two_alpha_to_uint:
1733  c517 89            	pushw	x
1734  c518 88            	push	a
1735       00000001      OFST:	set	1
1738                     ; 591   if (alpha1 >= '0' && alpha1 <= '9') value = (uint8_t)((alpha1 - '0') << 4);
1740  c519 9e            	ld	a,xh
1741  c51a a130          	cp	a,#48
1742  c51c 250f          	jrult	L572
1744  c51e 9e            	ld	a,xh
1745  c51f a13a          	cp	a,#58
1746  c521 240a          	jruge	L572
1749  c523 9e            	ld	a,xh
1750  c524 97            	ld	xl,a
1751  c525 a610          	ld	a,#16
1752  c527 42            	mul	x,a
1753  c528 9f            	ld	a,xl
1754  c529 a000          	sub	a,#0
1756  c52b 2030          	jp	LC001
1757  c52d               L572:
1758                     ; 592   else if(alpha1 == 'a') value = 0xa0;
1760  c52d 7b02          	ld	a,(OFST+1,sp)
1761  c52f a161          	cp	a,#97
1762  c531 2604          	jrne	L103
1765  c533 a6a0          	ld	a,#160
1767  c535 2026          	jp	LC001
1768  c537               L103:
1769                     ; 593   else if(alpha1 == 'b') value = 0xb0;
1771  c537 a162          	cp	a,#98
1772  c539 2604          	jrne	L503
1775  c53b a6b0          	ld	a,#176
1777  c53d 201e          	jp	LC001
1778  c53f               L503:
1779                     ; 594   else if(alpha1 == 'c') value = 0xc0;
1781  c53f a163          	cp	a,#99
1782  c541 2604          	jrne	L113
1785  c543 a6c0          	ld	a,#192
1787  c545 2016          	jp	LC001
1788  c547               L113:
1789                     ; 595   else if(alpha1 == 'd') value = 0xd0;
1791  c547 a164          	cp	a,#100
1792  c549 2604          	jrne	L513
1795  c54b a6d0          	ld	a,#208
1797  c54d 200e          	jp	LC001
1798  c54f               L513:
1799                     ; 596   else if(alpha1 == 'e') value = 0xe0;
1801  c54f a165          	cp	a,#101
1802  c551 2604          	jrne	L123
1805  c553 a6e0          	ld	a,#224
1807  c555 2006          	jp	LC001
1808  c557               L123:
1809                     ; 597   else if(alpha1 == 'f') value = 0xf0;
1811  c557 a166          	cp	a,#102
1812  c559 2606          	jrne	L523
1815  c55b a6f0          	ld	a,#240
1816  c55d               LC001:
1817  c55d 6b01          	ld	(OFST+0,sp),a
1820  c55f 2002          	jra	L772
1821  c561               L523:
1822                     ; 598   else value = 0; // If an invalid entry is made convert it to 0
1824  c561 0f01          	clr	(OFST+0,sp)
1826  c563               L772:
1827                     ; 600   if (alpha2 >= '0' && alpha2 <= '9') value = (uint8_t)(value + alpha2 - '0');
1829  c563 7b03          	ld	a,(OFST+2,sp)
1830  c565 a130          	cp	a,#48
1831  c567 250c          	jrult	L133
1833  c569 a13a          	cp	a,#58
1834  c56b 2408          	jruge	L133
1837  c56d 7b01          	ld	a,(OFST+0,sp)
1838  c56f 1b03          	add	a,(OFST+2,sp)
1839  c571 a030          	sub	a,#48
1841  c573 203d          	jp	L333
1842  c575               L133:
1843                     ; 601   else if(alpha2 == 'a') value = (uint8_t)(value + 0x0a);
1845  c575 a161          	cp	a,#97
1846  c577 2606          	jrne	L533
1849  c579 7b01          	ld	a,(OFST+0,sp)
1850  c57b ab0a          	add	a,#10
1852  c57d 2033          	jp	L333
1853  c57f               L533:
1854                     ; 602   else if(alpha2 == 'b') value = (uint8_t)(value + 0x0b);
1856  c57f a162          	cp	a,#98
1857  c581 2606          	jrne	L143
1860  c583 7b01          	ld	a,(OFST+0,sp)
1861  c585 ab0b          	add	a,#11
1863  c587 2029          	jp	L333
1864  c589               L143:
1865                     ; 603   else if(alpha2 == 'c') value = (uint8_t)(value + 0x0c);
1867  c589 a163          	cp	a,#99
1868  c58b 2606          	jrne	L543
1871  c58d 7b01          	ld	a,(OFST+0,sp)
1872  c58f ab0c          	add	a,#12
1874  c591 201f          	jp	L333
1875  c593               L543:
1876                     ; 604   else if(alpha2 == 'd') value = (uint8_t)(value + 0x0d);
1878  c593 a164          	cp	a,#100
1879  c595 2606          	jrne	L153
1882  c597 7b01          	ld	a,(OFST+0,sp)
1883  c599 ab0d          	add	a,#13
1885  c59b 2015          	jp	L333
1886  c59d               L153:
1887                     ; 605   else if(alpha2 == 'e') value = (uint8_t)(value + 0x0e);
1889  c59d a165          	cp	a,#101
1890  c59f 2606          	jrne	L553
1893  c5a1 7b01          	ld	a,(OFST+0,sp)
1894  c5a3 ab0e          	add	a,#14
1896  c5a5 200b          	jp	L333
1897  c5a7               L553:
1898                     ; 606   else if(alpha2 == 'f') value = (uint8_t)(value + 0x0f);
1900  c5a7 a166          	cp	a,#102
1901  c5a9 2606          	jrne	L163
1904  c5ab 7b01          	ld	a,(OFST+0,sp)
1905  c5ad ab0f          	add	a,#15
1908  c5af 2001          	jra	L333
1909  c5b1               L163:
1910                     ; 607   else value = 0; // If an invalid entry is made convert it to 0
1912  c5b1 4f            	clr	a
1914  c5b2               L333:
1915                     ; 609   return value;
1919  c5b2 5b03          	addw	sp,#3
1920  c5b4 81            	ret	
1971                     ; 613 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint32_t nDataLen)
1971                     ; 614 {
1972                     	switch	.text
1973  c5b5               L7_CopyHttpHeader:
1975  c5b5 89            	pushw	x
1976  c5b6 89            	pushw	x
1977       00000002      OFST:	set	2
1980                     ; 617   nBytes = 0;
1982  c5b7 5f            	clrw	x
1983  c5b8 1f01          	ldw	(OFST-1,sp),x
1985                     ; 619   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
1987  c5ba aebf1a        	ldw	x,#L704
1988  c5bd 89            	pushw	x
1989  c5be 96            	ldw	x,sp
1990  c5bf 1c0005        	addw	x,#OFST+3
1991  c5c2 cdc384        	call	L3_CopyStringP
1993  c5c5 5b02          	addw	sp,#2
1994  c5c7 72fb01        	addw	x,(OFST-1,sp)
1995  c5ca 1f01          	ldw	(OFST-1,sp),x
1997                     ; 620   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1999  c5cc aebf17        	ldw	x,#L114
2000  c5cf 89            	pushw	x
2001  c5d0 96            	ldw	x,sp
2002  c5d1 1c0005        	addw	x,#OFST+3
2003  c5d4 cdc384        	call	L3_CopyStringP
2005  c5d7 5b02          	addw	sp,#2
2006  c5d9 72fb01        	addw	x,(OFST-1,sp)
2007  c5dc 1f01          	ldw	(OFST-1,sp),x
2009                     ; 622   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
2011  c5de aebf07        	ldw	x,#L314
2012  c5e1 89            	pushw	x
2013  c5e2 96            	ldw	x,sp
2014  c5e3 1c0005        	addw	x,#OFST+3
2015  c5e6 cdc384        	call	L3_CopyStringP
2017  c5e9 5b02          	addw	sp,#2
2018  c5eb 72fb01        	addw	x,(OFST-1,sp)
2019  c5ee 1f01          	ldw	(OFST-1,sp),x
2021                     ; 623   nBytes += CopyValue(&pBuffer, nDataLen);
2023  c5f0 1e09          	ldw	x,(OFST+7,sp)
2024  c5f2 89            	pushw	x
2025  c5f3 1e09          	ldw	x,(OFST+7,sp)
2026  c5f5 89            	pushw	x
2027  c5f6 96            	ldw	x,sp
2028  c5f7 1c0007        	addw	x,#OFST+5
2029  c5fa cdc3ac        	call	L5_CopyValue
2031  c5fd 5b04          	addw	sp,#4
2032  c5ff 72fb01        	addw	x,(OFST-1,sp)
2033  c602 1f01          	ldw	(OFST-1,sp),x
2035                     ; 624   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2037  c604 aebf17        	ldw	x,#L114
2038  c607 89            	pushw	x
2039  c608 96            	ldw	x,sp
2040  c609 1c0005        	addw	x,#OFST+3
2041  c60c cdc384        	call	L3_CopyStringP
2043  c60f 5b02          	addw	sp,#2
2044  c611 72fb01        	addw	x,(OFST-1,sp)
2045  c614 1f01          	ldw	(OFST-1,sp),x
2047                     ; 626   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type:text/html\r\n"));
2049  c616 aebeee        	ldw	x,#L514
2050  c619 89            	pushw	x
2051  c61a 96            	ldw	x,sp
2052  c61b 1c0005        	addw	x,#OFST+3
2053  c61e cdc384        	call	L3_CopyStringP
2055  c621 5b02          	addw	sp,#2
2056  c623 72fb01        	addw	x,(OFST-1,sp)
2057  c626 1f01          	ldw	(OFST-1,sp),x
2059                     ; 627   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
2061  c628 aebedb        	ldw	x,#L714
2062  c62b 89            	pushw	x
2063  c62c 96            	ldw	x,sp
2064  c62d 1c0005        	addw	x,#OFST+3
2065  c630 cdc384        	call	L3_CopyStringP
2067  c633 5b02          	addw	sp,#2
2068  c635 72fb01        	addw	x,(OFST-1,sp)
2069  c638 1f01          	ldw	(OFST-1,sp),x
2071                     ; 628   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2073  c63a aebf17        	ldw	x,#L114
2074  c63d 89            	pushw	x
2075  c63e 96            	ldw	x,sp
2076  c63f 1c0005        	addw	x,#OFST+3
2077  c642 cdc384        	call	L3_CopyStringP
2079  c645 5b02          	addw	sp,#2
2080  c647 72fb01        	addw	x,(OFST-1,sp)
2082                     ; 630   return nBytes;
2086  c64a 5b04          	addw	sp,#4
2087  c64c 81            	ret	
2226                     	switch	.const
2227  bdd9               L421:
2228  bdd9 c7f1          	dc.w	L124
2229  bddb c7ff          	dc.w	L324
2230  bddd c80d          	dc.w	L524
2231  bddf c81a          	dc.w	L724
2232  bde1 c827          	dc.w	L134
2233  bde3 c834          	dc.w	L334
2234  bde5 c841          	dc.w	L534
2235  bde7 c84e          	dc.w	L734
2236  bde9 c85b          	dc.w	L144
2237  bdeb c868          	dc.w	L344
2238  bded c875          	dc.w	L544
2239  bdef c882          	dc.w	L744
2240  bdf1               L422:
2241  bdf1 c9c1          	dc.w	L354
2242  bdf3 c9d3          	dc.w	L554
2243  bdf5 c9e5          	dc.w	L754
2244  bdf7 c9f7          	dc.w	L164
2245  bdf9 ca09          	dc.w	L364
2246  bdfb ca1b          	dc.w	L564
2247  bdfd ca2d          	dc.w	L764
2248  bdff ca3f          	dc.w	L174
2249  be01 ca51          	dc.w	L374
2250  be03 ca63          	dc.w	L574
2251  be05 ca75          	dc.w	L774
2252  be07 ca87          	dc.w	L105
2253  be09 ca99          	dc.w	L305
2254  be0b caab          	dc.w	L505
2255  be0d cabd          	dc.w	L705
2256  be0f cacf          	dc.w	L115
2257  be11 cae0          	dc.w	L315
2258  be13 caf1          	dc.w	L515
2259  be15 cb02          	dc.w	L715
2260  be17 cb13          	dc.w	L125
2261  be19 cb24          	dc.w	L325
2262  be1b cb35          	dc.w	L525
2263                     ; 634 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
2263                     ; 635 {
2264                     	switch	.text
2265  c64d               L11_CopyHttpData:
2267  c64d 89            	pushw	x
2268  c64e 5207          	subw	sp,#7
2269       00000007      OFST:	set	7
2272                     ; 651   nBytes = 0;
2274  c650 5f            	clrw	x
2275  c651 1f05          	ldw	(OFST-2,sp),x
2277                     ; 687   if(nMaxBytes > 400) nMaxBytes = 400; // limit just in case
2279  c653 1e10          	ldw	x,(OFST+9,sp)
2280  c655 a30191        	cpw	x,#401
2281  c658 2403ccce69    	jrult	L306
2284  c65d ae0190        	ldw	x,#400
2285  c660 1f10          	ldw	(OFST+9,sp),x
2286  c662 ccce69        	jra	L306
2287  c665               L106:
2288                     ; 710     if (*pDataLeft > 0) {
2290  c665 1e0e          	ldw	x,(OFST+7,sp)
2291  c667 e601          	ld	a,(1,x)
2292  c669 fa            	or	a,(x)
2293  c66a 2603ccce72    	jreq	L506
2294                     ; 714       memcpy(&nByte, *ppData, 1);
2296  c66f 96            	ldw	x,sp
2297  c670 5c            	incw	x
2298  c671 bf04          	ldw	c_x,x
2299  c673 160c          	ldw	y,(OFST+5,sp)
2300  c675 90fe          	ldw	y,(y)
2301  c677 90bf07        	ldw	c_y,y
2302  c67a ae0001        	ldw	x,#1
2303  c67d               L25:
2304  c67d 5a            	decw	x
2305  c67e 92d607        	ld	a,([c_y.w],x)
2306  c681 92d704        	ld	([c_x.w],x),a
2307  c684 5d            	tnzw	x
2308  c685 26f6          	jrne	L25
2309                     ; 740       if (nByte == '%') {
2311  c687 7b01          	ld	a,(OFST-6,sp)
2312  c689 a125          	cp	a,#37
2313  c68b 2703ccce4c    	jrne	L116
2314                     ; 741         *ppData = *ppData + 1;
2316  c690 1e0c          	ldw	x,(OFST+5,sp)
2317  c692 9093          	ldw	y,x
2318  c694 fe            	ldw	x,(x)
2319  c695 5c            	incw	x
2320  c696 90ff          	ldw	(y),x
2321                     ; 742         *pDataLeft = *pDataLeft - 1;
2323  c698 1e0e          	ldw	x,(OFST+7,sp)
2324  c69a 9093          	ldw	y,x
2325  c69c fe            	ldw	x,(x)
2326  c69d 5a            	decw	x
2327  c69e 90ff          	ldw	(y),x
2328                     ; 747         memcpy(&nParsedMode, *ppData, 1);
2330  c6a0 96            	ldw	x,sp
2331  c6a1 1c0003        	addw	x,#OFST-4
2332  c6a4 bf04          	ldw	c_x,x
2333  c6a6 160c          	ldw	y,(OFST+5,sp)
2334  c6a8 90fe          	ldw	y,(y)
2335  c6aa 90bf07        	ldw	c_y,y
2336  c6ad ae0001        	ldw	x,#1
2337  c6b0               L45:
2338  c6b0 5a            	decw	x
2339  c6b1 92d607        	ld	a,([c_y.w],x)
2340  c6b4 92d704        	ld	([c_x.w],x),a
2341  c6b7 5d            	tnzw	x
2342  c6b8 26f6          	jrne	L45
2343                     ; 748         *ppData = *ppData + 1;
2345  c6ba 1e0c          	ldw	x,(OFST+5,sp)
2346  c6bc 9093          	ldw	y,x
2347  c6be fe            	ldw	x,(x)
2348  c6bf 5c            	incw	x
2349  c6c0 90ff          	ldw	(y),x
2350                     ; 749         *pDataLeft = *pDataLeft - 1;
2352  c6c2 1e0e          	ldw	x,(OFST+7,sp)
2353  c6c4 9093          	ldw	y,x
2354  c6c6 fe            	ldw	x,(x)
2355  c6c7 5a            	decw	x
2356  c6c8 90ff          	ldw	(y),x
2357                     ; 753         memcpy(&temp, *ppData, 1);
2359  c6ca 96            	ldw	x,sp
2360  c6cb 1c0002        	addw	x,#OFST-5
2361  c6ce bf04          	ldw	c_x,x
2362  c6d0 160c          	ldw	y,(OFST+5,sp)
2363  c6d2 90fe          	ldw	y,(y)
2364  c6d4 90bf07        	ldw	c_y,y
2365  c6d7 ae0001        	ldw	x,#1
2366  c6da               L65:
2367  c6da 5a            	decw	x
2368  c6db 92d607        	ld	a,([c_y.w],x)
2369  c6de 92d704        	ld	([c_x.w],x),a
2370  c6e1 5d            	tnzw	x
2371  c6e2 26f6          	jrne	L65
2372                     ; 754 	nParsedNum = (uint8_t)((temp - '0') * 10);
2374  c6e4 7b02          	ld	a,(OFST-5,sp)
2375  c6e6 97            	ld	xl,a
2376  c6e7 a60a          	ld	a,#10
2377  c6e9 42            	mul	x,a
2378  c6ea 9f            	ld	a,xl
2379  c6eb a0e0          	sub	a,#224
2380  c6ed 6b04          	ld	(OFST-3,sp),a
2382                     ; 755         *ppData = *ppData + 1;
2384  c6ef 1e0c          	ldw	x,(OFST+5,sp)
2385  c6f1 9093          	ldw	y,x
2386  c6f3 fe            	ldw	x,(x)
2387  c6f4 5c            	incw	x
2388  c6f5 90ff          	ldw	(y),x
2389                     ; 756         *pDataLeft = *pDataLeft - 1;
2391  c6f7 1e0e          	ldw	x,(OFST+7,sp)
2392  c6f9 9093          	ldw	y,x
2393  c6fb fe            	ldw	x,(x)
2394  c6fc 5a            	decw	x
2395  c6fd 90ff          	ldw	(y),x
2396                     ; 760         memcpy(&temp, *ppData, 1);
2398  c6ff 96            	ldw	x,sp
2399  c700 1c0002        	addw	x,#OFST-5
2400  c703 bf04          	ldw	c_x,x
2401  c705 160c          	ldw	y,(OFST+5,sp)
2402  c707 90fe          	ldw	y,(y)
2403  c709 90bf07        	ldw	c_y,y
2404  c70c ae0001        	ldw	x,#1
2405  c70f               L06:
2406  c70f 5a            	decw	x
2407  c710 92d607        	ld	a,([c_y.w],x)
2408  c713 92d704        	ld	([c_x.w],x),a
2409  c716 5d            	tnzw	x
2410  c717 26f6          	jrne	L06
2411                     ; 761 	nParsedNum = (uint8_t)(nParsedNum + temp - '0');
2413  c719 7b04          	ld	a,(OFST-3,sp)
2414  c71b 1b02          	add	a,(OFST-5,sp)
2415  c71d a030          	sub	a,#48
2416  c71f 6b04          	ld	(OFST-3,sp),a
2418                     ; 762         *ppData = *ppData + 1;
2420  c721 1e0c          	ldw	x,(OFST+5,sp)
2421  c723 9093          	ldw	y,x
2422  c725 fe            	ldw	x,(x)
2423  c726 5c            	incw	x
2424  c727 90ff          	ldw	(y),x
2425                     ; 763         *pDataLeft = *pDataLeft - 1;
2427  c729 1e0e          	ldw	x,(OFST+7,sp)
2428  c72b 9093          	ldw	y,x
2429  c72d fe            	ldw	x,(x)
2430  c72e 5a            	decw	x
2431  c72f 90ff          	ldw	(y),x
2432                     ; 773         if (nParsedMode == 'i') {
2434  c731 7b03          	ld	a,(OFST-4,sp)
2435  c733 a169          	cp	a,#105
2436  c735 2614          	jrne	L316
2437                     ; 775 	  *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
2439  c737 7b04          	ld	a,(OFST-3,sp)
2440  c739 cdd6a6        	call	_GpioGetPin
2442  c73c 1e08          	ldw	x,(OFST+1,sp)
2443  c73e ab30          	add	a,#48
2444  c740 f7            	ld	(x),a
2445                     ; 776           pBuffer++;
2447  c741 5c            	incw	x
2448  c742 1f08          	ldw	(OFST+1,sp),x
2449                     ; 777           nBytes++;
2451  c744 1e05          	ldw	x,(OFST-2,sp)
2452  c746 5c            	incw	x
2453  c747 1f05          	ldw	(OFST-2,sp),x
2456  c749 204e          	jra	L516
2457  c74b               L316:
2458                     ; 780         else if (nParsedMode == 'o') {
2460  c74b a16f          	cp	a,#111
2461  c74d 2624          	jrne	L716
2462                     ; 783           if((uint8_t)(GpioGetPin(nParsedNum) == 1)) { // Insert 'checked'
2464  c74f 7b04          	ld	a,(OFST-3,sp)
2465  c751 cdd6a6        	call	_GpioGetPin
2467  c754 4a            	dec	a
2468  c755 2642          	jrne	L516
2469                     ; 784             for(i=0; i<7; i++) {
2471  c757 6b07          	ld	(OFST+0,sp),a
2473  c759               L326:
2474                     ; 785               *pBuffer = checked[i];
2476  c759 5f            	clrw	x
2477  c75a 97            	ld	xl,a
2478  c75b d68080        	ld	a,(L31_checked,x)
2479  c75e 1e08          	ldw	x,(OFST+1,sp)
2480  c760 f7            	ld	(x),a
2481                     ; 786               pBuffer++;
2483  c761 5c            	incw	x
2484  c762 1f08          	ldw	(OFST+1,sp),x
2485                     ; 787               nBytes++;
2487  c764 1e05          	ldw	x,(OFST-2,sp)
2488  c766 5c            	incw	x
2489  c767 1f05          	ldw	(OFST-2,sp),x
2491                     ; 784             for(i=0; i<7; i++) {
2493  c769 0c07          	inc	(OFST+0,sp)
2497  c76b 7b07          	ld	a,(OFST+0,sp)
2498  c76d a107          	cp	a,#7
2499  c76f 25e8          	jrult	L326
2501  c771 2026          	jra	L516
2502  c773               L716:
2503                     ; 794         else if (nParsedMode == 'p') {
2505  c773 a170          	cp	a,#112
2506  c775 2622          	jrne	L516
2507                     ; 797           if((uint8_t)(GpioGetPin(nParsedNum) == 0)) { // Insert 'checked'
2509  c777 7b04          	ld	a,(OFST-3,sp)
2510  c779 cdd6a6        	call	_GpioGetPin
2512  c77c 4d            	tnz	a
2513  c77d 261a          	jrne	L516
2514                     ; 798             for(i=0; i<7; i++) {
2516  c77f 6b07          	ld	(OFST+0,sp),a
2518  c781               L146:
2519                     ; 799               *pBuffer = checked[i];
2521  c781 5f            	clrw	x
2522  c782 97            	ld	xl,a
2523  c783 d68080        	ld	a,(L31_checked,x)
2524  c786 1e08          	ldw	x,(OFST+1,sp)
2525  c788 f7            	ld	(x),a
2526                     ; 800               pBuffer++;
2528  c789 5c            	incw	x
2529  c78a 1f08          	ldw	(OFST+1,sp),x
2530                     ; 801               nBytes++;
2532  c78c 1e05          	ldw	x,(OFST-2,sp)
2533  c78e 5c            	incw	x
2534  c78f 1f05          	ldw	(OFST-2,sp),x
2536                     ; 798             for(i=0; i<7; i++) {
2538  c791 0c07          	inc	(OFST+0,sp)
2542  c793 7b07          	ld	a,(OFST+0,sp)
2543  c795 a107          	cp	a,#7
2544  c797 25e8          	jrult	L146
2546  c799               L516:
2547                     ; 808         if (nParsedMode == 'a') {
2549  c799 7b03          	ld	a,(OFST-4,sp)
2550  c79b a161          	cp	a,#97
2551  c79d 263b          	jrne	L156
2552                     ; 810 	  for(i=0; i<20; i++) {
2554  c79f 4f            	clr	a
2555  c7a0 6b07          	ld	(OFST+0,sp),a
2557  c7a2               L356:
2558                     ; 811 	    if(ex_stored_devicename[i] != ' ') { // Don't write spaces out - confuses the
2560  c7a2 5f            	clrw	x
2561  c7a3 97            	ld	xl,a
2562  c7a4 d60038        	ld	a,(_ex_stored_devicename,x)
2563  c7a7 a120          	cp	a,#32
2564  c7a9 2712          	jreq	L166
2565                     ; 813               *pBuffer = (uint8_t)(ex_stored_devicename[i]);
2567  c7ab 7b07          	ld	a,(OFST+0,sp)
2568  c7ad 5f            	clrw	x
2569  c7ae 97            	ld	xl,a
2570  c7af d60038        	ld	a,(_ex_stored_devicename,x)
2571  c7b2 1e08          	ldw	x,(OFST+1,sp)
2572  c7b4 f7            	ld	(x),a
2573                     ; 814               pBuffer++;
2575  c7b5 5c            	incw	x
2576  c7b6 1f08          	ldw	(OFST+1,sp),x
2577                     ; 815               nBytes++;
2579  c7b8 1e05          	ldw	x,(OFST-2,sp)
2580  c7ba 5c            	incw	x
2581  c7bb 1f05          	ldw	(OFST-2,sp),x
2583  c7bd               L166:
2584                     ; 810 	  for(i=0; i<20; i++) {
2586  c7bd 0c07          	inc	(OFST+0,sp)
2590  c7bf 7b07          	ld	a,(OFST+0,sp)
2591  c7c1 a114          	cp	a,#20
2592  c7c3 25dd          	jrult	L356
2593                     ; 830           *ppData = *ppData + 20;
2595  c7c5 1e0c          	ldw	x,(OFST+5,sp)
2596  c7c7 9093          	ldw	y,x
2597  c7c9 fe            	ldw	x,(x)
2598  c7ca 1c0014        	addw	x,#20
2599  c7cd 90ff          	ldw	(y),x
2600                     ; 831           *pDataLeft = *pDataLeft - 20;
2602  c7cf 1e0e          	ldw	x,(OFST+7,sp)
2603  c7d1 9093          	ldw	y,x
2604  c7d3 fe            	ldw	x,(x)
2605  c7d4 1d0014        	subw	x,#20
2607  c7d7 cccbb6        	jp	LC011
2608  c7da               L156:
2609                     ; 834         else if (nParsedMode == 'b') {
2611  c7da a162          	cp	a,#98
2612  c7dc 2703ccc8da    	jrne	L566
2613                     ; 839 	  advanceptrs = 0;
2615                     ; 841           switch (nParsedNum)
2617  c7e1 7b04          	ld	a,(OFST-3,sp)
2619                     ; 856 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2620  c7e3 a10c          	cp	a,#12
2621  c7e5 2503ccc89c    	jruge	L154
2622  c7ea 5f            	clrw	x
2623  c7eb 97            	ld	xl,a
2624  c7ec 58            	sllw	x
2625  c7ed debdd9        	ldw	x,(L421,x)
2626  c7f0 fc            	jp	(x)
2627  c7f1               L124:
2628                     ; 844 	    case 0:  emb_itoa(ex_stored_hostaddr4, OctetArray, 10, 3); advanceptrs = 1; break;
2630  c7f1 4b03          	push	#3
2631  c7f3 4b0a          	push	#10
2632  c7f5 ae0010        	ldw	x,#_OctetArray
2633  c7f8 89            	pushw	x
2634  c7f9 c60059        	ld	a,_ex_stored_hostaddr4
2639  c7fc ccc88d        	jp	LC003
2640  c7ff               L324:
2641                     ; 845 	    case 1:  emb_itoa(ex_stored_hostaddr3, OctetArray, 10, 3); advanceptrs = 1; break;
2643  c7ff 4b03          	push	#3
2644  c801 4b0a          	push	#10
2645  c803 ae0010        	ldw	x,#_OctetArray
2646  c806 89            	pushw	x
2647  c807 c60058        	ld	a,_ex_stored_hostaddr3
2652  c80a ccc88d        	jp	LC003
2653  c80d               L524:
2654                     ; 846 	    case 2:  emb_itoa(ex_stored_hostaddr2, OctetArray, 10, 3); advanceptrs = 1; break;
2656  c80d 4b03          	push	#3
2657  c80f 4b0a          	push	#10
2658  c811 ae0010        	ldw	x,#_OctetArray
2659  c814 89            	pushw	x
2660  c815 c60057        	ld	a,_ex_stored_hostaddr2
2665  c818 2073          	jp	LC003
2666  c81a               L724:
2667                     ; 847 	    case 3:  emb_itoa(ex_stored_hostaddr1, OctetArray, 10, 3); advanceptrs = 1; break;
2669  c81a 4b03          	push	#3
2670  c81c 4b0a          	push	#10
2671  c81e ae0010        	ldw	x,#_OctetArray
2672  c821 89            	pushw	x
2673  c822 c60056        	ld	a,_ex_stored_hostaddr1
2678  c825 2066          	jp	LC003
2679  c827               L134:
2680                     ; 848 	    case 4:  emb_itoa(ex_stored_draddr4,   OctetArray, 10, 3); advanceptrs = 1; break;
2682  c827 4b03          	push	#3
2683  c829 4b0a          	push	#10
2684  c82b ae0010        	ldw	x,#_OctetArray
2685  c82e 89            	pushw	x
2686  c82f c60055        	ld	a,_ex_stored_draddr4
2691  c832 2059          	jp	LC003
2692  c834               L334:
2693                     ; 849 	    case 5:  emb_itoa(ex_stored_draddr3,   OctetArray, 10, 3); advanceptrs = 1; break;
2695  c834 4b03          	push	#3
2696  c836 4b0a          	push	#10
2697  c838 ae0010        	ldw	x,#_OctetArray
2698  c83b 89            	pushw	x
2699  c83c c60054        	ld	a,_ex_stored_draddr3
2704  c83f 204c          	jp	LC003
2705  c841               L534:
2706                     ; 850 	    case 6:  emb_itoa(ex_stored_draddr2,   OctetArray, 10, 3); advanceptrs = 1; break;
2708  c841 4b03          	push	#3
2709  c843 4b0a          	push	#10
2710  c845 ae0010        	ldw	x,#_OctetArray
2711  c848 89            	pushw	x
2712  c849 c60053        	ld	a,_ex_stored_draddr2
2717  c84c 203f          	jp	LC003
2718  c84e               L734:
2719                     ; 851 	    case 7:  emb_itoa(ex_stored_draddr1,   OctetArray, 10, 3); advanceptrs = 1; break;
2721  c84e 4b03          	push	#3
2722  c850 4b0a          	push	#10
2723  c852 ae0010        	ldw	x,#_OctetArray
2724  c855 89            	pushw	x
2725  c856 c60052        	ld	a,_ex_stored_draddr1
2730  c859 2032          	jp	LC003
2731  c85b               L144:
2732                     ; 852 	    case 8:  emb_itoa(ex_stored_netmask4,  OctetArray, 10, 3); advanceptrs = 1; break;
2734  c85b 4b03          	push	#3
2735  c85d 4b0a          	push	#10
2736  c85f ae0010        	ldw	x,#_OctetArray
2737  c862 89            	pushw	x
2738  c863 c60051        	ld	a,_ex_stored_netmask4
2743  c866 2025          	jp	LC003
2744  c868               L344:
2745                     ; 853 	    case 9:  emb_itoa(ex_stored_netmask3,  OctetArray, 10, 3); advanceptrs = 1; break;
2747  c868 4b03          	push	#3
2748  c86a 4b0a          	push	#10
2749  c86c ae0010        	ldw	x,#_OctetArray
2750  c86f 89            	pushw	x
2751  c870 c60050        	ld	a,_ex_stored_netmask3
2756  c873 2018          	jp	LC003
2757  c875               L544:
2758                     ; 854 	    case 10: emb_itoa(ex_stored_netmask2,  OctetArray, 10, 3); advanceptrs = 1; break;
2760  c875 4b03          	push	#3
2761  c877 4b0a          	push	#10
2762  c879 ae0010        	ldw	x,#_OctetArray
2763  c87c 89            	pushw	x
2764  c87d c6004f        	ld	a,_ex_stored_netmask2
2769  c880 200b          	jp	LC003
2770  c882               L744:
2771                     ; 855 	    case 11: emb_itoa(ex_stored_netmask1,  OctetArray, 10, 3); advanceptrs = 1; break;
2773  c882 4b03          	push	#3
2774  c884 4b0a          	push	#10
2775  c886 ae0010        	ldw	x,#_OctetArray
2776  c889 89            	pushw	x
2777  c88a c6004e        	ld	a,_ex_stored_netmask1
2778  c88d               LC003:
2779  c88d b703          	ld	c_lreg+3,a
2780  c88f 3f02          	clr	c_lreg+2
2781  c891 3f01          	clr	c_lreg+1
2782  c893 3f00          	clr	c_lreg
2783  c895 be02          	ldw	x,c_lreg+2
2784  c897 89            	pushw	x
2785  c898 be00          	ldw	x,c_lreg
2790  c89a 200a          	jra	L176
2791  c89c               L154:
2792                     ; 856 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2794  c89c 4b03          	push	#3
2795  c89e 4b0a          	push	#10
2796  c8a0 ae0010        	ldw	x,#_OctetArray
2797  c8a3 89            	pushw	x
2798  c8a4 5f            	clrw	x
2799  c8a5 89            	pushw	x
2805  c8a6               L176:
2806  c8a6 89            	pushw	x
2807  c8a7 cdc410        	call	_emb_itoa
2808  c8aa 5b08          	addw	sp,#8
2821  c8ac a601          	ld	a,#1
2822  c8ae 6b07          	ld	(OFST+0,sp),a
2824                     ; 859 	  if(advanceptrs == 1) { // Copy OctetArray and advance pointers if one of the above
2826  c8b0 4a            	dec	a
2827  c8b1 2703ccce69    	jrne	L306
2828                     ; 861             *pBuffer = (uint8_t)OctetArray[0];
2830  c8b6 1e08          	ldw	x,(OFST+1,sp)
2831  c8b8 c60010        	ld	a,_OctetArray
2832  c8bb f7            	ld	(x),a
2833                     ; 862             pBuffer++;
2835  c8bc 5c            	incw	x
2836  c8bd 1f08          	ldw	(OFST+1,sp),x
2837                     ; 863             nBytes++;
2839  c8bf 1e05          	ldw	x,(OFST-2,sp)
2840  c8c1 5c            	incw	x
2841  c8c2 1f05          	ldw	(OFST-2,sp),x
2843                     ; 865             *pBuffer = (uint8_t)OctetArray[1];
2845  c8c4 1e08          	ldw	x,(OFST+1,sp)
2846  c8c6 c60011        	ld	a,_OctetArray+1
2847  c8c9 f7            	ld	(x),a
2848                     ; 866             pBuffer++;
2850  c8ca 5c            	incw	x
2851  c8cb 1f08          	ldw	(OFST+1,sp),x
2852                     ; 867             nBytes++;
2854  c8cd 1e05          	ldw	x,(OFST-2,sp)
2855  c8cf 5c            	incw	x
2856  c8d0 1f05          	ldw	(OFST-2,sp),x
2858                     ; 869             *pBuffer = (uint8_t)OctetArray[2];
2860  c8d2 c60012        	ld	a,_OctetArray+2
2861  c8d5 1e08          	ldw	x,(OFST+1,sp)
2862                     ; 870             pBuffer++;
2863                     ; 871             nBytes++;
2864  c8d7 ccc9a6        	jp	LC010
2865  c8da               L566:
2866                     ; 875         else if (nParsedMode == 'c') {
2868  c8da a163          	cp	a,#99
2869  c8dc 2637          	jrne	L776
2870                     ; 881           emb_itoa(ex_stored_port, OctetArray, 10, 5);
2872  c8de 4b05          	push	#5
2873  c8e0 4b0a          	push	#10
2874  c8e2 ae0010        	ldw	x,#_OctetArray
2875  c8e5 89            	pushw	x
2876  c8e6 ce004c        	ldw	x,_ex_stored_port
2877  c8e9 cdf60f        	call	c_uitolx
2879  c8ec be02          	ldw	x,c_lreg+2
2880  c8ee 89            	pushw	x
2881  c8ef be00          	ldw	x,c_lreg
2882  c8f1 89            	pushw	x
2883  c8f2 cdc410        	call	_emb_itoa
2885  c8f5 5b08          	addw	sp,#8
2886                     ; 883 	  for(i=0; i<5; i++) {
2888  c8f7 4f            	clr	a
2889  c8f8 6b07          	ld	(OFST+0,sp),a
2891  c8fa               L107:
2892                     ; 884             *pBuffer = (uint8_t)OctetArray[i];
2894  c8fa 5f            	clrw	x
2895  c8fb 97            	ld	xl,a
2896  c8fc d60010        	ld	a,(_OctetArray,x)
2897  c8ff 1e08          	ldw	x,(OFST+1,sp)
2898  c901 f7            	ld	(x),a
2899                     ; 885             pBuffer++;
2901  c902 5c            	incw	x
2902  c903 1f08          	ldw	(OFST+1,sp),x
2903                     ; 886             nBytes++;
2905  c905 1e05          	ldw	x,(OFST-2,sp)
2906  c907 5c            	incw	x
2907  c908 1f05          	ldw	(OFST-2,sp),x
2909                     ; 883 	  for(i=0; i<5; i++) {
2911  c90a 0c07          	inc	(OFST+0,sp)
2915  c90c 7b07          	ld	a,(OFST+0,sp)
2916  c90e a105          	cp	a,#5
2917  c910 25e8          	jrult	L107
2919  c912 ccce69        	jra	L306
2920  c915               L776:
2921                     ; 890         else if (nParsedMode == 'd') {
2923  c915 a164          	cp	a,#100
2924  c917 2703ccc9aa    	jrne	L117
2925                     ; 895 	  if(nParsedNum == 0)      emb_itoa(uip_ethaddr1, OctetArray, 16, 2);
2927  c91c 7b04          	ld	a,(OFST-3,sp)
2928  c91e 260d          	jrne	L317
2931  c920 4b02          	push	#2
2932  c922 4b10          	push	#16
2933  c924 ae0010        	ldw	x,#_OctetArray
2934  c927 89            	pushw	x
2935  c928 c6001e        	ld	a,_uip_ethaddr1
2938  c92b 2053          	jp	LC004
2939  c92d               L317:
2940                     ; 896 	  else if(nParsedNum == 1) emb_itoa(uip_ethaddr2, OctetArray, 16, 2);
2942  c92d a101          	cp	a,#1
2943  c92f 260d          	jrne	L717
2946  c931 4b02          	push	#2
2947  c933 4b10          	push	#16
2948  c935 ae0010        	ldw	x,#_OctetArray
2949  c938 89            	pushw	x
2950  c939 c6001f        	ld	a,_uip_ethaddr2
2953  c93c 2042          	jp	LC004
2954  c93e               L717:
2955                     ; 897 	  else if(nParsedNum == 2) emb_itoa(uip_ethaddr3, OctetArray, 16, 2);
2957  c93e a102          	cp	a,#2
2958  c940 260d          	jrne	L327
2961  c942 4b02          	push	#2
2962  c944 4b10          	push	#16
2963  c946 ae0010        	ldw	x,#_OctetArray
2964  c949 89            	pushw	x
2965  c94a c60020        	ld	a,_uip_ethaddr3
2968  c94d 2031          	jp	LC004
2969  c94f               L327:
2970                     ; 898 	  else if(nParsedNum == 3) emb_itoa(uip_ethaddr4, OctetArray, 16, 2);
2972  c94f a103          	cp	a,#3
2973  c951 260d          	jrne	L727
2976  c953 4b02          	push	#2
2977  c955 4b10          	push	#16
2978  c957 ae0010        	ldw	x,#_OctetArray
2979  c95a 89            	pushw	x
2980  c95b c60021        	ld	a,_uip_ethaddr4
2983  c95e 2020          	jp	LC004
2984  c960               L727:
2985                     ; 899 	  else if(nParsedNum == 4) emb_itoa(uip_ethaddr5, OctetArray, 16, 2);
2987  c960 a104          	cp	a,#4
2988  c962 260d          	jrne	L337
2991  c964 4b02          	push	#2
2992  c966 4b10          	push	#16
2993  c968 ae0010        	ldw	x,#_OctetArray
2994  c96b 89            	pushw	x
2995  c96c c60022        	ld	a,_uip_ethaddr5
2998  c96f 200f          	jp	LC004
2999  c971               L337:
3000                     ; 900 	  else if(nParsedNum == 5) emb_itoa(uip_ethaddr6, OctetArray, 16, 2);
3002  c971 a105          	cp	a,#5
3003  c973 261e          	jrne	L517
3006  c975 4b02          	push	#2
3007  c977 4b10          	push	#16
3008  c979 ae0010        	ldw	x,#_OctetArray
3009  c97c 89            	pushw	x
3010  c97d c60023        	ld	a,_uip_ethaddr6
3012  c980               LC004:
3013  c980 b703          	ld	c_lreg+3,a
3014  c982 3f02          	clr	c_lreg+2
3015  c984 3f01          	clr	c_lreg+1
3016  c986 3f00          	clr	c_lreg
3017  c988 be02          	ldw	x,c_lreg+2
3018  c98a 89            	pushw	x
3019  c98b be00          	ldw	x,c_lreg
3020  c98d 89            	pushw	x
3021  c98e cdc410        	call	_emb_itoa
3022  c991 5b08          	addw	sp,#8
3023  c993               L517:
3024                     ; 902           *pBuffer = OctetArray[0];
3026  c993 1e08          	ldw	x,(OFST+1,sp)
3027  c995 c60010        	ld	a,_OctetArray
3028  c998 f7            	ld	(x),a
3029                     ; 903           pBuffer++;
3031  c999 5c            	incw	x
3032  c99a 1f08          	ldw	(OFST+1,sp),x
3033                     ; 904           nBytes++;
3035  c99c 1e05          	ldw	x,(OFST-2,sp)
3036  c99e 5c            	incw	x
3037  c99f 1f05          	ldw	(OFST-2,sp),x
3039                     ; 906           *pBuffer = OctetArray[1];
3041  c9a1 c60011        	ld	a,_OctetArray+1
3042  c9a4 1e08          	ldw	x,(OFST+1,sp)
3043  c9a6               LC010:
3044  c9a6 f7            	ld	(x),a
3045                     ; 907           pBuffer++;
3046                     ; 908           nBytes++;
3048  c9a7 ccce61        	jp	LC009
3049  c9aa               L117:
3050                     ; 913         else if (nParsedMode == 'e') {
3052  c9aa a165          	cp	a,#101
3053  c9ac 2703cccb85    	jrne	L347
3054                     ; 940           switch (nParsedNum)
3056  c9b1 7b04          	ld	a,(OFST-3,sp)
3058                     ; 965 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3059  c9b3 a116          	cp	a,#22
3060  c9b5 2503cccb46    	jruge	L725
3061  c9ba 5f            	clrw	x
3062  c9bb 97            	ld	xl,a
3063  c9bc 58            	sllw	x
3064  c9bd debdf1        	ldw	x,(L422,x)
3065  c9c0 fc            	jp	(x)
3066  c9c1               L354:
3067                     ; 943 	    case 0:  emb_itoa(uip_stat.ip.drop,      OctetArray, 10, 10); break;
3069  c9c1 4b0a          	push	#10
3070  c9c3 4b0a          	push	#10
3071  c9c5 ae0010        	ldw	x,#_OctetArray
3072  c9c8 89            	pushw	x
3073  c9c9 ce008b        	ldw	x,_uip_stat+2
3074  c9cc 89            	pushw	x
3075  c9cd ce0089        	ldw	x,_uip_stat
3079  c9d0 cccb50        	jra	L747
3080  c9d3               L554:
3081                     ; 944 	    case 1:  emb_itoa(uip_stat.ip.recv,      OctetArray, 10, 10); break;
3083  c9d3 4b0a          	push	#10
3084  c9d5 4b0a          	push	#10
3085  c9d7 ae0010        	ldw	x,#_OctetArray
3086  c9da 89            	pushw	x
3087  c9db ce008f        	ldw	x,_uip_stat+6
3088  c9de 89            	pushw	x
3089  c9df ce008d        	ldw	x,_uip_stat+4
3093  c9e2 cccb50        	jra	L747
3094  c9e5               L754:
3095                     ; 945 	    case 2:  emb_itoa(uip_stat.ip.sent,      OctetArray, 10, 10); break;
3097  c9e5 4b0a          	push	#10
3098  c9e7 4b0a          	push	#10
3099  c9e9 ae0010        	ldw	x,#_OctetArray
3100  c9ec 89            	pushw	x
3101  c9ed ce0093        	ldw	x,_uip_stat+10
3102  c9f0 89            	pushw	x
3103  c9f1 ce0091        	ldw	x,_uip_stat+8
3107  c9f4 cccb50        	jra	L747
3108  c9f7               L164:
3109                     ; 946 	    case 3:  emb_itoa(uip_stat.ip.vhlerr,    OctetArray, 10, 10); break;
3111  c9f7 4b0a          	push	#10
3112  c9f9 4b0a          	push	#10
3113  c9fb ae0010        	ldw	x,#_OctetArray
3114  c9fe 89            	pushw	x
3115  c9ff ce0097        	ldw	x,_uip_stat+14
3116  ca02 89            	pushw	x
3117  ca03 ce0095        	ldw	x,_uip_stat+12
3121  ca06 cccb50        	jra	L747
3122  ca09               L364:
3123                     ; 947 	    case 4:  emb_itoa(uip_stat.ip.hblenerr,  OctetArray, 10, 10); break;
3125  ca09 4b0a          	push	#10
3126  ca0b 4b0a          	push	#10
3127  ca0d ae0010        	ldw	x,#_OctetArray
3128  ca10 89            	pushw	x
3129  ca11 ce009b        	ldw	x,_uip_stat+18
3130  ca14 89            	pushw	x
3131  ca15 ce0099        	ldw	x,_uip_stat+16
3135  ca18 cccb50        	jra	L747
3136  ca1b               L564:
3137                     ; 948 	    case 5:  emb_itoa(uip_stat.ip.lblenerr,  OctetArray, 10, 10); break;
3139  ca1b 4b0a          	push	#10
3140  ca1d 4b0a          	push	#10
3141  ca1f ae0010        	ldw	x,#_OctetArray
3142  ca22 89            	pushw	x
3143  ca23 ce009f        	ldw	x,_uip_stat+22
3144  ca26 89            	pushw	x
3145  ca27 ce009d        	ldw	x,_uip_stat+20
3149  ca2a cccb50        	jra	L747
3150  ca2d               L764:
3151                     ; 949 	    case 6:  emb_itoa(uip_stat.ip.fragerr,   OctetArray, 10, 10); break;
3153  ca2d 4b0a          	push	#10
3154  ca2f 4b0a          	push	#10
3155  ca31 ae0010        	ldw	x,#_OctetArray
3156  ca34 89            	pushw	x
3157  ca35 ce00a3        	ldw	x,_uip_stat+26
3158  ca38 89            	pushw	x
3159  ca39 ce00a1        	ldw	x,_uip_stat+24
3163  ca3c cccb50        	jra	L747
3164  ca3f               L174:
3165                     ; 950 	    case 7:  emb_itoa(uip_stat.ip.chkerr,    OctetArray, 10, 10); break;
3167  ca3f 4b0a          	push	#10
3168  ca41 4b0a          	push	#10
3169  ca43 ae0010        	ldw	x,#_OctetArray
3170  ca46 89            	pushw	x
3171  ca47 ce00a7        	ldw	x,_uip_stat+30
3172  ca4a 89            	pushw	x
3173  ca4b ce00a5        	ldw	x,_uip_stat+28
3177  ca4e cccb50        	jra	L747
3178  ca51               L374:
3179                     ; 951 	    case 8:  emb_itoa(uip_stat.ip.protoerr,  OctetArray, 10, 10); break;
3181  ca51 4b0a          	push	#10
3182  ca53 4b0a          	push	#10
3183  ca55 ae0010        	ldw	x,#_OctetArray
3184  ca58 89            	pushw	x
3185  ca59 ce00ab        	ldw	x,_uip_stat+34
3186  ca5c 89            	pushw	x
3187  ca5d ce00a9        	ldw	x,_uip_stat+32
3191  ca60 cccb50        	jra	L747
3192  ca63               L574:
3193                     ; 952 	    case 9:  emb_itoa(uip_stat.icmp.drop,    OctetArray, 10, 10); break;
3195  ca63 4b0a          	push	#10
3196  ca65 4b0a          	push	#10
3197  ca67 ae0010        	ldw	x,#_OctetArray
3198  ca6a 89            	pushw	x
3199  ca6b ce00af        	ldw	x,_uip_stat+38
3200  ca6e 89            	pushw	x
3201  ca6f ce00ad        	ldw	x,_uip_stat+36
3205  ca72 cccb50        	jra	L747
3206  ca75               L774:
3207                     ; 953 	    case 10: emb_itoa(uip_stat.icmp.recv,    OctetArray, 10, 10); break;
3209  ca75 4b0a          	push	#10
3210  ca77 4b0a          	push	#10
3211  ca79 ae0010        	ldw	x,#_OctetArray
3212  ca7c 89            	pushw	x
3213  ca7d ce00b3        	ldw	x,_uip_stat+42
3214  ca80 89            	pushw	x
3215  ca81 ce00b1        	ldw	x,_uip_stat+40
3219  ca84 cccb50        	jra	L747
3220  ca87               L105:
3221                     ; 954 	    case 11: emb_itoa(uip_stat.icmp.sent,    OctetArray, 10, 10); break;
3223  ca87 4b0a          	push	#10
3224  ca89 4b0a          	push	#10
3225  ca8b ae0010        	ldw	x,#_OctetArray
3226  ca8e 89            	pushw	x
3227  ca8f ce00b7        	ldw	x,_uip_stat+46
3228  ca92 89            	pushw	x
3229  ca93 ce00b5        	ldw	x,_uip_stat+44
3233  ca96 cccb50        	jra	L747
3234  ca99               L305:
3235                     ; 955 	    case 12: emb_itoa(uip_stat.icmp.typeerr, OctetArray, 10, 10); break;
3237  ca99 4b0a          	push	#10
3238  ca9b 4b0a          	push	#10
3239  ca9d ae0010        	ldw	x,#_OctetArray
3240  caa0 89            	pushw	x
3241  caa1 ce00bb        	ldw	x,_uip_stat+50
3242  caa4 89            	pushw	x
3243  caa5 ce00b9        	ldw	x,_uip_stat+48
3247  caa8 cccb50        	jra	L747
3248  caab               L505:
3249                     ; 956 	    case 13: emb_itoa(uip_stat.tcp.drop,     OctetArray, 10, 10); break;
3251  caab 4b0a          	push	#10
3252  caad 4b0a          	push	#10
3253  caaf ae0010        	ldw	x,#_OctetArray
3254  cab2 89            	pushw	x
3255  cab3 ce00bf        	ldw	x,_uip_stat+54
3256  cab6 89            	pushw	x
3257  cab7 ce00bd        	ldw	x,_uip_stat+52
3261  caba cccb50        	jra	L747
3262  cabd               L705:
3263                     ; 957 	    case 14: emb_itoa(uip_stat.tcp.recv,     OctetArray, 10, 10); break;
3265  cabd 4b0a          	push	#10
3266  cabf 4b0a          	push	#10
3267  cac1 ae0010        	ldw	x,#_OctetArray
3268  cac4 89            	pushw	x
3269  cac5 ce00c3        	ldw	x,_uip_stat+58
3270  cac8 89            	pushw	x
3271  cac9 ce00c1        	ldw	x,_uip_stat+56
3275  cacc cccb50        	jra	L747
3276  cacf               L115:
3277                     ; 958 	    case 15: emb_itoa(uip_stat.tcp.sent,     OctetArray, 10, 10); break;
3279  cacf 4b0a          	push	#10
3280  cad1 4b0a          	push	#10
3281  cad3 ae0010        	ldw	x,#_OctetArray
3282  cad6 89            	pushw	x
3283  cad7 ce00c7        	ldw	x,_uip_stat+62
3284  cada 89            	pushw	x
3285  cadb ce00c5        	ldw	x,_uip_stat+60
3289  cade 2070          	jra	L747
3290  cae0               L315:
3291                     ; 959 	    case 16: emb_itoa(uip_stat.tcp.chkerr,   OctetArray, 10, 10); break;
3293  cae0 4b0a          	push	#10
3294  cae2 4b0a          	push	#10
3295  cae4 ae0010        	ldw	x,#_OctetArray
3296  cae7 89            	pushw	x
3297  cae8 ce00cb        	ldw	x,_uip_stat+66
3298  caeb 89            	pushw	x
3299  caec ce00c9        	ldw	x,_uip_stat+64
3303  caef 205f          	jra	L747
3304  caf1               L515:
3305                     ; 960 	    case 17: emb_itoa(uip_stat.tcp.ackerr,   OctetArray, 10, 10); break;
3307  caf1 4b0a          	push	#10
3308  caf3 4b0a          	push	#10
3309  caf5 ae0010        	ldw	x,#_OctetArray
3310  caf8 89            	pushw	x
3311  caf9 ce00cf        	ldw	x,_uip_stat+70
3312  cafc 89            	pushw	x
3313  cafd ce00cd        	ldw	x,_uip_stat+68
3317  cb00 204e          	jra	L747
3318  cb02               L715:
3319                     ; 961 	    case 18: emb_itoa(uip_stat.tcp.rst,      OctetArray, 10, 10); break;
3321  cb02 4b0a          	push	#10
3322  cb04 4b0a          	push	#10
3323  cb06 ae0010        	ldw	x,#_OctetArray
3324  cb09 89            	pushw	x
3325  cb0a ce00d3        	ldw	x,_uip_stat+74
3326  cb0d 89            	pushw	x
3327  cb0e ce00d1        	ldw	x,_uip_stat+72
3331  cb11 203d          	jra	L747
3332  cb13               L125:
3333                     ; 962 	    case 19: emb_itoa(uip_stat.tcp.rexmit,   OctetArray, 10, 10); break;
3335  cb13 4b0a          	push	#10
3336  cb15 4b0a          	push	#10
3337  cb17 ae0010        	ldw	x,#_OctetArray
3338  cb1a 89            	pushw	x
3339  cb1b ce00d7        	ldw	x,_uip_stat+78
3340  cb1e 89            	pushw	x
3341  cb1f ce00d5        	ldw	x,_uip_stat+76
3345  cb22 202c          	jra	L747
3346  cb24               L325:
3347                     ; 963 	    case 20: emb_itoa(uip_stat.tcp.syndrop,  OctetArray, 10, 10); break;
3349  cb24 4b0a          	push	#10
3350  cb26 4b0a          	push	#10
3351  cb28 ae0010        	ldw	x,#_OctetArray
3352  cb2b 89            	pushw	x
3353  cb2c ce00db        	ldw	x,_uip_stat+82
3354  cb2f 89            	pushw	x
3355  cb30 ce00d9        	ldw	x,_uip_stat+80
3359  cb33 201b          	jra	L747
3360  cb35               L525:
3361                     ; 964 	    case 21: emb_itoa(uip_stat.tcp.synrst,   OctetArray, 10, 10); break;
3363  cb35 4b0a          	push	#10
3364  cb37 4b0a          	push	#10
3365  cb39 ae0010        	ldw	x,#_OctetArray
3366  cb3c 89            	pushw	x
3367  cb3d ce00df        	ldw	x,_uip_stat+86
3368  cb40 89            	pushw	x
3369  cb41 ce00dd        	ldw	x,_uip_stat+84
3373  cb44 200a          	jra	L747
3374  cb46               L725:
3375                     ; 965 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3377  cb46 4b0a          	push	#10
3378  cb48 4b0a          	push	#10
3379  cb4a ae0010        	ldw	x,#_OctetArray
3380  cb4d 89            	pushw	x
3381  cb4e 5f            	clrw	x
3382  cb4f 89            	pushw	x
3386  cb50               L747:
3387  cb50 89            	pushw	x
3388  cb51 cdc410        	call	_emb_itoa
3389  cb54 5b08          	addw	sp,#8
3390                     ; 968 	  for (i=0; i<10; i++) {
3392  cb56 4f            	clr	a
3393  cb57 6b07          	ld	(OFST+0,sp),a
3395  cb59               L157:
3396                     ; 969             *pBuffer = OctetArray[i];
3398  cb59 5f            	clrw	x
3399  cb5a 97            	ld	xl,a
3400  cb5b d60010        	ld	a,(_OctetArray,x)
3401  cb5e 1e08          	ldw	x,(OFST+1,sp)
3402  cb60 f7            	ld	(x),a
3403                     ; 970             pBuffer++;
3405  cb61 5c            	incw	x
3406  cb62 1f08          	ldw	(OFST+1,sp),x
3407                     ; 971             nBytes++;
3409  cb64 1e05          	ldw	x,(OFST-2,sp)
3410  cb66 5c            	incw	x
3411  cb67 1f05          	ldw	(OFST-2,sp),x
3413                     ; 968 	  for (i=0; i<10; i++) {
3415  cb69 0c07          	inc	(OFST+0,sp)
3419  cb6b 7b07          	ld	a,(OFST+0,sp)
3420  cb6d a10a          	cp	a,#10
3421  cb6f 25e8          	jrult	L157
3422                     ; 976           *ppData = *ppData + 10;
3424  cb71 1e0c          	ldw	x,(OFST+5,sp)
3425  cb73 9093          	ldw	y,x
3426  cb75 fe            	ldw	x,(x)
3427  cb76 1c000a        	addw	x,#10
3428  cb79 90ff          	ldw	(y),x
3429                     ; 977           *pDataLeft = *pDataLeft - 10;
3431  cb7b 1e0e          	ldw	x,(OFST+7,sp)
3432  cb7d 9093          	ldw	y,x
3433  cb7f fe            	ldw	x,(x)
3434  cb80 1d000a        	subw	x,#10
3436  cb83 2031          	jp	LC011
3437  cb85               L347:
3438                     ; 982         else if (nParsedMode == 'f') {
3440  cb85 a166          	cp	a,#102
3441  cb87 2632          	jrne	L167
3442                     ; 985 	  for(i=0; i<16; i++) {
3444  cb89 4f            	clr	a
3445  cb8a 6b07          	ld	(OFST+0,sp),a
3447  cb8c               L367:
3448                     ; 986 	    *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
3450  cb8c cdd6a6        	call	_GpioGetPin
3452  cb8f 1e08          	ldw	x,(OFST+1,sp)
3453  cb91 ab30          	add	a,#48
3454  cb93 f7            	ld	(x),a
3455                     ; 987             pBuffer++;
3457  cb94 5c            	incw	x
3458  cb95 1f08          	ldw	(OFST+1,sp),x
3459                     ; 988             nBytes++;
3461  cb97 1e05          	ldw	x,(OFST-2,sp)
3462  cb99 5c            	incw	x
3463  cb9a 1f05          	ldw	(OFST-2,sp),x
3465                     ; 985 	  for(i=0; i<16; i++) {
3467  cb9c 0c07          	inc	(OFST+0,sp)
3471  cb9e 7b07          	ld	a,(OFST+0,sp)
3472  cba0 a110          	cp	a,#16
3473  cba2 25e8          	jrult	L367
3474                     ; 992           *ppData = *ppData + 16;
3476  cba4 1e0c          	ldw	x,(OFST+5,sp)
3477  cba6 9093          	ldw	y,x
3478  cba8 fe            	ldw	x,(x)
3479  cba9 1c0010        	addw	x,#16
3480  cbac 90ff          	ldw	(y),x
3481                     ; 993           *pDataLeft = *pDataLeft - 16;
3483  cbae 1e0e          	ldw	x,(OFST+7,sp)
3484  cbb0 9093          	ldw	y,x
3485  cbb2 fe            	ldw	x,(x)
3486  cbb3 1d0010        	subw	x,#16
3487  cbb6               LC011:
3488  cbb6 90ff          	ldw	(y),x
3490  cbb8 ccce69        	jra	L306
3491  cbbb               L167:
3492                     ; 996         else if (nParsedMode == 'g') {
3494  cbbb a167          	cp	a,#103
3495  cbbd 2623          	jrne	L377
3496                     ; 1000 	  if (invert_output == 1) {  // Insert 'checked'
3498  cbbf c6005e        	ld	a,_invert_output
3499  cbc2 4a            	dec	a
3500  cbc3 26f3          	jrne	L306
3501                     ; 1001             for(i=0; i<7; i++) {
3503  cbc5 6b07          	ld	(OFST+0,sp),a
3505  cbc7               L777:
3506                     ; 1002               *pBuffer = checked[i];
3508  cbc7 5f            	clrw	x
3509  cbc8 97            	ld	xl,a
3510  cbc9 d68080        	ld	a,(L31_checked,x)
3511  cbcc 1e08          	ldw	x,(OFST+1,sp)
3512  cbce f7            	ld	(x),a
3513                     ; 1003               pBuffer++;
3515  cbcf 5c            	incw	x
3516  cbd0 1f08          	ldw	(OFST+1,sp),x
3517                     ; 1004               nBytes++;
3519  cbd2 1e05          	ldw	x,(OFST-2,sp)
3520  cbd4 5c            	incw	x
3521  cbd5 1f05          	ldw	(OFST-2,sp),x
3523                     ; 1001             for(i=0; i<7; i++) {
3525  cbd7 0c07          	inc	(OFST+0,sp)
3529  cbd9 7b07          	ld	a,(OFST+0,sp)
3530  cbdb a107          	cp	a,#7
3531  cbdd 25e8          	jrult	L777
3532  cbdf ccce69        	jra	L306
3533  cbe2               L377:
3534                     ; 1009         else if (nParsedMode == 'h') {
3536  cbe2 a168          	cp	a,#104
3537  cbe4 2622          	jrne	L7001
3538                     ; 1014 	  if (invert_output == 0) {  // Insert 'checked'
3540  cbe6 c6005e        	ld	a,_invert_output
3541  cbe9 26f4          	jrne	L306
3542                     ; 1015             for(i=0; i<7; i++) {
3544  cbeb 6b07          	ld	(OFST+0,sp),a
3546  cbed               L3101:
3547                     ; 1016               *pBuffer = checked[i];
3549  cbed 5f            	clrw	x
3550  cbee 97            	ld	xl,a
3551  cbef d68080        	ld	a,(L31_checked,x)
3552  cbf2 1e08          	ldw	x,(OFST+1,sp)
3553  cbf4 f7            	ld	(x),a
3554                     ; 1017               pBuffer++;
3556  cbf5 5c            	incw	x
3557  cbf6 1f08          	ldw	(OFST+1,sp),x
3558                     ; 1018               nBytes++;
3560  cbf8 1e05          	ldw	x,(OFST-2,sp)
3561  cbfa 5c            	incw	x
3562  cbfb 1f05          	ldw	(OFST-2,sp),x
3564                     ; 1015             for(i=0; i<7; i++) {
3566  cbfd 0c07          	inc	(OFST+0,sp)
3570  cbff 7b07          	ld	a,(OFST+0,sp)
3571  cc01 a107          	cp	a,#7
3572  cc03 25e8          	jrult	L3101
3573  cc05 ccce69        	jra	L306
3574  cc08               L7001:
3575                     ; 1023         else if (nParsedMode == 'x') {
3577  cc08 a178          	cp	a,#120
3578  cc0a 26f9          	jrne	L306
3579                     ; 1033           *pBuffer = 'h'; pBuffer++; nBytes++;
3581  cc0c 1e08          	ldw	x,(OFST+1,sp)
3582  cc0e a668          	ld	a,#104
3583  cc10 f7            	ld	(x),a
3586  cc11 5c            	incw	x
3587  cc12 1f08          	ldw	(OFST+1,sp),x
3590  cc14 1e05          	ldw	x,(OFST-2,sp)
3591  cc16 5c            	incw	x
3592  cc17 1f05          	ldw	(OFST-2,sp),x
3594                     ; 1034           *pBuffer = 't'; pBuffer++; nBytes++;
3596  cc19 1e08          	ldw	x,(OFST+1,sp)
3597  cc1b a674          	ld	a,#116
3598  cc1d f7            	ld	(x),a
3601  cc1e 5c            	incw	x
3602  cc1f 1f08          	ldw	(OFST+1,sp),x
3605  cc21 1e05          	ldw	x,(OFST-2,sp)
3606  cc23 5c            	incw	x
3607  cc24 1f05          	ldw	(OFST-2,sp),x
3609                     ; 1035           *pBuffer = 't'; pBuffer++; nBytes++;
3611  cc26 1e08          	ldw	x,(OFST+1,sp)
3612  cc28 f7            	ld	(x),a
3615  cc29 5c            	incw	x
3616  cc2a 1f08          	ldw	(OFST+1,sp),x
3619  cc2c 1e05          	ldw	x,(OFST-2,sp)
3620  cc2e 5c            	incw	x
3621  cc2f 1f05          	ldw	(OFST-2,sp),x
3623                     ; 1036           *pBuffer = 'p'; pBuffer++; nBytes++;
3625  cc31 1e08          	ldw	x,(OFST+1,sp)
3626  cc33 a670          	ld	a,#112
3627  cc35 f7            	ld	(x),a
3630  cc36 5c            	incw	x
3631  cc37 1f08          	ldw	(OFST+1,sp),x
3634  cc39 1e05          	ldw	x,(OFST-2,sp)
3635  cc3b 5c            	incw	x
3636  cc3c 1f05          	ldw	(OFST-2,sp),x
3638                     ; 1037           *pBuffer = ':'; pBuffer++; nBytes++;
3640  cc3e 1e08          	ldw	x,(OFST+1,sp)
3641  cc40 a63a          	ld	a,#58
3642  cc42 f7            	ld	(x),a
3645  cc43 5c            	incw	x
3646  cc44 1f08          	ldw	(OFST+1,sp),x
3649  cc46 1e05          	ldw	x,(OFST-2,sp)
3650  cc48 5c            	incw	x
3651  cc49 1f05          	ldw	(OFST-2,sp),x
3653                     ; 1038           *pBuffer = '/'; pBuffer++; nBytes++;
3655  cc4b 1e08          	ldw	x,(OFST+1,sp)
3656  cc4d a62f          	ld	a,#47
3657  cc4f f7            	ld	(x),a
3660  cc50 5c            	incw	x
3661  cc51 1f08          	ldw	(OFST+1,sp),x
3664  cc53 1e05          	ldw	x,(OFST-2,sp)
3665  cc55 5c            	incw	x
3666  cc56 1f05          	ldw	(OFST-2,sp),x
3668                     ; 1039           *pBuffer = '/'; pBuffer++; nBytes++;
3670  cc58 1e08          	ldw	x,(OFST+1,sp)
3671  cc5a f7            	ld	(x),a
3674  cc5b 5c            	incw	x
3675  cc5c 1f08          	ldw	(OFST+1,sp),x
3678  cc5e 1e05          	ldw	x,(OFST-2,sp)
3679  cc60 5c            	incw	x
3680  cc61 1f05          	ldw	(OFST-2,sp),x
3682                     ; 1043           emb_itoa(ex_stored_hostaddr4,  OctetArray, 10, 3);
3684  cc63 4b03          	push	#3
3685  cc65 4b0a          	push	#10
3686  cc67 ae0010        	ldw	x,#_OctetArray
3687  cc6a 89            	pushw	x
3688  cc6b 5500590003    	mov	c_lreg+3,_ex_stored_hostaddr4
3689  cc70 3f02          	clr	c_lreg+2
3690  cc72 3f01          	clr	c_lreg+1
3691  cc74 3f00          	clr	c_lreg
3692  cc76 be02          	ldw	x,c_lreg+2
3693  cc78 89            	pushw	x
3694  cc79 be00          	ldw	x,c_lreg
3695  cc7b 89            	pushw	x
3696  cc7c cdc410        	call	_emb_itoa
3698  cc7f 5b08          	addw	sp,#8
3699                     ; 1045 	  if (OctetArray[0] != '0') {
3701  cc81 c60010        	ld	a,_OctetArray
3702  cc84 a130          	cp	a,#48
3703  cc86 270b          	jreq	L5201
3704                     ; 1046 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3706  cc88 1e08          	ldw	x,(OFST+1,sp)
3707  cc8a f7            	ld	(x),a
3710  cc8b 5c            	incw	x
3711  cc8c 1f08          	ldw	(OFST+1,sp),x
3714  cc8e 1e05          	ldw	x,(OFST-2,sp)
3715  cc90 5c            	incw	x
3716  cc91 1f05          	ldw	(OFST-2,sp),x
3718  cc93               L5201:
3719                     ; 1048 	  if (OctetArray[0] != '0') {
3721  cc93 a130          	cp	a,#48
3722  cc95 2707          	jreq	L7201
3723                     ; 1049             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3725  cc97 1e08          	ldw	x,(OFST+1,sp)
3726  cc99 c60011        	ld	a,_OctetArray+1
3730  cc9c 2009          	jp	LC005
3731  cc9e               L7201:
3732                     ; 1051 	  else if (OctetArray[1] != '0') {
3734  cc9e c60011        	ld	a,_OctetArray+1
3735  cca1 a130          	cp	a,#48
3736  cca3 270b          	jreq	L1301
3737                     ; 1052             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3739  cca5 1e08          	ldw	x,(OFST+1,sp)
3744  cca7               LC005:
3745  cca7 f7            	ld	(x),a
3747  cca8 5c            	incw	x
3748  cca9 1f08          	ldw	(OFST+1,sp),x
3750  ccab 1e05          	ldw	x,(OFST-2,sp)
3751  ccad 5c            	incw	x
3752  ccae 1f05          	ldw	(OFST-2,sp),x
3754  ccb0               L1301:
3755                     ; 1054           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3757  ccb0 1e08          	ldw	x,(OFST+1,sp)
3758  ccb2 c60012        	ld	a,_OctetArray+2
3759  ccb5 f7            	ld	(x),a
3762  ccb6 5c            	incw	x
3763  ccb7 1f08          	ldw	(OFST+1,sp),x
3766  ccb9 1e05          	ldw	x,(OFST-2,sp)
3767  ccbb 5c            	incw	x
3768  ccbc 1f05          	ldw	(OFST-2,sp),x
3770                     ; 1056           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3772  ccbe 1e08          	ldw	x,(OFST+1,sp)
3773  ccc0 a62e          	ld	a,#46
3774  ccc2 f7            	ld	(x),a
3777  ccc3 5c            	incw	x
3778  ccc4 1f08          	ldw	(OFST+1,sp),x
3781  ccc6 1e05          	ldw	x,(OFST-2,sp)
3782  ccc8 5c            	incw	x
3783  ccc9 1f05          	ldw	(OFST-2,sp),x
3785                     ; 1059           emb_itoa(ex_stored_hostaddr3,  OctetArray, 10, 3);
3787  cccb 4b03          	push	#3
3788  cccd 4b0a          	push	#10
3789  cccf ae0010        	ldw	x,#_OctetArray
3790  ccd2 89            	pushw	x
3791  ccd3 5500580003    	mov	c_lreg+3,_ex_stored_hostaddr3
3792  ccd8 3f02          	clr	c_lreg+2
3793  ccda 3f01          	clr	c_lreg+1
3794  ccdc 3f00          	clr	c_lreg
3795  ccde be02          	ldw	x,c_lreg+2
3796  cce0 89            	pushw	x
3797  cce1 be00          	ldw	x,c_lreg
3798  cce3 89            	pushw	x
3799  cce4 cdc410        	call	_emb_itoa
3801  cce7 5b08          	addw	sp,#8
3802                     ; 1061 	  if (OctetArray[0] != '0') {
3804  cce9 c60010        	ld	a,_OctetArray
3805  ccec a130          	cp	a,#48
3806  ccee 270b          	jreq	L5301
3807                     ; 1062 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3809  ccf0 1e08          	ldw	x,(OFST+1,sp)
3810  ccf2 f7            	ld	(x),a
3813  ccf3 5c            	incw	x
3814  ccf4 1f08          	ldw	(OFST+1,sp),x
3817  ccf6 1e05          	ldw	x,(OFST-2,sp)
3818  ccf8 5c            	incw	x
3819  ccf9 1f05          	ldw	(OFST-2,sp),x
3821  ccfb               L5301:
3822                     ; 1064 	  if (OctetArray[0] != '0') {
3824  ccfb a130          	cp	a,#48
3825  ccfd 2707          	jreq	L7301
3826                     ; 1065             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3828  ccff 1e08          	ldw	x,(OFST+1,sp)
3829  cd01 c60011        	ld	a,_OctetArray+1
3833  cd04 2009          	jp	LC006
3834  cd06               L7301:
3835                     ; 1067 	  else if (OctetArray[1] != '0') {
3837  cd06 c60011        	ld	a,_OctetArray+1
3838  cd09 a130          	cp	a,#48
3839  cd0b 270b          	jreq	L1401
3840                     ; 1068             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3842  cd0d 1e08          	ldw	x,(OFST+1,sp)
3847  cd0f               LC006:
3848  cd0f f7            	ld	(x),a
3850  cd10 5c            	incw	x
3851  cd11 1f08          	ldw	(OFST+1,sp),x
3853  cd13 1e05          	ldw	x,(OFST-2,sp)
3854  cd15 5c            	incw	x
3855  cd16 1f05          	ldw	(OFST-2,sp),x
3857  cd18               L1401:
3858                     ; 1070           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3860  cd18 1e08          	ldw	x,(OFST+1,sp)
3861  cd1a c60012        	ld	a,_OctetArray+2
3862  cd1d f7            	ld	(x),a
3865  cd1e 5c            	incw	x
3866  cd1f 1f08          	ldw	(OFST+1,sp),x
3869  cd21 1e05          	ldw	x,(OFST-2,sp)
3870  cd23 5c            	incw	x
3871  cd24 1f05          	ldw	(OFST-2,sp),x
3873                     ; 1072           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3875  cd26 1e08          	ldw	x,(OFST+1,sp)
3876  cd28 a62e          	ld	a,#46
3877  cd2a f7            	ld	(x),a
3880  cd2b 5c            	incw	x
3881  cd2c 1f08          	ldw	(OFST+1,sp),x
3884  cd2e 1e05          	ldw	x,(OFST-2,sp)
3885  cd30 5c            	incw	x
3886  cd31 1f05          	ldw	(OFST-2,sp),x
3888                     ; 1075           emb_itoa(ex_stored_hostaddr2,  OctetArray, 10, 3);
3890  cd33 4b03          	push	#3
3891  cd35 4b0a          	push	#10
3892  cd37 ae0010        	ldw	x,#_OctetArray
3893  cd3a 89            	pushw	x
3894  cd3b 5500570003    	mov	c_lreg+3,_ex_stored_hostaddr2
3895  cd40 3f02          	clr	c_lreg+2
3896  cd42 3f01          	clr	c_lreg+1
3897  cd44 3f00          	clr	c_lreg
3898  cd46 be02          	ldw	x,c_lreg+2
3899  cd48 89            	pushw	x
3900  cd49 be00          	ldw	x,c_lreg
3901  cd4b 89            	pushw	x
3902  cd4c cdc410        	call	_emb_itoa
3904  cd4f 5b08          	addw	sp,#8
3905                     ; 1077 	  if (OctetArray[0] != '0') {
3907  cd51 c60010        	ld	a,_OctetArray
3908  cd54 a130          	cp	a,#48
3909  cd56 270b          	jreq	L5401
3910                     ; 1078 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3912  cd58 1e08          	ldw	x,(OFST+1,sp)
3913  cd5a f7            	ld	(x),a
3916  cd5b 5c            	incw	x
3917  cd5c 1f08          	ldw	(OFST+1,sp),x
3920  cd5e 1e05          	ldw	x,(OFST-2,sp)
3921  cd60 5c            	incw	x
3922  cd61 1f05          	ldw	(OFST-2,sp),x
3924  cd63               L5401:
3925                     ; 1080 	  if (OctetArray[0] != '0') {
3927  cd63 a130          	cp	a,#48
3928  cd65 2707          	jreq	L7401
3929                     ; 1081             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3931  cd67 1e08          	ldw	x,(OFST+1,sp)
3932  cd69 c60011        	ld	a,_OctetArray+1
3936  cd6c 2009          	jp	LC007
3937  cd6e               L7401:
3938                     ; 1083 	  else if (OctetArray[1] != '0') {
3940  cd6e c60011        	ld	a,_OctetArray+1
3941  cd71 a130          	cp	a,#48
3942  cd73 270b          	jreq	L1501
3943                     ; 1084             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3945  cd75 1e08          	ldw	x,(OFST+1,sp)
3950  cd77               LC007:
3951  cd77 f7            	ld	(x),a
3953  cd78 5c            	incw	x
3954  cd79 1f08          	ldw	(OFST+1,sp),x
3956  cd7b 1e05          	ldw	x,(OFST-2,sp)
3957  cd7d 5c            	incw	x
3958  cd7e 1f05          	ldw	(OFST-2,sp),x
3960  cd80               L1501:
3961                     ; 1086           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3963  cd80 1e08          	ldw	x,(OFST+1,sp)
3964  cd82 c60012        	ld	a,_OctetArray+2
3965  cd85 f7            	ld	(x),a
3968  cd86 5c            	incw	x
3969  cd87 1f08          	ldw	(OFST+1,sp),x
3972  cd89 1e05          	ldw	x,(OFST-2,sp)
3973  cd8b 5c            	incw	x
3974  cd8c 1f05          	ldw	(OFST-2,sp),x
3976                     ; 1088           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3978  cd8e 1e08          	ldw	x,(OFST+1,sp)
3979  cd90 a62e          	ld	a,#46
3980  cd92 f7            	ld	(x),a
3983  cd93 5c            	incw	x
3984  cd94 1f08          	ldw	(OFST+1,sp),x
3987  cd96 1e05          	ldw	x,(OFST-2,sp)
3988  cd98 5c            	incw	x
3989  cd99 1f05          	ldw	(OFST-2,sp),x
3991                     ; 1091           emb_itoa(ex_stored_hostaddr1,  OctetArray, 10, 3);
3993  cd9b 4b03          	push	#3
3994  cd9d 4b0a          	push	#10
3995  cd9f ae0010        	ldw	x,#_OctetArray
3996  cda2 89            	pushw	x
3997  cda3 5500560003    	mov	c_lreg+3,_ex_stored_hostaddr1
3998  cda8 3f02          	clr	c_lreg+2
3999  cdaa 3f01          	clr	c_lreg+1
4000  cdac 3f00          	clr	c_lreg
4001  cdae be02          	ldw	x,c_lreg+2
4002  cdb0 89            	pushw	x
4003  cdb1 be00          	ldw	x,c_lreg
4004  cdb3 89            	pushw	x
4005  cdb4 cdc410        	call	_emb_itoa
4007  cdb7 5b08          	addw	sp,#8
4008                     ; 1093 	  if (OctetArray[0] != '0') {
4010  cdb9 c60010        	ld	a,_OctetArray
4011  cdbc a130          	cp	a,#48
4012  cdbe 270b          	jreq	L5501
4013                     ; 1094 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
4015  cdc0 1e08          	ldw	x,(OFST+1,sp)
4016  cdc2 f7            	ld	(x),a
4019  cdc3 5c            	incw	x
4020  cdc4 1f08          	ldw	(OFST+1,sp),x
4023  cdc6 1e05          	ldw	x,(OFST-2,sp)
4024  cdc8 5c            	incw	x
4025  cdc9 1f05          	ldw	(OFST-2,sp),x
4027  cdcb               L5501:
4028                     ; 1096 	  if (OctetArray[0] != '0') {
4030  cdcb a130          	cp	a,#48
4031  cdcd 2707          	jreq	L7501
4032                     ; 1097             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
4034  cdcf 1e08          	ldw	x,(OFST+1,sp)
4035  cdd1 c60011        	ld	a,_OctetArray+1
4039  cdd4 2009          	jp	LC008
4040  cdd6               L7501:
4041                     ; 1099 	  else if (OctetArray[1] != '0') {
4043  cdd6 c60011        	ld	a,_OctetArray+1
4044  cdd9 a130          	cp	a,#48
4045  cddb 270b          	jreq	L1601
4046                     ; 1100             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
4048  cddd 1e08          	ldw	x,(OFST+1,sp)
4053  cddf               LC008:
4054  cddf f7            	ld	(x),a
4056  cde0 5c            	incw	x
4057  cde1 1f08          	ldw	(OFST+1,sp),x
4059  cde3 1e05          	ldw	x,(OFST-2,sp)
4060  cde5 5c            	incw	x
4061  cde6 1f05          	ldw	(OFST-2,sp),x
4063  cde8               L1601:
4064                     ; 1102           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
4066  cde8 1e08          	ldw	x,(OFST+1,sp)
4067  cdea c60012        	ld	a,_OctetArray+2
4068  cded f7            	ld	(x),a
4071  cdee 5c            	incw	x
4072  cdef 1f08          	ldw	(OFST+1,sp),x
4075  cdf1 1e05          	ldw	x,(OFST-2,sp)
4076  cdf3 5c            	incw	x
4077  cdf4 1f05          	ldw	(OFST-2,sp),x
4079                     ; 1104           *pBuffer = ':'; pBuffer++; nBytes++; // Output ':'
4081  cdf6 1e08          	ldw	x,(OFST+1,sp)
4082  cdf8 a63a          	ld	a,#58
4083  cdfa f7            	ld	(x),a
4086  cdfb 5c            	incw	x
4087  cdfc 1f08          	ldw	(OFST+1,sp),x
4090  cdfe 1e05          	ldw	x,(OFST-2,sp)
4091  ce00 5c            	incw	x
4092  ce01 1f05          	ldw	(OFST-2,sp),x
4094                     ; 1106 	  emb_itoa(ex_stored_port, OctetArray, 10, 5); // Now output the Port number
4096  ce03 4b05          	push	#5
4097  ce05 4b0a          	push	#10
4098  ce07 ae0010        	ldw	x,#_OctetArray
4099  ce0a 89            	pushw	x
4100  ce0b ce004c        	ldw	x,_ex_stored_port
4101  ce0e cdf60f        	call	c_uitolx
4103  ce11 be02          	ldw	x,c_lreg+2
4104  ce13 89            	pushw	x
4105  ce14 be00          	ldw	x,c_lreg
4106  ce16 89            	pushw	x
4107  ce17 cdc410        	call	_emb_itoa
4109  ce1a 5b08          	addw	sp,#8
4110                     ; 1107 	  for(i=0; i<5; i++) { *pBuffer = OctetArray[i]; pBuffer++; nBytes++; }
4112  ce1c 4f            	clr	a
4113  ce1d 6b07          	ld	(OFST+0,sp),a
4115  ce1f               L5601:
4118  ce1f 5f            	clrw	x
4119  ce20 97            	ld	xl,a
4120  ce21 d60010        	ld	a,(_OctetArray,x)
4121  ce24 1e08          	ldw	x,(OFST+1,sp)
4122  ce26 f7            	ld	(x),a
4125  ce27 5c            	incw	x
4126  ce28 1f08          	ldw	(OFST+1,sp),x
4129  ce2a 1e05          	ldw	x,(OFST-2,sp)
4130  ce2c 5c            	incw	x
4131  ce2d 1f05          	ldw	(OFST-2,sp),x
4135  ce2f 0c07          	inc	(OFST+0,sp)
4139  ce31 7b07          	ld	a,(OFST+0,sp)
4140  ce33 a105          	cp	a,#5
4141  ce35 25e8          	jrult	L5601
4142                     ; 1111           *ppData = *ppData + 28;
4144  ce37 1e0c          	ldw	x,(OFST+5,sp)
4145  ce39 9093          	ldw	y,x
4146  ce3b fe            	ldw	x,(x)
4147  ce3c 1c001c        	addw	x,#28
4148  ce3f 90ff          	ldw	(y),x
4149                     ; 1112           *pDataLeft = *pDataLeft - 28;
4151  ce41 1e0e          	ldw	x,(OFST+7,sp)
4152  ce43 9093          	ldw	y,x
4153  ce45 fe            	ldw	x,(x)
4154  ce46 1d001c        	subw	x,#28
4155  ce49 cccbb6        	jp	LC011
4156  ce4c               L116:
4157                     ; 1116         *pBuffer = nByte;
4159  ce4c 1e08          	ldw	x,(OFST+1,sp)
4160  ce4e f7            	ld	(x),a
4161                     ; 1117         *ppData = *ppData + 1;
4163  ce4f 1e0c          	ldw	x,(OFST+5,sp)
4164  ce51 9093          	ldw	y,x
4165  ce53 fe            	ldw	x,(x)
4166  ce54 5c            	incw	x
4167  ce55 90ff          	ldw	(y),x
4168                     ; 1118         *pDataLeft = *pDataLeft - 1;
4170  ce57 1e0e          	ldw	x,(OFST+7,sp)
4171  ce59 9093          	ldw	y,x
4172  ce5b fe            	ldw	x,(x)
4173  ce5c 5a            	decw	x
4174  ce5d 90ff          	ldw	(y),x
4175                     ; 1119         pBuffer++;
4177  ce5f 1e08          	ldw	x,(OFST+1,sp)
4178                     ; 1120         nBytes++;
4180  ce61               LC009:
4183  ce61 5c            	incw	x
4184  ce62 1f08          	ldw	(OFST+1,sp),x
4187  ce64 1e05          	ldw	x,(OFST-2,sp)
4188  ce66 5c            	incw	x
4189  ce67 1f05          	ldw	(OFST-2,sp),x
4191  ce69               L306:
4192                     ; 689   while (nBytes < nMaxBytes) {
4194  ce69 1e05          	ldw	x,(OFST-2,sp)
4195  ce6b 1310          	cpw	x,(OFST+9,sp)
4196  ce6d 2403ccc665    	jrult	L106
4197  ce72               L506:
4198                     ; 1125   return nBytes;
4200  ce72 1e05          	ldw	x,(OFST-2,sp)
4203  ce74 5b09          	addw	sp,#9
4204  ce76 81            	ret	
4231                     ; 1129 void HttpDInit()
4231                     ; 1130 {
4232                     	switch	.text
4233  ce77               _HttpDInit:
4237                     ; 1132   uip_listen(htons(Port_Httpd));
4239  ce77 ce0061        	ldw	x,_Port_Httpd
4240  ce7a cdefeb        	call	_htons
4242  ce7d cde6ab        	call	_uip_listen
4244                     ; 1133   current_webpage = WEBPAGE_DEFAULT;
4246  ce80 725f001b      	clr	_current_webpage
4247                     ; 1134 }
4250  ce84 81            	ret	
4456                     	switch	.const
4457  be1d               L472:
4458  be1d d3fe          	dc.w	L7011
4459  be1f d405          	dc.w	L1111
4460  be21 d40c          	dc.w	L3111
4461  be23 d413          	dc.w	L5111
4462  be25 d41a          	dc.w	L7111
4463  be27 d421          	dc.w	L1211
4464  be29 d428          	dc.w	L3211
4465  be2b d42f          	dc.w	L5211
4466  be2d d436          	dc.w	L7211
4467  be2f d43d          	dc.w	L1311
4468  be31 d444          	dc.w	L3311
4469  be33 d44b          	dc.w	L5311
4470  be35 d452          	dc.w	L7311
4471  be37 d459          	dc.w	L1411
4472  be39 d460          	dc.w	L3411
4473  be3b d467          	dc.w	L5411
4474  be3d d46e          	dc.w	L7411
4475  be3f d475          	dc.w	L1511
4476  be41 d47c          	dc.w	L3511
4477  be43 d483          	dc.w	L5511
4478  be45 d48a          	dc.w	L7511
4479  be47 d491          	dc.w	L1611
4480  be49 d498          	dc.w	L3611
4481  be4b d49f          	dc.w	L5611
4482  be4d d4a6          	dc.w	L7611
4483  be4f d4ad          	dc.w	L1711
4484  be51 d4b4          	dc.w	L3711
4485  be53 d4bb          	dc.w	L5711
4486  be55 d4c2          	dc.w	L7711
4487  be57 d4c9          	dc.w	L1021
4488  be59 d4d0          	dc.w	L3021
4489  be5b d4d7          	dc.w	L5021
4490  be5d d564          	dc.w	L3321
4491  be5f d564          	dc.w	L3321
4492  be61 d564          	dc.w	L3321
4493  be63 d564          	dc.w	L3321
4494  be65 d564          	dc.w	L3321
4495  be67 d564          	dc.w	L3321
4496  be69 d564          	dc.w	L3321
4497  be6b d564          	dc.w	L3321
4498  be6d d564          	dc.w	L3321
4499  be6f d564          	dc.w	L3321
4500  be71 d564          	dc.w	L3321
4501  be73 d564          	dc.w	L3321
4502  be75 d564          	dc.w	L3321
4503  be77 d564          	dc.w	L3321
4504  be79 d564          	dc.w	L3321
4505  be7b d564          	dc.w	L3321
4506  be7d d564          	dc.w	L3321
4507  be7f d564          	dc.w	L3321
4508  be81 d564          	dc.w	L3321
4509  be83 d564          	dc.w	L3321
4510  be85 d564          	dc.w	L3321
4511  be87 d564          	dc.w	L3321
4512  be89 d564          	dc.w	L3321
4513  be8b d4de          	dc.w	L7021
4514  be8d d4e9          	dc.w	L1121
4515  be8f d564          	dc.w	L3321
4516  be91 d564          	dc.w	L3321
4517  be93 d564          	dc.w	L3321
4518  be95 d4f4          	dc.w	L3121
4519  be97 d4f6          	dc.w	L5121
4520  be99 d564          	dc.w	L3321
4521  be9b d508          	dc.w	L7121
4522  be9d d51a          	dc.w	L1221
4523  be9f d52c          	dc.w	L3221
4524  bea1 d537          	dc.w	L5221
4525                     ; 1137 void HttpDCall(	uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
4525                     ; 1138 {
4526                     	switch	.text
4527  ce85               _HttpDCall:
4529  ce85 89            	pushw	x
4530  ce86 5207          	subw	sp,#7
4531       00000007      OFST:	set	7
4534                     ; 1148   alpha_1 = '0';
4536                     ; 1149   alpha_2 = '0';
4538                     ; 1150   alpha_3 = '0';
4540                     ; 1151   alpha_4 = '0';
4542                     ; 1152   alpha_5 = '0';
4544                     ; 1154   if(uip_connected()) {
4546  ce88 720d00887a    	btjf	_uip_flags,#6,L3331
4547                     ; 1156     if(current_webpage == WEBPAGE_DEFAULT) {
4549  ce8d c6001b        	ld	a,_current_webpage
4550  ce90 260e          	jrne	L5331
4551                     ; 1157       pSocket->pData = g_HtmlPageDefault;
4553  ce92 1e0e          	ldw	x,(OFST+7,sp)
4554  ce94 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
4555  ce98 ef01          	ldw	(1,x),y
4556                     ; 1158       pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
4558  ce9a 90ae15d5      	ldw	y,#5589
4560  ce9e 2058          	jp	LC012
4561  cea0               L5331:
4562                     ; 1162     else if(current_webpage == WEBPAGE_ADDRESS) {
4564  cea0 a101          	cp	a,#1
4565  cea2 260e          	jrne	L1431
4566                     ; 1163       pSocket->pData = g_HtmlPageAddress;
4568  cea4 1e0e          	ldw	x,(OFST+7,sp)
4569  cea6 90ae965e      	ldw	y,#L71_g_HtmlPageAddress
4570  ceaa ef01          	ldw	(1,x),y
4571                     ; 1164       pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
4573  ceac 90ae1341      	ldw	y,#4929
4575  ceb0 2046          	jp	LC012
4576  ceb2               L1431:
4577                     ; 1168     else if(current_webpage == WEBPAGE_HELP) {
4579  ceb2 a103          	cp	a,#3
4580  ceb4 260e          	jrne	L5431
4581                     ; 1169       pSocket->pData = g_HtmlPageHelp;
4583  ceb6 1e0e          	ldw	x,(OFST+7,sp)
4584  ceb8 90aea9a0      	ldw	y,#L12_g_HtmlPageHelp
4585  cebc ef01          	ldw	(1,x),y
4586                     ; 1170       pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
4588  cebe 90ae075c      	ldw	y,#1884
4590  cec2 2034          	jp	LC012
4591  cec4               L5431:
4592                     ; 1172     else if(current_webpage == WEBPAGE_HELP2) {
4594  cec4 a104          	cp	a,#4
4595  cec6 260e          	jrne	L1531
4596                     ; 1173       pSocket->pData = g_HtmlPageHelp2;
4598  cec8 1e0e          	ldw	x,(OFST+7,sp)
4599  ceca 90aeb0fd      	ldw	y,#L32_g_HtmlPageHelp2
4600  cece ef01          	ldw	(1,x),y
4601                     ; 1174       pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
4603  ced0 90ae02bb      	ldw	y,#699
4605  ced4 2022          	jp	LC012
4606  ced6               L1531:
4607                     ; 1179     else if(current_webpage == WEBPAGE_STATS) {
4609  ced6 a105          	cp	a,#5
4610  ced8 260e          	jrne	L5531
4611                     ; 1180       pSocket->pData = g_HtmlPageStats;
4613  ceda 1e0e          	ldw	x,(OFST+7,sp)
4614  cedc 90aeb3b9      	ldw	y,#L52_g_HtmlPageStats
4615  cee0 ef01          	ldw	(1,x),y
4616                     ; 1181       pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
4618  cee2 90ae097e      	ldw	y,#2430
4620  cee6 2010          	jp	LC012
4621  cee8               L5531:
4622                     ; 1184     else if(current_webpage == WEBPAGE_RSTATE) {
4624  cee8 a106          	cp	a,#6
4625  ceea 260e          	jrne	L7331
4626                     ; 1185       pSocket->pData = g_HtmlPageRstate;
4628  ceec 1e0e          	ldw	x,(OFST+7,sp)
4629  ceee 90aebd38      	ldw	y,#L72_g_HtmlPageRstate
4630  cef2 ef01          	ldw	(1,x),y
4631                     ; 1186       pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
4633  cef4 90ae00a0      	ldw	y,#160
4634  cef8               LC012:
4635  cef8 ef03          	ldw	(3,x),y
4636  cefa               L7331:
4637                     ; 1188     pSocket->nNewlines = 0;
4639  cefa 1e0e          	ldw	x,(OFST+7,sp)
4640                     ; 1189     pSocket->nState = STATE_CONNECTED;
4642  cefc 7f            	clr	(x)
4643  cefd 6f05          	clr	(5,x)
4644                     ; 1190     pSocket->nPrevBytes = 0xFFFF;
4646  ceff 90aeffff      	ldw	y,#65535
4647  cf03 ef0a          	ldw	(10,x),y
4649  cf05 2041          	jra	L613
4650  cf07               L3331:
4651                     ; 1192   else if (uip_newdata() || uip_acked()) {
4653  cf07 7202008808    	btjt	_uip_flags,#1,L7631
4655  cf0c 7200008803cc  	btjf	_uip_flags,#0,L5631
4656  cf14               L7631:
4657                     ; 1193     if (pSocket->nState == STATE_CONNECTED) {
4659  cf14 1e0e          	ldw	x,(OFST+7,sp)
4660  cf16 f6            	ld	a,(x)
4661  cf17 2627          	jrne	L1731
4662                     ; 1194       if (nBytes == 0) return;
4664  cf19 1e0c          	ldw	x,(OFST+5,sp)
4665  cf1b 272b          	jreq	L613
4668                     ; 1195       if (*pBuffer == 'G') pSocket->nState = STATE_GET_G;
4670  cf1d 1e08          	ldw	x,(OFST+1,sp)
4671  cf1f f6            	ld	a,(x)
4672  cf20 a147          	cp	a,#71
4673  cf22 2606          	jrne	L5731
4676  cf24 1e0e          	ldw	x,(OFST+7,sp)
4677  cf26 a601          	ld	a,#1
4679  cf28 2008          	jp	LC013
4680  cf2a               L5731:
4681                     ; 1196       else if (*pBuffer == 'P') pSocket->nState = STATE_POST_P;
4683  cf2a a150          	cp	a,#80
4684  cf2c 2605          	jrne	L7731
4687  cf2e 1e0e          	ldw	x,(OFST+7,sp)
4688  cf30 a604          	ld	a,#4
4689  cf32               LC013:
4690  cf32 f7            	ld	(x),a
4691  cf33               L7731:
4692                     ; 1197       nBytes--;
4694  cf33 1e0c          	ldw	x,(OFST+5,sp)
4695  cf35 5a            	decw	x
4696  cf36 1f0c          	ldw	(OFST+5,sp),x
4697                     ; 1198       pBuffer++;
4699  cf38 1e08          	ldw	x,(OFST+1,sp)
4700  cf3a 5c            	incw	x
4701  cf3b 1f08          	ldw	(OFST+1,sp),x
4702  cf3d 1e0e          	ldw	x,(OFST+7,sp)
4703  cf3f f6            	ld	a,(x)
4704  cf40               L1731:
4705                     ; 1201     if (pSocket->nState == STATE_GET_G) {
4707  cf40 a101          	cp	a,#1
4708  cf42 2620          	jrne	L3041
4709                     ; 1202       if (nBytes == 0) return;
4711  cf44 1e0c          	ldw	x,(OFST+5,sp)
4712  cf46 2603          	jrne	L5041
4714  cf48               L613:
4717  cf48 5b09          	addw	sp,#9
4718  cf4a 81            	ret	
4719  cf4b               L5041:
4720                     ; 1203       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
4722  cf4b 1e08          	ldw	x,(OFST+1,sp)
4723  cf4d f6            	ld	a,(x)
4724  cf4e a145          	cp	a,#69
4725  cf50 2605          	jrne	L7041
4728  cf52 1e0e          	ldw	x,(OFST+7,sp)
4729  cf54 a602          	ld	a,#2
4730  cf56 f7            	ld	(x),a
4731  cf57               L7041:
4732                     ; 1204       nBytes--;
4734  cf57 1e0c          	ldw	x,(OFST+5,sp)
4735  cf59 5a            	decw	x
4736  cf5a 1f0c          	ldw	(OFST+5,sp),x
4737                     ; 1205       pBuffer++;
4739  cf5c 1e08          	ldw	x,(OFST+1,sp)
4740  cf5e 5c            	incw	x
4741  cf5f 1f08          	ldw	(OFST+1,sp),x
4742  cf61 1e0e          	ldw	x,(OFST+7,sp)
4743  cf63 f6            	ld	a,(x)
4744  cf64               L3041:
4745                     ; 1208     if (pSocket->nState == STATE_GET_GE) {
4747  cf64 a102          	cp	a,#2
4748  cf66 261d          	jrne	L1141
4749                     ; 1209       if (nBytes == 0) return;
4751  cf68 1e0c          	ldw	x,(OFST+5,sp)
4752  cf6a 27dc          	jreq	L613
4755                     ; 1210       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
4757  cf6c 1e08          	ldw	x,(OFST+1,sp)
4758  cf6e f6            	ld	a,(x)
4759  cf6f a154          	cp	a,#84
4760  cf71 2605          	jrne	L5141
4763  cf73 1e0e          	ldw	x,(OFST+7,sp)
4764  cf75 a603          	ld	a,#3
4765  cf77 f7            	ld	(x),a
4766  cf78               L5141:
4767                     ; 1211       nBytes--;
4769  cf78 1e0c          	ldw	x,(OFST+5,sp)
4770  cf7a 5a            	decw	x
4771  cf7b 1f0c          	ldw	(OFST+5,sp),x
4772                     ; 1212       pBuffer++;
4774  cf7d 1e08          	ldw	x,(OFST+1,sp)
4775  cf7f 5c            	incw	x
4776  cf80 1f08          	ldw	(OFST+1,sp),x
4777  cf82 1e0e          	ldw	x,(OFST+7,sp)
4778  cf84 f6            	ld	a,(x)
4779  cf85               L1141:
4780                     ; 1215     if (pSocket->nState == STATE_GET_GET) {
4782  cf85 a103          	cp	a,#3
4783  cf87 261d          	jrne	L7141
4784                     ; 1216       if (nBytes == 0) return;
4786  cf89 1e0c          	ldw	x,(OFST+5,sp)
4787  cf8b 27bb          	jreq	L613
4790                     ; 1217       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
4792  cf8d 1e08          	ldw	x,(OFST+1,sp)
4793  cf8f f6            	ld	a,(x)
4794  cf90 a120          	cp	a,#32
4795  cf92 2605          	jrne	L3241
4798  cf94 1e0e          	ldw	x,(OFST+7,sp)
4799  cf96 a608          	ld	a,#8
4800  cf98 f7            	ld	(x),a
4801  cf99               L3241:
4802                     ; 1218       nBytes--;
4804  cf99 1e0c          	ldw	x,(OFST+5,sp)
4805  cf9b 5a            	decw	x
4806  cf9c 1f0c          	ldw	(OFST+5,sp),x
4807                     ; 1219       pBuffer++;
4809  cf9e 1e08          	ldw	x,(OFST+1,sp)
4810  cfa0 5c            	incw	x
4811  cfa1 1f08          	ldw	(OFST+1,sp),x
4812  cfa3 1e0e          	ldw	x,(OFST+7,sp)
4813  cfa5 f6            	ld	a,(x)
4814  cfa6               L7141:
4815                     ; 1222     if (pSocket->nState == STATE_POST_P) {
4817  cfa6 a104          	cp	a,#4
4818  cfa8 261d          	jrne	L5241
4819                     ; 1223       if (nBytes == 0) return;
4821  cfaa 1e0c          	ldw	x,(OFST+5,sp)
4822  cfac 279a          	jreq	L613
4825                     ; 1224       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
4827  cfae 1e08          	ldw	x,(OFST+1,sp)
4828  cfb0 f6            	ld	a,(x)
4829  cfb1 a14f          	cp	a,#79
4830  cfb3 2605          	jrne	L1341
4833  cfb5 1e0e          	ldw	x,(OFST+7,sp)
4834  cfb7 a605          	ld	a,#5
4835  cfb9 f7            	ld	(x),a
4836  cfba               L1341:
4837                     ; 1225       nBytes--;
4839  cfba 1e0c          	ldw	x,(OFST+5,sp)
4840  cfbc 5a            	decw	x
4841  cfbd 1f0c          	ldw	(OFST+5,sp),x
4842                     ; 1226       pBuffer++;
4844  cfbf 1e08          	ldw	x,(OFST+1,sp)
4845  cfc1 5c            	incw	x
4846  cfc2 1f08          	ldw	(OFST+1,sp),x
4847  cfc4 1e0e          	ldw	x,(OFST+7,sp)
4848  cfc6 f6            	ld	a,(x)
4849  cfc7               L5241:
4850                     ; 1229     if (pSocket->nState == STATE_POST_PO) {
4852  cfc7 a105          	cp	a,#5
4853  cfc9 2620          	jrne	L3341
4854                     ; 1230       if (nBytes == 0) return;
4856  cfcb 1e0c          	ldw	x,(OFST+5,sp)
4857  cfcd 2603cccf48    	jreq	L613
4860                     ; 1231       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
4862  cfd2 1e08          	ldw	x,(OFST+1,sp)
4863  cfd4 f6            	ld	a,(x)
4864  cfd5 a153          	cp	a,#83
4865  cfd7 2605          	jrne	L7341
4868  cfd9 1e0e          	ldw	x,(OFST+7,sp)
4869  cfdb a606          	ld	a,#6
4870  cfdd f7            	ld	(x),a
4871  cfde               L7341:
4872                     ; 1232       nBytes--;
4874  cfde 1e0c          	ldw	x,(OFST+5,sp)
4875  cfe0 5a            	decw	x
4876  cfe1 1f0c          	ldw	(OFST+5,sp),x
4877                     ; 1233       pBuffer++;
4879  cfe3 1e08          	ldw	x,(OFST+1,sp)
4880  cfe5 5c            	incw	x
4881  cfe6 1f08          	ldw	(OFST+1,sp),x
4882  cfe8 1e0e          	ldw	x,(OFST+7,sp)
4883  cfea f6            	ld	a,(x)
4884  cfeb               L3341:
4885                     ; 1236     if (pSocket->nState == STATE_POST_POS) {
4887  cfeb a106          	cp	a,#6
4888  cfed 261d          	jrne	L1441
4889                     ; 1237       if (nBytes == 0) return;
4891  cfef 1e0c          	ldw	x,(OFST+5,sp)
4892  cff1 27dc          	jreq	L613
4895                     ; 1238       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
4897  cff3 1e08          	ldw	x,(OFST+1,sp)
4898  cff5 f6            	ld	a,(x)
4899  cff6 a154          	cp	a,#84
4900  cff8 2605          	jrne	L5441
4903  cffa 1e0e          	ldw	x,(OFST+7,sp)
4904  cffc a607          	ld	a,#7
4905  cffe f7            	ld	(x),a
4906  cfff               L5441:
4907                     ; 1239       nBytes--;
4909  cfff 1e0c          	ldw	x,(OFST+5,sp)
4910  d001 5a            	decw	x
4911  d002 1f0c          	ldw	(OFST+5,sp),x
4912                     ; 1240       pBuffer++;
4914  d004 1e08          	ldw	x,(OFST+1,sp)
4915  d006 5c            	incw	x
4916  d007 1f08          	ldw	(OFST+1,sp),x
4917  d009 1e0e          	ldw	x,(OFST+7,sp)
4918  d00b f6            	ld	a,(x)
4919  d00c               L1441:
4920                     ; 1243     if (pSocket->nState == STATE_POST_POST) {
4922  d00c a107          	cp	a,#7
4923  d00e 261d          	jrne	L7441
4924                     ; 1244       if (nBytes == 0) return;
4926  d010 1e0c          	ldw	x,(OFST+5,sp)
4927  d012 27bb          	jreq	L613
4930                     ; 1245       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
4932  d014 1e08          	ldw	x,(OFST+1,sp)
4933  d016 f6            	ld	a,(x)
4934  d017 a120          	cp	a,#32
4935  d019 2605          	jrne	L3541
4938  d01b 1e0e          	ldw	x,(OFST+7,sp)
4939  d01d a609          	ld	a,#9
4940  d01f f7            	ld	(x),a
4941  d020               L3541:
4942                     ; 1246       nBytes--;
4944  d020 1e0c          	ldw	x,(OFST+5,sp)
4945  d022 5a            	decw	x
4946  d023 1f0c          	ldw	(OFST+5,sp),x
4947                     ; 1247       pBuffer++;
4949  d025 1e08          	ldw	x,(OFST+1,sp)
4950  d027 5c            	incw	x
4951  d028 1f08          	ldw	(OFST+1,sp),x
4952  d02a 1e0e          	ldw	x,(OFST+7,sp)
4953  d02c f6            	ld	a,(x)
4954  d02d               L7441:
4955                     ; 1250     if (pSocket->nState == STATE_GOTPOST) {
4957  d02d a109          	cp	a,#9
4958  d02f 264c          	jrne	L5541
4960  d031 2046          	jra	L1641
4961  d033               L7541:
4962                     ; 1253         if (*pBuffer == '\n') {
4964  d033 1e08          	ldw	x,(OFST+1,sp)
4965  d035 f6            	ld	a,(x)
4966  d036 a10a          	cp	a,#10
4967  d038 2606          	jrne	L5641
4968                     ; 1254           pSocket->nNewlines++;
4970  d03a 1e0e          	ldw	x,(OFST+7,sp)
4971  d03c 6c05          	inc	(5,x)
4973  d03e 2008          	jra	L7641
4974  d040               L5641:
4975                     ; 1256         else if (*pBuffer == '\r') {
4977  d040 a10d          	cp	a,#13
4978  d042 2704          	jreq	L7641
4980                     ; 1259           pSocket->nNewlines = 0;
4982  d044 1e0e          	ldw	x,(OFST+7,sp)
4983  d046 6f05          	clr	(5,x)
4984  d048               L7641:
4985                     ; 1261         pBuffer++;
4987  d048 1e08          	ldw	x,(OFST+1,sp)
4988  d04a 5c            	incw	x
4989  d04b 1f08          	ldw	(OFST+1,sp),x
4990                     ; 1262         nBytes--;
4992  d04d 1e0c          	ldw	x,(OFST+5,sp)
4993  d04f 5a            	decw	x
4994  d050 1f0c          	ldw	(OFST+5,sp),x
4995                     ; 1263         if (pSocket->nNewlines == 2) {
4997  d052 1e0e          	ldw	x,(OFST+7,sp)
4998  d054 e605          	ld	a,(5,x)
4999  d056 a102          	cp	a,#2
5000  d058 261f          	jrne	L1641
5001                     ; 1265           if (pSocket->nState == STATE_GOTPOST) {
5003  d05a f6            	ld	a,(x)
5004  d05b a109          	cp	a,#9
5005  d05d 261e          	jrne	L5541
5006                     ; 1267             if(current_webpage == WEBPAGE_DEFAULT) pSocket->nParseLeft = PARSEBYTES_DEFAULT;
5008  d05f c6001b        	ld	a,_current_webpage
5009  d062 2607          	jrne	L1051
5012  d064 a67e          	ld	a,#126
5013  d066 e706          	ld	(6,x),a
5014  d068 c6001b        	ld	a,_current_webpage
5015  d06b               L1051:
5016                     ; 1268             if(current_webpage == WEBPAGE_ADDRESS) pSocket->nParseLeft = PARSEBYTES_ADDRESS;
5018  d06b 4a            	dec	a
5019  d06c 2604          	jrne	L3051
5022  d06e a693          	ld	a,#147
5023  d070 e706          	ld	(6,x),a
5024  d072               L3051:
5025                     ; 1269             pSocket->ParseState = PARSE_CMD;
5027  d072 6f09          	clr	(9,x)
5028                     ; 1271             pSocket->nState = STATE_PARSEPOST;
5030  d074 a60a          	ld	a,#10
5031  d076 f7            	ld	(x),a
5032  d077 2004          	jra	L5541
5033  d079               L1641:
5034                     ; 1252       while (nBytes != 0) {
5036  d079 1e0c          	ldw	x,(OFST+5,sp)
5037  d07b 26b6          	jrne	L7541
5038  d07d               L5541:
5039                     ; 1278     if (pSocket->nState == STATE_GOTGET) {
5041  d07d 1e0e          	ldw	x,(OFST+7,sp)
5042  d07f f6            	ld	a,(x)
5043  d080 a108          	cp	a,#8
5044  d082 2609          	jrne	L5051
5045                     ; 1281       pSocket->nParseLeft = 6; // Small parse number since we should have short
5047  d084 a606          	ld	a,#6
5048  d086 e706          	ld	(6,x),a
5049                     ; 1283       pSocket->ParseState = PARSE_SLASH1;
5051  d088 e709          	ld	(9,x),a
5052                     ; 1285       pSocket->nState = STATE_PARSEGET;
5054  d08a a60d          	ld	a,#13
5055  d08c f7            	ld	(x),a
5056  d08d               L5051:
5057                     ; 1288     if (pSocket->nState == STATE_PARSEPOST) {
5059  d08d a10a          	cp	a,#10
5060  d08f 2703ccd2ff    	jrne	L7051
5062  d094 ccd2f0        	jra	L3151
5063  d097               L1151:
5064                     ; 1298         if (pSocket->ParseState == PARSE_CMD) {
5066  d097 1e0e          	ldw	x,(OFST+7,sp)
5067  d099 e609          	ld	a,(9,x)
5068  d09b 263e          	jrne	L7151
5069                     ; 1299           pSocket->ParseCmd = *pBuffer;
5071  d09d 1e08          	ldw	x,(OFST+1,sp)
5072  d09f f6            	ld	a,(x)
5073  d0a0 1e0e          	ldw	x,(OFST+7,sp)
5074  d0a2 e707          	ld	(7,x),a
5075                     ; 1300           pSocket->ParseState = PARSE_NUM10;
5077  d0a4 a601          	ld	a,#1
5078  d0a6 e709          	ld	(9,x),a
5079                     ; 1301 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5081  d0a8 e606          	ld	a,(6,x)
5082  d0aa 2704          	jreq	L1251
5085  d0ac 6a06          	dec	(6,x)
5087  d0ae 2004          	jra	L3251
5088  d0b0               L1251:
5089                     ; 1302 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5091  d0b0 a605          	ld	a,#5
5092  d0b2 e709          	ld	(9,x),a
5093  d0b4               L3251:
5094                     ; 1303           pBuffer++;
5096  d0b4 1e08          	ldw	x,(OFST+1,sp)
5097  d0b6 5c            	incw	x
5098  d0b7 1f08          	ldw	(OFST+1,sp),x
5099                     ; 1305 	  if (pSocket->ParseCmd == 'o' ||
5099                     ; 1306 	      pSocket->ParseCmd == 'a' ||
5099                     ; 1307 	      pSocket->ParseCmd == 'b' ||
5099                     ; 1308 	      pSocket->ParseCmd == 'c' ||
5099                     ; 1309 	      pSocket->ParseCmd == 'd' ||
5099                     ; 1310 	      pSocket->ParseCmd == 'g') { }
5101  d0b9 1e0e          	ldw	x,(OFST+7,sp)
5102  d0bb e607          	ld	a,(7,x)
5103  d0bd a16f          	cp	a,#111
5104  d0bf 2603ccd2e2    	jreq	L3451
5106  d0c4 a161          	cp	a,#97
5107  d0c6 27f9          	jreq	L3451
5109  d0c8 a162          	cp	a,#98
5110  d0ca 27f5          	jreq	L3451
5112  d0cc a163          	cp	a,#99
5113  d0ce 27f1          	jreq	L3451
5115  d0d0 a164          	cp	a,#100
5116  d0d2 27ed          	jreq	L3451
5118  d0d4 a167          	cp	a,#103
5119  d0d6 27e9          	jreq	L3451
5120                     ; 1311 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5121  d0d8 ccd2c7        	jp	LC018
5122  d0db               L7151:
5123                     ; 1313         else if (pSocket->ParseState == PARSE_NUM10) {
5125  d0db a101          	cp	a,#1
5126  d0dd 2619          	jrne	L5451
5127                     ; 1314           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5129  d0df 1e08          	ldw	x,(OFST+1,sp)
5130  d0e1 f6            	ld	a,(x)
5131  d0e2 97            	ld	xl,a
5132  d0e3 a60a          	ld	a,#10
5133  d0e5 42            	mul	x,a
5134  d0e6 9f            	ld	a,xl
5135  d0e7 1e0e          	ldw	x,(OFST+7,sp)
5136  d0e9 a0e0          	sub	a,#224
5137  d0eb e708          	ld	(8,x),a
5138                     ; 1315           pSocket->ParseState = PARSE_NUM1;
5140  d0ed a602          	ld	a,#2
5141  d0ef e709          	ld	(9,x),a
5142                     ; 1316 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5144  d0f1 e606          	ld	a,(6,x)
5145  d0f3 2719          	jreq	L7551
5148  d0f5 ccd2d7        	jp	LC025
5149                     ; 1317 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5150                     ; 1318           pBuffer++;
5152  d0f8               L5451:
5153                     ; 1320         else if (pSocket->ParseState == PARSE_NUM1) {
5155  d0f8 a102          	cp	a,#2
5156  d0fa 2616          	jrne	L5551
5157                     ; 1321           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5159  d0fc 1608          	ldw	y,(OFST+1,sp)
5160  d0fe 90f6          	ld	a,(y)
5161  d100 a030          	sub	a,#48
5162  d102 eb08          	add	a,(8,x)
5163  d104 e708          	ld	(8,x),a
5164                     ; 1322           pSocket->ParseState = PARSE_EQUAL;
5166  d106 a603          	ld	a,#3
5167  d108 e709          	ld	(9,x),a
5168                     ; 1323 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5170  d10a e606          	ld	a,(6,x)
5173  d10c 26e7          	jrne	LC025
5174  d10e               L7551:
5175                     ; 1324 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5178  d10e a605          	ld	a,#5
5179                     ; 1325           pBuffer++;
5181  d110 200d          	jp	LC026
5182  d112               L5551:
5183                     ; 1327         else if (pSocket->ParseState == PARSE_EQUAL) {
5185  d112 a103          	cp	a,#3
5186  d114 260e          	jrne	L5651
5187                     ; 1328           pSocket->ParseState = PARSE_VAL;
5189  d116 a604          	ld	a,#4
5190  d118 e709          	ld	(9,x),a
5191                     ; 1329 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5193  d11a 6d06          	tnz	(6,x)
5196  d11c 26d7          	jrne	LC025
5197                     ; 1330 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5199  d11e 4c            	inc	a
5200  d11f               LC026:
5201  d11f e709          	ld	(9,x),a
5202                     ; 1331           pBuffer++;
5204  d121 ccd2d9        	jp	LC017
5205  d124               L5651:
5206                     ; 1333         else if (pSocket->ParseState == PARSE_VAL) {
5208  d124 a104          	cp	a,#4
5209  d126 2703ccd2cd    	jrne	L5751
5210                     ; 1341           if (pSocket->ParseCmd == 'o') {
5212  d12b e607          	ld	a,(7,x)
5213  d12d a16f          	cp	a,#111
5214  d12f 2625          	jrne	L7751
5215                     ; 1344             if ((uint8_t)(*pBuffer) == '1') GpioSetPin(pSocket->ParseNum, (uint8_t)1);
5217  d131 1e08          	ldw	x,(OFST+1,sp)
5218  d133 f6            	ld	a,(x)
5219  d134 a131          	cp	a,#49
5220  d136 2609          	jrne	L1061
5223  d138 1e0e          	ldw	x,(OFST+7,sp)
5224  d13a e608          	ld	a,(8,x)
5225  d13c ae0001        	ldw	x,#1
5228  d13f 2005          	jra	L3061
5229  d141               L1061:
5230                     ; 1345             else GpioSetPin(pSocket->ParseNum, (uint8_t)0);
5232  d141 1e0e          	ldw	x,(OFST+7,sp)
5233  d143 e608          	ld	a,(8,x)
5234  d145 5f            	clrw	x
5236  d146               L3061:
5237  d146 95            	ld	xh,a
5238  d147 cdd766        	call	_GpioSetPin
5239                     ; 1346 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5241  d14a 1e0e          	ldw	x,(OFST+7,sp)
5242  d14c e606          	ld	a,(6,x)
5243  d14e 2603ccd2c0    	jreq	L5561
5245                     ; 1347             pBuffer++;
5247  d153 ccd2be        	jp	LC024
5248  d156               L7751:
5249                     ; 1350           else if (pSocket->ParseCmd == 'a') {
5251  d156 a161          	cp	a,#97
5252  d158 2656          	jrne	L1161
5253                     ; 1360             ex_stored_devicename[0] = (uint8_t)(*pBuffer);
5255  d15a 1e08          	ldw	x,(OFST+1,sp)
5256  d15c f6            	ld	a,(x)
5257  d15d c70038        	ld	_ex_stored_devicename,a
5258                     ; 1361             pSocket->nParseLeft--;
5260  d160 1e0e          	ldw	x,(OFST+7,sp)
5261  d162 6a06          	dec	(6,x)
5262                     ; 1362             pBuffer++; // nBytes already decremented for first char
5264  d164 1e08          	ldw	x,(OFST+1,sp)
5265  d166 5c            	incw	x
5266  d167 1f08          	ldw	(OFST+1,sp),x
5267                     ; 1366 	    amp_found = 0;
5269  d169 0f06          	clr	(OFST-1,sp)
5271                     ; 1367 	    for(i=1; i<20; i++) {
5273  d16b a601          	ld	a,#1
5274  d16d 6b07          	ld	(OFST+0,sp),a
5276  d16f               L3161:
5277                     ; 1368 	      if((uint8_t)(*pBuffer) == 38) amp_found = 1;
5279  d16f 1e08          	ldw	x,(OFST+1,sp)
5280  d171 f6            	ld	a,(x)
5281  d172 a126          	cp	a,#38
5282  d174 2604          	jrne	L1261
5285  d176 a601          	ld	a,#1
5286  d178 6b06          	ld	(OFST-1,sp),a
5288  d17a               L1261:
5289                     ; 1369 	      if(amp_found == 0) {
5291  d17a 7b06          	ld	a,(OFST-1,sp)
5292  d17c 261a          	jrne	L3261
5293                     ; 1371                 ex_stored_devicename[i] = (uint8_t)(*pBuffer);
5295  d17e 7b07          	ld	a,(OFST+0,sp)
5296  d180 5f            	clrw	x
5297  d181 1608          	ldw	y,(OFST+1,sp)
5298  d183 97            	ld	xl,a
5299  d184 90f6          	ld	a,(y)
5300  d186 d70038        	ld	(_ex_stored_devicename,x),a
5301                     ; 1372                 pSocket->nParseLeft--;
5303  d189 1e0e          	ldw	x,(OFST+7,sp)
5304  d18b 6a06          	dec	(6,x)
5305                     ; 1373                 pBuffer++;
5307  d18d 93            	ldw	x,y
5308  d18e 5c            	incw	x
5309  d18f 1f08          	ldw	(OFST+1,sp),x
5310                     ; 1374                 nBytes--; // Must subtract 1 from nBytes for extra byte read
5312  d191 1e0c          	ldw	x,(OFST+5,sp)
5313  d193 5a            	decw	x
5314  d194 1f0c          	ldw	(OFST+5,sp),x
5316  d196 200d          	jra	L5261
5317  d198               L3261:
5318                     ; 1378 	        ex_stored_devicename[i] = ' ';
5320  d198 7b07          	ld	a,(OFST+0,sp)
5321  d19a 5f            	clrw	x
5322  d19b 97            	ld	xl,a
5323  d19c a620          	ld	a,#32
5324  d19e d70038        	ld	(_ex_stored_devicename,x),a
5325                     ; 1387                 pSocket->nParseLeft--;
5327  d1a1 1e0e          	ldw	x,(OFST+7,sp)
5328  d1a3 6a06          	dec	(6,x)
5329  d1a5               L5261:
5330                     ; 1367 	    for(i=1; i<20; i++) {
5332  d1a5 0c07          	inc	(OFST+0,sp)
5336  d1a7 7b07          	ld	a,(OFST+0,sp)
5337  d1a9 a114          	cp	a,#20
5338  d1ab 25c2          	jrult	L3161
5340  d1ad ccd2c5        	jra	L7061
5341  d1b0               L1161:
5342                     ; 1392           else if (pSocket->ParseCmd == 'b') {
5344  d1b0 a162          	cp	a,#98
5345  d1b2 2646          	jrne	L1361
5346                     ; 1399 	    alpha_1 = '-';
5348                     ; 1400 	    alpha_2 = '-';
5350                     ; 1401 	    alpha_3 = '-';
5352                     ; 1403             alpha_1 = (uint8_t)(*pBuffer);
5354  d1b4 1e08          	ldw	x,(OFST+1,sp)
5355  d1b6 f6            	ld	a,(x)
5356  d1b7 6b07          	ld	(OFST+0,sp),a
5358                     ; 1404             pSocket->nParseLeft--;
5360  d1b9 1e0e          	ldw	x,(OFST+7,sp)
5361  d1bb 6a06          	dec	(6,x)
5362                     ; 1405             pBuffer++; // nBytes already decremented for first char
5364  d1bd 1e08          	ldw	x,(OFST+1,sp)
5365  d1bf 5c            	incw	x
5366  d1c0 1f08          	ldw	(OFST+1,sp),x
5367                     ; 1407 	    alpha_2 = (uint8_t)(*pBuffer);
5369  d1c2 f6            	ld	a,(x)
5370  d1c3 6b05          	ld	(OFST-2,sp),a
5372                     ; 1408             pSocket->nParseLeft--;
5374  d1c5 1e0e          	ldw	x,(OFST+7,sp)
5375  d1c7 6a06          	dec	(6,x)
5376                     ; 1409             pBuffer++;
5378  d1c9 1e08          	ldw	x,(OFST+1,sp)
5379  d1cb 5c            	incw	x
5380  d1cc 1f08          	ldw	(OFST+1,sp),x
5381                     ; 1410 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5383  d1ce 1e0c          	ldw	x,(OFST+5,sp)
5384  d1d0 5a            	decw	x
5385  d1d1 1f0c          	ldw	(OFST+5,sp),x
5386                     ; 1412 	    alpha_3 = (uint8_t)(*pBuffer);
5388  d1d3 1e08          	ldw	x,(OFST+1,sp)
5389  d1d5 f6            	ld	a,(x)
5390  d1d6 6b06          	ld	(OFST-1,sp),a
5392                     ; 1413             pSocket->nParseLeft--;
5394  d1d8 1e0e          	ldw	x,(OFST+7,sp)
5395  d1da 6a06          	dec	(6,x)
5396                     ; 1414             pBuffer++;
5398  d1dc 1e08          	ldw	x,(OFST+1,sp)
5399  d1de 5c            	incw	x
5400  d1df 1f08          	ldw	(OFST+1,sp),x
5401                     ; 1415 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5403  d1e1 1e0c          	ldw	x,(OFST+5,sp)
5404  d1e3 5a            	decw	x
5405  d1e4 1f0c          	ldw	(OFST+5,sp),x
5406                     ; 1417 	    SetAddresses(pSocket->ParseNum, (uint8_t)alpha_1, (uint8_t)alpha_2, (uint8_t)alpha_3);
5408  d1e6 88            	push	a
5409  d1e7 7b06          	ld	a,(OFST-1,sp)
5410  d1e9 88            	push	a
5411  d1ea 7b09          	ld	a,(OFST+2,sp)
5412  d1ec 1610          	ldw	y,(OFST+9,sp)
5413  d1ee 97            	ld	xl,a
5414  d1ef 90e608        	ld	a,(8,y)
5415  d1f2 95            	ld	xh,a
5416  d1f3 cdd892        	call	_SetAddresses
5418  d1f6 85            	popw	x
5420  d1f7 ccd2c5        	jra	L7061
5421  d1fa               L1361:
5422                     ; 1420           else if (pSocket->ParseCmd == 'c') {
5424  d1fa a163          	cp	a,#99
5425  d1fc 2672          	jrne	L5361
5426                     ; 1426 	    alpha_1 = '-';
5428                     ; 1427 	    alpha_2 = '-';
5430                     ; 1428 	    alpha_3 = '-';
5432                     ; 1429 	    alpha_4 = '-';
5434                     ; 1430 	    alpha_5 = '-';
5436                     ; 1433   	    alpha_1 = (uint8_t)(*pBuffer);
5438  d1fe 1e08          	ldw	x,(OFST+1,sp)
5439  d200 f6            	ld	a,(x)
5440  d201 6b07          	ld	(OFST+0,sp),a
5442                     ; 1434             pSocket->nParseLeft--;
5444  d203 1e0e          	ldw	x,(OFST+7,sp)
5445  d205 6a06          	dec	(6,x)
5446                     ; 1435             pBuffer++; // nBytes already decremented for first char
5448  d207 1e08          	ldw	x,(OFST+1,sp)
5449  d209 5c            	incw	x
5450  d20a 1f08          	ldw	(OFST+1,sp),x
5451                     ; 1437 	    alpha_2 = (uint8_t)(*pBuffer);
5453  d20c f6            	ld	a,(x)
5454  d20d 6b05          	ld	(OFST-2,sp),a
5456                     ; 1438             pSocket->nParseLeft--;
5458  d20f 1e0e          	ldw	x,(OFST+7,sp)
5459  d211 6a06          	dec	(6,x)
5460                     ; 1439             pBuffer++;
5462  d213 1e08          	ldw	x,(OFST+1,sp)
5463  d215 5c            	incw	x
5464  d216 1f08          	ldw	(OFST+1,sp),x
5465                     ; 1440 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5467  d218 1e0c          	ldw	x,(OFST+5,sp)
5468  d21a 5a            	decw	x
5469  d21b 1f0c          	ldw	(OFST+5,sp),x
5470                     ; 1442 	    alpha_3 = (uint8_t)(*pBuffer);
5472  d21d 1e08          	ldw	x,(OFST+1,sp)
5473  d21f f6            	ld	a,(x)
5474  d220 6b06          	ld	(OFST-1,sp),a
5476                     ; 1443             pSocket->nParseLeft--;
5478  d222 1e0e          	ldw	x,(OFST+7,sp)
5479  d224 6a06          	dec	(6,x)
5480                     ; 1444             pBuffer++;
5482  d226 1e08          	ldw	x,(OFST+1,sp)
5483  d228 5c            	incw	x
5484  d229 1f08          	ldw	(OFST+1,sp),x
5485                     ; 1445 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5487  d22b 1e0c          	ldw	x,(OFST+5,sp)
5488  d22d 5a            	decw	x
5489  d22e 1f0c          	ldw	(OFST+5,sp),x
5490                     ; 1447 	    alpha_4 = (uint8_t)(*pBuffer);
5492  d230 1e08          	ldw	x,(OFST+1,sp)
5493  d232 f6            	ld	a,(x)
5494  d233 6b03          	ld	(OFST-4,sp),a
5496                     ; 1448             pSocket->nParseLeft--;
5498  d235 1e0e          	ldw	x,(OFST+7,sp)
5499  d237 6a06          	dec	(6,x)
5500                     ; 1449             pBuffer++;
5502  d239 1e08          	ldw	x,(OFST+1,sp)
5503  d23b 5c            	incw	x
5504  d23c 1f08          	ldw	(OFST+1,sp),x
5505                     ; 1450 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5507  d23e 1e0c          	ldw	x,(OFST+5,sp)
5508  d240 5a            	decw	x
5509  d241 1f0c          	ldw	(OFST+5,sp),x
5510                     ; 1452             alpha_5 = (uint8_t)(*pBuffer);
5512  d243 1e08          	ldw	x,(OFST+1,sp)
5513  d245 f6            	ld	a,(x)
5514  d246 6b04          	ld	(OFST-3,sp),a
5516                     ; 1453             pSocket->nParseLeft--;
5518  d248 1e0e          	ldw	x,(OFST+7,sp)
5519  d24a 6a06          	dec	(6,x)
5520                     ; 1454             pBuffer++;
5522  d24c 1e08          	ldw	x,(OFST+1,sp)
5523  d24e 5c            	incw	x
5524  d24f 1f08          	ldw	(OFST+1,sp),x
5525                     ; 1455 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5527  d251 1e0c          	ldw	x,(OFST+5,sp)
5528  d253 5a            	decw	x
5529  d254 1f0c          	ldw	(OFST+5,sp),x
5530                     ; 1457 	    SetPort(pSocket->ParseNum,
5530                     ; 1458 	            (uint8_t)alpha_1,
5530                     ; 1459 		    (uint8_t)alpha_2,
5530                     ; 1460 		    (uint8_t)alpha_3,
5530                     ; 1461 		    (uint8_t)alpha_4,
5530                     ; 1462 		    (uint8_t)alpha_5);
5532  d256 88            	push	a
5533  d257 7b04          	ld	a,(OFST-3,sp)
5534  d259 88            	push	a
5535  d25a 7b08          	ld	a,(OFST+1,sp)
5536  d25c 88            	push	a
5537  d25d 7b08          	ld	a,(OFST+1,sp)
5538  d25f 88            	push	a
5539  d260 7b0b          	ld	a,(OFST+4,sp)
5540  d262 1612          	ldw	y,(OFST+11,sp)
5541  d264 97            	ld	xl,a
5542  d265 90e608        	ld	a,(8,y)
5543  d268 95            	ld	xh,a
5544  d269 cdd91c        	call	_SetPort
5546  d26c 5b04          	addw	sp,#4
5548  d26e 2055          	jra	L7061
5549  d270               L5361:
5550                     ; 1465           else if (pSocket->ParseCmd == 'd') {
5552  d270 a164          	cp	a,#100
5553  d272 262f          	jrne	L1461
5554                     ; 1471 	    alpha_1 = (uint8_t)(*pBuffer);
5556  d274 1e08          	ldw	x,(OFST+1,sp)
5557  d276 f6            	ld	a,(x)
5558  d277 6b07          	ld	(OFST+0,sp),a
5560                     ; 1472             pSocket->nParseLeft--;
5562  d279 1e0e          	ldw	x,(OFST+7,sp)
5563  d27b 6a06          	dec	(6,x)
5564                     ; 1473             pBuffer++; // nBytes already decremented for first char
5566  d27d 1e08          	ldw	x,(OFST+1,sp)
5567  d27f 5c            	incw	x
5568  d280 1f08          	ldw	(OFST+1,sp),x
5569                     ; 1475 	    alpha_2 = (uint8_t)(*pBuffer);
5571  d282 f6            	ld	a,(x)
5572  d283 6b05          	ld	(OFST-2,sp),a
5574                     ; 1476             pSocket->nParseLeft--;
5576  d285 1e0e          	ldw	x,(OFST+7,sp)
5577  d287 6a06          	dec	(6,x)
5578                     ; 1477             pBuffer++;
5580  d289 1e08          	ldw	x,(OFST+1,sp)
5581  d28b 5c            	incw	x
5582  d28c 1f08          	ldw	(OFST+1,sp),x
5583                     ; 1478 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5585  d28e 1e0c          	ldw	x,(OFST+5,sp)
5586  d290 5a            	decw	x
5587  d291 1f0c          	ldw	(OFST+5,sp),x
5588                     ; 1480 	    SetMAC(pSocket->ParseNum, alpha_1, alpha_2);
5590  d293 88            	push	a
5591  d294 7b08          	ld	a,(OFST+1,sp)
5592  d296 160f          	ldw	y,(OFST+8,sp)
5593  d298 97            	ld	xl,a
5594  d299 90e608        	ld	a,(8,y)
5595  d29c 95            	ld	xh,a
5596  d29d cdd957        	call	_SetMAC
5598  d2a0 84            	pop	a
5600  d2a1 2022          	jra	L7061
5601  d2a3               L1461:
5602                     ; 1483 	  else if (pSocket->ParseCmd == 'g') {
5604  d2a3 a167          	cp	a,#103
5605  d2a5 261e          	jrne	L7061
5606                     ; 1486             if ((uint8_t)(*pBuffer) == '1') invert_output = 1;
5608  d2a7 1e08          	ldw	x,(OFST+1,sp)
5609  d2a9 f6            	ld	a,(x)
5610  d2aa a131          	cp	a,#49
5611  d2ac 2606          	jrne	L7461
5614  d2ae 3501005e      	mov	_invert_output,#1
5616  d2b2 2004          	jra	L1561
5617  d2b4               L7461:
5618                     ; 1487             else invert_output = 0;
5620  d2b4 725f005e      	clr	_invert_output
5621  d2b8               L1561:
5622                     ; 1488 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--;
5624  d2b8 1e0e          	ldw	x,(OFST+7,sp)
5625  d2ba e606          	ld	a,(6,x)
5626  d2bc 2702          	jreq	L5561
5629  d2be               LC024:
5631  d2be 6a06          	dec	(6,x)
5633  d2c0               L5561:
5634                     ; 1490             pBuffer++;
5637  d2c0 1e08          	ldw	x,(OFST+1,sp)
5638  d2c2 5c            	incw	x
5639  d2c3 1f08          	ldw	(OFST+1,sp),x
5640  d2c5               L7061:
5641                     ; 1493           pSocket->ParseState = PARSE_DELIM;
5643  d2c5 1e0e          	ldw	x,(OFST+7,sp)
5644  d2c7               LC018:
5646  d2c7 a605          	ld	a,#5
5647  d2c9 e709          	ld	(9,x),a
5649  d2cb 2015          	jra	L3451
5650  d2cd               L5751:
5651                     ; 1496         else if (pSocket->ParseState == PARSE_DELIM) {
5653  d2cd a105          	cp	a,#5
5654  d2cf 2611          	jrne	L3451
5655                     ; 1497           if(pSocket->nParseLeft > 0) {
5657  d2d1 e606          	ld	a,(6,x)
5658  d2d3 270b          	jreq	L3661
5659                     ; 1498             pSocket->ParseState = PARSE_CMD;
5661  d2d5 6f09          	clr	(9,x)
5662                     ; 1499             pSocket->nParseLeft--;
5664  d2d7               LC025:
5668  d2d7 6a06          	dec	(6,x)
5669                     ; 1500             pBuffer++;
5671  d2d9               LC017:
5675  d2d9 1e08          	ldw	x,(OFST+1,sp)
5676  d2db 5c            	incw	x
5677  d2dc 1f08          	ldw	(OFST+1,sp),x
5679  d2de 2002          	jra	L3451
5680  d2e0               L3661:
5681                     ; 1503             pSocket->nParseLeft = 0; // Something out of sync - end the parsing
5683  d2e0 e706          	ld	(6,x),a
5684  d2e2               L3451:
5685                     ; 1507         if (pSocket->nParseLeft == 0) {
5687  d2e2 1e0e          	ldw	x,(OFST+7,sp)
5688  d2e4 e606          	ld	a,(6,x)
5689  d2e6 2608          	jrne	L3151
5690                     ; 1509           pSocket->nState = STATE_SENDHEADER;
5692  d2e8 a60b          	ld	a,#11
5693  d2ea f7            	ld	(x),a
5694                     ; 1510           break;
5695  d2eb               L5151:
5696                     ; 1514       pSocket->nState = STATE_SENDHEADER;
5698  d2eb 1e0e          	ldw	x,(OFST+7,sp)
5699  d2ed f7            	ld	(x),a
5700  d2ee 200f          	jra	L7051
5701  d2f0               L3151:
5702                     ; 1297       while (nBytes--) {
5704  d2f0 1e0c          	ldw	x,(OFST+5,sp)
5705  d2f2 5a            	decw	x
5706  d2f3 1f0c          	ldw	(OFST+5,sp),x
5707  d2f5 5c            	incw	x
5708  d2f6 2703ccd097    	jrne	L1151
5709  d2fb a60b          	ld	a,#11
5710  d2fd 20ec          	jra	L5151
5711  d2ff               L7051:
5712                     ; 1517     if (pSocket->nState == STATE_PARSEGET) {
5714  d2ff a10d          	cp	a,#13
5715  d301 2703ccd5b2    	jrne	L1761
5717  d306 ccd5a7        	jra	L5761
5718  d309               L3761:
5719                     ; 1531         if (pSocket->ParseState == PARSE_SLASH1) {
5721  d309 1e0e          	ldw	x,(OFST+7,sp)
5722  d30b e609          	ld	a,(9,x)
5723  d30d a106          	cp	a,#6
5724  d30f 263e          	jrne	L1071
5725                     ; 1534           pSocket->ParseCmd = *pBuffer;
5727  d311 1e08          	ldw	x,(OFST+1,sp)
5728  d313 f6            	ld	a,(x)
5729  d314 1e0e          	ldw	x,(OFST+7,sp)
5730  d316 e707          	ld	(7,x),a
5731                     ; 1535           pSocket->nParseLeft--;
5733  d318 6a06          	dec	(6,x)
5734                     ; 1536           pBuffer++;
5736  d31a 1e08          	ldw	x,(OFST+1,sp)
5737  d31c 5c            	incw	x
5738  d31d 1f08          	ldw	(OFST+1,sp),x
5739                     ; 1537 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
5741  d31f 1e0e          	ldw	x,(OFST+7,sp)
5742  d321 e607          	ld	a,(7,x)
5743  d323 a12f          	cp	a,#47
5744  d325 2604          	jrne	L3071
5745                     ; 1538 	    pSocket->ParseState = PARSE_NUM10;
5747  d327 a601          	ld	a,#1
5748  d329 e709          	ld	(9,x),a
5749  d32b               L3071:
5750                     ; 1540 	  if (pSocket->nParseLeft == 0) {
5752  d32b e606          	ld	a,(6,x)
5753  d32d 2703ccd585    	jrne	L7071
5754                     ; 1542 	    current_webpage = WEBPAGE_DEFAULT;
5756  d332 c7001b        	ld	_current_webpage,a
5757                     ; 1543             pSocket->pData = g_HtmlPageDefault;
5759  d335 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5760  d339 ef01          	ldw	(1,x),y
5761                     ; 1544             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5763  d33b 90ae15d5      	ldw	y,#5589
5764  d33f ef03          	ldw	(3,x),y
5765                     ; 1545             pSocket->nNewlines = 0;
5767  d341 e705          	ld	(5,x),a
5768                     ; 1546             pSocket->nState = STATE_SENDHEADER;
5770  d343 a60b          	ld	a,#11
5771  d345 f7            	ld	(x),a
5772                     ; 1547             pSocket->nPrevBytes = 0xFFFF;
5774  d346 90aeffff      	ldw	y,#65535
5775  d34a ef0a          	ldw	(10,x),y
5776                     ; 1548             break;
5778  d34c ccd5b2        	jra	L1761
5779  d34f               L1071:
5780                     ; 1551         else if (pSocket->ParseState == PARSE_NUM10) {
5782  d34f a101          	cp	a,#1
5783  d351 264e          	jrne	L1171
5784                     ; 1556 	  if(*pBuffer == ' ') {
5786  d353 1e08          	ldw	x,(OFST+1,sp)
5787  d355 f6            	ld	a,(x)
5788  d356 a120          	cp	a,#32
5789  d358 2620          	jrne	L3171
5790                     ; 1557 	    current_webpage = WEBPAGE_DEFAULT;
5792  d35a 725f001b      	clr	_current_webpage
5793                     ; 1558             pSocket->pData = g_HtmlPageDefault;
5795  d35e 1e0e          	ldw	x,(OFST+7,sp)
5796  d360 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5797  d364 ef01          	ldw	(1,x),y
5798                     ; 1559             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5800  d366 90ae15d5      	ldw	y,#5589
5801  d36a ef03          	ldw	(3,x),y
5802                     ; 1560             pSocket->nNewlines = 0;
5804  d36c 6f05          	clr	(5,x)
5805                     ; 1561             pSocket->nState = STATE_SENDHEADER;
5807  d36e a60b          	ld	a,#11
5808  d370 f7            	ld	(x),a
5809                     ; 1562             pSocket->nPrevBytes = 0xFFFF;
5811  d371 90aeffff      	ldw	y,#65535
5812  d375 ef0a          	ldw	(10,x),y
5813                     ; 1563 	    break;
5815  d377 ccd5b2        	jra	L1761
5816  d37a               L3171:
5817                     ; 1566 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5819  d37a a130          	cp	a,#48
5820  d37c 2504          	jrult	L5171
5822  d37e a13a          	cp	a,#58
5823  d380 2506          	jrult	L7171
5825  d382               L5171:
5826                     ; 1567 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5828  d382 1e0e          	ldw	x,(OFST+7,sp)
5829  d384 a605          	ld	a,#5
5830  d386 e709          	ld	(9,x),a
5831  d388               L7171:
5832                     ; 1568           if (pSocket->ParseState == PARSE_NUM10) {      // Still good - parse number
5834  d388 1e0e          	ldw	x,(OFST+7,sp)
5835  d38a e609          	ld	a,(9,x)
5836  d38c 4a            	dec	a
5837  d38d 26a0          	jrne	L7071
5838                     ; 1569             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5840  d38f 1e08          	ldw	x,(OFST+1,sp)
5841  d391 f6            	ld	a,(x)
5842  d392 97            	ld	xl,a
5843  d393 a60a          	ld	a,#10
5844  d395 42            	mul	x,a
5845  d396 9f            	ld	a,xl
5846  d397 1e0e          	ldw	x,(OFST+7,sp)
5847  d399 a0e0          	sub	a,#224
5848  d39b e708          	ld	(8,x),a
5849                     ; 1570 	    pSocket->ParseState = PARSE_NUM1;
5851  d39d a602          	ld	a,#2
5852                     ; 1571             pSocket->nParseLeft--;
5853                     ; 1572             pBuffer++;
5854  d39f 202c          	jp	LC022
5855  d3a1               L1171:
5856                     ; 1576         else if (pSocket->ParseState == PARSE_NUM1) {
5858  d3a1 a102          	cp	a,#2
5859  d3a3 2634          	jrne	L5271
5860                     ; 1577 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5862  d3a5 1e08          	ldw	x,(OFST+1,sp)
5863  d3a7 f6            	ld	a,(x)
5864  d3a8 a130          	cp	a,#48
5865  d3aa 2504          	jrult	L7271
5867  d3ac a13a          	cp	a,#58
5868  d3ae 2506          	jrult	L1371
5870  d3b0               L7271:
5871                     ; 1578 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5873  d3b0 1e0e          	ldw	x,(OFST+7,sp)
5874  d3b2 a605          	ld	a,#5
5875  d3b4 e709          	ld	(9,x),a
5876  d3b6               L1371:
5877                     ; 1579           if (pSocket->ParseState == PARSE_NUM1) {       // Still good - parse number
5879  d3b6 1e0e          	ldw	x,(OFST+7,sp)
5880  d3b8 e609          	ld	a,(9,x)
5881  d3ba a102          	cp	a,#2
5882  d3bc 2703ccd585    	jrne	L7071
5883                     ; 1580             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5885  d3c1 1608          	ldw	y,(OFST+1,sp)
5886  d3c3 90f6          	ld	a,(y)
5887  d3c5 a030          	sub	a,#48
5888  d3c7 eb08          	add	a,(8,x)
5889  d3c9 e708          	ld	(8,x),a
5890                     ; 1581             pSocket->ParseState = PARSE_VAL;
5892  d3cb a604          	ld	a,#4
5893                     ; 1582             pSocket->nParseLeft--;
5895                     ; 1583             pBuffer++;
5897  d3cd               LC022:
5898  d3cd e709          	ld	(9,x),a
5900  d3cf 6a06          	dec	(6,x)
5902  d3d1 1e08          	ldw	x,(OFST+1,sp)
5903  d3d3 5c            	incw	x
5904  d3d4 1f08          	ldw	(OFST+1,sp),x
5905  d3d6 ccd585        	jra	L7071
5906  d3d9               L5271:
5907                     ; 1586         else if (pSocket->ParseState == PARSE_VAL) {
5909  d3d9 a104          	cp	a,#4
5910  d3db 2703ccd58d    	jrne	L7371
5911                     ; 1637           switch(pSocket->ParseNum)
5913  d3e0 e608          	ld	a,(8,x)
5915                     ; 1761 	      break;
5916  d3e2 a143          	cp	a,#67
5917  d3e4 2407          	jruge	L272
5918  d3e6 5f            	clrw	x
5919  d3e7 97            	ld	xl,a
5920  d3e8 58            	sllw	x
5921  d3e9 debe1d        	ldw	x,(L472,x)
5922  d3ec fc            	jp	(x)
5923  d3ed               L272:
5924  d3ed a05b          	sub	a,#91
5925  d3ef 2603ccd549    	jreq	L7221
5926  d3f4 a008          	sub	a,#8
5927  d3f6 2603ccd54f    	jreq	L1321
5928  d3fb ccd564        	jra	L3321
5929  d3fe               L7011:
5930                     ; 1639 	    case 0:  Relays_8to1 &= (uint8_t)(~0x01);  break; // Relay-01 OFF
5932  d3fe 7211005f      	bres	_Relays_8to1,#0
5935  d402 ccd57f        	jra	L3471
5936  d405               L1111:
5937                     ; 1640 	    case 1:  Relays_8to1 |= (uint8_t)0x01;     break; // Relay-01 ON
5939  d405 7210005f      	bset	_Relays_8to1,#0
5942  d409 ccd57f        	jra	L3471
5943  d40c               L3111:
5944                     ; 1641 	    case 2:  Relays_8to1 &= (uint8_t)(~0x02);  break; // Relay-02 OFF
5946  d40c 7213005f      	bres	_Relays_8to1,#1
5949  d410 ccd57f        	jra	L3471
5950  d413               L5111:
5951                     ; 1642 	    case 3:  Relays_8to1 |= (uint8_t)0x02;     break; // Relay-02 ON
5953  d413 7212005f      	bset	_Relays_8to1,#1
5956  d417 ccd57f        	jra	L3471
5957  d41a               L7111:
5958                     ; 1643 	    case 4:  Relays_8to1 &= (uint8_t)(~0x04);  break; // Relay-03 OFF
5960  d41a 7215005f      	bres	_Relays_8to1,#2
5963  d41e ccd57f        	jra	L3471
5964  d421               L1211:
5965                     ; 1644 	    case 5:  Relays_8to1 |= (uint8_t)0x04;     break; // Relay-03 ON
5967  d421 7214005f      	bset	_Relays_8to1,#2
5970  d425 ccd57f        	jra	L3471
5971  d428               L3211:
5972                     ; 1645 	    case 6:  Relays_8to1 &= (uint8_t)(~0x08);  break; // Relay-04 OFF
5974  d428 7217005f      	bres	_Relays_8to1,#3
5977  d42c ccd57f        	jra	L3471
5978  d42f               L5211:
5979                     ; 1646 	    case 7:  Relays_8to1 |= (uint8_t)0x08;     break; // Relay-04 ON
5981  d42f 7216005f      	bset	_Relays_8to1,#3
5984  d433 ccd57f        	jra	L3471
5985  d436               L7211:
5986                     ; 1647 	    case 8:  Relays_8to1 &= (uint8_t)(~0x10);  break; // Relay-05 OFF
5988  d436 7219005f      	bres	_Relays_8to1,#4
5991  d43a ccd57f        	jra	L3471
5992  d43d               L1311:
5993                     ; 1648 	    case 9:  Relays_8to1 |= (uint8_t)0x10;     break; // Relay-05 ON
5995  d43d 7218005f      	bset	_Relays_8to1,#4
5998  d441 ccd57f        	jra	L3471
5999  d444               L3311:
6000                     ; 1649 	    case 10: Relays_8to1 &= (uint8_t)(~0x20);  break; // Relay-06 OFF
6002  d444 721b005f      	bres	_Relays_8to1,#5
6005  d448 ccd57f        	jra	L3471
6006  d44b               L5311:
6007                     ; 1650 	    case 11: Relays_8to1 |= (uint8_t)0x20;     break; // Relay-06 ON
6009  d44b 721a005f      	bset	_Relays_8to1,#5
6012  d44f ccd57f        	jra	L3471
6013  d452               L7311:
6014                     ; 1651 	    case 12: Relays_8to1 &= (uint8_t)(~0x40);  break; // Relay-07 OFF
6016  d452 721d005f      	bres	_Relays_8to1,#6
6019  d456 ccd57f        	jra	L3471
6020  d459               L1411:
6021                     ; 1652 	    case 13: Relays_8to1 |= (uint8_t)0x40;     break; // Relay-07 ON
6023  d459 721c005f      	bset	_Relays_8to1,#6
6026  d45d ccd57f        	jra	L3471
6027  d460               L3411:
6028                     ; 1653 	    case 14: Relays_8to1 &= (uint8_t)(~0x80);  break; // Relay-08 OFF
6030  d460 721f005f      	bres	_Relays_8to1,#7
6033  d464 ccd57f        	jra	L3471
6034  d467               L5411:
6035                     ; 1654 	    case 15: Relays_8to1 |= (uint8_t)0x80;     break; // Relay-08 ON
6037  d467 721e005f      	bset	_Relays_8to1,#7
6040  d46b ccd57f        	jra	L3471
6041  d46e               L7411:
6042                     ; 1655 	    case 16: Relays_16to9 &= (uint8_t)(~0x01); break; // Relay-09 OFF
6044  d46e 72110060      	bres	_Relays_16to9,#0
6047  d472 ccd57f        	jra	L3471
6048  d475               L1511:
6049                     ; 1656 	    case 17: Relays_16to9 |= (uint8_t)0x01;    break; // Relay-09 ON
6051  d475 72100060      	bset	_Relays_16to9,#0
6054  d479 ccd57f        	jra	L3471
6055  d47c               L3511:
6056                     ; 1657 	    case 18: Relays_16to9 &= (uint8_t)(~0x02); break; // Relay-10 OFF
6058  d47c 72130060      	bres	_Relays_16to9,#1
6061  d480 ccd57f        	jra	L3471
6062  d483               L5511:
6063                     ; 1658 	    case 19: Relays_16to9 |= (uint8_t)0x02;    break; // Relay-10 ON
6065  d483 72120060      	bset	_Relays_16to9,#1
6068  d487 ccd57f        	jra	L3471
6069  d48a               L7511:
6070                     ; 1659 	    case 20: Relays_16to9 &= (uint8_t)(~0x04); break; // Relay-11 OFF
6072  d48a 72150060      	bres	_Relays_16to9,#2
6075  d48e ccd57f        	jra	L3471
6076  d491               L1611:
6077                     ; 1660 	    case 21: Relays_16to9 |= (uint8_t)0x04;    break; // Relay-11 ON
6079  d491 72140060      	bset	_Relays_16to9,#2
6082  d495 ccd57f        	jra	L3471
6083  d498               L3611:
6084                     ; 1661 	    case 22: Relays_16to9 &= (uint8_t)(~0x08); break; // Relay-12 OFF
6086  d498 72170060      	bres	_Relays_16to9,#3
6089  d49c ccd57f        	jra	L3471
6090  d49f               L5611:
6091                     ; 1662 	    case 23: Relays_16to9 |= (uint8_t)0x08;    break; // Relay-12 ON
6093  d49f 72160060      	bset	_Relays_16to9,#3
6096  d4a3 ccd57f        	jra	L3471
6097  d4a6               L7611:
6098                     ; 1663 	    case 24: Relays_16to9 &= (uint8_t)(~0x10); break; // Relay-13 OFF
6100  d4a6 72190060      	bres	_Relays_16to9,#4
6103  d4aa ccd57f        	jra	L3471
6104  d4ad               L1711:
6105                     ; 1664 	    case 25: Relays_16to9 |= (uint8_t)0x10;    break; // Relay-13 ON
6107  d4ad 72180060      	bset	_Relays_16to9,#4
6110  d4b1 ccd57f        	jra	L3471
6111  d4b4               L3711:
6112                     ; 1665 	    case 26: Relays_16to9 &= (uint8_t)(~0x20); break; // Relay-14 OFF
6114  d4b4 721b0060      	bres	_Relays_16to9,#5
6117  d4b8 ccd57f        	jra	L3471
6118  d4bb               L5711:
6119                     ; 1666 	    case 27: Relays_16to9 |= (uint8_t)0x20;    break; // Relay-14 ON
6121  d4bb 721a0060      	bset	_Relays_16to9,#5
6124  d4bf ccd57f        	jra	L3471
6125  d4c2               L7711:
6126                     ; 1667 	    case 28: Relays_16to9 &= (uint8_t)(~0x40); break; // Relay-15 OFF
6128  d4c2 721d0060      	bres	_Relays_16to9,#6
6131  d4c6 ccd57f        	jra	L3471
6132  d4c9               L1021:
6133                     ; 1668 	    case 29: Relays_16to9 |= (uint8_t)0x40;    break; // Relay-15 ON
6135  d4c9 721c0060      	bset	_Relays_16to9,#6
6138  d4cd ccd57f        	jra	L3471
6139  d4d0               L3021:
6140                     ; 1669 	    case 30: Relays_16to9 &= (uint8_t)(~0x80); break; // Relay-16 OFF
6142  d4d0 721f0060      	bres	_Relays_16to9,#7
6145  d4d4 ccd57f        	jra	L3471
6146  d4d7               L5021:
6147                     ; 1670 	    case 31: Relays_16to9 |= (uint8_t)0x80;    break; // Relay-16 ON
6149  d4d7 721e0060      	bset	_Relays_16to9,#7
6152  d4db ccd57f        	jra	L3471
6153  d4de               L7021:
6154                     ; 1671 	    case 55:
6154                     ; 1672   	      Relays_8to1 = (uint8_t)0xff; // Relays 1-8 ON
6156  d4de 35ff005f      	mov	_Relays_8to1,#255
6157                     ; 1673   	      Relays_16to9 = (uint8_t)0xff; // Relays 9-16 ON
6159  d4e2 35ff0060      	mov	_Relays_16to9,#255
6160                     ; 1674 	      break;
6162  d4e6 ccd57f        	jra	L3471
6163  d4e9               L1121:
6164                     ; 1675 	    case 56:
6164                     ; 1676               Relays_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
6166  d4e9 725f005f      	clr	_Relays_8to1
6167                     ; 1677               Relays_16to9 = (uint8_t)0x00; // Relays 9-16 OFF
6169  d4ed 725f0060      	clr	_Relays_16to9
6170                     ; 1678 	      break;
6172  d4f1 ccd57f        	jra	L3471
6173  d4f4               L3121:
6174                     ; 1680 	    case 60: // Show relay states page
6174                     ; 1681 	      current_webpage = WEBPAGE_DEFAULT;
6175                     ; 1682               pSocket->pData = g_HtmlPageDefault;
6176                     ; 1683               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
6177                     ; 1684               pSocket->nNewlines = 0;
6178                     ; 1685               pSocket->nState = STATE_CONNECTED;
6179                     ; 1686               pSocket->nPrevBytes = 0xFFFF;
6180                     ; 1687 	      break;
6182  d4f4 206e          	jp	L3321
6183  d4f6               L5121:
6184                     ; 1689 	    case 61: // Show address settings page
6184                     ; 1690 	      current_webpage = WEBPAGE_ADDRESS;
6186  d4f6 3501001b      	mov	_current_webpage,#1
6187                     ; 1691               pSocket->pData = g_HtmlPageAddress;
6189  d4fa 1e0e          	ldw	x,(OFST+7,sp)
6190  d4fc 90ae965e      	ldw	y,#L71_g_HtmlPageAddress
6191  d500 ef01          	ldw	(1,x),y
6192                     ; 1692               pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
6194  d502 90ae1341      	ldw	y,#4929
6195                     ; 1693               pSocket->nNewlines = 0;
6196                     ; 1694               pSocket->nState = STATE_CONNECTED;
6197                     ; 1695               pSocket->nPrevBytes = 0xFFFF;
6198                     ; 1696 	      break;
6200  d506 206c          	jp	LC020
6201  d508               L7121:
6202                     ; 1699 	    case 63: // Show help page 1
6202                     ; 1700 	      current_webpage = WEBPAGE_HELP;
6204  d508 3503001b      	mov	_current_webpage,#3
6205                     ; 1701               pSocket->pData = g_HtmlPageHelp;
6207  d50c 1e0e          	ldw	x,(OFST+7,sp)
6208  d50e 90aea9a0      	ldw	y,#L12_g_HtmlPageHelp
6209  d512 ef01          	ldw	(1,x),y
6210                     ; 1702               pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
6212  d514 90ae075c      	ldw	y,#1884
6213                     ; 1703               pSocket->nNewlines = 0;
6214                     ; 1704               pSocket->nState = STATE_CONNECTED;
6215                     ; 1705               pSocket->nPrevBytes = 0xFFFF;
6216                     ; 1706 	      break;
6218  d518 205a          	jp	LC020
6219  d51a               L1221:
6220                     ; 1708 	    case 64: // Show help page 2
6220                     ; 1709 	      current_webpage = WEBPAGE_HELP2;
6222  d51a 3504001b      	mov	_current_webpage,#4
6223                     ; 1710               pSocket->pData = g_HtmlPageHelp2;
6225  d51e 1e0e          	ldw	x,(OFST+7,sp)
6226  d520 90aeb0fd      	ldw	y,#L32_g_HtmlPageHelp2
6227  d524 ef01          	ldw	(1,x),y
6228                     ; 1711               pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
6230  d526 90ae02bb      	ldw	y,#699
6231                     ; 1712               pSocket->nNewlines = 0;
6232                     ; 1713               pSocket->nState = STATE_CONNECTED;
6233                     ; 1714               pSocket->nPrevBytes = 0xFFFF;
6234                     ; 1715 	      break;
6236  d52a 2048          	jp	LC020
6237  d52c               L3221:
6238                     ; 1718 	    case 65: // Flash LED for diagnostics
6238                     ; 1719 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6238                     ; 1720 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6238                     ; 1721 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6238                     ; 1722 	      debugflash();
6240  d52c cde2af        	call	_debugflash
6242                     ; 1723 	      debugflash();
6244  d52f cde2af        	call	_debugflash
6246                     ; 1724 	      debugflash();
6248  d532 cde2af        	call	_debugflash
6250                     ; 1728 	      break;
6252  d535 2048          	jra	L3471
6253  d537               L5221:
6254                     ; 1731             case 66: // Show statistics page
6254                     ; 1732 	      current_webpage = WEBPAGE_STATS;
6256  d537 3505001b      	mov	_current_webpage,#5
6257                     ; 1733               pSocket->pData = g_HtmlPageStats;
6259  d53b 1e0e          	ldw	x,(OFST+7,sp)
6260  d53d 90aeb3b9      	ldw	y,#L52_g_HtmlPageStats
6261  d541 ef01          	ldw	(1,x),y
6262                     ; 1734               pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
6264  d543 90ae097e      	ldw	y,#2430
6265                     ; 1735               pSocket->nNewlines = 0;
6266                     ; 1736               pSocket->nState = STATE_CONNECTED;
6267                     ; 1737               pSocket->nPrevBytes = 0xFFFF;
6268                     ; 1738 	      break;
6270  d547 202b          	jp	LC020
6271  d549               L7221:
6272                     ; 1741 	    case 91: // Reboot
6272                     ; 1742 	      submit_changes = 2;
6274  d549 3502001d      	mov	_submit_changes,#2
6275                     ; 1743 	      break;
6277  d54d 2030          	jra	L3471
6278  d54f               L1321:
6279                     ; 1745             case 99: // Show simplified relay state page
6279                     ; 1746 	      current_webpage = WEBPAGE_RSTATE;
6281  d54f 3506001b      	mov	_current_webpage,#6
6282                     ; 1747               pSocket->pData = g_HtmlPageRstate;
6284  d553 90aebd38      	ldw	y,#L72_g_HtmlPageRstate
6285  d557 ef01          	ldw	(1,x),y
6286                     ; 1748               pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
6288  d559 90ae00a0      	ldw	y,#160
6289  d55d ef03          	ldw	(3,x),y
6290                     ; 1749               pSocket->nNewlines = 0;
6292  d55f e705          	ld	(5,x),a
6293                     ; 1750               pSocket->nState = STATE_CONNECTED;
6295  d561 f7            	ld	(x),a
6296                     ; 1751               pSocket->nPrevBytes = 0xFFFF;
6297                     ; 1752 	      break;
6299  d562 2015          	jp	LC019
6300  d564               L3321:
6301                     ; 1754 	    default: // Show relay state page
6301                     ; 1755 	      current_webpage = WEBPAGE_DEFAULT;
6303                     ; 1756               pSocket->pData = g_HtmlPageDefault;
6305                     ; 1757               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
6308  d564 725f001b      	clr	_current_webpage
6310  d568 1e0e          	ldw	x,(OFST+7,sp)
6311  d56a 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
6312  d56e ef01          	ldw	(1,x),y
6314  d570 90ae15d5      	ldw	y,#5589
6315                     ; 1758               pSocket->nNewlines = 0;
6317                     ; 1759               pSocket->nState = STATE_CONNECTED;
6319  d574               LC020:
6320  d574 ef03          	ldw	(3,x),y
6326  d576 6f05          	clr	(5,x)
6332  d578 7f            	clr	(x)
6333                     ; 1760               pSocket->nPrevBytes = 0xFFFF;
6335  d579               LC019:
6342  d579 90aeffff      	ldw	y,#65535
6343  d57d ef0a          	ldw	(10,x),y
6344                     ; 1761 	      break;
6346  d57f               L3471:
6347                     ; 1763           pSocket->ParseState = PARSE_DELIM;
6349  d57f 1e0e          	ldw	x,(OFST+7,sp)
6350  d581 a605          	ld	a,#5
6351  d583 e709          	ld	(9,x),a
6353  d585               L7071:
6354                     ; 1777         if (pSocket->nParseLeft == 0) {
6356  d585 1e0e          	ldw	x,(OFST+7,sp)
6357  d587 e606          	ld	a,(6,x)
6358  d589 261c          	jrne	L5761
6359                     ; 1779           pSocket->nState = STATE_SENDHEADER;
6360                     ; 1780           break;
6362  d58b 2015          	jp	LC023
6363  d58d               L7371:
6364                     ; 1766         else if (pSocket->ParseState == PARSE_DELIM) {
6366  d58d a105          	cp	a,#5
6367  d58f 26f4          	jrne	L7071
6368                     ; 1768           pSocket->ParseState = PARSE_DELIM;
6370  d591 a605          	ld	a,#5
6371  d593 e709          	ld	(9,x),a
6372                     ; 1769           pSocket->nParseLeft--;
6374  d595 6a06          	dec	(6,x)
6375                     ; 1770           pBuffer++;
6377  d597 1e08          	ldw	x,(OFST+1,sp)
6378  d599 5c            	incw	x
6379  d59a 1f08          	ldw	(OFST+1,sp),x
6380                     ; 1771 	  if (pSocket->nParseLeft == 0) {
6382  d59c 1e0e          	ldw	x,(OFST+7,sp)
6383  d59e e606          	ld	a,(6,x)
6384  d5a0 26e3          	jrne	L7071
6385                     ; 1773             pSocket->nState = STATE_SENDHEADER;
6387  d5a2               LC023:
6389  d5a2 a60b          	ld	a,#11
6390  d5a4 f7            	ld	(x),a
6391                     ; 1774             break;
6393  d5a5 200b          	jra	L1761
6394  d5a7               L5761:
6395                     ; 1530       while (nBytes--) {
6397  d5a7 1e0c          	ldw	x,(OFST+5,sp)
6398  d5a9 5a            	decw	x
6399  d5aa 1f0c          	ldw	(OFST+5,sp),x
6400  d5ac 5c            	incw	x
6401  d5ad 2703ccd309    	jrne	L3761
6402  d5b2               L1761:
6403                     ; 1785     if (pSocket->nState == STATE_SENDHEADER) {
6405  d5b2 1e0e          	ldw	x,(OFST+7,sp)
6406  d5b4 f6            	ld	a,(x)
6407  d5b5 a10b          	cp	a,#11
6408  d5b7 2623          	jrne	L5571
6409                     ; 1786       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
6411  d5b9 ee03          	ldw	x,(3,x)
6412  d5bb cdf60f        	call	c_uitolx
6414  d5be be02          	ldw	x,c_lreg+2
6415  d5c0 89            	pushw	x
6416  d5c1 be00          	ldw	x,c_lreg
6417  d5c3 89            	pushw	x
6418  d5c4 ce01d9        	ldw	x,_uip_appdata
6419  d5c7 cdc5b5        	call	L7_CopyHttpHeader
6421  d5ca 5b04          	addw	sp,#4
6422  d5cc 89            	pushw	x
6423  d5cd ce01d9        	ldw	x,_uip_appdata
6424  d5d0 cdefec        	call	_uip_send
6426  d5d3 85            	popw	x
6427                     ; 1787       pSocket->nState = STATE_SENDDATA;
6429  d5d4 1e0e          	ldw	x,(OFST+7,sp)
6430  d5d6 a60c          	ld	a,#12
6431  d5d8 f7            	ld	(x),a
6432                     ; 1788       return;
6434  d5d9 cccf48        	jra	L613
6435  d5dc               L5571:
6436                     ; 1791     if (pSocket->nState == STATE_SENDDATA) {
6438  d5dc a10c          	cp	a,#12
6439  d5de 26f9          	jrne	L613
6440                     ; 1795       pSocket->nPrevBytes = pSocket->nDataLeft;
6442  d5e0 9093          	ldw	y,x
6443  d5e2 90ee03        	ldw	y,(3,y)
6444  d5e5 ef0a          	ldw	(10,x),y
6445                     ; 1796       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6447  d5e7 ce01d5        	ldw	x,_uip_conn
6448  d5ea ee12          	ldw	x,(18,x)
6449  d5ec 89            	pushw	x
6450  d5ed 1e10          	ldw	x,(OFST+9,sp)
6451  d5ef 1c0003        	addw	x,#3
6452  d5f2 89            	pushw	x
6453  d5f3 1e12          	ldw	x,(OFST+11,sp)
6454  d5f5 5c            	incw	x
6455  d5f6 89            	pushw	x
6456  d5f7 ce01d9        	ldw	x,_uip_appdata
6457  d5fa cdc64d        	call	L11_CopyHttpData
6459  d5fd 5b06          	addw	sp,#6
6460  d5ff 1f01          	ldw	(OFST-6,sp),x
6462                     ; 1797       pSocket->nPrevBytes -= pSocket->nDataLeft;
6464  d601 1e0e          	ldw	x,(OFST+7,sp)
6465  d603 e60b          	ld	a,(11,x)
6466  d605 e004          	sub	a,(4,x)
6467  d607 e70b          	ld	(11,x),a
6468  d609 e60a          	ld	a,(10,x)
6469  d60b e203          	sbc	a,(3,x)
6470  d60d e70a          	ld	(10,x),a
6471                     ; 1799       if (nBufSize == 0) {
6473  d60f 1e01          	ldw	x,(OFST-6,sp)
6474  d611 262d          	jrne	LC014
6475                     ; 1801         uip_close();
6477  d613               LC015:
6479  d613 35100088      	mov	_uip_flags,#16
6481  d617 cccf48        	jra	L613
6482                     ; 1805         uip_send(uip_appdata, nBufSize);
6484                     ; 1807       return;
6486  d61a               L5631:
6487                     ; 1811   else if (uip_rexmit()) {
6489  d61a 7204008803cc  	btjf	_uip_flags,#2,L3631
6490                     ; 1812     if (pSocket->nPrevBytes == 0xFFFF) {
6492  d622 160e          	ldw	y,(OFST+7,sp)
6493  d624 90ee0a        	ldw	y,(10,y)
6494  d627 905c          	incw	y
6495  d629 2620          	jrne	L1771
6496                     ; 1814       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
6498  d62b 1e0e          	ldw	x,(OFST+7,sp)
6499  d62d ee03          	ldw	x,(3,x)
6500  d62f cdf60f        	call	c_uitolx
6502  d632 be02          	ldw	x,c_lreg+2
6503  d634 89            	pushw	x
6504  d635 be00          	ldw	x,c_lreg
6505  d637 89            	pushw	x
6506  d638 ce01d9        	ldw	x,_uip_appdata
6507  d63b cdc5b5        	call	L7_CopyHttpHeader
6509  d63e 5b04          	addw	sp,#4
6511  d640               LC014:
6513  d640 89            	pushw	x
6514  d641 ce01d9        	ldw	x,_uip_appdata
6515  d644 cdefec        	call	_uip_send
6516  d647 85            	popw	x
6518  d648 cccf48        	jra	L613
6519  d64b               L1771:
6520                     ; 1817       pSocket->pData -= pSocket->nPrevBytes;
6522  d64b 1e0e          	ldw	x,(OFST+7,sp)
6523  d64d e602          	ld	a,(2,x)
6524  d64f e00b          	sub	a,(11,x)
6525  d651 e702          	ld	(2,x),a
6526  d653 e601          	ld	a,(1,x)
6527  d655 e20a          	sbc	a,(10,x)
6528  d657 e701          	ld	(1,x),a
6529                     ; 1818       pSocket->nDataLeft += pSocket->nPrevBytes;
6531  d659 e604          	ld	a,(4,x)
6532  d65b eb0b          	add	a,(11,x)
6533  d65d e704          	ld	(4,x),a
6534  d65f e603          	ld	a,(3,x)
6535  d661 e90a          	adc	a,(10,x)
6536                     ; 1819       pSocket->nPrevBytes = pSocket->nDataLeft;
6538  d663 9093          	ldw	y,x
6539  d665 e703          	ld	(3,x),a
6540  d667 90ee03        	ldw	y,(3,y)
6541  d66a ef0a          	ldw	(10,x),y
6542                     ; 1820       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6544  d66c ce01d5        	ldw	x,_uip_conn
6545  d66f ee12          	ldw	x,(18,x)
6546  d671 89            	pushw	x
6547  d672 1e10          	ldw	x,(OFST+9,sp)
6548  d674 1c0003        	addw	x,#3
6549  d677 89            	pushw	x
6550  d678 1e12          	ldw	x,(OFST+11,sp)
6551  d67a 5c            	incw	x
6552  d67b 89            	pushw	x
6553  d67c ce01d9        	ldw	x,_uip_appdata
6554  d67f cdc64d        	call	L11_CopyHttpData
6556  d682 5b06          	addw	sp,#6
6557  d684 1f01          	ldw	(OFST-6,sp),x
6559                     ; 1821       pSocket->nPrevBytes -= pSocket->nDataLeft;
6561  d686 1e0e          	ldw	x,(OFST+7,sp)
6562  d688 e60b          	ld	a,(11,x)
6563  d68a e004          	sub	a,(4,x)
6564  d68c e70b          	ld	(11,x),a
6565  d68e e60a          	ld	a,(10,x)
6566  d690 e203          	sbc	a,(3,x)
6567  d692 e70a          	ld	(10,x),a
6568                     ; 1822       if (nBufSize == 0) {
6570  d694 1e01          	ldw	x,(OFST-6,sp)
6571                     ; 1824         uip_close();
6573  d696 2603ccd613    	jreq	LC015
6574                     ; 1828         uip_send(uip_appdata, nBufSize);
6576  d69b 89            	pushw	x
6577  d69c ce01d9        	ldw	x,_uip_appdata
6578  d69f cdefec        	call	_uip_send
6580  d6a2 85            	popw	x
6581                     ; 1831     return;
6583  d6a3               L3631:
6584                     ; 1833 }
6586  d6a3 cccf48        	jra	L613
6620                     ; 1836 uint8_t GpioGetPin(uint8_t nGpio)
6620                     ; 1837 {
6621                     	switch	.text
6622  d6a6               _GpioGetPin:
6624       00000000      OFST:	set	0
6627                     ; 1839   if(nGpio == 0       && (Relays_8to1  & (uint8_t)(0x01))) return 1; // Relay-01 is ON
6629  d6a6 4d            	tnz	a
6630  d6a7 2607          	jrne	L5102
6632  d6a9 7201005f02    	btjf	_Relays_8to1,#0,L5102
6635  d6ae 4c            	inc	a
6638  d6af 81            	ret	
6639  d6b0               L5102:
6640                     ; 1840   else if(nGpio == 1  && (Relays_8to1  & (uint8_t)(0x02))) return 1; // Relay-02 is ON
6642  d6b0 a101          	cp	a,#1
6643  d6b2 2608          	jrne	L1202
6645  d6b4 7203005f03    	btjf	_Relays_8to1,#1,L1202
6648  d6b9 a601          	ld	a,#1
6651  d6bb 81            	ret	
6652  d6bc               L1202:
6653                     ; 1841   else if(nGpio == 2  && (Relays_8to1  & (uint8_t)(0x04))) return 1; // Relay-03 is ON
6655  d6bc a102          	cp	a,#2
6656  d6be 2608          	jrne	L5202
6658  d6c0 7205005f03    	btjf	_Relays_8to1,#2,L5202
6661  d6c5 a601          	ld	a,#1
6664  d6c7 81            	ret	
6665  d6c8               L5202:
6666                     ; 1842   else if(nGpio == 3  && (Relays_8to1  & (uint8_t)(0x08))) return 1; // Relay-04 is ON
6668  d6c8 a103          	cp	a,#3
6669  d6ca 2608          	jrne	L1302
6671  d6cc 7207005f03    	btjf	_Relays_8to1,#3,L1302
6674  d6d1 a601          	ld	a,#1
6677  d6d3 81            	ret	
6678  d6d4               L1302:
6679                     ; 1843   else if(nGpio == 4  && (Relays_8to1  & (uint8_t)(0x10))) return 1; // Relay-05 is ON
6681  d6d4 a104          	cp	a,#4
6682  d6d6 2608          	jrne	L5302
6684  d6d8 7209005f03    	btjf	_Relays_8to1,#4,L5302
6687  d6dd a601          	ld	a,#1
6690  d6df 81            	ret	
6691  d6e0               L5302:
6692                     ; 1844   else if(nGpio == 5  && (Relays_8to1  & (uint8_t)(0x20))) return 1; // Relay-06 is ON
6694  d6e0 a105          	cp	a,#5
6695  d6e2 2608          	jrne	L1402
6697  d6e4 720b005f03    	btjf	_Relays_8to1,#5,L1402
6700  d6e9 a601          	ld	a,#1
6703  d6eb 81            	ret	
6704  d6ec               L1402:
6705                     ; 1845   else if(nGpio == 6  && (Relays_8to1  & (uint8_t)(0x40))) return 1; // Relay-07 is ON
6707  d6ec a106          	cp	a,#6
6708  d6ee 2608          	jrne	L5402
6710  d6f0 720d005f03    	btjf	_Relays_8to1,#6,L5402
6713  d6f5 a601          	ld	a,#1
6716  d6f7 81            	ret	
6717  d6f8               L5402:
6718                     ; 1846   else if(nGpio == 7  && (Relays_8to1  & (uint8_t)(0x80))) return 1; // Relay-08 is ON
6720  d6f8 a107          	cp	a,#7
6721  d6fa 2608          	jrne	L1502
6723  d6fc 720f005f03    	btjf	_Relays_8to1,#7,L1502
6726  d701 a601          	ld	a,#1
6729  d703 81            	ret	
6730  d704               L1502:
6731                     ; 1847   else if(nGpio == 8  && (Relays_16to9 & (uint8_t)(0x01))) return 1; // Relay-09 is ON
6733  d704 a108          	cp	a,#8
6734  d706 2608          	jrne	L5502
6736  d708 7201006003    	btjf	_Relays_16to9,#0,L5502
6739  d70d a601          	ld	a,#1
6742  d70f 81            	ret	
6743  d710               L5502:
6744                     ; 1848   else if(nGpio == 9  && (Relays_16to9 & (uint8_t)(0x02))) return 1; // Relay-10 is ON
6746  d710 a109          	cp	a,#9
6747  d712 2608          	jrne	L1602
6749  d714 7203006003    	btjf	_Relays_16to9,#1,L1602
6752  d719 a601          	ld	a,#1
6755  d71b 81            	ret	
6756  d71c               L1602:
6757                     ; 1849   else if(nGpio == 10 && (Relays_16to9 & (uint8_t)(0x04))) return 1; // Relay-11 is ON
6759  d71c a10a          	cp	a,#10
6760  d71e 2608          	jrne	L5602
6762  d720 7205006003    	btjf	_Relays_16to9,#2,L5602
6765  d725 a601          	ld	a,#1
6768  d727 81            	ret	
6769  d728               L5602:
6770                     ; 1850   else if(nGpio == 11 && (Relays_16to9 & (uint8_t)(0x08))) return 1; // Relay-12 is ON
6772  d728 a10b          	cp	a,#11
6773  d72a 2608          	jrne	L1702
6775  d72c 7207006003    	btjf	_Relays_16to9,#3,L1702
6778  d731 a601          	ld	a,#1
6781  d733 81            	ret	
6782  d734               L1702:
6783                     ; 1851   else if(nGpio == 12 && (Relays_16to9 & (uint8_t)(0x10))) return 1; // Relay-13 is ON
6785  d734 a10c          	cp	a,#12
6786  d736 2608          	jrne	L5702
6788  d738 7209006003    	btjf	_Relays_16to9,#4,L5702
6791  d73d a601          	ld	a,#1
6794  d73f 81            	ret	
6795  d740               L5702:
6796                     ; 1852   else if(nGpio == 13 && (Relays_16to9 & (uint8_t)(0x20))) return 1; // Relay-14 is ON
6798  d740 a10d          	cp	a,#13
6799  d742 2608          	jrne	L1012
6801  d744 720b006003    	btjf	_Relays_16to9,#5,L1012
6804  d749 a601          	ld	a,#1
6807  d74b 81            	ret	
6808  d74c               L1012:
6809                     ; 1853   else if(nGpio == 14 && (Relays_16to9 & (uint8_t)(0x40))) return 1; // Relay-15 is ON
6811  d74c a10e          	cp	a,#14
6812  d74e 2608          	jrne	L5012
6814  d750 720d006003    	btjf	_Relays_16to9,#6,L5012
6817  d755 a601          	ld	a,#1
6820  d757 81            	ret	
6821  d758               L5012:
6822                     ; 1854   else if(nGpio == 15 && (Relays_16to9 & (uint8_t)(0x80))) return 1; // Relay-16 is ON
6824  d758 a10f          	cp	a,#15
6825  d75a 2608          	jrne	L7102
6827  d75c 720f006003    	btjf	_Relays_16to9,#7,L7102
6830  d761 a601          	ld	a,#1
6833  d763 81            	ret	
6834  d764               L7102:
6835                     ; 1855   return 0;
6837  d764 4f            	clr	a
6840  d765 81            	ret	
6881                     	switch	.const
6882  bea3               L623:
6883  bea3 d783          	dc.w	L3112
6884  bea5 d795          	dc.w	L5112
6885  bea7 d7a7          	dc.w	L7112
6886  bea9 d7b9          	dc.w	L1212
6887  beab d7cb          	dc.w	L3212
6888  bead d7dd          	dc.w	L5212
6889  beaf d7ef          	dc.w	L7212
6890  beb1 d801          	dc.w	L1312
6891  beb3 d812          	dc.w	L3312
6892  beb5 d822          	dc.w	L5312
6893  beb7 d832          	dc.w	L7312
6894  beb9 d842          	dc.w	L1412
6895  bebb d852          	dc.w	L3412
6896  bebd d862          	dc.w	L5412
6897  bebf d872          	dc.w	L7412
6898  bec1 d882          	dc.w	L1512
6899                     ; 1859 void GpioSetPin(uint8_t nGpio, uint8_t nState)
6899                     ; 1860 {
6900                     	switch	.text
6901  d766               _GpioSetPin:
6903  d766 89            	pushw	x
6904       00000000      OFST:	set	0
6907                     ; 1864   if(nState != 0 && nState != 1) nState = 1;
6909  d767 9f            	ld	a,xl
6910  d768 4d            	tnz	a
6911  d769 2708          	jreq	L3712
6913  d76b 9f            	ld	a,xl
6914  d76c 4a            	dec	a
6915  d76d 2704          	jreq	L3712
6918  d76f a601          	ld	a,#1
6919  d771 6b02          	ld	(OFST+2,sp),a
6920  d773               L3712:
6921                     ; 1866   switch(nGpio)
6923  d773 7b01          	ld	a,(OFST+1,sp)
6925                     ; 1932   default: break;
6926  d775 a110          	cp	a,#16
6927  d777 2503ccd890    	jruge	L7712
6928  d77c 5f            	clrw	x
6929  d77d 97            	ld	xl,a
6930  d77e 58            	sllw	x
6931  d77f debea3        	ldw	x,(L623,x)
6932  d782 fc            	jp	(x)
6933  d783               L3112:
6934                     ; 1868   case 0:
6934                     ; 1869     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x01); // Relay-01 OFF
6936  d783 7b02          	ld	a,(OFST+2,sp)
6937  d785 2607          	jrne	L1022
6940  d787 7211005f      	bres	_Relays_8to1,#0
6942  d78b ccd890        	jra	L7712
6943  d78e               L1022:
6944                     ; 1870     else Relays_8to1 |= (uint8_t)0x01; // Relay-01 ON
6946  d78e 7210005f      	bset	_Relays_8to1,#0
6947  d792 ccd890        	jra	L7712
6948  d795               L5112:
6949                     ; 1872   case 1:
6949                     ; 1873     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x02); // Relay-02 OFF
6951  d795 7b02          	ld	a,(OFST+2,sp)
6952  d797 2607          	jrne	L5022
6955  d799 7213005f      	bres	_Relays_8to1,#1
6957  d79d ccd890        	jra	L7712
6958  d7a0               L5022:
6959                     ; 1874     else Relays_8to1 |= (uint8_t)0x02; // Relay-02 ON
6961  d7a0 7212005f      	bset	_Relays_8to1,#1
6962  d7a4 ccd890        	jra	L7712
6963  d7a7               L7112:
6964                     ; 1876   case 2:
6964                     ; 1877     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x04); // Relay-03 OFF
6966  d7a7 7b02          	ld	a,(OFST+2,sp)
6967  d7a9 2607          	jrne	L1122
6970  d7ab 7215005f      	bres	_Relays_8to1,#2
6972  d7af ccd890        	jra	L7712
6973  d7b2               L1122:
6974                     ; 1878     else Relays_8to1 |= (uint8_t)0x04; // Relay-03 ON
6976  d7b2 7214005f      	bset	_Relays_8to1,#2
6977  d7b6 ccd890        	jra	L7712
6978  d7b9               L1212:
6979                     ; 1880   case 3:
6979                     ; 1881     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x08); // Relay-04 OFF
6981  d7b9 7b02          	ld	a,(OFST+2,sp)
6982  d7bb 2607          	jrne	L5122
6985  d7bd 7217005f      	bres	_Relays_8to1,#3
6987  d7c1 ccd890        	jra	L7712
6988  d7c4               L5122:
6989                     ; 1882     else Relays_8to1 |= (uint8_t)0x08; // Relay-04 ON
6991  d7c4 7216005f      	bset	_Relays_8to1,#3
6992  d7c8 ccd890        	jra	L7712
6993  d7cb               L3212:
6994                     ; 1884   case 4:
6994                     ; 1885     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x10); // Relay-05 OFF
6996  d7cb 7b02          	ld	a,(OFST+2,sp)
6997  d7cd 2607          	jrne	L1222
7000  d7cf 7219005f      	bres	_Relays_8to1,#4
7002  d7d3 ccd890        	jra	L7712
7003  d7d6               L1222:
7004                     ; 1886     else Relays_8to1 |= (uint8_t)0x10; // Relay-05 ON
7006  d7d6 7218005f      	bset	_Relays_8to1,#4
7007  d7da ccd890        	jra	L7712
7008  d7dd               L5212:
7009                     ; 1888   case 5:
7009                     ; 1889     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x20); // Relay-06 OFF
7011  d7dd 7b02          	ld	a,(OFST+2,sp)
7012  d7df 2607          	jrne	L5222
7015  d7e1 721b005f      	bres	_Relays_8to1,#5
7017  d7e5 ccd890        	jra	L7712
7018  d7e8               L5222:
7019                     ; 1890     else Relays_8to1 |= (uint8_t)0x20; // Relay-06 ON
7021  d7e8 721a005f      	bset	_Relays_8to1,#5
7022  d7ec ccd890        	jra	L7712
7023  d7ef               L7212:
7024                     ; 1892   case 6:
7024                     ; 1893     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x40); // Relay-07 OFF
7026  d7ef 7b02          	ld	a,(OFST+2,sp)
7027  d7f1 2607          	jrne	L1322
7030  d7f3 721d005f      	bres	_Relays_8to1,#6
7032  d7f7 ccd890        	jra	L7712
7033  d7fa               L1322:
7034                     ; 1894     else Relays_8to1 |= (uint8_t)0x40; // Relay-07 ON
7036  d7fa 721c005f      	bset	_Relays_8to1,#6
7037  d7fe ccd890        	jra	L7712
7038  d801               L1312:
7039                     ; 1896   case 7:
7039                     ; 1897     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x80); // Relay-08 OFF
7041  d801 7b02          	ld	a,(OFST+2,sp)
7042  d803 2607          	jrne	L5322
7045  d805 721f005f      	bres	_Relays_8to1,#7
7047  d809 ccd890        	jra	L7712
7048  d80c               L5322:
7049                     ; 1898     else Relays_8to1 |= (uint8_t)0x80; // Relay-08 ON
7051  d80c 721e005f      	bset	_Relays_8to1,#7
7052  d810 207e          	jra	L7712
7053  d812               L3312:
7054                     ; 1900   case 8:
7054                     ; 1901     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x01); // Relay-09 OFF
7056  d812 7b02          	ld	a,(OFST+2,sp)
7057  d814 2606          	jrne	L1422
7060  d816 72110060      	bres	_Relays_16to9,#0
7062  d81a 2074          	jra	L7712
7063  d81c               L1422:
7064                     ; 1902     else Relays_16to9 |= (uint8_t)0x01; // Relay-09 ON
7066  d81c 72100060      	bset	_Relays_16to9,#0
7067  d820 206e          	jra	L7712
7068  d822               L5312:
7069                     ; 1904   case 9:
7069                     ; 1905     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x02); // Relay-10 OFF
7071  d822 7b02          	ld	a,(OFST+2,sp)
7072  d824 2606          	jrne	L5422
7075  d826 72130060      	bres	_Relays_16to9,#1
7077  d82a 2064          	jra	L7712
7078  d82c               L5422:
7079                     ; 1906     else Relays_16to9 |= (uint8_t)0x02; // Relay-10 ON
7081  d82c 72120060      	bset	_Relays_16to9,#1
7082  d830 205e          	jra	L7712
7083  d832               L7312:
7084                     ; 1908   case 10:
7084                     ; 1909     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x04); // Relay-11 OFF
7086  d832 7b02          	ld	a,(OFST+2,sp)
7087  d834 2606          	jrne	L1522
7090  d836 72150060      	bres	_Relays_16to9,#2
7092  d83a 2054          	jra	L7712
7093  d83c               L1522:
7094                     ; 1910     else Relays_16to9 |= (uint8_t)0x04; // Relay-11 ON
7096  d83c 72140060      	bset	_Relays_16to9,#2
7097  d840 204e          	jra	L7712
7098  d842               L1412:
7099                     ; 1912   case 11:
7099                     ; 1913     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x08); // Relay-12 OFF
7101  d842 7b02          	ld	a,(OFST+2,sp)
7102  d844 2606          	jrne	L5522
7105  d846 72170060      	bres	_Relays_16to9,#3
7107  d84a 2044          	jra	L7712
7108  d84c               L5522:
7109                     ; 1914     else Relays_16to9 |= (uint8_t)0x08; // Relay-12 ON
7111  d84c 72160060      	bset	_Relays_16to9,#3
7112  d850 203e          	jra	L7712
7113  d852               L3412:
7114                     ; 1916   case 12:
7114                     ; 1917     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x10); // Relay-13 OFF
7116  d852 7b02          	ld	a,(OFST+2,sp)
7117  d854 2606          	jrne	L1622
7120  d856 72190060      	bres	_Relays_16to9,#4
7122  d85a 2034          	jra	L7712
7123  d85c               L1622:
7124                     ; 1918     else Relays_16to9 |= (uint8_t)0x10; // Relay-13 ON
7126  d85c 72180060      	bset	_Relays_16to9,#4
7127  d860 202e          	jra	L7712
7128  d862               L5412:
7129                     ; 1920   case 13:
7129                     ; 1921     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x20); // Relay-14 OFF
7131  d862 7b02          	ld	a,(OFST+2,sp)
7132  d864 2606          	jrne	L5622
7135  d866 721b0060      	bres	_Relays_16to9,#5
7137  d86a 2024          	jra	L7712
7138  d86c               L5622:
7139                     ; 1922     else Relays_16to9 |= (uint8_t)0x20; // Relay-14 ON
7141  d86c 721a0060      	bset	_Relays_16to9,#5
7142  d870 201e          	jra	L7712
7143  d872               L7412:
7144                     ; 1924   case 14:
7144                     ; 1925     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x40); // Relay-15 OFF
7146  d872 7b02          	ld	a,(OFST+2,sp)
7147  d874 2606          	jrne	L1722
7150  d876 721d0060      	bres	_Relays_16to9,#6
7152  d87a 2014          	jra	L7712
7153  d87c               L1722:
7154                     ; 1926     else Relays_16to9 |= (uint8_t)0x40; // Relay-15 ON
7156  d87c 721c0060      	bset	_Relays_16to9,#6
7157  d880 200e          	jra	L7712
7158  d882               L1512:
7159                     ; 1928   case 15:
7159                     ; 1929     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x80); // Relay-16 OFF
7161  d882 7b02          	ld	a,(OFST+2,sp)
7162  d884 2606          	jrne	L5722
7165  d886 721f0060      	bres	_Relays_16to9,#7
7167  d88a 2004          	jra	L7712
7168  d88c               L5722:
7169                     ; 1930     else Relays_16to9 |= (uint8_t)0x80; // Relay-16 ON
7171  d88c 721e0060      	bset	_Relays_16to9,#7
7172                     ; 1932   default: break;
7174  d890               L7712:
7175                     ; 1934 }
7178  d890 85            	popw	x
7179  d891 81            	ret	
7269                     	switch	.const
7270  bec3               L633:
7271  bec3 d8c7          	dc.w	L1032
7272  bec5 d8ce          	dc.w	L3032
7273  bec7 d8d5          	dc.w	L5032
7274  bec9 d8dc          	dc.w	L7032
7275  becb d8e3          	dc.w	L1132
7276  becd d8ea          	dc.w	L3132
7277  becf d8f1          	dc.w	L5132
7278  bed1 d8f8          	dc.w	L7132
7279  bed3 d8ff          	dc.w	L1232
7280  bed5 d906          	dc.w	L3232
7281  bed7 d90d          	dc.w	L5232
7282  bed9 d914          	dc.w	L7232
7283                     ; 1937 void SetAddresses(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
7283                     ; 1938 {
7284                     	switch	.text
7285  d892               _SetAddresses:
7287  d892 89            	pushw	x
7288  d893 5207          	subw	sp,#7
7289       00000007      OFST:	set	7
7292                     ; 1951   temp = 0;
7294                     ; 1952   invalid = 0;
7296  d895 0f01          	clr	(OFST-6,sp)
7298                     ; 1955   str[0] = (uint8_t)alpha1;
7300  d897 9f            	ld	a,xl
7301  d898 6b02          	ld	(OFST-5,sp),a
7303                     ; 1956   str[1] = (uint8_t)alpha2;
7305  d89a 7b0c          	ld	a,(OFST+5,sp)
7306  d89c 6b03          	ld	(OFST-4,sp),a
7308                     ; 1957   str[2] = (uint8_t)alpha3;
7310  d89e 7b0d          	ld	a,(OFST+6,sp)
7311  d8a0 6b04          	ld	(OFST-3,sp),a
7313                     ; 1958   str[3] = 0;
7315  d8a2 0f05          	clr	(OFST-2,sp)
7317                     ; 1959   temp = atoi(str);
7319  d8a4 96            	ldw	x,sp
7320  d8a5 1c0002        	addw	x,#OFST-5
7321  d8a8 cdf3a9        	call	_atoi
7323  d8ab 1f06          	ldw	(OFST-1,sp),x
7325                     ; 1960   if (temp > 255) invalid = 1; // If an invalid entry set indicator
7327  d8ad a30100        	cpw	x,#256
7328  d8b0 2504          	jrult	L5632
7331  d8b2 a601          	ld	a,#1
7332  d8b4 6b01          	ld	(OFST-6,sp),a
7334  d8b6               L5632:
7335                     ; 1962   if(invalid == 0) { // Make change only if valid entry
7337  d8b6 7b01          	ld	a,(OFST-6,sp)
7338  d8b8 265f          	jrne	L7632
7339                     ; 1963     switch(itemnum)
7341  d8ba 7b08          	ld	a,(OFST+1,sp)
7343                     ; 1977     default: break;
7344  d8bc a10c          	cp	a,#12
7345  d8be 2459          	jruge	L7632
7346  d8c0 5f            	clrw	x
7347  d8c1 97            	ld	xl,a
7348  d8c2 58            	sllw	x
7349  d8c3 debec3        	ldw	x,(L633,x)
7350  d8c6 fc            	jp	(x)
7351  d8c7               L1032:
7352                     ; 1965     case 0:  Pending_hostaddr4 = (uint8_t)temp; break;
7354  d8c7 7b07          	ld	a,(OFST+0,sp)
7355  d8c9 c70037        	ld	_Pending_hostaddr4,a
7358  d8cc 204b          	jra	L7632
7359  d8ce               L3032:
7360                     ; 1966     case 1:  Pending_hostaddr3 = (uint8_t)temp; break;
7362  d8ce 7b07          	ld	a,(OFST+0,sp)
7363  d8d0 c70036        	ld	_Pending_hostaddr3,a
7366  d8d3 2044          	jra	L7632
7367  d8d5               L5032:
7368                     ; 1967     case 2:  Pending_hostaddr2 = (uint8_t)temp; break;
7370  d8d5 7b07          	ld	a,(OFST+0,sp)
7371  d8d7 c70035        	ld	_Pending_hostaddr2,a
7374  d8da 203d          	jra	L7632
7375  d8dc               L7032:
7376                     ; 1968     case 3:  Pending_hostaddr1 = (uint8_t)temp; break;
7378  d8dc 7b07          	ld	a,(OFST+0,sp)
7379  d8de c70034        	ld	_Pending_hostaddr1,a
7382  d8e1 2036          	jra	L7632
7383  d8e3               L1132:
7384                     ; 1969     case 4:  Pending_draddr4 = (uint8_t)temp; break;
7386  d8e3 7b07          	ld	a,(OFST+0,sp)
7387  d8e5 c70033        	ld	_Pending_draddr4,a
7390  d8e8 202f          	jra	L7632
7391  d8ea               L3132:
7392                     ; 1970     case 5:  Pending_draddr3 = (uint8_t)temp; break;
7394  d8ea 7b07          	ld	a,(OFST+0,sp)
7395  d8ec c70032        	ld	_Pending_draddr3,a
7398  d8ef 2028          	jra	L7632
7399  d8f1               L5132:
7400                     ; 1971     case 6:  Pending_draddr2 = (uint8_t)temp; break;
7402  d8f1 7b07          	ld	a,(OFST+0,sp)
7403  d8f3 c70031        	ld	_Pending_draddr2,a
7406  d8f6 2021          	jra	L7632
7407  d8f8               L7132:
7408                     ; 1972     case 7:  Pending_draddr1 = (uint8_t)temp; break;
7410  d8f8 7b07          	ld	a,(OFST+0,sp)
7411  d8fa c70030        	ld	_Pending_draddr1,a
7414  d8fd 201a          	jra	L7632
7415  d8ff               L1232:
7416                     ; 1973     case 8:  Pending_netmask4 = (uint8_t)temp; break;
7418  d8ff 7b07          	ld	a,(OFST+0,sp)
7419  d901 c7002f        	ld	_Pending_netmask4,a
7422  d904 2013          	jra	L7632
7423  d906               L3232:
7424                     ; 1974     case 9:  Pending_netmask3 = (uint8_t)temp; break;
7426  d906 7b07          	ld	a,(OFST+0,sp)
7427  d908 c7002e        	ld	_Pending_netmask3,a
7430  d90b 200c          	jra	L7632
7431  d90d               L5232:
7432                     ; 1975     case 10: Pending_netmask2 = (uint8_t)temp; break;
7434  d90d 7b07          	ld	a,(OFST+0,sp)
7435  d90f c7002d        	ld	_Pending_netmask2,a
7438  d912 2005          	jra	L7632
7439  d914               L7232:
7440                     ; 1976     case 11: Pending_netmask1 = (uint8_t)temp; break;
7442  d914 7b07          	ld	a,(OFST+0,sp)
7443  d916 c7002c        	ld	_Pending_netmask1,a
7446                     ; 1977     default: break;
7448  d919               L7632:
7449                     ; 1980 }
7452  d919 5b09          	addw	sp,#9
7453  d91b 81            	ret	
7546                     ; 1983 void SetPort(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3, uint8_t alpha4, uint8_t alpha5)
7546                     ; 1984 {
7547                     	switch	.text
7548  d91c               _SetPort:
7550  d91c 89            	pushw	x
7551  d91d 5209          	subw	sp,#9
7552       00000009      OFST:	set	9
7555                     ; 1997   temp = 0;
7557  d91f 5f            	clrw	x
7558  d920 1f01          	ldw	(OFST-8,sp),x
7560                     ; 1998   invalid = 0;
7562  d922 0f03          	clr	(OFST-6,sp)
7564                     ; 2001   if(alpha1 > '6') invalid = 1;
7566  d924 7b0b          	ld	a,(OFST+2,sp)
7567  d926 a137          	cp	a,#55
7568  d928 2506          	jrult	L3342
7571  d92a a601          	ld	a,#1
7572  d92c 6b03          	ld	(OFST-6,sp),a
7575  d92e 201d          	jra	L5342
7576  d930               L3342:
7577                     ; 2003     str[0] = (uint8_t)alpha1;
7579  d930 6b04          	ld	(OFST-5,sp),a
7581                     ; 2004     str[1] = (uint8_t)alpha2;
7583  d932 7b0e          	ld	a,(OFST+5,sp)
7584  d934 6b05          	ld	(OFST-4,sp),a
7586                     ; 2005     str[2] = (uint8_t)alpha3;
7588  d936 7b0f          	ld	a,(OFST+6,sp)
7589  d938 6b06          	ld	(OFST-3,sp),a
7591                     ; 2006     str[3] = (uint8_t)alpha4;
7593  d93a 7b10          	ld	a,(OFST+7,sp)
7594  d93c 6b07          	ld	(OFST-2,sp),a
7596                     ; 2007     str[4] = (uint8_t)alpha5;
7598  d93e 7b11          	ld	a,(OFST+8,sp)
7599  d940 6b08          	ld	(OFST-1,sp),a
7601                     ; 2008     str[5] = 0;
7603  d942 0f09          	clr	(OFST+0,sp)
7605                     ; 2009     temp = atoi(str);
7607  d944 96            	ldw	x,sp
7608  d945 1c0004        	addw	x,#OFST-5
7609  d948 cdf3a9        	call	_atoi
7611  d94b 1f01          	ldw	(OFST-8,sp),x
7613  d94d               L5342:
7614                     ; 2012   if(invalid == 0) { // Make change only if valid entry
7616  d94d 7b03          	ld	a,(OFST-6,sp)
7617  d94f 2603          	jrne	L7342
7618                     ; 2013     Pending_port = (uint16_t)temp;
7620  d951 cf002a        	ldw	_Pending_port,x
7621  d954               L7342:
7622                     ; 2015 }
7625  d954 5b0b          	addw	sp,#11
7626  d956 81            	ret	
7692                     ; 2018 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7692                     ; 2019 {
7693                     	switch	.text
7694  d957               _SetMAC:
7696  d957 89            	pushw	x
7697  d958 5203          	subw	sp,#3
7698       00000003      OFST:	set	3
7701                     ; 2031   temp = 0;
7703                     ; 2032   invalid = 0;
7705  d95a 0f01          	clr	(OFST-2,sp)
7707                     ; 2035   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7709  d95c 9f            	ld	a,xl
7710  d95d a130          	cp	a,#48
7711  d95f 250b          	jrult	L3052
7713  d961 9f            	ld	a,xl
7714  d962 a13a          	cp	a,#58
7715  d964 2406          	jruge	L3052
7718  d966 7b05          	ld	a,(OFST+2,sp)
7719  d968 a030          	sub	a,#48
7721  d96a 200c          	jp	LC028
7722  d96c               L3052:
7723                     ; 2036   else if(alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7725  d96c 7b05          	ld	a,(OFST+2,sp)
7726  d96e a161          	cp	a,#97
7727  d970 250a          	jrult	L7052
7729  d972 a167          	cp	a,#103
7730  d974 2406          	jruge	L7052
7733  d976 a057          	sub	a,#87
7734  d978               LC028:
7735  d978 6b05          	ld	(OFST+2,sp),a
7737  d97a 2004          	jra	L5052
7738  d97c               L7052:
7739                     ; 2037   else invalid = 1; // If an invalid entry set indicator
7741  d97c a601          	ld	a,#1
7742  d97e 6b01          	ld	(OFST-2,sp),a
7744  d980               L5052:
7745                     ; 2039   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7747  d980 7b08          	ld	a,(OFST+5,sp)
7748  d982 a130          	cp	a,#48
7749  d984 2508          	jrult	L3152
7751  d986 a13a          	cp	a,#58
7752  d988 2404          	jruge	L3152
7755  d98a a030          	sub	a,#48
7757  d98c 200a          	jp	LC029
7758  d98e               L3152:
7759                     ; 2040   else if(alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7761  d98e a161          	cp	a,#97
7762  d990 250a          	jrult	L7152
7764  d992 a167          	cp	a,#103
7765  d994 2406          	jruge	L7152
7768  d996 a057          	sub	a,#87
7769  d998               LC029:
7770  d998 6b08          	ld	(OFST+5,sp),a
7772  d99a 2004          	jra	L5152
7773  d99c               L7152:
7774                     ; 2041   else invalid = 1; // If an invalid entry set indicator
7776  d99c a601          	ld	a,#1
7777  d99e 6b01          	ld	(OFST-2,sp),a
7779  d9a0               L5152:
7780                     ; 2043   if (invalid == 0) { // Change value only if valid entry
7782  d9a0 7b01          	ld	a,(OFST-2,sp)
7783  d9a2 264a          	jrne	L3252
7784                     ; 2044     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7786  d9a4 7b05          	ld	a,(OFST+2,sp)
7787  d9a6 97            	ld	xl,a
7788  d9a7 a610          	ld	a,#16
7789  d9a9 42            	mul	x,a
7790  d9aa 01            	rrwa	x,a
7791  d9ab 1b08          	add	a,(OFST+5,sp)
7792  d9ad 5f            	clrw	x
7793  d9ae 97            	ld	xl,a
7794  d9af 1f02          	ldw	(OFST-1,sp),x
7796                     ; 2045     switch(itemnum)
7798  d9b1 7b04          	ld	a,(OFST+1,sp)
7800                     ; 2053     default: break;
7801  d9b3 2711          	jreq	L1442
7802  d9b5 4a            	dec	a
7803  d9b6 2715          	jreq	L3442
7804  d9b8 4a            	dec	a
7805  d9b9 2719          	jreq	L5442
7806  d9bb 4a            	dec	a
7807  d9bc 271d          	jreq	L7442
7808  d9be 4a            	dec	a
7809  d9bf 2721          	jreq	L1542
7810  d9c1 4a            	dec	a
7811  d9c2 2725          	jreq	L3542
7812  d9c4 2028          	jra	L3252
7813  d9c6               L1442:
7814                     ; 2047     case 0: Pending_uip_ethaddr1 = (uint8_t)temp; break;
7816  d9c6 7b03          	ld	a,(OFST+0,sp)
7817  d9c8 c70024        	ld	_Pending_uip_ethaddr1,a
7820  d9cb 2021          	jra	L3252
7821  d9cd               L3442:
7822                     ; 2048     case 1: Pending_uip_ethaddr2 = (uint8_t)temp; break;
7824  d9cd 7b03          	ld	a,(OFST+0,sp)
7825  d9cf c70025        	ld	_Pending_uip_ethaddr2,a
7828  d9d2 201a          	jra	L3252
7829  d9d4               L5442:
7830                     ; 2049     case 2: Pending_uip_ethaddr3 = (uint8_t)temp; break;
7832  d9d4 7b03          	ld	a,(OFST+0,sp)
7833  d9d6 c70026        	ld	_Pending_uip_ethaddr3,a
7836  d9d9 2013          	jra	L3252
7837  d9db               L7442:
7838                     ; 2050     case 3: Pending_uip_ethaddr4 = (uint8_t)temp; break;
7840  d9db 7b03          	ld	a,(OFST+0,sp)
7841  d9dd c70027        	ld	_Pending_uip_ethaddr4,a
7844  d9e0 200c          	jra	L3252
7845  d9e2               L1542:
7846                     ; 2051     case 4: Pending_uip_ethaddr5 = (uint8_t)temp; break;
7848  d9e2 7b03          	ld	a,(OFST+0,sp)
7849  d9e4 c70028        	ld	_Pending_uip_ethaddr5,a
7852  d9e7 2005          	jra	L3252
7853  d9e9               L3542:
7854                     ; 2052     case 5: Pending_uip_ethaddr6 = (uint8_t)temp; break;
7856  d9e9 7b03          	ld	a,(OFST+0,sp)
7857  d9eb c70029        	ld	_Pending_uip_ethaddr6,a
7860                     ; 2053     default: break;
7862  d9ee               L3252:
7863                     ; 2056 }
7866  d9ee 5b05          	addw	sp,#5
7867  d9f0 81            	ret	
7969                     	switch	.bss
7970  0010               _OctetArray:
7971  0010 000000000000  	ds.b	11
7972                     	xdef	_OctetArray
7973                     	xref	_submit_changes
7974                     	xref	_ex_stored_devicename
7975                     	xref	_uip_ethaddr6
7976                     	xref	_uip_ethaddr5
7977                     	xref	_uip_ethaddr4
7978                     	xref	_uip_ethaddr3
7979                     	xref	_uip_ethaddr2
7980                     	xref	_uip_ethaddr1
7981                     	xref	_ex_stored_port
7982                     	xref	_ex_stored_netmask1
7983                     	xref	_ex_stored_netmask2
7984                     	xref	_ex_stored_netmask3
7985                     	xref	_ex_stored_netmask4
7986                     	xref	_ex_stored_draddr1
7987                     	xref	_ex_stored_draddr2
7988                     	xref	_ex_stored_draddr3
7989                     	xref	_ex_stored_draddr4
7990                     	xref	_ex_stored_hostaddr1
7991                     	xref	_ex_stored_hostaddr2
7992                     	xref	_ex_stored_hostaddr3
7993                     	xref	_ex_stored_hostaddr4
7994                     	xref	_Pending_uip_ethaddr6
7995                     	xref	_Pending_uip_ethaddr5
7996                     	xref	_Pending_uip_ethaddr4
7997                     	xref	_Pending_uip_ethaddr3
7998                     	xref	_Pending_uip_ethaddr2
7999                     	xref	_Pending_uip_ethaddr1
8000                     	xref	_Pending_port
8001                     	xref	_Pending_netmask1
8002                     	xref	_Pending_netmask2
8003                     	xref	_Pending_netmask3
8004                     	xref	_Pending_netmask4
8005                     	xref	_Pending_draddr1
8006                     	xref	_Pending_draddr2
8007                     	xref	_Pending_draddr3
8008                     	xref	_Pending_draddr4
8009                     	xref	_Pending_hostaddr1
8010                     	xref	_Pending_hostaddr2
8011                     	xref	_Pending_hostaddr3
8012                     	xref	_Pending_hostaddr4
8013                     	xref	_invert_output
8014                     	xref	_Relays_8to1
8015                     	xref	_Relays_16to9
8016                     	xref	_Port_Httpd
8017  001b               _current_webpage:
8018  001b 00            	ds.b	1
8019                     	xdef	_current_webpage
8020                     	xref	_atoi
8021                     	xref	_debugflash
8022                     	xref	_uip_flags
8023                     	xref	_uip_stat
8024                     	xref	_uip_conn
8025                     	xref	_uip_appdata
8026                     	xref	_htons
8027                     	xref	_uip_send
8028                     	xref	_uip_listen
8029                     	xdef	_SetMAC
8030                     	xdef	_SetPort
8031                     	xdef	_SetAddresses
8032                     	xdef	_GpioSetPin
8033                     	xdef	_GpioGetPin
8034                     	xdef	_HttpDCall
8035                     	xdef	_HttpDInit
8036                     	xdef	_reverse
8037                     	xdef	_emb_itoa
8038                     	xdef	_two_alpha_to_uint
8039                     	xdef	_three_alpha_to_uint
8040                     	switch	.const
8041  bedb               L714:
8042  bedb 436f6e6e6563  	dc.b	"Connection:close",13
8043  beec 0a00          	dc.b	10,0
8044  beee               L514:
8045  beee 436f6e74656e  	dc.b	"Content-Type:text/"
8046  bf00 68746d6c0d    	dc.b	"html",13
8047  bf05 0a00          	dc.b	10,0
8048  bf07               L314:
8049  bf07 436f6e74656e  	dc.b	"Content-Length:",0
8050  bf17               L114:
8051  bf17 0d0a00        	dc.b	13,10,0
8052  bf1a               L704:
8053  bf1a 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
8054                     	xref.b	c_lreg
8055                     	xref.b	c_x
8056                     	xref.b	c_y
8076                     	xref	c_uitolx
8077                     	xref	c_ludv
8078                     	xref	c_lumd
8079                     	xref	c_rtol
8080                     	xref	c_ltor
8081                     	xref	c_lzmp
8082                     	end
