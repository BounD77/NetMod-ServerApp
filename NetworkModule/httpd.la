   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     .const:	section	.text
  18  8080               L31_checked:
  19  8080 636865636b65  	dc.b	"checked",0
  20  8088               L51_g_HtmlPageDefault:
  21  8088 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
  22  809a 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
  23  80ac 6561643e3c74  	dc.b	"ead><title>Relay C"
  24  80be 6f6e74726f6c  	dc.b	"ontrol</title><sty"
  25  80d0 6c653e2e7330  	dc.b	"le>.s0 { backgroun"
  26  80e2 642d636f6c6f  	dc.b	"d-color: red; widt"
  27  80f4 683a20333070  	dc.b	"h: 30px; }.s1 { ba"
  28  8106 636b67726f75  	dc.b	"ckground-color: gr"
  29  8118 65656e3b2077  	dc.b	"een; width: 30px; "
  30  812a 7d2e7431207b  	dc.b	"}.t1 { width: 100p"
  31  813c 783b207d2e74  	dc.b	"x; }.t2 { width: 1"
  32  814e 343870783b20  	dc.b	"48px; }.t3 { width"
  33  8160 3a2033307078  	dc.b	": 30px; }.t4 { wid"
  34  8172 74683a203132  	dc.b	"th: 120px; }td { t"
  35  8184 657874        	dc.b	"ext"
  36  8187 2d616c69676e  	dc.b	"-align: center; bo"
  37  8199 726465723a20  	dc.b	"rder: 1px black so"
  38  81ab 6c69643b207d  	dc.b	"lid; }</style></he"
  39  81bd 61643e3c626f  	dc.b	"ad><body><h1>Relay"
  40  81cf 20436f6e7472  	dc.b	" Control</h1><form"
  41  81e1 206d6574686f  	dc.b	" method='POST' act"
  42  81f3 696f6e3d272f  	dc.b	"ion='/'><table><tr"
  43  8205 3e3c74642063  	dc.b	"><td class='t1'>Na"
  44  8217 6d653a3c2f74  	dc.b	"me:</td><td><input"
  45  8229 20747970653d  	dc.b	" type='text' name="
  46  823b 276130302720  	dc.b	"'a00' class='t2' v"
  47  824d 616c75653d27  	dc.b	"alue='%a00xxxxxxxx"
  48  825f 787878787878  	dc.b	"xxxxxxxxxxxx' patt"
  49  8271 65726e3d275b  	dc.b	"ern='[0-9a-zA-Z-_*"
  50  8283 2e5d7b        	dc.b	".]{"
  51  8286 312c32307d27  	dc.b	"1,20}' title='1 to"
  52  8298 203230206c65  	dc.b	" 20 letters, numbe"
  53  82aa 72732c20616e  	dc.b	"rs, and -_*. no sp"
  54  82bc 616365732720  	dc.b	"aces' maxlength='2"
  55  82ce 30273e3c2f74  	dc.b	"0'></td></tr></tab"
  56  82e0 6c653e3c7461  	dc.b	"le><table><tr><td "
  57  82f2 636c6173733d  	dc.b	"class='t1'></td><t"
  58  8304 6420636c6173  	dc.b	"d class='t3'></td>"
  59  8316 3c746420636c  	dc.b	"<td class='t4'>SET"
  60  8328 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
  61  833a 636c6173733d  	dc.b	"class='t1'>Relay01"
  62  834c 3c2f74643e3c  	dc.b	"</td><td class='s%"
  63  835e 693030273e3c  	dc.b	"i00'></td><td clas"
  64  8370 733d27743427  	dc.b	"s='t4'><input type"
  65  8382 3d2772        	dc.b	"='r"
  66  8385 6164696f2720  	dc.b	"adio' id='01on' na"
  67  8397 6d653d276f30  	dc.b	"me='o00' value='1'"
  68  83a9 20256f30303e  	dc.b	" %o00><label for='"
  69  83bb 30316f6e273e  	dc.b	"01on'>ON</label><i"
  70  83cd 6e7075742074  	dc.b	"nput type='radio' "
  71  83df 69643d273031  	dc.b	"id='01off' name='o"
  72  83f1 303027207661  	dc.b	"00' value='0' %p00"
  73  8403 3e3c6c616265  	dc.b	"><label for='01off"
  74  8415 273e4f46463c  	dc.b	"'>OFF</label></td>"
  75  8427 3c2f74723e3c  	dc.b	"</tr><tr><td class"
  76  8439 3d277431273e  	dc.b	"='t1'>Relay02</td>"
  77  844b 3c746420636c  	dc.b	"<td class='s%i01'>"
  78  845d 3c2f74643e3c  	dc.b	"</td><td class='t4"
  79  846f 273e3c696e70  	dc.b	"'><input type='rad"
  80  8481 696f27        	dc.b	"io'"
  81  8484 2069643d2730  	dc.b	" id='02on' name='o"
  82  8496 303127207661  	dc.b	"01' value='1' %o01"
  83  84a8 3e3c6c616265  	dc.b	"><label for='02on'"
  84  84ba 3e4f4e3c2f6c  	dc.b	">ON</label><input "
  85  84cc 747970653d27  	dc.b	"type='radio' id='0"
  86  84de 326f66662720  	dc.b	"2off' name='o01' v"
  87  84f0 616c75653d27  	dc.b	"alue='0' %p01><lab"
  88  8502 656c20666f72  	dc.b	"el for='02off'>OFF"
  89  8514 3c2f6c616265  	dc.b	"</label></td></tr>"
  90  8526 3c74723e3c74  	dc.b	"<tr><td class='t1'"
  91  8538 3e52656c6179  	dc.b	">Relay03</td><td c"
  92  854a 6c6173733d27  	dc.b	"lass='s%i02'></td>"
  93  855c 3c746420636c  	dc.b	"<td class='t4'><in"
  94  856e 707574207479  	dc.b	"put type='radio' i"
  95  8580 643d27        	dc.b	"d='"
  96  8583 30336f6e2720  	dc.b	"03on' name='o02' v"
  97  8595 616c75653d27  	dc.b	"alue='1' %o02><lab"
  98  85a7 656c20666f72  	dc.b	"el for='03on'>ON</"
  99  85b9 6c6162656c3e  	dc.b	"label><input type="
 100  85cb 27726164696f  	dc.b	"'radio' id='03off'"
 101  85dd 206e616d653d  	dc.b	" name='o02' value="
 102  85ef 273027202570  	dc.b	"'0' %p02><label fo"
 103  8601 723d2730336f  	dc.b	"r='03off'>OFF</lab"
 104  8613 656c3e3c2f74  	dc.b	"el></td></tr><tr><"
 105  8625 746420636c61  	dc.b	"td class='t1'>Rela"
 106  8637 7930343c2f74  	dc.b	"y04</td><td class="
 107  8649 277325693033  	dc.b	"'s%i03'></td><td c"
 108  865b 6c6173733d27  	dc.b	"lass='t4'><input t"
 109  866d 7970653d2772  	dc.b	"ype='radio' id='04"
 110  867f 6f6e27        	dc.b	"on'"
 111  8682 206e616d653d  	dc.b	" name='o03' value="
 112  8694 27312720256f  	dc.b	"'1' %o03><label fo"
 113  86a6 723d2730346f  	dc.b	"r='04on'>ON</label"
 114  86b8 3e3c696e7075  	dc.b	"><input type='radi"
 115  86ca 6f272069643d  	dc.b	"o' id='04off' name"
 116  86dc 3d276f303327  	dc.b	"='o03' value='0' %"
 117  86ee 7030333e3c6c  	dc.b	"p03><label for='04"
 118  8700 6f6666273e4f  	dc.b	"off'>OFF</label></"
 119  8712 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 120  8724 6173733d2774  	dc.b	"ass='t1'>Relay05</"
 121  8736 74643e3c7464  	dc.b	"td><td class='s%i0"
 122  8748 34273e3c2f74  	dc.b	"4'></td><td class="
 123  875a 277434273e3c  	dc.b	"'t4'><input type='"
 124  876c 726164696f27  	dc.b	"radio' id='05on' n"
 125  877e 616d65        	dc.b	"ame"
 126  8781 3d276f303427  	dc.b	"='o04' value='1' %"
 127  8793 6f30343e3c6c  	dc.b	"o04><label for='05"
 128  87a5 6f6e273e4f4e  	dc.b	"on'>ON</label><inp"
 129  87b7 757420747970  	dc.b	"ut type='radio' id"
 130  87c9 3d2730356f66  	dc.b	"='05off' name='o04"
 131  87db 272076616c75  	dc.b	"' value='0' %p04><"
 132  87ed 6c6162656c20  	dc.b	"label for='05off'>"
 133  87ff 4f46463c2f6c  	dc.b	"OFF</label></td></"
 134  8811 74723e3c7472  	dc.b	"tr><tr><td class='"
 135  8823 7431273e5265  	dc.b	"t1'>Relay06</td><t"
 136  8835 6420636c6173  	dc.b	"d class='s%i05'></"
 137  8847 74643e3c7464  	dc.b	"td><td class='t4'>"
 138  8859 3c696e707574  	dc.b	"<input type='radio"
 139  886b 272069643d27  	dc.b	"' id='06on' name='"
 140  887d 6f3035        	dc.b	"o05"
 141  8880 272076616c75  	dc.b	"' value='1' %o05><"
 142  8892 6c6162656c20  	dc.b	"label for='06on'>O"
 143  88a4 4e3c2f6c6162  	dc.b	"N</label><input ty"
 144  88b6 70653d277261  	dc.b	"pe='radio' id='06o"
 145  88c8 666627206e61  	dc.b	"ff' name='o05' val"
 146  88da 75653d273027  	dc.b	"ue='0' %p05><label"
 147  88ec 20666f723d27  	dc.b	" for='06off'>OFF</"
 148  88fe 6c6162656c3e  	dc.b	"label></td></tr><t"
 149  8910 723e3c746420  	dc.b	"r><td class='t1'>R"
 150  8922 656c61793037  	dc.b	"elay07</td><td cla"
 151  8934 73733d277325  	dc.b	"ss='s%i06'></td><t"
 152  8946 6420636c6173  	dc.b	"d class='t4'><inpu"
 153  8958 742074797065  	dc.b	"t type='radio' id="
 154  896a 2730376f6e27  	dc.b	"'07on' name='o06' "
 155  897c 76616c        	dc.b	"val"
 156  897f 75653d273127  	dc.b	"ue='1' %o06><label"
 157  8991 20666f723d27  	dc.b	" for='07on'>ON</la"
 158  89a3 62656c3e3c69  	dc.b	"bel><input type='r"
 159  89b5 6164696f2720  	dc.b	"adio' id='07off' n"
 160  89c7 616d653d276f  	dc.b	"ame='o06' value='0"
 161  89d9 272025703036  	dc.b	"' %p06><label for="
 162  89eb 2730376f6666  	dc.b	"'07off'>OFF</label"
 163  89fd 3e3c2f74643e  	dc.b	"></td></tr><tr><td"
 164  8a0f 20636c617373  	dc.b	" class='t1'>Relay0"
 165  8a21 383c2f74643e  	dc.b	"8</td><td class='s"
 166  8a33 25693037273e  	dc.b	"%i07'></td><td cla"
 167  8a45 73733d277434  	dc.b	"ss='t4'><input typ"
 168  8a57 653d27726164  	dc.b	"e='radio' id='08on"
 169  8a69 27206e616d65  	dc.b	"' name='o07' value"
 170  8a7b 3d2731        	dc.b	"='1"
 171  8a7e 2720256f3037  	dc.b	"' %o07><label for="
 172  8a90 2730386f6e27  	dc.b	"'08on'>ON</label><"
 173  8aa2 696e70757420  	dc.b	"input type='radio'"
 174  8ab4 2069643d2730  	dc.b	" id='08off' name='"
 175  8ac6 6f3037272076  	dc.b	"o07' value='0' %p0"
 176  8ad8 373e3c6c6162  	dc.b	"7><label for='08of"
 177  8aea 66273e4f4646  	dc.b	"f'>OFF</label></td"
 178  8afc 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 179  8b0e 733d27743127  	dc.b	"s='t1'>Relay09</td"
 180  8b20 3e3c74642063  	dc.b	"><td class='s%i08'"
 181  8b32 3e3c2f74643e  	dc.b	"></td><td class='t"
 182  8b44 34273e3c696e  	dc.b	"4'><input type='ra"
 183  8b56 64696f272069  	dc.b	"dio' id='09on' nam"
 184  8b68 653d276f3038  	dc.b	"e='o08' value='1' "
 185  8b7a 256f30        	dc.b	"%o0"
 186  8b7d 383e3c6c6162  	dc.b	"8><label for='09on"
 187  8b8f 273e4f4e3c2f  	dc.b	"'>ON</label><input"
 188  8ba1 20747970653d  	dc.b	" type='radio' id='"
 189  8bb3 30396f666627  	dc.b	"09off' name='o08' "
 190  8bc5 76616c75653d  	dc.b	"value='0' %p08><la"
 191  8bd7 62656c20666f  	dc.b	"bel for='09off'>OF"
 192  8be9 463c2f6c6162  	dc.b	"F</label></td></tr"
 193  8bfb 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 194  8c0d 273e52656c61  	dc.b	"'>Relay10</td><td "
 195  8c1f 636c6173733d  	dc.b	"class='s%i09'></td"
 196  8c31 3e3c74642063  	dc.b	"><td class='t4'><i"
 197  8c43 6e7075742074  	dc.b	"nput type='radio' "
 198  8c55 69643d273130  	dc.b	"id='10on' name='o0"
 199  8c67 39272076616c  	dc.b	"9' value='1' %o09>"
 200  8c79 3c6c61        	dc.b	"<la"
 201  8c7c 62656c20666f  	dc.b	"bel for='10on'>ON<"
 202  8c8e 2f6c6162656c  	dc.b	"/label><input type"
 203  8ca0 3d2772616469  	dc.b	"='radio' id='10off"
 204  8cb2 27206e616d65  	dc.b	"' name='o09' value"
 205  8cc4 3d2730272025  	dc.b	"='0' %p09><label f"
 206  8cd6 6f723d273130  	dc.b	"or='10off'>OFF</la"
 207  8ce8 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
 208  8cfa 3c746420636c  	dc.b	"<td class='t1'>Rel"
 209  8d0c 617931313c2f  	dc.b	"ay11</td><td class"
 210  8d1e 3d2773256931  	dc.b	"='s%i10'></td><td "
 211  8d30 636c6173733d  	dc.b	"class='t4'><input "
 212  8d42 747970653d27  	dc.b	"type='radio' id='1"
 213  8d54 316f6e27206e  	dc.b	"1on' name='o10' va"
 214  8d66 6c75653d2731  	dc.b	"lue='1' %o10><labe"
 215  8d78 6c2066        	dc.b	"l f"
 216  8d7b 6f723d273131  	dc.b	"or='11on'>ON</labe"
 217  8d8d 6c3e3c696e70  	dc.b	"l><input type='rad"
 218  8d9f 696f27206964  	dc.b	"io' id='11off' nam"
 219  8db1 653d276f3130  	dc.b	"e='o10' value='0' "
 220  8dc3 257031303e3c  	dc.b	"%p10><label for='1"
 221  8dd5 316f6666273e  	dc.b	"1off'>OFF</label><"
 222  8de7 2f74643e3c2f  	dc.b	"/td></tr><tr><td c"
 223  8df9 6c6173733d27  	dc.b	"lass='t1'>Relay12<"
 224  8e0b 2f74643e3c74  	dc.b	"/td><td class='s%i"
 225  8e1d 3131273e3c2f  	dc.b	"11'></td><td class"
 226  8e2f 3d277434273e  	dc.b	"='t4'><input type="
 227  8e41 27726164696f  	dc.b	"'radio' id='12on' "
 228  8e53 6e616d653d27  	dc.b	"name='o11' value='"
 229  8e65 312720256f31  	dc.b	"1' %o11><label for"
 230  8e77 3d2731        	dc.b	"='1"
 231  8e7a 326f6e273e4f  	dc.b	"2on'>ON</label><in"
 232  8e8c 707574207479  	dc.b	"put type='radio' i"
 233  8e9e 643d2731326f  	dc.b	"d='12off' name='o1"
 234  8eb0 31272076616c  	dc.b	"1' value='0' %p11>"
 235  8ec2 3c6c6162656c  	dc.b	"<label for='12off'"
 236  8ed4 3e4f46463c2f  	dc.b	">OFF</label></td><"
 237  8ee6 2f74723e3c74  	dc.b	"/tr><tr><td class="
 238  8ef8 277431273e52  	dc.b	"'t1'>Relay13</td><"
 239  8f0a 746420636c61  	dc.b	"td class='s%i12'><"
 240  8f1c 2f74643e3c74  	dc.b	"/td><td class='t4'"
 241  8f2e 3e3c696e7075  	dc.b	"><input type='radi"
 242  8f40 6f272069643d  	dc.b	"o' id='13on' name="
 243  8f52 276f31322720  	dc.b	"'o12' value='1' %o"
 244  8f64 31323e3c6c61  	dc.b	"12><label for='13o"
 245  8f76 6e273e        	dc.b	"n'>"
 246  8f79 4f4e3c2f6c61  	dc.b	"ON</label><input t"
 247  8f8b 7970653d2772  	dc.b	"ype='radio' id='13"
 248  8f9d 6f666627206e  	dc.b	"off' name='o12' va"
 249  8faf 6c75653d2730  	dc.b	"lue='0' %p12><labe"
 250  8fc1 6c20666f723d  	dc.b	"l for='13off'>OFF<"
 251  8fd3 2f6c6162656c  	dc.b	"/label></td></tr><"
 252  8fe5 74723e3c7464  	dc.b	"tr><td class='t1'>"
 253  8ff7 52656c617931  	dc.b	"Relay14</td><td cl"
 254  9009 6173733d2773  	dc.b	"ass='s%i13'></td><"
 255  901b 746420636c61  	dc.b	"td class='t4'><inp"
 256  902d 757420747970  	dc.b	"ut type='radio' id"
 257  903f 3d2731346f6e  	dc.b	"='14on' name='o13'"
 258  9051 2076616c7565  	dc.b	" value='1' %o13><l"
 259  9063 6162656c2066  	dc.b	"abel for='14on'>ON"
 260  9075 3c2f6c        	dc.b	"</l"
 261  9078 6162656c3e3c  	dc.b	"abel><input type='"
 262  908a 726164696f27  	dc.b	"radio' id='14off' "
 263  909c 6e616d653d27  	dc.b	"name='o13' value='"
 264  90ae 302720257031  	dc.b	"0' %p13><label for"
 265  90c0 3d2731346f66  	dc.b	"='14off'>OFF</labe"
 266  90d2 6c3e3c2f7464  	dc.b	"l></td></tr><tr><t"
 267  90e4 6420636c6173  	dc.b	"d class='t1'>Relay"
 268  90f6 31353c2f7464  	dc.b	"15</td><td class='"
 269  9108 732569313427  	dc.b	"s%i14'></td><td cl"
 270  911a 6173733d2774  	dc.b	"ass='t4'><input ty"
 271  912c 70653d277261  	dc.b	"pe='radio' id='15o"
 272  913e 6e27206e616d  	dc.b	"n' name='o14' valu"
 273  9150 653d27312720  	dc.b	"e='1' %o14><label "
 274  9162 666f723d2731  	dc.b	"for='15on'>ON</lab"
 275  9174 656c3e        	dc.b	"el>"
 276  9177 3c696e707574  	dc.b	"<input type='radio"
 277  9189 272069643d27  	dc.b	"' id='15off' name="
 278  919b 276f31342720  	dc.b	"'o14' value='0' %p"
 279  91ad 31343e3c6c61  	dc.b	"14><label for='15o"
 280  91bf 6666273e4f46  	dc.b	"ff'>OFF</label></t"
 281  91d1 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 282  91e3 73733d277431  	dc.b	"ss='t1'>Relay16</t"
 283  91f5 643e3c746420  	dc.b	"d><td class='s%i15"
 284  9207 273e3c2f7464  	dc.b	"'></td><td class='"
 285  9219 7434273e3c69  	dc.b	"t4'><input type='r"
 286  922b 6164696f2720  	dc.b	"adio' id='16on' na"
 287  923d 6d653d276f31  	dc.b	"me='o15' value='1'"
 288  924f 20256f31353e  	dc.b	" %o15><label for='"
 289  9261 31366f6e273e  	dc.b	"16on'>ON</label><i"
 290  9273 6e7075        	dc.b	"npu"
 291  9276 742074797065  	dc.b	"t type='radio' id="
 292  9288 2731366f6666  	dc.b	"'16off' name='o15'"
 293  929a 2076616c7565  	dc.b	" value='0' %p15><l"
 294  92ac 6162656c2066  	dc.b	"abel for='16off'>O"
 295  92be 46463c2f6c61  	dc.b	"FF</label></td></t"
 296  92d0 723e3c74723e  	dc.b	"r><tr><td class='t"
 297  92e2 31273e496e76  	dc.b	"1'>Invert</td><td "
 298  92f4 636c6173733d  	dc.b	"class='t3'></td><t"
 299  9306 6420636c6173  	dc.b	"d class='t4'><inpu"
 300  9318 742074797065  	dc.b	"t type='radio' id="
 301  932a 27696e764f6e  	dc.b	"'invOn' name='g00'"
 302  933c 2076616c7565  	dc.b	" value='1' %g00><l"
 303  934e 6162656c2066  	dc.b	"abel for='invOn'>O"
 304  9360 4e3c2f6c6162  	dc.b	"N</label><input ty"
 305  9372 70653d        	dc.b	"pe="
 306  9375 27726164696f  	dc.b	"'radio' id='invOff"
 307  9387 27206e616d65  	dc.b	"' name='g00' value"
 308  9399 3d2730272025  	dc.b	"='0' %h00><label f"
 309  93ab 6f723d27696e  	dc.b	"or='invOff'>OFF</l"
 310  93bd 6162656c3e3c  	dc.b	"abel></td></tr></t"
 311  93cf 61626c653e3c  	dc.b	"able><button type="
 312  93e1 277375626d69  	dc.b	"'submit' title='Sa"
 313  93f3 76657320796f  	dc.b	"ves your changes -"
 314  9405 20646f657320  	dc.b	" does not restart "
 315  9417 746865204e65  	dc.b	"the Network Module"
 316  9429 273e53617665  	dc.b	"'>Save</button><bu"
 317  943b 74746f6e2074  	dc.b	"tton type='reset' "
 318  944d 7469746c653d  	dc.b	"title='Un-does any"
 319  945f 206368616e67  	dc.b	" changes that have"
 320  9471 206e6f        	dc.b	" no"
 321  9474 74206265656e  	dc.b	"t been saved'>Undo"
 322  9486 20416c6c3c2f  	dc.b	" All</button></for"
 323  9498 6d3e3c666f72  	dc.b	"m><form style='dis"
 324  94aa 706c61793a20  	dc.b	"play: inline' acti"
 325  94bc 6f6e3d272578  	dc.b	"on='%x00http://192"
 326  94ce 2e3136382e30  	dc.b	".168.001.004:08080"
 327  94e0 2f363127206d  	dc.b	"/61' method='GET'>"
 328  94f2 3c627574746f  	dc.b	"<button title='Sav"
 329  9504 652066697273  	dc.b	"e first! This butt"
 330  9516 6f6e2077696c  	dc.b	"on will not save y"
 331  9528 6f7572206368  	dc.b	"our changes'>Addre"
 332  953a 737320536574  	dc.b	"ss Settings</butto"
 333  954c 6e3e3c2f666f  	dc.b	"n></form><form sty"
 334  955e 6c653d276469  	dc.b	"le='display: inlin"
 335  9570 652720        	dc.b	"e' "
 336  9573 616374696f6e  	dc.b	"action='%x00http:/"
 337  9585 2f3139322e31  	dc.b	"/192.168.001.004:0"
 338  9597 383038302f36  	dc.b	"8080/66' method='G"
 339  95a9 4554273e3c62  	dc.b	"ET'><button title="
 340  95bb 275361766520  	dc.b	"'Save first! This "
 341  95cd 627574746f6e  	dc.b	"button will not sa"
 342  95df 766520796f75  	dc.b	"ve your changes'>N"
 343  95f1 6574776f726b  	dc.b	"etwork Statistics<"
 344  9603 2f627574746f  	dc.b	"/button></form><fo"
 345  9615 726d20737479  	dc.b	"rm style='display:"
 346  9627 20696e6c696e  	dc.b	" inline' action='%"
 347  9639 783030687474  	dc.b	"x00http://192.168."
 348  964b 3030312e3030  	dc.b	"001.004:08080/63' "
 349  965d 6d6574686f64  	dc.b	"method='GET'><butt"
 350  966f 6f6e20        	dc.b	"on "
 351  9672 7469746c653d  	dc.b	"title='Save first!"
 352  9684 205468697320  	dc.b	" This button will "
 353  9696 6e6f74207361  	dc.b	"not save your chan"
 354  96a8 676573273e48  	dc.b	"ges'>Help</button>"
 355  96ba 3c2f666f726d  	dc.b	"</form></body></ht"
 356  96cc 6d6c3e00      	dc.b	"ml>",0
 357  96d0               L71_g_HtmlPageAddress:
 358  96d0 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 359  96e2 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 360  96f4 6561643e3c74  	dc.b	"ead><title>Address"
 361  9706 205365747469  	dc.b	" Settings</title><"
 362  9718 7374796c653e  	dc.b	"style>.t1 { width:"
 363  972a 203130307078  	dc.b	" 100px; }.t2 { wid"
 364  973c 74683a203235  	dc.b	"th: 25px; }.t3 { w"
 365  974e 696474683a20  	dc.b	"idth: 18px; }.t4 {"
 366  9760 207769647468  	dc.b	" width: 40px; }td "
 367  9772 7b2074657874  	dc.b	"{ text-align: cent"
 368  9784 65723b20626f  	dc.b	"er; border: 1px bl"
 369  9796 61636b20736f  	dc.b	"ack solid; }</styl"
 370  97a8 653e3c2f6865  	dc.b	"e></head><body><h1"
 371  97ba 3e4164647265  	dc.b	">Address Settings<"
 372  97cc 2f6831        	dc.b	"/h1"
 373  97cf 3e3c666f726d  	dc.b	"><form method='POS"
 374  97e1 542720616374  	dc.b	"T' action='/'><tab"
 375  97f3 6c653e3c7472  	dc.b	"le><tr><td class='"
 376  9805 7431273e4950  	dc.b	"t1'>IP Addr</td><t"
 377  9817 643e3c696e70  	dc.b	"d><input type='tex"
 378  9829 7427206e616d  	dc.b	"t' name='b00' clas"
 379  983b 733d27743227  	dc.b	"s='t2' value='%b00"
 380  984d 272070617474  	dc.b	"' pattern='[0-9]{3"
 381  985f 7d2720746974  	dc.b	"}' title='Enter 00"
 382  9871 3020746f2032  	dc.b	"0 to 255' maxlengt"
 383  9883 683d2733273e  	dc.b	"h='3'></td><td><in"
 384  9895 707574207479  	dc.b	"put type='text' na"
 385  98a7 6d653d276230  	dc.b	"me='b01' class='t2"
 386  98b9 272076616c75  	dc.b	"' value='%b01' pat"
 387  98cb 746572        	dc.b	"ter"
 388  98ce 6e3d275b302d  	dc.b	"n='[0-9]{3}' title"
 389  98e0 3d27456e7465  	dc.b	"='Enter 000 to 255"
 390  98f2 27206d61786c  	dc.b	"' maxlength='3'></"
 391  9904 74643e3c7464  	dc.b	"td><td><input type"
 392  9916 3d2774657874  	dc.b	"='text' name='b02'"
 393  9928 20636c617373  	dc.b	" class='t2' value="
 394  993a 272562303227  	dc.b	"'%b02' pattern='[0"
 395  994c 2d395d7b337d  	dc.b	"-9]{3}' title='Ent"
 396  995e 657220303030  	dc.b	"er 000 to 255' max"
 397  9970 6c656e677468  	dc.b	"length='3'></td><t"
 398  9982 643e3c696e70  	dc.b	"d><input type='tex"
 399  9994 7427206e616d  	dc.b	"t' name='b03' clas"
 400  99a6 733d27743227  	dc.b	"s='t2' value='%b03"
 401  99b8 272070617474  	dc.b	"' pattern='[0-9]{3"
 402  99ca 7d2720        	dc.b	"}' "
 403  99cd 7469746c653d  	dc.b	"title='Enter 000 t"
 404  99df 6f2032353527  	dc.b	"o 255' maxlength='"
 405  99f1 33273e3c2f74  	dc.b	"3'></td></tr><tr><"
 406  9a03 746420636c61  	dc.b	"td class='t1'>Gate"
 407  9a15 7761793c2f74  	dc.b	"way</td><td><input"
 408  9a27 20747970653d  	dc.b	" type='text' name="
 409  9a39 276230342720  	dc.b	"'b04' class='t2' v"
 410  9a4b 616c75653d27  	dc.b	"alue='%b04' patter"
 411  9a5d 6e3d275b302d  	dc.b	"n='[0-9]{3}' title"
 412  9a6f 3d27456e7465  	dc.b	"='Enter 000 to 255"
 413  9a81 27206d61786c  	dc.b	"' maxlength='3'></"
 414  9a93 74643e3c7464  	dc.b	"td><td><input type"
 415  9aa5 3d2774657874  	dc.b	"='text' name='b05'"
 416  9ab7 20636c617373  	dc.b	" class='t2' value="
 417  9ac9 272562        	dc.b	"'%b"
 418  9acc 303527207061  	dc.b	"05' pattern='[0-9]"
 419  9ade 7b337d272074  	dc.b	"{3}' title='Enter "
 420  9af0 30303020746f  	dc.b	"000 to 255' maxlen"
 421  9b02 6774683d2733  	dc.b	"gth='3'></td><td><"
 422  9b14 696e70757420  	dc.b	"input type='text' "
 423  9b26 6e616d653d27  	dc.b	"name='b06' class='"
 424  9b38 743227207661  	dc.b	"t2' value='%b06' p"
 425  9b4a 61747465726e  	dc.b	"attern='[0-9]{3}' "
 426  9b5c 7469746c653d  	dc.b	"title='Enter 000 t"
 427  9b6e 6f2032353527  	dc.b	"o 255' maxlength='"
 428  9b80 33273e3c2f74  	dc.b	"3'></td><td><input"
 429  9b92 20747970653d  	dc.b	" type='text' name="
 430  9ba4 276230372720  	dc.b	"'b07' class='t2' v"
 431  9bb6 616c75653d27  	dc.b	"alue='%b07' patter"
 432  9bc8 6e3d27        	dc.b	"n='"
 433  9bcb 5b302d395d7b  	dc.b	"[0-9]{3}' title='E"
 434  9bdd 6e7465722030  	dc.b	"nter 000 to 255' m"
 435  9bef 61786c656e67  	dc.b	"axlength='3'></td>"
 436  9c01 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 437  9c13 3d277431273e  	dc.b	"='t1'>Netmask</td>"
 438  9c25 3c74643e3c69  	dc.b	"<td><input type='t"
 439  9c37 65787427206e  	dc.b	"ext' name='b08' cl"
 440  9c49 6173733d2774  	dc.b	"ass='t2' value='%b"
 441  9c5b 303827207061  	dc.b	"08' pattern='[0-9]"
 442  9c6d 7b337d272074  	dc.b	"{3}' title='Enter "
 443  9c7f 30303020746f  	dc.b	"000 to 255' maxlen"
 444  9c91 6774683d2733  	dc.b	"gth='3'></td><td><"
 445  9ca3 696e70757420  	dc.b	"input type='text' "
 446  9cb5 6e616d653d27  	dc.b	"name='b09' class='"
 447  9cc7 743227        	dc.b	"t2'"
 448  9cca 2076616c7565  	dc.b	" value='%b09' patt"
 449  9cdc 65726e3d275b  	dc.b	"ern='[0-9]{3}' tit"
 450  9cee 6c653d27456e  	dc.b	"le='Enter 000 to 2"
 451  9d00 353527206d61  	dc.b	"55' maxlength='3'>"
 452  9d12 3c2f74643e3c  	dc.b	"</td><td><input ty"
 453  9d24 70653d277465  	dc.b	"pe='text' name='b1"
 454  9d36 302720636c61  	dc.b	"0' class='t2' valu"
 455  9d48 653d27256231  	dc.b	"e='%b10' pattern='"
 456  9d5a 5b302d395d7b  	dc.b	"[0-9]{3}' title='E"
 457  9d6c 6e7465722030  	dc.b	"nter 000 to 255' m"
 458  9d7e 61786c656e67  	dc.b	"axlength='3'></td>"
 459  9d90 3c74643e3c69  	dc.b	"<td><input type='t"
 460  9da2 65787427206e  	dc.b	"ext' name='b11' cl"
 461  9db4 6173733d2774  	dc.b	"ass='t2' value='%b"
 462  9dc6 313127        	dc.b	"11'"
 463  9dc9 207061747465  	dc.b	" pattern='[0-9]{3}"
 464  9ddb 27207469746c  	dc.b	"' title='Enter 000"
 465  9ded 20746f203235  	dc.b	" to 255' maxlength"
 466  9dff 3d2733273e3c  	dc.b	"='3'></td></tr></t"
 467  9e11 61626c653e3c  	dc.b	"able><table><tr><t"
 468  9e23 6420636c6173  	dc.b	"d class='t1'>Port "
 469  9e35 20203c2f7464  	dc.b	"  </td><td><input "
 470  9e47 747970653d27  	dc.b	"type='text' name='"
 471  9e59 633030272063  	dc.b	"c00' class='t4' va"
 472  9e6b 6c75653d2725  	dc.b	"lue='%c00' pattern"
 473  9e7d 3d275b302d39  	dc.b	"='[0-9]{5}' title="
 474  9e8f 27456e746572  	dc.b	"'Enter 00010 to 65"
 475  9ea1 35333627206d  	dc.b	"536' maxlength='5'"
 476  9eb3 3e3c2f74643e  	dc.b	"></td></tr></table"
 477  9ec5 3e3c74        	dc.b	"><t"
 478  9ec8 61626c653e3c  	dc.b	"able><tr><td class"
 479  9eda 3d277431273e  	dc.b	"='t1'>MAC Address<"
 480  9eec 2f74643e3c74  	dc.b	"/td><td><input typ"
 481  9efe 653d27746578  	dc.b	"e='text' name='d00"
 482  9f10 2720636c6173  	dc.b	"' class='t3' value"
 483  9f22 3d2725643030  	dc.b	"='%d00' pattern='["
 484  9f34 302d39612d66  	dc.b	"0-9a-f]{2}' title="
 485  9f46 27456e746572  	dc.b	"'Enter 00 to ff' m"
 486  9f58 61786c656e67  	dc.b	"axlength='2'></td>"
 487  9f6a 3c74643e3c69  	dc.b	"<td><input type='t"
 488  9f7c 65787427206e  	dc.b	"ext' name='d01' cl"
 489  9f8e 6173733d2774  	dc.b	"ass='t3' value='%d"
 490  9fa0 303127207061  	dc.b	"01' pattern='[0-9a"
 491  9fb2 2d665d7b327d  	dc.b	"-f]{2}' title='Ent"
 492  9fc4 657220        	dc.b	"er "
 493  9fc7 303020746f20  	dc.b	"00 to ff' maxlengt"
 494  9fd9 683d2732273e  	dc.b	"h='2'></td><td><in"
 495  9feb 707574207479  	dc.b	"put type='text' na"
 496  9ffd 6d653d276430  	dc.b	"me='d02' class='t3"
 497  a00f 272076616c75  	dc.b	"' value='%d02' pat"
 498  a021 7465726e3d27  	dc.b	"tern='[0-9a-f]{2}'"
 499  a033 207469746c65  	dc.b	" title='Enter 00 t"
 500  a045 6f2066662720  	dc.b	"o ff' maxlength='2"
 501  a057 273e3c2f7464  	dc.b	"'></td><td><input "
 502  a069 747970653d27  	dc.b	"type='text' name='"
 503  a07b 643033272063  	dc.b	"d03' class='t3' va"
 504  a08d 6c75653d2725  	dc.b	"lue='%d03' pattern"
 505  a09f 3d275b302d39  	dc.b	"='[0-9a-f]{2}' tit"
 506  a0b1 6c653d27456e  	dc.b	"le='Enter 00 to ff"
 507  a0c3 27206d        	dc.b	"' m"
 508  a0c6 61786c656e67  	dc.b	"axlength='2'></td>"
 509  a0d8 3c74643e3c69  	dc.b	"<td><input type='t"
 510  a0ea 65787427206e  	dc.b	"ext' name='d04' cl"
 511  a0fc 6173733d2774  	dc.b	"ass='t3' value='%d"
 512  a10e 303427207061  	dc.b	"04' pattern='[0-9a"
 513  a120 2d665d7b327d  	dc.b	"-f]{2}' title='Ent"
 514  a132 657220303020  	dc.b	"er 00 to ff' maxle"
 515  a144 6e6774683d27  	dc.b	"ngth='2'></td><td>"
 516  a156 3c696e707574  	dc.b	"<input type='text'"
 517  a168 206e616d653d  	dc.b	" name='d05' class="
 518  a17a 277433272076  	dc.b	"'t3' value='%d05' "
 519  a18c 706174746572  	dc.b	"pattern='[0-9a-f]{"
 520  a19e 327d27207469  	dc.b	"2}' title='Enter 0"
 521  a1b0 3020746f2066  	dc.b	"0 to ff' maxlength"
 522  a1c2 3d2732        	dc.b	"='2"
 523  a1c5 273e3c2f7464  	dc.b	"'></td></tr></tabl"
 524  a1d7 653e3c627574  	dc.b	"e><button type='su"
 525  a1e9 626d69742720  	dc.b	"bmit' title='Saves"
 526  a1fb 20796f757220  	dc.b	" your changes then"
 527  a20d 207265737461  	dc.b	" restarts the Netw"
 528  a21f 6f726b204d6f  	dc.b	"ork Module'>Save</"
 529  a231 627574746f6e  	dc.b	"button><button typ"
 530  a243 653d27726573  	dc.b	"e='reset' title='U"
 531  a255 6e2d646f6573  	dc.b	"n-does any changes"
 532  a267 207468617420  	dc.b	" that have not bee"
 533  a279 6e2073617665  	dc.b	"n saved'>Undo All<"
 534  a28b 2f627574746f  	dc.b	"/button></form><p "
 535  a29d 6c696e652d68  	dc.b	"line-height 20px>U"
 536  a2af 736520636175  	dc.b	"se caution when ch"
 537  a2c1 616e67        	dc.b	"ang"
 538  a2c4 696e67207468  	dc.b	"ing the above. If "
 539  a2d6 796f75206d61  	dc.b	"you make a mistake"
 540  a2e8 20796f75206d  	dc.b	" you may have to<b"
 541  a2fa 723e72657374  	dc.b	"r>restore factory "
 542  a30c 64656661756c  	dc.b	"defaults by holdin"
 543  a31e 6720646f776e  	dc.b	"g down the reset b"
 544  a330 7574746f6e20  	dc.b	"utton for 10 secon"
 545  a342 64732e3c6272  	dc.b	"ds.<br><br>Make su"
 546  a354 726520746865  	dc.b	"re the MAC you ass"
 547  a366 69676e206973  	dc.b	"ign is unique to y"
 548  a378 6f7572206c6f  	dc.b	"our local network."
 549  a38a 205265636f6d  	dc.b	" Recommended<br>is"
 550  a39c 207468617420  	dc.b	" that you just inc"
 551  a3ae 72656d656e74  	dc.b	"rement the lowest "
 552  a3c0 6f6374        	dc.b	"oct"
 553  a3c3 657420616e64  	dc.b	"et and then label "
 554  a3d5 796f75722064  	dc.b	"your devices for<b"
 555  a3e7 723e66757475  	dc.b	"r>future reference"
 556  a3f9 2e3c62723e3c  	dc.b	".<br><br>If you ch"
 557  a40b 616e67652074  	dc.b	"ange the highest o"
 558  a41d 63746574206f  	dc.b	"ctet of the MAC yo"
 559  a42f 75204d555354  	dc.b	"u MUST use an even"
 560  a441 206e756d6265  	dc.b	" number to<br>form"
 561  a453 206120756e69  	dc.b	" a unicast address"
 562  a465 2e2030302c20  	dc.b	". 00, 02, ... fc, "
 563  a477 666520657463  	dc.b	"fe etc work fine. "
 564  a489 30312c203033  	dc.b	"01, 03 ... fd, ff "
 565  a49b 61726520666f  	dc.b	"are for<br>multica"
 566  a4ad 737420616e64  	dc.b	"st and will not wo"
 567  a4bf 726b2e        	dc.b	"rk."
 568  a4c2 3c2f703e3c66  	dc.b	"</p><form style='d"
 569  a4d4 6973706c6179  	dc.b	"isplay: inline' ac"
 570  a4e6 74696f6e3d27  	dc.b	"tion='%x00http://1"
 571  a4f8 39322e313638  	dc.b	"92.168.001.004:080"
 572  a50a 38302f393127  	dc.b	"80/91' method='GET"
 573  a51c 273e3c627574  	dc.b	"'><button title='S"
 574  a52e 617665206669  	dc.b	"ave first! This bu"
 575  a540 74746f6e2077  	dc.b	"tton will not save"
 576  a552 20796f757220  	dc.b	" your changes'>Reb"
 577  a564 6f6f743c2f62  	dc.b	"oot</button></form"
 578  a576 3e266e627370  	dc.b	">&nbsp&nbspNOTE: R"
 579  a588 65626f6f7420  	dc.b	"eboot may cause th"
 580  a59a 652072656c61  	dc.b	"e relays to cycle."
 581  a5ac 3c62723e3c62  	dc.b	"<br><br><form styl"
 582  a5be 653d27        	dc.b	"e='"
 583  a5c1 646973706c61  	dc.b	"display: inline' a"
 584  a5d3 6374696f6e3d  	dc.b	"ction='%x00http://"
 585  a5e5 3139322e3136  	dc.b	"192.168.001.004:08"
 586  a5f7 3038302f3630  	dc.b	"080/60' method='GE"
 587  a609 54273e3c6275  	dc.b	"T'><button title='"
 588  a61b 536176652066  	dc.b	"Save first! This b"
 589  a62d 7574746f6e20  	dc.b	"utton will not sav"
 590  a63f 6520796f7572  	dc.b	"e your changes'>Re"
 591  a651 6c617920436f  	dc.b	"lay Controls</butt"
 592  a663 6f6e3e3c2f66  	dc.b	"on></form><form st"
 593  a675 796c653d2764  	dc.b	"yle='display: inli"
 594  a687 6e6527206163  	dc.b	"ne' action='%x00ht"
 595  a699 74703a2f2f31  	dc.b	"tp://192.168.001.0"
 596  a6ab 30343a303830  	dc.b	"04:08080/66' metho"
 597  a6bd 643d27        	dc.b	"d='"
 598  a6c0 474554273e3c  	dc.b	"GET'><button title"
 599  a6d2 3d2753617665  	dc.b	"='Save first! This"
 600  a6e4 20627574746f  	dc.b	" button will not s"
 601  a6f6 61766520796f  	dc.b	"ave your changes'>"
 602  a708 4e6574776f72  	dc.b	"Network Statistics"
 603  a71a 3c2f62757474  	dc.b	"</button></form><f"
 604  a72c 6f726d207374  	dc.b	"orm style='display"
 605  a73e 3a20696e6c69  	dc.b	": inline' action='"
 606  a750 257830306874  	dc.b	"%x00http://192.168"
 607  a762 2e3030312e30  	dc.b	".001.004:08080/63'"
 608  a774 206d6574686f  	dc.b	" method='GET'><but"
 609  a786 746f6e207469  	dc.b	"ton title='Save fi"
 610  a798 727374212054  	dc.b	"rst! This button w"
 611  a7aa 696c6c206e6f  	dc.b	"ill not save your "
 612  a7bc 636861        	dc.b	"cha"
 613  a7bf 6e676573273e  	dc.b	"nges'>Help</button"
 614  a7d1 3e3c2f666f72  	dc.b	"></form></body></h"
 615  a7e3 746d6c3e00    	dc.b	"tml>",0
 616  a7e8               L12_g_HtmlPageHelp:
 617  a7e8 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 618  a7fa 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 619  a80c 6561643e3c74  	dc.b	"ead><title>Help Pa"
 620  a81e 67653c2f7469  	dc.b	"ge</title><style>t"
 621  a830 64207b207769  	dc.b	"d { width: 140px; "
 622  a842 70616464696e  	dc.b	"padding: 0px; }</s"
 623  a854 74796c653e3c  	dc.b	"tyle></head><body>"
 624  a866 3c68313e4865  	dc.b	"<h1>Help Page 1</h"
 625  a878 313e3c70206c  	dc.b	"1><p line-height 2"
 626  a88a 3070783e416e  	dc.b	"0px>An alternative"
 627  a89c 20746f207573  	dc.b	" to using the web "
 628  a8ae 696e74657266  	dc.b	"interface for chan"
 629  a8c0 67696e672072  	dc.b	"ging relay states "
 630  a8d2 697320746f20  	dc.b	"is to send relay<b"
 631  a8e4 723e73        	dc.b	"r>s"
 632  a8e7 706563696669  	dc.b	"pecific html comma"
 633  a8f9 6e64732e2045  	dc.b	"nds. Enter http://"
 634  a90b 49503a506f72  	dc.b	"IP:Port/xx where<b"
 635  a91d 723e2d204950  	dc.b	"r>- IP = the devic"
 636  a92f 652049502041  	dc.b	"e IP Address, for "
 637  a941 6578616d706c  	dc.b	"example 192.168.1."
 638  a953 343c62723e2d  	dc.b	"4<br>- Port = the "
 639  a965 646576696365  	dc.b	"device Port number"
 640  a977 2c20666f7220  	dc.b	", for example 8080"
 641  a989 3c62723e2d20  	dc.b	"<br>- xx = one of "
 642  a99b 74686520636f  	dc.b	"the codes below:<b"
 643  a9ad 723e3c746162  	dc.b	"r><table><tr><td>0"
 644  a9bf 30203d205265  	dc.b	"0 = Relay-01 OFF</"
 645  a9d1 74643e3c7464  	dc.b	"td><td>09 = Relay-"
 646  a9e3 303520        	dc.b	"05 "
 647  a9e6 4f46463c2f74  	dc.b	"OFF</td><td>17 = R"
 648  a9f8 656c61792d30  	dc.b	"elay-09 OFF</td><t"
 649  aa0a 643e3235203d  	dc.b	"d>25 = Relay-13 OF"
 650  aa1c 463c62723e3c  	dc.b	"F<br></td></tr><tr"
 651  aa2e 3e3c74643e30  	dc.b	"><td>01 = Relay-01"
 652  aa40 20204f4e3c2f  	dc.b	"  ON</td><td>10 = "
 653  aa52 52656c61792d  	dc.b	"Relay-05  ON</td><"
 654  aa64 74643e313820  	dc.b	"td>18 = Relay-09  "
 655  aa76 4f4e3c2f7464  	dc.b	"ON</td><td>26 = Re"
 656  aa88 6c61792d3133  	dc.b	"lay-13  ON<br></td"
 657  aa9a 3e3c2f74723e  	dc.b	"></tr><tr><td>02 ="
 658  aaac 2052656c6179  	dc.b	" Relay-02 OFF</td>"
 659  aabe 3c74643e3131  	dc.b	"<td>11 = Relay-06 "
 660  aad0 4f46463c2f74  	dc.b	"OFF</td><td>19 = R"
 661  aae2 656c61        	dc.b	"ela"
 662  aae5 792d3130204f  	dc.b	"y-10 OFF</td><td>2"
 663  aaf7 37203d205265  	dc.b	"7 = Relay-14 OFF<b"
 664  ab09 723e3c2f7464  	dc.b	"r></td></tr><tr><t"
 665  ab1b 643e3033203d  	dc.b	"d>03 = Relay-02  O"
 666  ab2d 4e3c2f74643e  	dc.b	"N</td><td>12 = Rel"
 667  ab3f 61792d303620  	dc.b	"ay-06  ON</td><td>"
 668  ab51 3230203d2052  	dc.b	"20 = Relay-10  ON<"
 669  ab63 2f74643e3c74  	dc.b	"/td><td>28 = Relay"
 670  ab75 2d313420204f  	dc.b	"-14  ON<br></td></"
 671  ab87 74723e3c7472  	dc.b	"tr><tr><td>04 = Re"
 672  ab99 6c61792d3033  	dc.b	"lay-03 OFF</td><td"
 673  abab 3e3133203d20  	dc.b	">13 = Relay-07 OFF"
 674  abbd 3c2f74643e3c  	dc.b	"</td><td>21 = Rela"
 675  abcf 792d3131204f  	dc.b	"y-11 OFF</td><td>2"
 676  abe1 39203d        	dc.b	"9 ="
 677  abe4 2052656c6179  	dc.b	" Relay-15 OFF<br><"
 678  abf6 2f74643e3c2f  	dc.b	"/td></tr><tr><td>0"
 679  ac08 35203d205265  	dc.b	"5 = Relay-03  ON</"
 680  ac1a 74643e3c7464  	dc.b	"td><td>14 = Relay-"
 681  ac2c 303720204f4e  	dc.b	"07  ON</td><td>22 "
 682  ac3e 3d2052656c61  	dc.b	"= Relay-11  ON</td"
 683  ac50 3e3c74643e33  	dc.b	"><td>30 = Relay-15"
 684  ac62 20204f4e3c62  	dc.b	"  ON<br></td></tr>"
 685  ac74 3c74723e3c74  	dc.b	"<tr><td>07 = Relay"
 686  ac86 2d3034204f46  	dc.b	"-04 OFF</td><td>15"
 687  ac98 203d2052656c  	dc.b	" = Relay-08 OFF</t"
 688  acaa 643e3c74643e  	dc.b	"d><td>23 = Relay-1"
 689  acbc 32204f46463c  	dc.b	"2 OFF</td><td>31 ="
 690  acce 2052656c6179  	dc.b	" Relay-16 OFF<br><"
 691  ace0 2f7464        	dc.b	"/td"
 692  ace3 3e3c2f74723e  	dc.b	"></tr><tr><td>08 ="
 693  acf5 2052656c6179  	dc.b	" Relay-04  ON</td>"
 694  ad07 3c74643e3136  	dc.b	"<td>16 = Relay-08 "
 695  ad19 204f4e3c2f74  	dc.b	" ON</td><td>24 = R"
 696  ad2b 656c61792d31  	dc.b	"elay-12  ON</td><t"
 697  ad3d 643e3332203d  	dc.b	"d>32 = Relay-16  O"
 698  ad4f 4e3c62723e3c  	dc.b	"N<br></td></tr></t"
 699  ad61 61626c653e35  	dc.b	"able>55 = All Rela"
 700  ad73 7973204f4e3c  	dc.b	"ys ON<br>56 = All "
 701  ad85 52656c617973  	dc.b	"Relays OFF<br><br>"
 702  ad97 54686520666f  	dc.b	"The following are "
 703  ada9 616c736f2061  	dc.b	"also available:<br"
 704  adbb 3e3630203d20  	dc.b	">60 = Show Relay C"
 705  adcd 6f6e74726f6c  	dc.b	"ontrol page<br>61 "
 706  addf 3d2053        	dc.b	"= S"
 707  ade2 686f77204164  	dc.b	"how Address Settin"
 708  adf4 677320706167  	dc.b	"gs page<br>63 = Sh"
 709  ae06 6f772048656c  	dc.b	"ow Help Page 1<br>"
 710  ae18 3634203d2053  	dc.b	"64 = Show Help Pag"
 711  ae2a 6520323c6272  	dc.b	"e 2<br>65 = Flash "
 712  ae3c 4c45443c6272  	dc.b	"LED<br>66 = Show S"
 713  ae4e 746174697374  	dc.b	"tatistics<br>67 = "
 714  ae60 436c65617220  	dc.b	"Clear Statistics<b"
 715  ae72 723e3931203d  	dc.b	"r>91 = Reboot<br>9"
 716  ae84 39203d205368  	dc.b	"9 = Show Short For"
 717  ae96 6d2052656c61  	dc.b	"m Relay Settings<b"
 718  aea8 723e3c2f703e  	dc.b	"r></p><form style="
 719  aeba 27646973706c  	dc.b	"'display: inline' "
 720  aecc 616374696f6e  	dc.b	"action='%x00http:/"
 721  aede 2f3139        	dc.b	"/19"
 722  aee1 322e3136382e  	dc.b	"2.168.001.004:0808"
 723  aef3 302f36342720  	dc.b	"0/64' method='GET'"
 724  af05 3e3c62757474  	dc.b	"><button title='Go"
 725  af17 20746f206e65  	dc.b	" to next Help page"
 726  af29 273e4e657874  	dc.b	"'>Next Help Page</"
 727  af3b 627574746f6e  	dc.b	"button></form></bo"
 728  af4d 64793e3c2f68  	dc.b	"dy></html>",0
 729  af58               L32_g_HtmlPageHelp2:
 730  af58 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 731  af6a 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 732  af7c 6561643e3c74  	dc.b	"ead><title>Help Pa"
 733  af8e 676520323c2f  	dc.b	"ge 2</title></head"
 734  afa0 3e3c626f6479  	dc.b	"><body><h1>Help Pa"
 735  afb2 676520323c2f  	dc.b	"ge 2</h1><p line-h"
 736  afc4 656967687420  	dc.b	"eight 20px>IP Addr"
 737  afd6 6573732c2047  	dc.b	"ess, Gateway Addre"
 738  afe8 73732c204e65  	dc.b	"ss, Netmask, Port,"
 739  affa 20616e64204d  	dc.b	" and MAC Address c"
 740  b00c 616e206f6e6c  	dc.b	"an only be<br>chan"
 741  b01e 676564207669  	dc.b	"ged via the web in"
 742  b030 746572666163  	dc.b	"terface. If the de"
 743  b042 766963652062  	dc.b	"vice becomes inacc"
 744  b054 657373        	dc.b	"ess"
 745  b057 69626c652079  	dc.b	"ible you can<br>re"
 746  b069 73657420746f  	dc.b	"set to factory def"
 747  b07b 61756c747320  	dc.b	"aults by holding t"
 748  b08d 686520726573  	dc.b	"he reset button do"
 749  b09f 776e20666f72  	dc.b	"wn for 10 seconds."
 750  b0b1 3c62723e4465  	dc.b	"<br>Defaults:<br> "
 751  b0c3 495020313932  	dc.b	"IP 192.168.1.4<br>"
 752  b0d5 204761746577  	dc.b	" Gateway 192.168.1"
 753  b0e7 2e313c62723e  	dc.b	".1<br> Netmask 255"
 754  b0f9 2e3235352e32  	dc.b	".255.255.0<br> Por"
 755  b10b 742030383038  	dc.b	"t 08080<br> MAC c2"
 756  b11d 2d34642d3639  	dc.b	"-4d-69-6b-65-00<br"
 757  b12f 3e3c62723e43  	dc.b	"><br>Code Revision"
 758  b141 203230323030  	dc.b	" 20200709 1200</p>"
 759  b153 3c666f        	dc.b	"<fo"
 760  b156 726d20737479  	dc.b	"rm style='display:"
 761  b168 20696e6c696e  	dc.b	" inline' action='%"
 762  b17a 783030687474  	dc.b	"x00http://192.168."
 763  b18c 3030312e3030  	dc.b	"001.004:08080/60' "
 764  b19e 6d6574686f64  	dc.b	"method='GET'><butt"
 765  b1b0 6f6e20746974  	dc.b	"on title='Go to Re"
 766  b1c2 6c617920436f  	dc.b	"lay Control Page'>"
 767  b1d4 52656c617920  	dc.b	"Relay Controls</bu"
 768  b1e6 74746f6e3e3c  	dc.b	"tton></form></body"
 769  b1f8 3e3c2f68746d  	dc.b	"></html>",0
 770  b201               L52_g_HtmlPageStats:
 771  b201 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 772  b213 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 773  b225 6561643e3c74  	dc.b	"ead><title>Network"
 774  b237 205374617469  	dc.b	" Statistics</title"
 775  b249 3e3c7374796c  	dc.b	"><style>.t1 { widt"
 776  b25b 683a20313030  	dc.b	"h: 100px; }.t2 { w"
 777  b26d 696474683a20  	dc.b	"idth: 450px; }td {"
 778  b27f 20626f726465  	dc.b	" border: 1px black"
 779  b291 20736f6c6964  	dc.b	" solid; }</style><"
 780  b2a3 2f686561643e  	dc.b	"/head><body><h1>Ne"
 781  b2b5 74776f726b20  	dc.b	"twork Statistics</"
 782  b2c7 68313e3c703e  	dc.b	"h1><p>Values shown"
 783  b2d9 206172652073  	dc.b	" are since last po"
 784  b2eb 776572206f6e  	dc.b	"wer on or reset</p"
 785  b2fd 3e3c74        	dc.b	"><t"
 786  b300 61626c653e3c  	dc.b	"able><tr><td class"
 787  b312 3d277431273e  	dc.b	"='t1'>%e00xxxxxxxx"
 788  b324 78783c2f7464  	dc.b	"xx</td><td class='"
 789  b336 7432273e4472  	dc.b	"t2'>Dropped packet"
 790  b348 732061742074  	dc.b	"s at the IP layer<"
 791  b35a 2f74643e3c2f  	dc.b	"/td></tr><tr><td c"
 792  b36c 6c6173733d27  	dc.b	"lass='t1'>%e01xxxx"
 793  b37e 787878787878  	dc.b	"xxxxxx</td><td cla"
 794  b390 73733d277432  	dc.b	"ss='t2'>Received p"
 795  b3a2 61636b657473  	dc.b	"ackets at the IP l"
 796  b3b4 617965723c2f  	dc.b	"ayer</td></tr><tr>"
 797  b3c6 3c746420636c  	dc.b	"<td class='t1'>%e0"
 798  b3d8 327878787878  	dc.b	"2xxxxxxxxxx</td><t"
 799  b3ea 6420636c6173  	dc.b	"d class='t2'>Sent "
 800  b3fc 706163        	dc.b	"pac"
 801  b3ff 6b6574732061  	dc.b	"kets at the IP lay"
 802  b411 65723c2f7464  	dc.b	"er</td></tr><tr><t"
 803  b423 6420636c6173  	dc.b	"d class='t1'>%e03x"
 804  b435 787878787878  	dc.b	"xxxxxxxxx</td><td "
 805  b447 636c6173733d  	dc.b	"class='t2'>Packets"
 806  b459 2064726f7070  	dc.b	" dropped due to wr"
 807  b46b 6f6e67204950  	dc.b	"ong IP version or "
 808  b47d 686561646572  	dc.b	"header length</td>"
 809  b48f 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 810  b4a1 3d277431273e  	dc.b	"='t1'>%e04xxxxxxxx"
 811  b4b3 78783c2f7464  	dc.b	"xx</td><td class='"
 812  b4c5 7432273e5061  	dc.b	"t2'>Packets droppe"
 813  b4d7 642064756520  	dc.b	"d due to wrong IP "
 814  b4e9 6c656e677468  	dc.b	"length, high byte<"
 815  b4fb 2f7464        	dc.b	"/td"
 816  b4fe 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 817  b510 733d27743127  	dc.b	"s='t1'>%e05xxxxxxx"
 818  b522 7878783c2f74  	dc.b	"xxx</td><td class="
 819  b534 277432273e50  	dc.b	"'t2'>Packets dropp"
 820  b546 656420647565  	dc.b	"ed due to wrong IP"
 821  b558 206c656e6774  	dc.b	" length, low byte<"
 822  b56a 2f74643e3c2f  	dc.b	"/td></tr><tr><td c"
 823  b57c 6c6173733d27  	dc.b	"lass='t1'>%e06xxxx"
 824  b58e 787878787878  	dc.b	"xxxxxx</td><td cla"
 825  b5a0 73733d277432  	dc.b	"ss='t2'>Packets dr"
 826  b5b2 6f7070656420  	dc.b	"opped since they w"
 827  b5c4 657265204950  	dc.b	"ere IP fragments</"
 828  b5d6 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 829  b5e8 6173733d2774  	dc.b	"ass='t1'>%e07xxxxx"
 830  b5fa 787878        	dc.b	"xxx"
 831  b5fd 78783c2f7464  	dc.b	"xx</td><td class='"
 832  b60f 7432273e5061  	dc.b	"t2'>Packets droppe"
 833  b621 642064756520  	dc.b	"d due to IP checks"
 834  b633 756d20657272  	dc.b	"um errors</td></tr"
 835  b645 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 836  b657 273e25653038  	dc.b	"'>%e08xxxxxxxxxx</"
 837  b669 74643e3c7464  	dc.b	"td><td class='t2'>"
 838  b67b 5061636b6574  	dc.b	"Packets dropped si"
 839  b68d 6e6365207468  	dc.b	"nce they were not "
 840  b69f 49434d50206f  	dc.b	"ICMP or TCP</td></"
 841  b6b1 74723e3c7472  	dc.b	"tr><tr><td class='"
 842  b6c3 7431273e2565  	dc.b	"t1'>%e09xxxxxxxxxx"
 843  b6d5 3c2f74643e3c  	dc.b	"</td><td class='t2"
 844  b6e7 273e44726f70  	dc.b	"'>Dropped ICMP pac"
 845  b6f9 6b6574        	dc.b	"ket"
 846  b6fc 733c2f74643e  	dc.b	"s</td></tr><tr><td"
 847  b70e 20636c617373  	dc.b	" class='t1'>%e10xx"
 848  b720 787878787878  	dc.b	"xxxxxxxx</td><td c"
 849  b732 6c6173733d27  	dc.b	"lass='t2'>Received"
 850  b744 2049434d5020  	dc.b	" ICMP packets</td>"
 851  b756 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 852  b768 3d277431273e  	dc.b	"='t1'>%e11xxxxxxxx"
 853  b77a 78783c2f7464  	dc.b	"xx</td><td class='"
 854  b78c 7432273e5365  	dc.b	"t2'>Sent ICMP pack"
 855  b79e 6574733c2f74  	dc.b	"ets</td></tr><tr><"
 856  b7b0 746420636c61  	dc.b	"td class='t1'>%e12"
 857  b7c2 787878787878  	dc.b	"xxxxxxxxxx</td><td"
 858  b7d4 20636c617373  	dc.b	" class='t2'>ICMP p"
 859  b7e6 61636b657473  	dc.b	"ackets with a wron"
 860  b7f8 672074        	dc.b	"g t"
 861  b7fb 7970653c2f74  	dc.b	"ype</td></tr><tr><"
 862  b80d 746420636c61  	dc.b	"td class='t1'>%e13"
 863  b81f 787878787878  	dc.b	"xxxxxxxxxx</td><td"
 864  b831 20636c617373  	dc.b	" class='t2'>Droppe"
 865  b843 642054435020  	dc.b	"d TCP segments</td"
 866  b855 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 867  b867 733d27743127  	dc.b	"s='t1'>%e14xxxxxxx"
 868  b879 7878783c2f74  	dc.b	"xxx</td><td class="
 869  b88b 277432273e52  	dc.b	"'t2'>Received TCP "
 870  b89d 7365676d656e  	dc.b	"segments</td></tr>"
 871  b8af 3c74723e3c74  	dc.b	"<tr><td class='t1'"
 872  b8c1 3e2565313578  	dc.b	">%e15xxxxxxxxxx</t"
 873  b8d3 643e3c746420  	dc.b	"d><td class='t2'>S"
 874  b8e5 656e74205443  	dc.b	"ent TCP segments</"
 875  b8f7 74643e        	dc.b	"td>"
 876  b8fa 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 877  b90c 3d277431273e  	dc.b	"='t1'>%e16xxxxxxxx"
 878  b91e 78783c2f7464  	dc.b	"xx</td><td class='"
 879  b930 7432273e5443  	dc.b	"t2'>TCP segments w"
 880  b942 697468206120  	dc.b	"ith a bad checksum"
 881  b954 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 882  b966 636c6173733d  	dc.b	"class='t1'>%e17xxx"
 883  b978 787878787878  	dc.b	"xxxxxxx</td><td cl"
 884  b98a 6173733d2774  	dc.b	"ass='t2'>TCP segme"
 885  b99c 6e7473207769  	dc.b	"nts with a bad ACK"
 886  b9ae 206e756d6265  	dc.b	" number</td></tr><"
 887  b9c0 74723e3c7464  	dc.b	"tr><td class='t1'>"
 888  b9d2 256531387878  	dc.b	"%e18xxxxxxxxxx</td"
 889  b9e4 3e3c74642063  	dc.b	"><td class='t2'>Re"
 890  b9f6 636569        	dc.b	"cei"
 891  b9f9 766564205443  	dc.b	"ved TCP RST (reset"
 892  ba0b 29207365676d  	dc.b	") segments</td></t"
 893  ba1d 723e3c74723e  	dc.b	"r><tr><td class='t"
 894  ba2f 31273e256531  	dc.b	"1'>%e19xxxxxxxxxx<"
 895  ba41 2f74643e3c74  	dc.b	"/td><td class='t2'"
 896  ba53 3e5265747261  	dc.b	">Retransmitted TCP"
 897  ba65 207365676d65  	dc.b	" segments</td></tr"
 898  ba77 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 899  ba89 273e25653230  	dc.b	"'>%e20xxxxxxxxxx</"
 900  ba9b 74643e3c7464  	dc.b	"td><td class='t2'>"
 901  baad 44726f707065  	dc.b	"Dropped SYNs due t"
 902  babf 6f20746f6f20  	dc.b	"o too few connecti"
 903  bad1 6f6e73206176  	dc.b	"ons avaliable</td>"
 904  bae3 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 905  baf5 3d2774        	dc.b	"='t"
 906  baf8 31273e256532  	dc.b	"1'>%e21xxxxxxxxxx<"
 907  bb0a 2f74643e3c74  	dc.b	"/td><td class='t2'"
 908  bb1c 3e53594e7320  	dc.b	">SYNs for closed p"
 909  bb2e 6f7274732c20  	dc.b	"orts, triggering a"
 910  bb40 205253543c2f  	dc.b	" RST</td></tr></ta"
 911  bb52 626c653e3c66  	dc.b	"ble><form style='d"
 912  bb64 6973706c6179  	dc.b	"isplay: inline' ac"
 913  bb76 74696f6e3d27  	dc.b	"tion='%x00http://1"
 914  bb88 39322e313638  	dc.b	"92.168.001.004:080"
 915  bb9a 38302f363027  	dc.b	"80/60' method='GET"
 916  bbac 273e3c627574  	dc.b	"'><button title='G"
 917  bbbe 6f20746f2052  	dc.b	"o to Relay Control"
 918  bbd0 205061676527  	dc.b	" Page'>Relay Contr"
 919  bbe2 6f6c733c2f62  	dc.b	"ols</button></form"
 920  bbf4 3e3c66        	dc.b	"><f"
 921  bbf7 6f726d207374  	dc.b	"orm style='display"
 922  bc09 3a20696e6c69  	dc.b	": inline' action='"
 923  bc1b 257830306874  	dc.b	"%x00http://192.168"
 924  bc2d 2e3030312e30  	dc.b	".001.004:08080/67'"
 925  bc3f 206d6574686f  	dc.b	" method='GET'><but"
 926  bc51 746f6e207469  	dc.b	"ton title='Clear S"
 927  bc63 746174697374  	dc.b	"tatistics'>Clear S"
 928  bc75 746174697374  	dc.b	"tatistics</button>"
 929  bc87 3c2f666f726d  	dc.b	"</form></body></ht"
 930  bc99 6d6c3e00      	dc.b	"ml>",0
 931  bc9d               L72_g_HtmlPageRstate:
 932  bc9d 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 933  bcaf 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 934  bcc1 6561643e3c74  	dc.b	"ead><title>Help Pa"
 935  bcd3 676520323c2f  	dc.b	"ge 2</title></head"
 936  bce5 3e3c626f6479  	dc.b	"><body><p>%f00xxxx"
 937  bcf7 787878787878  	dc.b	"xxxxxxxxxxxx</p></"
 938  bd09 626f64793e3c  	dc.b	"body></html>",0
1004                     ; 612 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1004                     ; 613 {
1006                     	switch	.text
1007  c1ec               L3_CopyStringP:
1009  c1ec 89            	pushw	x
1010  c1ed 5203          	subw	sp,#3
1011       00000003      OFST:	set	3
1014                     ; 618   nBytes = 0;
1016  c1ef 5f            	clrw	x
1018  c1f0 2014          	jra	L17
1019  c1f2               L56:
1020                     ; 620     **ppBuffer = Character;
1022  c1f2 1e04          	ldw	x,(OFST+1,sp)
1023  c1f4 fe            	ldw	x,(x)
1024  c1f5 f7            	ld	(x),a
1025                     ; 621     *ppBuffer = *ppBuffer + 1;
1027  c1f6 1e04          	ldw	x,(OFST+1,sp)
1028  c1f8 9093          	ldw	y,x
1029  c1fa fe            	ldw	x,(x)
1030  c1fb 5c            	incw	x
1031  c1fc 90ff          	ldw	(y),x
1032                     ; 622     pString = pString + 1;
1034  c1fe 1e08          	ldw	x,(OFST+5,sp)
1035  c200 5c            	incw	x
1036  c201 1f08          	ldw	(OFST+5,sp),x
1037                     ; 623     nBytes++;
1039  c203 1e01          	ldw	x,(OFST-2,sp)
1040  c205 5c            	incw	x
1041  c206               L17:
1042  c206 1f01          	ldw	(OFST-2,sp),x
1044                     ; 619   while ((Character = pString[0]) != '\0') {
1044                     ; 620     **ppBuffer = Character;
1044                     ; 621     *ppBuffer = *ppBuffer + 1;
1044                     ; 622     pString = pString + 1;
1044                     ; 623     nBytes++;
1046  c208 1e08          	ldw	x,(OFST+5,sp)
1047  c20a f6            	ld	a,(x)
1048  c20b 6b03          	ld	(OFST+0,sp),a
1050  c20d 26e3          	jrne	L56
1051                     ; 625   return nBytes;
1053  c20f 1e01          	ldw	x,(OFST-2,sp)
1056  c211 5b05          	addw	sp,#5
1057  c213 81            	ret	
1102                     ; 629 static uint16_t CopyValue(uint8_t** ppBuffer, uint32_t nValue)
1102                     ; 630 {
1103                     	switch	.text
1104  c214               L5_CopyValue:
1106  c214 89            	pushw	x
1107       00000000      OFST:	set	0
1110                     ; 638   emb_itoa(nValue, OctetArray, 10, 5);
1112  c215 4b05          	push	#5
1113  c217 4b0a          	push	#10
1114  c219 ae0010        	ldw	x,#_OctetArray
1115  c21c 89            	pushw	x
1116  c21d 1e0b          	ldw	x,(OFST+11,sp)
1117  c21f 89            	pushw	x
1118  c220 1e0b          	ldw	x,(OFST+11,sp)
1119  c222 89            	pushw	x
1120  c223 ad53          	call	_emb_itoa
1122  c225 5b08          	addw	sp,#8
1123                     ; 640   **ppBuffer = OctetArray[0];
1125  c227 1e01          	ldw	x,(OFST+1,sp)
1126  c229 fe            	ldw	x,(x)
1127  c22a c60010        	ld	a,_OctetArray
1128  c22d f7            	ld	(x),a
1129                     ; 641   *ppBuffer = *ppBuffer + 1;
1131  c22e 1e01          	ldw	x,(OFST+1,sp)
1132  c230 9093          	ldw	y,x
1133  c232 fe            	ldw	x,(x)
1134  c233 5c            	incw	x
1135  c234 90ff          	ldw	(y),x
1136                     ; 643   **ppBuffer = OctetArray[1];
1138  c236 1e01          	ldw	x,(OFST+1,sp)
1139  c238 fe            	ldw	x,(x)
1140  c239 c60011        	ld	a,_OctetArray+1
1141  c23c f7            	ld	(x),a
1142                     ; 644   *ppBuffer = *ppBuffer + 1;
1144  c23d 1e01          	ldw	x,(OFST+1,sp)
1145  c23f 9093          	ldw	y,x
1146  c241 fe            	ldw	x,(x)
1147  c242 5c            	incw	x
1148  c243 90ff          	ldw	(y),x
1149                     ; 646   **ppBuffer = OctetArray[2];
1151  c245 1e01          	ldw	x,(OFST+1,sp)
1152  c247 fe            	ldw	x,(x)
1153  c248 c60012        	ld	a,_OctetArray+2
1154  c24b f7            	ld	(x),a
1155                     ; 647   *ppBuffer = *ppBuffer + 1;
1157  c24c 1e01          	ldw	x,(OFST+1,sp)
1158  c24e 9093          	ldw	y,x
1159  c250 fe            	ldw	x,(x)
1160  c251 5c            	incw	x
1161  c252 90ff          	ldw	(y),x
1162                     ; 649   **ppBuffer = OctetArray[3];
1164  c254 1e01          	ldw	x,(OFST+1,sp)
1165  c256 fe            	ldw	x,(x)
1166  c257 c60013        	ld	a,_OctetArray+3
1167  c25a f7            	ld	(x),a
1168                     ; 650   *ppBuffer = *ppBuffer + 1;
1170  c25b 1e01          	ldw	x,(OFST+1,sp)
1171  c25d 9093          	ldw	y,x
1172  c25f fe            	ldw	x,(x)
1173  c260 5c            	incw	x
1174  c261 90ff          	ldw	(y),x
1175                     ; 652   **ppBuffer = OctetArray[4];
1177  c263 1e01          	ldw	x,(OFST+1,sp)
1178  c265 fe            	ldw	x,(x)
1179  c266 c60014        	ld	a,_OctetArray+4
1180  c269 f7            	ld	(x),a
1181                     ; 653   *ppBuffer = *ppBuffer + 1;
1183  c26a 1e01          	ldw	x,(OFST+1,sp)
1184  c26c 9093          	ldw	y,x
1185  c26e fe            	ldw	x,(x)
1186  c26f 5c            	incw	x
1187  c270 90ff          	ldw	(y),x
1188                     ; 655   return 5;
1190  c272 ae0005        	ldw	x,#5
1193  c275 5b02          	addw	sp,#2
1194  c277 81            	ret	
1266                     ; 659 char* emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
1266                     ; 660 {
1267                     	switch	.text
1268  c278               _emb_itoa:
1270  c278 5206          	subw	sp,#6
1271       00000006      OFST:	set	6
1274                     ; 675   for (i=0; i < 10; i++) str[i] = '0';
1276  c27a 4f            	clr	a
1277  c27b 6b06          	ld	(OFST+0,sp),a
1279  c27d               L541:
1282  c27d 5f            	clrw	x
1283  c27e 97            	ld	xl,a
1284  c27f 72fb0d        	addw	x,(OFST+7,sp)
1285  c282 a630          	ld	a,#48
1286  c284 f7            	ld	(x),a
1289  c285 0c06          	inc	(OFST+0,sp)
1293  c287 7b06          	ld	a,(OFST+0,sp)
1294  c289 a10a          	cp	a,#10
1295  c28b 25f0          	jrult	L541
1296                     ; 676   str[pad] = '\0';
1298  c28d 7b10          	ld	a,(OFST+10,sp)
1299  c28f 5f            	clrw	x
1300  c290 97            	ld	xl,a
1301  c291 72fb0d        	addw	x,(OFST+7,sp)
1302  c294 7f            	clr	(x)
1303                     ; 677   if (num == 0) return str;
1305  c295 96            	ldw	x,sp
1306  c296 1c0009        	addw	x,#OFST+3
1307  c299 cdf5a1        	call	c_lzmp
1311  c29c 2775          	jreq	L61
1312                     ; 680   i = 0;
1314  c29e 0f06          	clr	(OFST+0,sp)
1317  c2a0 2060          	jra	L161
1318  c2a2               L551:
1319                     ; 682     rem = (uint8_t)(num % base);
1321  c2a2 7b0f          	ld	a,(OFST+9,sp)
1322  c2a4 b703          	ld	c_lreg+3,a
1323  c2a6 3f02          	clr	c_lreg+2
1324  c2a8 3f01          	clr	c_lreg+1
1325  c2aa 3f00          	clr	c_lreg
1326  c2ac 96            	ldw	x,sp
1327  c2ad 5c            	incw	x
1328  c2ae cdf5b4        	call	c_rtol
1331  c2b1 96            	ldw	x,sp
1332  c2b2 1c0009        	addw	x,#OFST+3
1333  c2b5 cdf44e        	call	c_ltor
1335  c2b8 96            	ldw	x,sp
1336  c2b9 5c            	incw	x
1337  c2ba cdf587        	call	c_lumd
1339  c2bd b603          	ld	a,c_lreg+3
1340  c2bf 6b05          	ld	(OFST-1,sp),a
1342                     ; 683     if (rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
1344  c2c1 a10a          	cp	a,#10
1345  c2c3 7b06          	ld	a,(OFST+0,sp)
1346  c2c5 250d          	jrult	L561
1349  c2c7 0c06          	inc	(OFST+0,sp)
1351  c2c9 5f            	clrw	x
1352  c2ca 97            	ld	xl,a
1353  c2cb 72fb0d        	addw	x,(OFST+7,sp)
1354  c2ce 7b05          	ld	a,(OFST-1,sp)
1355  c2d0 ab57          	add	a,#87
1357  c2d2 200b          	jra	L761
1358  c2d4               L561:
1359                     ; 684     else str[i++] = (uint8_t)(rem + '0');
1361  c2d4 0c06          	inc	(OFST+0,sp)
1363  c2d6 5f            	clrw	x
1364  c2d7 97            	ld	xl,a
1365  c2d8 72fb0d        	addw	x,(OFST+7,sp)
1366  c2db 7b05          	ld	a,(OFST-1,sp)
1367  c2dd ab30          	add	a,#48
1368  c2df               L761:
1369  c2df f7            	ld	(x),a
1370                     ; 685     num = num/base;
1372  c2e0 7b0f          	ld	a,(OFST+9,sp)
1373  c2e2 b703          	ld	c_lreg+3,a
1374  c2e4 3f02          	clr	c_lreg+2
1375  c2e6 3f01          	clr	c_lreg+1
1376  c2e8 3f00          	clr	c_lreg
1377  c2ea 96            	ldw	x,sp
1378  c2eb 5c            	incw	x
1379  c2ec cdf5b4        	call	c_rtol
1382  c2ef 96            	ldw	x,sp
1383  c2f0 1c0009        	addw	x,#OFST+3
1384  c2f3 cdf44e        	call	c_ltor
1386  c2f6 96            	ldw	x,sp
1387  c2f7 5c            	incw	x
1388  c2f8 cdf460        	call	c_ludv
1390  c2fb 96            	ldw	x,sp
1391  c2fc 1c0009        	addw	x,#OFST+3
1392  c2ff cdf5b4        	call	c_rtol
1394  c302               L161:
1395                     ; 681   while (num != 0) {
1397  c302 96            	ldw	x,sp
1398  c303 1c0009        	addw	x,#OFST+3
1399  c306 cdf5a1        	call	c_lzmp
1401  c309 2697          	jrne	L551
1402                     ; 689   reverse(str, pad);
1404  c30b 7b10          	ld	a,(OFST+10,sp)
1405  c30d 88            	push	a
1406  c30e 1e0e          	ldw	x,(OFST+8,sp)
1407  c310 ad06          	call	_reverse
1409  c312 84            	pop	a
1410                     ; 691   return str;
1413  c313               L61:
1415  c313 1e0d          	ldw	x,(OFST+7,sp)
1417  c315 5b06          	addw	sp,#6
1418  c317 81            	ret	
1481                     ; 696 void reverse(char str[], uint8_t length)
1481                     ; 697 {
1482                     	switch	.text
1483  c318               _reverse:
1485  c318 89            	pushw	x
1486  c319 5203          	subw	sp,#3
1487       00000003      OFST:	set	3
1490                     ; 702   start = 0;
1492  c31b 0f02          	clr	(OFST-1,sp)
1494                     ; 703   end = (uint8_t)(length - 1);
1496  c31d 7b08          	ld	a,(OFST+5,sp)
1497  c31f 4a            	dec	a
1498  c320 6b03          	ld	(OFST+0,sp),a
1501  c322 2029          	jra	L322
1502  c324               L712:
1503                     ; 706     temp = str[start];
1505  c324 5f            	clrw	x
1506  c325 97            	ld	xl,a
1507  c326 72fb04        	addw	x,(OFST+1,sp)
1508  c329 f6            	ld	a,(x)
1509  c32a 6b01          	ld	(OFST-2,sp),a
1511                     ; 707     str[start] = str[end];
1513  c32c 5f            	clrw	x
1514  c32d 7b02          	ld	a,(OFST-1,sp)
1515  c32f 97            	ld	xl,a
1516  c330 72fb04        	addw	x,(OFST+1,sp)
1517  c333 7b03          	ld	a,(OFST+0,sp)
1518  c335 905f          	clrw	y
1519  c337 9097          	ld	yl,a
1520  c339 72f904        	addw	y,(OFST+1,sp)
1521  c33c 90f6          	ld	a,(y)
1522  c33e f7            	ld	(x),a
1523                     ; 708     str[end] = temp;
1525  c33f 5f            	clrw	x
1526  c340 7b03          	ld	a,(OFST+0,sp)
1527  c342 97            	ld	xl,a
1528  c343 72fb04        	addw	x,(OFST+1,sp)
1529  c346 7b01          	ld	a,(OFST-2,sp)
1530  c348 f7            	ld	(x),a
1531                     ; 709     start++;
1533  c349 0c02          	inc	(OFST-1,sp)
1535                     ; 710     end--;
1537  c34b 0a03          	dec	(OFST+0,sp)
1539  c34d               L322:
1540                     ; 705   while (start < end) {
1540                     ; 706     temp = str[start];
1540                     ; 707     str[start] = str[end];
1540                     ; 708     str[end] = temp;
1540                     ; 709     start++;
1540                     ; 710     end--;
1542  c34d 7b02          	ld	a,(OFST-1,sp)
1543  c34f 1103          	cp	a,(OFST+0,sp)
1544  c351 25d1          	jrult	L712
1545                     ; 712 }
1548  c353 5b05          	addw	sp,#5
1549  c355 81            	ret	
1610                     ; 715 uint8_t three_alpha_to_uint(uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
1610                     ; 716 {
1611                     	switch	.text
1612  c356               _three_alpha_to_uint:
1614  c356 89            	pushw	x
1615  c357 89            	pushw	x
1616       00000002      OFST:	set	2
1619                     ; 724   value = (uint8_t)((alpha1 - '0') *100);
1621  c358 9e            	ld	a,xh
1622  c359 97            	ld	xl,a
1623  c35a a664          	ld	a,#100
1624  c35c 42            	mul	x,a
1625  c35d 9f            	ld	a,xl
1626  c35e a0c0          	sub	a,#192
1627  c360 6b02          	ld	(OFST+0,sp),a
1629                     ; 725   digit = (uint8_t)((alpha2 - '0') * 10);
1631  c362 7b04          	ld	a,(OFST+2,sp)
1632  c364 97            	ld	xl,a
1633  c365 a60a          	ld	a,#10
1634  c367 42            	mul	x,a
1635  c368 9f            	ld	a,xl
1636  c369 a0e0          	sub	a,#224
1638                     ; 726   value = (uint8_t)(value + digit);
1640  c36b 1b02          	add	a,(OFST+0,sp)
1641  c36d 6b02          	ld	(OFST+0,sp),a
1643                     ; 727   digit = (uint8_t)(alpha3 - '0');
1645  c36f 7b07          	ld	a,(OFST+5,sp)
1646  c371 a030          	sub	a,#48
1647  c373 6b01          	ld	(OFST-1,sp),a
1649                     ; 728   value = (uint8_t)(value + digit);
1651  c375 1b02          	add	a,(OFST+0,sp)
1653                     ; 730   if (value >= 255) value = 0;
1655  c377 a1ff          	cp	a,#255
1656  c379 2501          	jrult	L352
1659  c37b 4f            	clr	a
1661  c37c               L352:
1662                     ; 732   return value;
1666  c37c 5b04          	addw	sp,#4
1667  c37e 81            	ret	
1713                     ; 736 uint8_t two_alpha_to_uint(uint8_t alpha1, uint8_t alpha2)
1713                     ; 737 {
1714                     	switch	.text
1715  c37f               _two_alpha_to_uint:
1717  c37f 89            	pushw	x
1718  c380 88            	push	a
1719       00000001      OFST:	set	1
1722                     ; 744   if (alpha1 >= '0' && alpha1 <= '9') value = (uint8_t)((alpha1 - '0') << 4);
1724  c381 9e            	ld	a,xh
1725  c382 a130          	cp	a,#48
1726  c384 250f          	jrult	L572
1728  c386 9e            	ld	a,xh
1729  c387 a13a          	cp	a,#58
1730  c389 240a          	jruge	L572
1733  c38b 9e            	ld	a,xh
1734  c38c 97            	ld	xl,a
1735  c38d a610          	ld	a,#16
1736  c38f 42            	mul	x,a
1737  c390 9f            	ld	a,xl
1738  c391 a000          	sub	a,#0
1740  c393 2030          	jp	LC001
1741  c395               L572:
1742                     ; 745   else if (alpha1 == 'a') value = 0xa0;
1744  c395 7b02          	ld	a,(OFST+1,sp)
1745  c397 a161          	cp	a,#97
1746  c399 2604          	jrne	L103
1749  c39b a6a0          	ld	a,#160
1751  c39d 2026          	jp	LC001
1752  c39f               L103:
1753                     ; 746   else if (alpha1 == 'b') value = 0xb0;
1755  c39f a162          	cp	a,#98
1756  c3a1 2604          	jrne	L503
1759  c3a3 a6b0          	ld	a,#176
1761  c3a5 201e          	jp	LC001
1762  c3a7               L503:
1763                     ; 747   else if (alpha1 == 'c') value = 0xc0;
1765  c3a7 a163          	cp	a,#99
1766  c3a9 2604          	jrne	L113
1769  c3ab a6c0          	ld	a,#192
1771  c3ad 2016          	jp	LC001
1772  c3af               L113:
1773                     ; 748   else if (alpha1 == 'd') value = 0xd0;
1775  c3af a164          	cp	a,#100
1776  c3b1 2604          	jrne	L513
1779  c3b3 a6d0          	ld	a,#208
1781  c3b5 200e          	jp	LC001
1782  c3b7               L513:
1783                     ; 749   else if (alpha1 == 'e') value = 0xe0;
1785  c3b7 a165          	cp	a,#101
1786  c3b9 2604          	jrne	L123
1789  c3bb a6e0          	ld	a,#224
1791  c3bd 2006          	jp	LC001
1792  c3bf               L123:
1793                     ; 750   else if (alpha1 == 'f') value = 0xf0;
1795  c3bf a166          	cp	a,#102
1796  c3c1 2606          	jrne	L523
1799  c3c3 a6f0          	ld	a,#240
1800  c3c5               LC001:
1801  c3c5 6b01          	ld	(OFST+0,sp),a
1804  c3c7 2002          	jra	L772
1805  c3c9               L523:
1806                     ; 751   else value = 0; // If an invalid entry is made convert it to 0
1808  c3c9 0f01          	clr	(OFST+0,sp)
1810  c3cb               L772:
1811                     ; 753   if (alpha2 >= '0' && alpha2 <= '9') value = (uint8_t)(value + alpha2 - '0');
1813  c3cb 7b03          	ld	a,(OFST+2,sp)
1814  c3cd a130          	cp	a,#48
1815  c3cf 250c          	jrult	L133
1817  c3d1 a13a          	cp	a,#58
1818  c3d3 2408          	jruge	L133
1821  c3d5 7b01          	ld	a,(OFST+0,sp)
1822  c3d7 1b03          	add	a,(OFST+2,sp)
1823  c3d9 a030          	sub	a,#48
1825  c3db 203d          	jp	L333
1826  c3dd               L133:
1827                     ; 754   else if (alpha2 == 'a') value = (uint8_t)(value + 0x0a);
1829  c3dd a161          	cp	a,#97
1830  c3df 2606          	jrne	L533
1833  c3e1 7b01          	ld	a,(OFST+0,sp)
1834  c3e3 ab0a          	add	a,#10
1836  c3e5 2033          	jp	L333
1837  c3e7               L533:
1838                     ; 755   else if (alpha2 == 'b') value = (uint8_t)(value + 0x0b);
1840  c3e7 a162          	cp	a,#98
1841  c3e9 2606          	jrne	L143
1844  c3eb 7b01          	ld	a,(OFST+0,sp)
1845  c3ed ab0b          	add	a,#11
1847  c3ef 2029          	jp	L333
1848  c3f1               L143:
1849                     ; 756   else if (alpha2 == 'c') value = (uint8_t)(value + 0x0c);
1851  c3f1 a163          	cp	a,#99
1852  c3f3 2606          	jrne	L543
1855  c3f5 7b01          	ld	a,(OFST+0,sp)
1856  c3f7 ab0c          	add	a,#12
1858  c3f9 201f          	jp	L333
1859  c3fb               L543:
1860                     ; 757   else if (alpha2 == 'd') value = (uint8_t)(value + 0x0d);
1862  c3fb a164          	cp	a,#100
1863  c3fd 2606          	jrne	L153
1866  c3ff 7b01          	ld	a,(OFST+0,sp)
1867  c401 ab0d          	add	a,#13
1869  c403 2015          	jp	L333
1870  c405               L153:
1871                     ; 758   else if (alpha2 == 'e') value = (uint8_t)(value + 0x0e);
1873  c405 a165          	cp	a,#101
1874  c407 2606          	jrne	L553
1877  c409 7b01          	ld	a,(OFST+0,sp)
1878  c40b ab0e          	add	a,#14
1880  c40d 200b          	jp	L333
1881  c40f               L553:
1882                     ; 759   else if (alpha2 == 'f') value = (uint8_t)(value + 0x0f);
1884  c40f a166          	cp	a,#102
1885  c411 2606          	jrne	L163
1888  c413 7b01          	ld	a,(OFST+0,sp)
1889  c415 ab0f          	add	a,#15
1892  c417 2001          	jra	L333
1893  c419               L163:
1894                     ; 760   else value = 0; // If an invalid entry is made convert it to 0
1896  c419 4f            	clr	a
1898  c41a               L333:
1899                     ; 762   return value;
1903  c41a 5b03          	addw	sp,#3
1904  c41c 81            	ret	
1955                     ; 766 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint32_t nDataLen)
1955                     ; 767 {
1956                     	switch	.text
1957  c41d               L7_CopyHttpHeader:
1959  c41d 89            	pushw	x
1960  c41e 89            	pushw	x
1961       00000002      OFST:	set	2
1964                     ; 770   nBytes = 0;
1966  c41f 5f            	clrw	x
1967  c420 1f01          	ldw	(OFST-1,sp),x
1969                     ; 772   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
1971  c422 aebe59        	ldw	x,#L704
1972  c425 89            	pushw	x
1973  c426 96            	ldw	x,sp
1974  c427 1c0005        	addw	x,#OFST+3
1975  c42a cdc1ec        	call	L3_CopyStringP
1977  c42d 5b02          	addw	sp,#2
1978  c42f 72fb01        	addw	x,(OFST-1,sp)
1979  c432 1f01          	ldw	(OFST-1,sp),x
1981                     ; 773   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1983  c434 aebe56        	ldw	x,#L114
1984  c437 89            	pushw	x
1985  c438 96            	ldw	x,sp
1986  c439 1c0005        	addw	x,#OFST+3
1987  c43c cdc1ec        	call	L3_CopyStringP
1989  c43f 5b02          	addw	sp,#2
1990  c441 72fb01        	addw	x,(OFST-1,sp)
1991  c444 1f01          	ldw	(OFST-1,sp),x
1993                     ; 775   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
1995  c446 aebe46        	ldw	x,#L314
1996  c449 89            	pushw	x
1997  c44a 96            	ldw	x,sp
1998  c44b 1c0005        	addw	x,#OFST+3
1999  c44e cdc1ec        	call	L3_CopyStringP
2001  c451 5b02          	addw	sp,#2
2002  c453 72fb01        	addw	x,(OFST-1,sp)
2003  c456 1f01          	ldw	(OFST-1,sp),x
2005                     ; 776   nBytes += CopyValue(&pBuffer, nDataLen);
2007  c458 1e09          	ldw	x,(OFST+7,sp)
2008  c45a 89            	pushw	x
2009  c45b 1e09          	ldw	x,(OFST+7,sp)
2010  c45d 89            	pushw	x
2011  c45e 96            	ldw	x,sp
2012  c45f 1c0007        	addw	x,#OFST+5
2013  c462 cdc214        	call	L5_CopyValue
2015  c465 5b04          	addw	sp,#4
2016  c467 72fb01        	addw	x,(OFST-1,sp)
2017  c46a 1f01          	ldw	(OFST-1,sp),x
2019                     ; 777   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2021  c46c aebe56        	ldw	x,#L114
2022  c46f 89            	pushw	x
2023  c470 96            	ldw	x,sp
2024  c471 1c0005        	addw	x,#OFST+3
2025  c474 cdc1ec        	call	L3_CopyStringP
2027  c477 5b02          	addw	sp,#2
2028  c479 72fb01        	addw	x,(OFST-1,sp)
2029  c47c 1f01          	ldw	(OFST-1,sp),x
2031                     ; 779   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type:text/html\r\n"));
2033  c47e aebe2d        	ldw	x,#L514
2034  c481 89            	pushw	x
2035  c482 96            	ldw	x,sp
2036  c483 1c0005        	addw	x,#OFST+3
2037  c486 cdc1ec        	call	L3_CopyStringP
2039  c489 5b02          	addw	sp,#2
2040  c48b 72fb01        	addw	x,(OFST-1,sp)
2041  c48e 1f01          	ldw	(OFST-1,sp),x
2043                     ; 780   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
2045  c490 aebe1a        	ldw	x,#L714
2046  c493 89            	pushw	x
2047  c494 96            	ldw	x,sp
2048  c495 1c0005        	addw	x,#OFST+3
2049  c498 cdc1ec        	call	L3_CopyStringP
2051  c49b 5b02          	addw	sp,#2
2052  c49d 72fb01        	addw	x,(OFST-1,sp)
2053  c4a0 1f01          	ldw	(OFST-1,sp),x
2055                     ; 781   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2057  c4a2 aebe56        	ldw	x,#L114
2058  c4a5 89            	pushw	x
2059  c4a6 96            	ldw	x,sp
2060  c4a7 1c0005        	addw	x,#OFST+3
2061  c4aa cdc1ec        	call	L3_CopyStringP
2063  c4ad 5b02          	addw	sp,#2
2064  c4af 72fb01        	addw	x,(OFST-1,sp)
2066                     ; 783   return nBytes;
2070  c4b2 5b04          	addw	sp,#4
2071  c4b4 81            	ret	
2210                     	switch	.const
2211  bd16               L421:
2212  bd16 c659          	dc.w	L124
2213  bd18 c667          	dc.w	L324
2214  bd1a c675          	dc.w	L524
2215  bd1c c682          	dc.w	L724
2216  bd1e c68f          	dc.w	L134
2217  bd20 c69c          	dc.w	L334
2218  bd22 c6a9          	dc.w	L534
2219  bd24 c6b6          	dc.w	L734
2220  bd26 c6c3          	dc.w	L144
2221  bd28 c6d0          	dc.w	L344
2222  bd2a c6dd          	dc.w	L544
2223  bd2c c6ea          	dc.w	L744
2224  bd2e               L422:
2225  bd2e c829          	dc.w	L354
2226  bd30 c83b          	dc.w	L554
2227  bd32 c84d          	dc.w	L754
2228  bd34 c85f          	dc.w	L164
2229  bd36 c871          	dc.w	L364
2230  bd38 c883          	dc.w	L564
2231  bd3a c895          	dc.w	L764
2232  bd3c c8a7          	dc.w	L174
2233  bd3e c8b9          	dc.w	L374
2234  bd40 c8cb          	dc.w	L574
2235  bd42 c8dd          	dc.w	L774
2236  bd44 c8ef          	dc.w	L105
2237  bd46 c901          	dc.w	L305
2238  bd48 c913          	dc.w	L505
2239  bd4a c925          	dc.w	L705
2240  bd4c c937          	dc.w	L115
2241  bd4e c948          	dc.w	L315
2242  bd50 c959          	dc.w	L515
2243  bd52 c96a          	dc.w	L715
2244  bd54 c97b          	dc.w	L125
2245  bd56 c98c          	dc.w	L325
2246  bd58 c99d          	dc.w	L525
2247                     ; 787 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
2247                     ; 788 {
2248                     	switch	.text
2249  c4b5               L11_CopyHttpData:
2251  c4b5 89            	pushw	x
2252  c4b6 5207          	subw	sp,#7
2253       00000007      OFST:	set	7
2256                     ; 804   nBytes = 0;
2258  c4b8 5f            	clrw	x
2259  c4b9 1f05          	ldw	(OFST-2,sp),x
2261                     ; 840   if (nMaxBytes > 400) nMaxBytes = 400; // limit just in case
2263  c4bb 1e10          	ldw	x,(OFST+9,sp)
2264  c4bd a30191        	cpw	x,#401
2265  c4c0 2403cccce4    	jrult	L306
2268  c4c5 ae0190        	ldw	x,#400
2269  c4c8 1f10          	ldw	(OFST+9,sp),x
2270  c4ca cccce4        	jra	L306
2271  c4cd               L106:
2272                     ; 863     if (*pDataLeft > 0) {
2274  c4cd 1e0e          	ldw	x,(OFST+7,sp)
2275  c4cf e601          	ld	a,(1,x)
2276  c4d1 fa            	or	a,(x)
2277  c4d2 2603cccced    	jreq	L506
2278                     ; 867       memcpy(&nByte, *ppData, 1);
2280  c4d7 96            	ldw	x,sp
2281  c4d8 5c            	incw	x
2282  c4d9 bf04          	ldw	c_x,x
2283  c4db 160c          	ldw	y,(OFST+5,sp)
2284  c4dd 90fe          	ldw	y,(y)
2285  c4df 90bf07        	ldw	c_y,y
2286  c4e2 ae0001        	ldw	x,#1
2287  c4e5               L25:
2288  c4e5 5a            	decw	x
2289  c4e6 92d607        	ld	a,([c_y.w],x)
2290  c4e9 92d704        	ld	([c_x.w],x),a
2291  c4ec 5d            	tnzw	x
2292  c4ed 26f6          	jrne	L25
2293                     ; 893       if (nByte == '%') {
2295  c4ef 7b01          	ld	a,(OFST-6,sp)
2296  c4f1 a125          	cp	a,#37
2297  c4f3 2703ccccc7    	jrne	L116
2298                     ; 894         *ppData = *ppData + 1;
2300  c4f8 1e0c          	ldw	x,(OFST+5,sp)
2301  c4fa 9093          	ldw	y,x
2302  c4fc fe            	ldw	x,(x)
2303  c4fd 5c            	incw	x
2304  c4fe 90ff          	ldw	(y),x
2305                     ; 895         *pDataLeft = *pDataLeft - 1;
2307  c500 1e0e          	ldw	x,(OFST+7,sp)
2308  c502 9093          	ldw	y,x
2309  c504 fe            	ldw	x,(x)
2310  c505 5a            	decw	x
2311  c506 90ff          	ldw	(y),x
2312                     ; 900         memcpy(&nParsedMode, *ppData, 1);
2314  c508 96            	ldw	x,sp
2315  c509 1c0003        	addw	x,#OFST-4
2316  c50c bf04          	ldw	c_x,x
2317  c50e 160c          	ldw	y,(OFST+5,sp)
2318  c510 90fe          	ldw	y,(y)
2319  c512 90bf07        	ldw	c_y,y
2320  c515 ae0001        	ldw	x,#1
2321  c518               L45:
2322  c518 5a            	decw	x
2323  c519 92d607        	ld	a,([c_y.w],x)
2324  c51c 92d704        	ld	([c_x.w],x),a
2325  c51f 5d            	tnzw	x
2326  c520 26f6          	jrne	L45
2327                     ; 901         *ppData = *ppData + 1;
2329  c522 1e0c          	ldw	x,(OFST+5,sp)
2330  c524 9093          	ldw	y,x
2331  c526 fe            	ldw	x,(x)
2332  c527 5c            	incw	x
2333  c528 90ff          	ldw	(y),x
2334                     ; 902         *pDataLeft = *pDataLeft - 1;
2336  c52a 1e0e          	ldw	x,(OFST+7,sp)
2337  c52c 9093          	ldw	y,x
2338  c52e fe            	ldw	x,(x)
2339  c52f 5a            	decw	x
2340  c530 90ff          	ldw	(y),x
2341                     ; 906         memcpy(&temp, *ppData, 1);
2343  c532 96            	ldw	x,sp
2344  c533 1c0002        	addw	x,#OFST-5
2345  c536 bf04          	ldw	c_x,x
2346  c538 160c          	ldw	y,(OFST+5,sp)
2347  c53a 90fe          	ldw	y,(y)
2348  c53c 90bf07        	ldw	c_y,y
2349  c53f ae0001        	ldw	x,#1
2350  c542               L65:
2351  c542 5a            	decw	x
2352  c543 92d607        	ld	a,([c_y.w],x)
2353  c546 92d704        	ld	([c_x.w],x),a
2354  c549 5d            	tnzw	x
2355  c54a 26f6          	jrne	L65
2356                     ; 907 	nParsedNum = (uint8_t)((temp - '0') * 10);
2358  c54c 7b02          	ld	a,(OFST-5,sp)
2359  c54e 97            	ld	xl,a
2360  c54f a60a          	ld	a,#10
2361  c551 42            	mul	x,a
2362  c552 9f            	ld	a,xl
2363  c553 a0e0          	sub	a,#224
2364  c555 6b04          	ld	(OFST-3,sp),a
2366                     ; 908         *ppData = *ppData + 1;
2368  c557 1e0c          	ldw	x,(OFST+5,sp)
2369  c559 9093          	ldw	y,x
2370  c55b fe            	ldw	x,(x)
2371  c55c 5c            	incw	x
2372  c55d 90ff          	ldw	(y),x
2373                     ; 909         *pDataLeft = *pDataLeft - 1;
2375  c55f 1e0e          	ldw	x,(OFST+7,sp)
2376  c561 9093          	ldw	y,x
2377  c563 fe            	ldw	x,(x)
2378  c564 5a            	decw	x
2379  c565 90ff          	ldw	(y),x
2380                     ; 913         memcpy(&temp, *ppData, 1);
2382  c567 96            	ldw	x,sp
2383  c568 1c0002        	addw	x,#OFST-5
2384  c56b bf04          	ldw	c_x,x
2385  c56d 160c          	ldw	y,(OFST+5,sp)
2386  c56f 90fe          	ldw	y,(y)
2387  c571 90bf07        	ldw	c_y,y
2388  c574 ae0001        	ldw	x,#1
2389  c577               L06:
2390  c577 5a            	decw	x
2391  c578 92d607        	ld	a,([c_y.w],x)
2392  c57b 92d704        	ld	([c_x.w],x),a
2393  c57e 5d            	tnzw	x
2394  c57f 26f6          	jrne	L06
2395                     ; 914 	nParsedNum = (uint8_t)(nParsedNum + temp - '0');
2397  c581 7b04          	ld	a,(OFST-3,sp)
2398  c583 1b02          	add	a,(OFST-5,sp)
2399  c585 a030          	sub	a,#48
2400  c587 6b04          	ld	(OFST-3,sp),a
2402                     ; 915         *ppData = *ppData + 1;
2404  c589 1e0c          	ldw	x,(OFST+5,sp)
2405  c58b 9093          	ldw	y,x
2406  c58d fe            	ldw	x,(x)
2407  c58e 5c            	incw	x
2408  c58f 90ff          	ldw	(y),x
2409                     ; 916         *pDataLeft = *pDataLeft - 1;
2411  c591 1e0e          	ldw	x,(OFST+7,sp)
2412  c593 9093          	ldw	y,x
2413  c595 fe            	ldw	x,(x)
2414  c596 5a            	decw	x
2415  c597 90ff          	ldw	(y),x
2416                     ; 926         if (nParsedMode == 'i') {
2418  c599 7b03          	ld	a,(OFST-4,sp)
2419  c59b a169          	cp	a,#105
2420  c59d 2614          	jrne	L316
2421                     ; 930 	  *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
2423  c59f 7b04          	ld	a,(OFST-3,sp)
2424  c5a1 cdd521        	call	_GpioGetPin
2426  c5a4 1e08          	ldw	x,(OFST+1,sp)
2427  c5a6 ab30          	add	a,#48
2428  c5a8 f7            	ld	(x),a
2429                     ; 931           pBuffer++;
2431  c5a9 5c            	incw	x
2432  c5aa 1f08          	ldw	(OFST+1,sp),x
2433                     ; 932           nBytes++;
2435  c5ac 1e05          	ldw	x,(OFST-2,sp)
2436  c5ae 5c            	incw	x
2437  c5af 1f05          	ldw	(OFST-2,sp),x
2440  c5b1 204e          	jra	L516
2441  c5b3               L316:
2442                     ; 956         else if (nParsedMode == 'o') {
2444  c5b3 a16f          	cp	a,#111
2445  c5b5 2624          	jrne	L716
2446                     ; 959           if ((uint8_t)(GpioGetPin(nParsedNum) == 1)) { // Insert 'checked'
2448  c5b7 7b04          	ld	a,(OFST-3,sp)
2449  c5b9 cdd521        	call	_GpioGetPin
2451  c5bc 4a            	dec	a
2452  c5bd 2642          	jrne	L516
2453                     ; 960             for(i=0; i<7; i++) {
2455  c5bf 6b07          	ld	(OFST+0,sp),a
2457  c5c1               L326:
2458                     ; 961               *pBuffer = checked[i];
2460  c5c1 5f            	clrw	x
2461  c5c2 97            	ld	xl,a
2462  c5c3 d68080        	ld	a,(L31_checked,x)
2463  c5c6 1e08          	ldw	x,(OFST+1,sp)
2464  c5c8 f7            	ld	(x),a
2465                     ; 962               pBuffer++;
2467  c5c9 5c            	incw	x
2468  c5ca 1f08          	ldw	(OFST+1,sp),x
2469                     ; 963               nBytes++;
2471  c5cc 1e05          	ldw	x,(OFST-2,sp)
2472  c5ce 5c            	incw	x
2473  c5cf 1f05          	ldw	(OFST-2,sp),x
2475                     ; 960             for(i=0; i<7; i++) {
2477  c5d1 0c07          	inc	(OFST+0,sp)
2481  c5d3 7b07          	ld	a,(OFST+0,sp)
2482  c5d5 a107          	cp	a,#7
2483  c5d7 25e8          	jrult	L326
2485  c5d9 2026          	jra	L516
2486  c5db               L716:
2487                     ; 970         else if (nParsedMode == 'p') {
2489  c5db a170          	cp	a,#112
2490  c5dd 2622          	jrne	L516
2491                     ; 973           if ((uint8_t)(GpioGetPin(nParsedNum) == 0)) { // Insert 'checked'
2493  c5df 7b04          	ld	a,(OFST-3,sp)
2494  c5e1 cdd521        	call	_GpioGetPin
2496  c5e4 4d            	tnz	a
2497  c5e5 261a          	jrne	L516
2498                     ; 974             for(i=0; i<7; i++) {
2500  c5e7 6b07          	ld	(OFST+0,sp),a
2502  c5e9               L146:
2503                     ; 975               *pBuffer = checked[i];
2505  c5e9 5f            	clrw	x
2506  c5ea 97            	ld	xl,a
2507  c5eb d68080        	ld	a,(L31_checked,x)
2508  c5ee 1e08          	ldw	x,(OFST+1,sp)
2509  c5f0 f7            	ld	(x),a
2510                     ; 976               pBuffer++;
2512  c5f1 5c            	incw	x
2513  c5f2 1f08          	ldw	(OFST+1,sp),x
2514                     ; 977               nBytes++;
2516  c5f4 1e05          	ldw	x,(OFST-2,sp)
2517  c5f6 5c            	incw	x
2518  c5f7 1f05          	ldw	(OFST-2,sp),x
2520                     ; 974             for(i=0; i<7; i++) {
2522  c5f9 0c07          	inc	(OFST+0,sp)
2526  c5fb 7b07          	ld	a,(OFST+0,sp)
2527  c5fd a107          	cp	a,#7
2528  c5ff 25e8          	jrult	L146
2530  c601               L516:
2531                     ; 984         if (nParsedMode == 'a') {
2533  c601 7b03          	ld	a,(OFST-4,sp)
2534  c603 a161          	cp	a,#97
2535  c605 263b          	jrne	L156
2536                     ; 986 	  for(i=0; i<20; i++) {
2538  c607 4f            	clr	a
2539  c608 6b07          	ld	(OFST+0,sp),a
2541  c60a               L356:
2542                     ; 987 	    if (ex_stored_devicename[i] != ' ') { // Don't write spaces out - confuses the
2544  c60a 5f            	clrw	x
2545  c60b 97            	ld	xl,a
2546  c60c d60038        	ld	a,(_ex_stored_devicename,x)
2547  c60f a120          	cp	a,#32
2548  c611 2712          	jreq	L166
2549                     ; 989               *pBuffer = (uint8_t)(ex_stored_devicename[i]);
2551  c613 7b07          	ld	a,(OFST+0,sp)
2552  c615 5f            	clrw	x
2553  c616 97            	ld	xl,a
2554  c617 d60038        	ld	a,(_ex_stored_devicename,x)
2555  c61a 1e08          	ldw	x,(OFST+1,sp)
2556  c61c f7            	ld	(x),a
2557                     ; 990               pBuffer++;
2559  c61d 5c            	incw	x
2560  c61e 1f08          	ldw	(OFST+1,sp),x
2561                     ; 991               nBytes++;
2563  c620 1e05          	ldw	x,(OFST-2,sp)
2564  c622 5c            	incw	x
2565  c623 1f05          	ldw	(OFST-2,sp),x
2567  c625               L166:
2568                     ; 986 	  for(i=0; i<20; i++) {
2570  c625 0c07          	inc	(OFST+0,sp)
2574  c627 7b07          	ld	a,(OFST+0,sp)
2575  c629 a114          	cp	a,#20
2576  c62b 25dd          	jrult	L356
2577                     ; 1006           *ppData = *ppData + 20;
2579  c62d 1e0c          	ldw	x,(OFST+5,sp)
2580  c62f 9093          	ldw	y,x
2581  c631 fe            	ldw	x,(x)
2582  c632 1c0014        	addw	x,#20
2583  c635 90ff          	ldw	(y),x
2584                     ; 1007           *pDataLeft = *pDataLeft - 20;
2586  c637 1e0e          	ldw	x,(OFST+7,sp)
2587  c639 9093          	ldw	y,x
2588  c63b fe            	ldw	x,(x)
2589  c63c 1d0014        	subw	x,#20
2591  c63f ccca1e        	jp	LC011
2592  c642               L156:
2593                     ; 1010         else if (nParsedMode == 'b') {
2595  c642 a162          	cp	a,#98
2596  c644 2703ccc742    	jrne	L566
2597                     ; 1015 	  advanceptrs = 0;
2599                     ; 1017           switch (nParsedNum)
2601  c649 7b04          	ld	a,(OFST-3,sp)
2603                     ; 1032 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2604  c64b a10c          	cp	a,#12
2605  c64d 2503ccc704    	jruge	L154
2606  c652 5f            	clrw	x
2607  c653 97            	ld	xl,a
2608  c654 58            	sllw	x
2609  c655 debd16        	ldw	x,(L421,x)
2610  c658 fc            	jp	(x)
2611  c659               L124:
2612                     ; 1020 	    case 0:  emb_itoa(ex_stored_hostaddr4, OctetArray, 10, 3); advanceptrs = 1; break;
2614  c659 4b03          	push	#3
2615  c65b 4b0a          	push	#10
2616  c65d ae0010        	ldw	x,#_OctetArray
2617  c660 89            	pushw	x
2618  c661 c60059        	ld	a,_ex_stored_hostaddr4
2623  c664 ccc6f5        	jp	LC003
2624  c667               L324:
2625                     ; 1021 	    case 1:  emb_itoa(ex_stored_hostaddr3, OctetArray, 10, 3); advanceptrs = 1; break;
2627  c667 4b03          	push	#3
2628  c669 4b0a          	push	#10
2629  c66b ae0010        	ldw	x,#_OctetArray
2630  c66e 89            	pushw	x
2631  c66f c60058        	ld	a,_ex_stored_hostaddr3
2636  c672 ccc6f5        	jp	LC003
2637  c675               L524:
2638                     ; 1022 	    case 2:  emb_itoa(ex_stored_hostaddr2, OctetArray, 10, 3); advanceptrs = 1; break;
2640  c675 4b03          	push	#3
2641  c677 4b0a          	push	#10
2642  c679 ae0010        	ldw	x,#_OctetArray
2643  c67c 89            	pushw	x
2644  c67d c60057        	ld	a,_ex_stored_hostaddr2
2649  c680 2073          	jp	LC003
2650  c682               L724:
2651                     ; 1023 	    case 3:  emb_itoa(ex_stored_hostaddr1, OctetArray, 10, 3); advanceptrs = 1; break;
2653  c682 4b03          	push	#3
2654  c684 4b0a          	push	#10
2655  c686 ae0010        	ldw	x,#_OctetArray
2656  c689 89            	pushw	x
2657  c68a c60056        	ld	a,_ex_stored_hostaddr1
2662  c68d 2066          	jp	LC003
2663  c68f               L134:
2664                     ; 1024 	    case 4:  emb_itoa(ex_stored_draddr4,   OctetArray, 10, 3); advanceptrs = 1; break;
2666  c68f 4b03          	push	#3
2667  c691 4b0a          	push	#10
2668  c693 ae0010        	ldw	x,#_OctetArray
2669  c696 89            	pushw	x
2670  c697 c60055        	ld	a,_ex_stored_draddr4
2675  c69a 2059          	jp	LC003
2676  c69c               L334:
2677                     ; 1025 	    case 5:  emb_itoa(ex_stored_draddr3,   OctetArray, 10, 3); advanceptrs = 1; break;
2679  c69c 4b03          	push	#3
2680  c69e 4b0a          	push	#10
2681  c6a0 ae0010        	ldw	x,#_OctetArray
2682  c6a3 89            	pushw	x
2683  c6a4 c60054        	ld	a,_ex_stored_draddr3
2688  c6a7 204c          	jp	LC003
2689  c6a9               L534:
2690                     ; 1026 	    case 6:  emb_itoa(ex_stored_draddr2,   OctetArray, 10, 3); advanceptrs = 1; break;
2692  c6a9 4b03          	push	#3
2693  c6ab 4b0a          	push	#10
2694  c6ad ae0010        	ldw	x,#_OctetArray
2695  c6b0 89            	pushw	x
2696  c6b1 c60053        	ld	a,_ex_stored_draddr2
2701  c6b4 203f          	jp	LC003
2702  c6b6               L734:
2703                     ; 1027 	    case 7:  emb_itoa(ex_stored_draddr1,   OctetArray, 10, 3); advanceptrs = 1; break;
2705  c6b6 4b03          	push	#3
2706  c6b8 4b0a          	push	#10
2707  c6ba ae0010        	ldw	x,#_OctetArray
2708  c6bd 89            	pushw	x
2709  c6be c60052        	ld	a,_ex_stored_draddr1
2714  c6c1 2032          	jp	LC003
2715  c6c3               L144:
2716                     ; 1028 	    case 8:  emb_itoa(ex_stored_netmask4,  OctetArray, 10, 3); advanceptrs = 1; break;
2718  c6c3 4b03          	push	#3
2719  c6c5 4b0a          	push	#10
2720  c6c7 ae0010        	ldw	x,#_OctetArray
2721  c6ca 89            	pushw	x
2722  c6cb c60051        	ld	a,_ex_stored_netmask4
2727  c6ce 2025          	jp	LC003
2728  c6d0               L344:
2729                     ; 1029 	    case 9:  emb_itoa(ex_stored_netmask3,  OctetArray, 10, 3); advanceptrs = 1; break;
2731  c6d0 4b03          	push	#3
2732  c6d2 4b0a          	push	#10
2733  c6d4 ae0010        	ldw	x,#_OctetArray
2734  c6d7 89            	pushw	x
2735  c6d8 c60050        	ld	a,_ex_stored_netmask3
2740  c6db 2018          	jp	LC003
2741  c6dd               L544:
2742                     ; 1030 	    case 10: emb_itoa(ex_stored_netmask2,  OctetArray, 10, 3); advanceptrs = 1; break;
2744  c6dd 4b03          	push	#3
2745  c6df 4b0a          	push	#10
2746  c6e1 ae0010        	ldw	x,#_OctetArray
2747  c6e4 89            	pushw	x
2748  c6e5 c6004f        	ld	a,_ex_stored_netmask2
2753  c6e8 200b          	jp	LC003
2754  c6ea               L744:
2755                     ; 1031 	    case 11: emb_itoa(ex_stored_netmask1,  OctetArray, 10, 3); advanceptrs = 1; break;
2757  c6ea 4b03          	push	#3
2758  c6ec 4b0a          	push	#10
2759  c6ee ae0010        	ldw	x,#_OctetArray
2760  c6f1 89            	pushw	x
2761  c6f2 c6004e        	ld	a,_ex_stored_netmask1
2762  c6f5               LC003:
2763  c6f5 b703          	ld	c_lreg+3,a
2764  c6f7 3f02          	clr	c_lreg+2
2765  c6f9 3f01          	clr	c_lreg+1
2766  c6fb 3f00          	clr	c_lreg
2767  c6fd be02          	ldw	x,c_lreg+2
2768  c6ff 89            	pushw	x
2769  c700 be00          	ldw	x,c_lreg
2774  c702 200a          	jra	L176
2775  c704               L154:
2776                     ; 1032 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2778  c704 4b03          	push	#3
2779  c706 4b0a          	push	#10
2780  c708 ae0010        	ldw	x,#_OctetArray
2781  c70b 89            	pushw	x
2782  c70c 5f            	clrw	x
2783  c70d 89            	pushw	x
2789  c70e               L176:
2790  c70e 89            	pushw	x
2791  c70f cdc278        	call	_emb_itoa
2792  c712 5b08          	addw	sp,#8
2805  c714 a601          	ld	a,#1
2806  c716 6b07          	ld	(OFST+0,sp),a
2808                     ; 1035 	  if (advanceptrs == 1) { // Copy OctetArray and advance pointers if one of the above
2810  c718 4a            	dec	a
2811  c719 2703cccce4    	jrne	L306
2812                     ; 1037             *pBuffer = (uint8_t)OctetArray[0];
2814  c71e 1e08          	ldw	x,(OFST+1,sp)
2815  c720 c60010        	ld	a,_OctetArray
2816  c723 f7            	ld	(x),a
2817                     ; 1038             pBuffer++;
2819  c724 5c            	incw	x
2820  c725 1f08          	ldw	(OFST+1,sp),x
2821                     ; 1039             nBytes++;
2823  c727 1e05          	ldw	x,(OFST-2,sp)
2824  c729 5c            	incw	x
2825  c72a 1f05          	ldw	(OFST-2,sp),x
2827                     ; 1041             *pBuffer = (uint8_t)OctetArray[1];
2829  c72c 1e08          	ldw	x,(OFST+1,sp)
2830  c72e c60011        	ld	a,_OctetArray+1
2831  c731 f7            	ld	(x),a
2832                     ; 1042             pBuffer++;
2834  c732 5c            	incw	x
2835  c733 1f08          	ldw	(OFST+1,sp),x
2836                     ; 1043             nBytes++;
2838  c735 1e05          	ldw	x,(OFST-2,sp)
2839  c737 5c            	incw	x
2840  c738 1f05          	ldw	(OFST-2,sp),x
2842                     ; 1045             *pBuffer = (uint8_t)OctetArray[2];
2844  c73a c60012        	ld	a,_OctetArray+2
2845  c73d 1e08          	ldw	x,(OFST+1,sp)
2846                     ; 1046             pBuffer++;
2847                     ; 1047             nBytes++;
2848  c73f ccc80e        	jp	LC010
2849  c742               L566:
2850                     ; 1051         else if (nParsedMode == 'c') {
2852  c742 a163          	cp	a,#99
2853  c744 2637          	jrne	L776
2854                     ; 1057           emb_itoa(ex_stored_port, OctetArray, 10, 5);
2856  c746 4b05          	push	#5
2857  c748 4b0a          	push	#10
2858  c74a ae0010        	ldw	x,#_OctetArray
2859  c74d 89            	pushw	x
2860  c74e ce004c        	ldw	x,_ex_stored_port
2861  c751 cdf5c6        	call	c_uitolx
2863  c754 be02          	ldw	x,c_lreg+2
2864  c756 89            	pushw	x
2865  c757 be00          	ldw	x,c_lreg
2866  c759 89            	pushw	x
2867  c75a cdc278        	call	_emb_itoa
2869  c75d 5b08          	addw	sp,#8
2870                     ; 1059 	  for(i=0; i<5; i++) {
2872  c75f 4f            	clr	a
2873  c760 6b07          	ld	(OFST+0,sp),a
2875  c762               L107:
2876                     ; 1060             *pBuffer = (uint8_t)OctetArray[i];
2878  c762 5f            	clrw	x
2879  c763 97            	ld	xl,a
2880  c764 d60010        	ld	a,(_OctetArray,x)
2881  c767 1e08          	ldw	x,(OFST+1,sp)
2882  c769 f7            	ld	(x),a
2883                     ; 1061             pBuffer++;
2885  c76a 5c            	incw	x
2886  c76b 1f08          	ldw	(OFST+1,sp),x
2887                     ; 1062             nBytes++;
2889  c76d 1e05          	ldw	x,(OFST-2,sp)
2890  c76f 5c            	incw	x
2891  c770 1f05          	ldw	(OFST-2,sp),x
2893                     ; 1059 	  for(i=0; i<5; i++) {
2895  c772 0c07          	inc	(OFST+0,sp)
2899  c774 7b07          	ld	a,(OFST+0,sp)
2900  c776 a105          	cp	a,#5
2901  c778 25e8          	jrult	L107
2903  c77a cccce4        	jra	L306
2904  c77d               L776:
2905                     ; 1066         else if (nParsedMode == 'd') {
2907  c77d a164          	cp	a,#100
2908  c77f 2703ccc812    	jrne	L117
2909                     ; 1071 	  if (nParsedNum == 0)      emb_itoa(uip_ethaddr1, OctetArray, 16, 2);
2911  c784 7b04          	ld	a,(OFST-3,sp)
2912  c786 260d          	jrne	L317
2915  c788 4b02          	push	#2
2916  c78a 4b10          	push	#16
2917  c78c ae0010        	ldw	x,#_OctetArray
2918  c78f 89            	pushw	x
2919  c790 c6001e        	ld	a,_uip_ethaddr1
2922  c793 2053          	jp	LC004
2923  c795               L317:
2924                     ; 1072 	  else if (nParsedNum == 1) emb_itoa(uip_ethaddr2, OctetArray, 16, 2);
2926  c795 a101          	cp	a,#1
2927  c797 260d          	jrne	L717
2930  c799 4b02          	push	#2
2931  c79b 4b10          	push	#16
2932  c79d ae0010        	ldw	x,#_OctetArray
2933  c7a0 89            	pushw	x
2934  c7a1 c6001f        	ld	a,_uip_ethaddr2
2937  c7a4 2042          	jp	LC004
2938  c7a6               L717:
2939                     ; 1073 	  else if (nParsedNum == 2) emb_itoa(uip_ethaddr3, OctetArray, 16, 2);
2941  c7a6 a102          	cp	a,#2
2942  c7a8 260d          	jrne	L327
2945  c7aa 4b02          	push	#2
2946  c7ac 4b10          	push	#16
2947  c7ae ae0010        	ldw	x,#_OctetArray
2948  c7b1 89            	pushw	x
2949  c7b2 c60020        	ld	a,_uip_ethaddr3
2952  c7b5 2031          	jp	LC004
2953  c7b7               L327:
2954                     ; 1074 	  else if (nParsedNum == 3) emb_itoa(uip_ethaddr4, OctetArray, 16, 2);
2956  c7b7 a103          	cp	a,#3
2957  c7b9 260d          	jrne	L727
2960  c7bb 4b02          	push	#2
2961  c7bd 4b10          	push	#16
2962  c7bf ae0010        	ldw	x,#_OctetArray
2963  c7c2 89            	pushw	x
2964  c7c3 c60021        	ld	a,_uip_ethaddr4
2967  c7c6 2020          	jp	LC004
2968  c7c8               L727:
2969                     ; 1075 	  else if (nParsedNum == 4) emb_itoa(uip_ethaddr5, OctetArray, 16, 2);
2971  c7c8 a104          	cp	a,#4
2972  c7ca 260d          	jrne	L337
2975  c7cc 4b02          	push	#2
2976  c7ce 4b10          	push	#16
2977  c7d0 ae0010        	ldw	x,#_OctetArray
2978  c7d3 89            	pushw	x
2979  c7d4 c60022        	ld	a,_uip_ethaddr5
2982  c7d7 200f          	jp	LC004
2983  c7d9               L337:
2984                     ; 1076 	  else if (nParsedNum == 5) emb_itoa(uip_ethaddr6, OctetArray, 16, 2);
2986  c7d9 a105          	cp	a,#5
2987  c7db 261e          	jrne	L517
2990  c7dd 4b02          	push	#2
2991  c7df 4b10          	push	#16
2992  c7e1 ae0010        	ldw	x,#_OctetArray
2993  c7e4 89            	pushw	x
2994  c7e5 c60023        	ld	a,_uip_ethaddr6
2996  c7e8               LC004:
2997  c7e8 b703          	ld	c_lreg+3,a
2998  c7ea 3f02          	clr	c_lreg+2
2999  c7ec 3f01          	clr	c_lreg+1
3000  c7ee 3f00          	clr	c_lreg
3001  c7f0 be02          	ldw	x,c_lreg+2
3002  c7f2 89            	pushw	x
3003  c7f3 be00          	ldw	x,c_lreg
3004  c7f5 89            	pushw	x
3005  c7f6 cdc278        	call	_emb_itoa
3006  c7f9 5b08          	addw	sp,#8
3007  c7fb               L517:
3008                     ; 1078           *pBuffer = OctetArray[0];
3010  c7fb 1e08          	ldw	x,(OFST+1,sp)
3011  c7fd c60010        	ld	a,_OctetArray
3012  c800 f7            	ld	(x),a
3013                     ; 1079           pBuffer++;
3015  c801 5c            	incw	x
3016  c802 1f08          	ldw	(OFST+1,sp),x
3017                     ; 1080           nBytes++;
3019  c804 1e05          	ldw	x,(OFST-2,sp)
3020  c806 5c            	incw	x
3021  c807 1f05          	ldw	(OFST-2,sp),x
3023                     ; 1082           *pBuffer = OctetArray[1];
3025  c809 c60011        	ld	a,_OctetArray+1
3026  c80c 1e08          	ldw	x,(OFST+1,sp)
3027  c80e               LC010:
3028  c80e f7            	ld	(x),a
3029                     ; 1083           pBuffer++;
3030                     ; 1084           nBytes++;
3032  c80f ccccdc        	jp	LC009
3033  c812               L117:
3034                     ; 1089         else if (nParsedMode == 'e') {
3036  c812 a165          	cp	a,#101
3037  c814 2703ccc9ed    	jrne	L347
3038                     ; 1116           switch (nParsedNum)
3040  c819 7b04          	ld	a,(OFST-3,sp)
3042                     ; 1141 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3043  c81b a116          	cp	a,#22
3044  c81d 2503ccc9ae    	jruge	L725
3045  c822 5f            	clrw	x
3046  c823 97            	ld	xl,a
3047  c824 58            	sllw	x
3048  c825 debd2e        	ldw	x,(L422,x)
3049  c828 fc            	jp	(x)
3050  c829               L354:
3051                     ; 1119 	    case 0:  emb_itoa(uip_stat.ip.drop,      OctetArray, 10, 10); break;
3053  c829 4b0a          	push	#10
3054  c82b 4b0a          	push	#10
3055  c82d ae0010        	ldw	x,#_OctetArray
3056  c830 89            	pushw	x
3057  c831 ce008b        	ldw	x,_uip_stat+2
3058  c834 89            	pushw	x
3059  c835 ce0089        	ldw	x,_uip_stat
3063  c838 ccc9b8        	jra	L747
3064  c83b               L554:
3065                     ; 1120 	    case 1:  emb_itoa(uip_stat.ip.recv,      OctetArray, 10, 10); break;
3067  c83b 4b0a          	push	#10
3068  c83d 4b0a          	push	#10
3069  c83f ae0010        	ldw	x,#_OctetArray
3070  c842 89            	pushw	x
3071  c843 ce008f        	ldw	x,_uip_stat+6
3072  c846 89            	pushw	x
3073  c847 ce008d        	ldw	x,_uip_stat+4
3077  c84a ccc9b8        	jra	L747
3078  c84d               L754:
3079                     ; 1121 	    case 2:  emb_itoa(uip_stat.ip.sent,      OctetArray, 10, 10); break;
3081  c84d 4b0a          	push	#10
3082  c84f 4b0a          	push	#10
3083  c851 ae0010        	ldw	x,#_OctetArray
3084  c854 89            	pushw	x
3085  c855 ce0093        	ldw	x,_uip_stat+10
3086  c858 89            	pushw	x
3087  c859 ce0091        	ldw	x,_uip_stat+8
3091  c85c ccc9b8        	jra	L747
3092  c85f               L164:
3093                     ; 1122 	    case 3:  emb_itoa(uip_stat.ip.vhlerr,    OctetArray, 10, 10); break;
3095  c85f 4b0a          	push	#10
3096  c861 4b0a          	push	#10
3097  c863 ae0010        	ldw	x,#_OctetArray
3098  c866 89            	pushw	x
3099  c867 ce0097        	ldw	x,_uip_stat+14
3100  c86a 89            	pushw	x
3101  c86b ce0095        	ldw	x,_uip_stat+12
3105  c86e ccc9b8        	jra	L747
3106  c871               L364:
3107                     ; 1123 	    case 4:  emb_itoa(uip_stat.ip.hblenerr,  OctetArray, 10, 10); break;
3109  c871 4b0a          	push	#10
3110  c873 4b0a          	push	#10
3111  c875 ae0010        	ldw	x,#_OctetArray
3112  c878 89            	pushw	x
3113  c879 ce009b        	ldw	x,_uip_stat+18
3114  c87c 89            	pushw	x
3115  c87d ce0099        	ldw	x,_uip_stat+16
3119  c880 ccc9b8        	jra	L747
3120  c883               L564:
3121                     ; 1124 	    case 5:  emb_itoa(uip_stat.ip.lblenerr,  OctetArray, 10, 10); break;
3123  c883 4b0a          	push	#10
3124  c885 4b0a          	push	#10
3125  c887 ae0010        	ldw	x,#_OctetArray
3126  c88a 89            	pushw	x
3127  c88b ce009f        	ldw	x,_uip_stat+22
3128  c88e 89            	pushw	x
3129  c88f ce009d        	ldw	x,_uip_stat+20
3133  c892 ccc9b8        	jra	L747
3134  c895               L764:
3135                     ; 1125 	    case 6:  emb_itoa(uip_stat.ip.fragerr,   OctetArray, 10, 10); break;
3137  c895 4b0a          	push	#10
3138  c897 4b0a          	push	#10
3139  c899 ae0010        	ldw	x,#_OctetArray
3140  c89c 89            	pushw	x
3141  c89d ce00a3        	ldw	x,_uip_stat+26
3142  c8a0 89            	pushw	x
3143  c8a1 ce00a1        	ldw	x,_uip_stat+24
3147  c8a4 ccc9b8        	jra	L747
3148  c8a7               L174:
3149                     ; 1126 	    case 7:  emb_itoa(uip_stat.ip.chkerr,    OctetArray, 10, 10); break;
3151  c8a7 4b0a          	push	#10
3152  c8a9 4b0a          	push	#10
3153  c8ab ae0010        	ldw	x,#_OctetArray
3154  c8ae 89            	pushw	x
3155  c8af ce00a7        	ldw	x,_uip_stat+30
3156  c8b2 89            	pushw	x
3157  c8b3 ce00a5        	ldw	x,_uip_stat+28
3161  c8b6 ccc9b8        	jra	L747
3162  c8b9               L374:
3163                     ; 1127 	    case 8:  emb_itoa(uip_stat.ip.protoerr,  OctetArray, 10, 10); break;
3165  c8b9 4b0a          	push	#10
3166  c8bb 4b0a          	push	#10
3167  c8bd ae0010        	ldw	x,#_OctetArray
3168  c8c0 89            	pushw	x
3169  c8c1 ce00ab        	ldw	x,_uip_stat+34
3170  c8c4 89            	pushw	x
3171  c8c5 ce00a9        	ldw	x,_uip_stat+32
3175  c8c8 ccc9b8        	jra	L747
3176  c8cb               L574:
3177                     ; 1128 	    case 9:  emb_itoa(uip_stat.icmp.drop,    OctetArray, 10, 10); break;
3179  c8cb 4b0a          	push	#10
3180  c8cd 4b0a          	push	#10
3181  c8cf ae0010        	ldw	x,#_OctetArray
3182  c8d2 89            	pushw	x
3183  c8d3 ce00af        	ldw	x,_uip_stat+38
3184  c8d6 89            	pushw	x
3185  c8d7 ce00ad        	ldw	x,_uip_stat+36
3189  c8da ccc9b8        	jra	L747
3190  c8dd               L774:
3191                     ; 1129 	    case 10: emb_itoa(uip_stat.icmp.recv,    OctetArray, 10, 10); break;
3193  c8dd 4b0a          	push	#10
3194  c8df 4b0a          	push	#10
3195  c8e1 ae0010        	ldw	x,#_OctetArray
3196  c8e4 89            	pushw	x
3197  c8e5 ce00b3        	ldw	x,_uip_stat+42
3198  c8e8 89            	pushw	x
3199  c8e9 ce00b1        	ldw	x,_uip_stat+40
3203  c8ec ccc9b8        	jra	L747
3204  c8ef               L105:
3205                     ; 1130 	    case 11: emb_itoa(uip_stat.icmp.sent,    OctetArray, 10, 10); break;
3207  c8ef 4b0a          	push	#10
3208  c8f1 4b0a          	push	#10
3209  c8f3 ae0010        	ldw	x,#_OctetArray
3210  c8f6 89            	pushw	x
3211  c8f7 ce00b7        	ldw	x,_uip_stat+46
3212  c8fa 89            	pushw	x
3213  c8fb ce00b5        	ldw	x,_uip_stat+44
3217  c8fe ccc9b8        	jra	L747
3218  c901               L305:
3219                     ; 1131 	    case 12: emb_itoa(uip_stat.icmp.typeerr, OctetArray, 10, 10); break;
3221  c901 4b0a          	push	#10
3222  c903 4b0a          	push	#10
3223  c905 ae0010        	ldw	x,#_OctetArray
3224  c908 89            	pushw	x
3225  c909 ce00bb        	ldw	x,_uip_stat+50
3226  c90c 89            	pushw	x
3227  c90d ce00b9        	ldw	x,_uip_stat+48
3231  c910 ccc9b8        	jra	L747
3232  c913               L505:
3233                     ; 1132 	    case 13: emb_itoa(uip_stat.tcp.drop,     OctetArray, 10, 10); break;
3235  c913 4b0a          	push	#10
3236  c915 4b0a          	push	#10
3237  c917 ae0010        	ldw	x,#_OctetArray
3238  c91a 89            	pushw	x
3239  c91b ce00bf        	ldw	x,_uip_stat+54
3240  c91e 89            	pushw	x
3241  c91f ce00bd        	ldw	x,_uip_stat+52
3245  c922 ccc9b8        	jra	L747
3246  c925               L705:
3247                     ; 1133 	    case 14: emb_itoa(uip_stat.tcp.recv,     OctetArray, 10, 10); break;
3249  c925 4b0a          	push	#10
3250  c927 4b0a          	push	#10
3251  c929 ae0010        	ldw	x,#_OctetArray
3252  c92c 89            	pushw	x
3253  c92d ce00c3        	ldw	x,_uip_stat+58
3254  c930 89            	pushw	x
3255  c931 ce00c1        	ldw	x,_uip_stat+56
3259  c934 ccc9b8        	jra	L747
3260  c937               L115:
3261                     ; 1134 	    case 15: emb_itoa(uip_stat.tcp.sent,     OctetArray, 10, 10); break;
3263  c937 4b0a          	push	#10
3264  c939 4b0a          	push	#10
3265  c93b ae0010        	ldw	x,#_OctetArray
3266  c93e 89            	pushw	x
3267  c93f ce00c7        	ldw	x,_uip_stat+62
3268  c942 89            	pushw	x
3269  c943 ce00c5        	ldw	x,_uip_stat+60
3273  c946 2070          	jra	L747
3274  c948               L315:
3275                     ; 1135 	    case 16: emb_itoa(uip_stat.tcp.chkerr,   OctetArray, 10, 10); break;
3277  c948 4b0a          	push	#10
3278  c94a 4b0a          	push	#10
3279  c94c ae0010        	ldw	x,#_OctetArray
3280  c94f 89            	pushw	x
3281  c950 ce00cb        	ldw	x,_uip_stat+66
3282  c953 89            	pushw	x
3283  c954 ce00c9        	ldw	x,_uip_stat+64
3287  c957 205f          	jra	L747
3288  c959               L515:
3289                     ; 1136 	    case 17: emb_itoa(uip_stat.tcp.ackerr,   OctetArray, 10, 10); break;
3291  c959 4b0a          	push	#10
3292  c95b 4b0a          	push	#10
3293  c95d ae0010        	ldw	x,#_OctetArray
3294  c960 89            	pushw	x
3295  c961 ce00cf        	ldw	x,_uip_stat+70
3296  c964 89            	pushw	x
3297  c965 ce00cd        	ldw	x,_uip_stat+68
3301  c968 204e          	jra	L747
3302  c96a               L715:
3303                     ; 1137 	    case 18: emb_itoa(uip_stat.tcp.rst,      OctetArray, 10, 10); break;
3305  c96a 4b0a          	push	#10
3306  c96c 4b0a          	push	#10
3307  c96e ae0010        	ldw	x,#_OctetArray
3308  c971 89            	pushw	x
3309  c972 ce00d3        	ldw	x,_uip_stat+74
3310  c975 89            	pushw	x
3311  c976 ce00d1        	ldw	x,_uip_stat+72
3315  c979 203d          	jra	L747
3316  c97b               L125:
3317                     ; 1138 	    case 19: emb_itoa(uip_stat.tcp.rexmit,   OctetArray, 10, 10); break;
3319  c97b 4b0a          	push	#10
3320  c97d 4b0a          	push	#10
3321  c97f ae0010        	ldw	x,#_OctetArray
3322  c982 89            	pushw	x
3323  c983 ce00d7        	ldw	x,_uip_stat+78
3324  c986 89            	pushw	x
3325  c987 ce00d5        	ldw	x,_uip_stat+76
3329  c98a 202c          	jra	L747
3330  c98c               L325:
3331                     ; 1139 	    case 20: emb_itoa(uip_stat.tcp.syndrop,  OctetArray, 10, 10); break;
3333  c98c 4b0a          	push	#10
3334  c98e 4b0a          	push	#10
3335  c990 ae0010        	ldw	x,#_OctetArray
3336  c993 89            	pushw	x
3337  c994 ce00db        	ldw	x,_uip_stat+82
3338  c997 89            	pushw	x
3339  c998 ce00d9        	ldw	x,_uip_stat+80
3343  c99b 201b          	jra	L747
3344  c99d               L525:
3345                     ; 1140 	    case 21: emb_itoa(uip_stat.tcp.synrst,   OctetArray, 10, 10); break;
3347  c99d 4b0a          	push	#10
3348  c99f 4b0a          	push	#10
3349  c9a1 ae0010        	ldw	x,#_OctetArray
3350  c9a4 89            	pushw	x
3351  c9a5 ce00df        	ldw	x,_uip_stat+86
3352  c9a8 89            	pushw	x
3353  c9a9 ce00dd        	ldw	x,_uip_stat+84
3357  c9ac 200a          	jra	L747
3358  c9ae               L725:
3359                     ; 1141 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3361  c9ae 4b0a          	push	#10
3362  c9b0 4b0a          	push	#10
3363  c9b2 ae0010        	ldw	x,#_OctetArray
3364  c9b5 89            	pushw	x
3365  c9b6 5f            	clrw	x
3366  c9b7 89            	pushw	x
3370  c9b8               L747:
3371  c9b8 89            	pushw	x
3372  c9b9 cdc278        	call	_emb_itoa
3373  c9bc 5b08          	addw	sp,#8
3374                     ; 1144 	  for (i=0; i<10; i++) {
3376  c9be 4f            	clr	a
3377  c9bf 6b07          	ld	(OFST+0,sp),a
3379  c9c1               L157:
3380                     ; 1145             *pBuffer = OctetArray[i];
3382  c9c1 5f            	clrw	x
3383  c9c2 97            	ld	xl,a
3384  c9c3 d60010        	ld	a,(_OctetArray,x)
3385  c9c6 1e08          	ldw	x,(OFST+1,sp)
3386  c9c8 f7            	ld	(x),a
3387                     ; 1146             pBuffer++;
3389  c9c9 5c            	incw	x
3390  c9ca 1f08          	ldw	(OFST+1,sp),x
3391                     ; 1147             nBytes++;
3393  c9cc 1e05          	ldw	x,(OFST-2,sp)
3394  c9ce 5c            	incw	x
3395  c9cf 1f05          	ldw	(OFST-2,sp),x
3397                     ; 1144 	  for (i=0; i<10; i++) {
3399  c9d1 0c07          	inc	(OFST+0,sp)
3403  c9d3 7b07          	ld	a,(OFST+0,sp)
3404  c9d5 a10a          	cp	a,#10
3405  c9d7 25e8          	jrult	L157
3406                     ; 1152           *ppData = *ppData + 10;
3408  c9d9 1e0c          	ldw	x,(OFST+5,sp)
3409  c9db 9093          	ldw	y,x
3410  c9dd fe            	ldw	x,(x)
3411  c9de 1c000a        	addw	x,#10
3412  c9e1 90ff          	ldw	(y),x
3413                     ; 1153           *pDataLeft = *pDataLeft - 10;
3415  c9e3 1e0e          	ldw	x,(OFST+7,sp)
3416  c9e5 9093          	ldw	y,x
3417  c9e7 fe            	ldw	x,(x)
3418  c9e8 1d000a        	subw	x,#10
3420  c9eb 2031          	jp	LC011
3421  c9ed               L347:
3422                     ; 1158         else if (nParsedMode == 'f') {
3424  c9ed a166          	cp	a,#102
3425  c9ef 2632          	jrne	L167
3426                     ; 1161 	  for(i=0; i<16; i++) {
3428  c9f1 4f            	clr	a
3429  c9f2 6b07          	ld	(OFST+0,sp),a
3431  c9f4               L367:
3432                     ; 1162 	    *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
3434  c9f4 cdd521        	call	_GpioGetPin
3436  c9f7 1e08          	ldw	x,(OFST+1,sp)
3437  c9f9 ab30          	add	a,#48
3438  c9fb f7            	ld	(x),a
3439                     ; 1163             pBuffer++;
3441  c9fc 5c            	incw	x
3442  c9fd 1f08          	ldw	(OFST+1,sp),x
3443                     ; 1164             nBytes++;
3445  c9ff 1e05          	ldw	x,(OFST-2,sp)
3446  ca01 5c            	incw	x
3447  ca02 1f05          	ldw	(OFST-2,sp),x
3449                     ; 1161 	  for(i=0; i<16; i++) {
3451  ca04 0c07          	inc	(OFST+0,sp)
3455  ca06 7b07          	ld	a,(OFST+0,sp)
3456  ca08 a110          	cp	a,#16
3457  ca0a 25e8          	jrult	L367
3458                     ; 1168           *ppData = *ppData + 16;
3460  ca0c 1e0c          	ldw	x,(OFST+5,sp)
3461  ca0e 9093          	ldw	y,x
3462  ca10 fe            	ldw	x,(x)
3463  ca11 1c0010        	addw	x,#16
3464  ca14 90ff          	ldw	(y),x
3465                     ; 1169           *pDataLeft = *pDataLeft - 16;
3467  ca16 1e0e          	ldw	x,(OFST+7,sp)
3468  ca18 9093          	ldw	y,x
3469  ca1a fe            	ldw	x,(x)
3470  ca1b 1d0010        	subw	x,#16
3471  ca1e               LC011:
3472  ca1e 90ff          	ldw	(y),x
3474  ca20 cccce4        	jra	L306
3475  ca23               L167:
3476                     ; 1172         else if (nParsedMode == 'g') {
3478  ca23 a167          	cp	a,#103
3479  ca25 2623          	jrne	L377
3480                     ; 1176 	  if (invert_output == 1) {  // Insert 'checked'
3482  ca27 c6005e        	ld	a,_invert_output
3483  ca2a 4a            	dec	a
3484  ca2b 26f3          	jrne	L306
3485                     ; 1177             for(i=0; i<7; i++) {
3487  ca2d 6b07          	ld	(OFST+0,sp),a
3489  ca2f               L777:
3490                     ; 1178               *pBuffer = checked[i];
3492  ca2f 5f            	clrw	x
3493  ca30 97            	ld	xl,a
3494  ca31 d68080        	ld	a,(L31_checked,x)
3495  ca34 1e08          	ldw	x,(OFST+1,sp)
3496  ca36 f7            	ld	(x),a
3497                     ; 1179               pBuffer++;
3499  ca37 5c            	incw	x
3500  ca38 1f08          	ldw	(OFST+1,sp),x
3501                     ; 1180               nBytes++;
3503  ca3a 1e05          	ldw	x,(OFST-2,sp)
3504  ca3c 5c            	incw	x
3505  ca3d 1f05          	ldw	(OFST-2,sp),x
3507                     ; 1177             for(i=0; i<7; i++) {
3509  ca3f 0c07          	inc	(OFST+0,sp)
3513  ca41 7b07          	ld	a,(OFST+0,sp)
3514  ca43 a107          	cp	a,#7
3515  ca45 25e8          	jrult	L777
3516  ca47 cccce4        	jra	L306
3517  ca4a               L377:
3518                     ; 1185         else if (nParsedMode == 'h') {
3520  ca4a a168          	cp	a,#104
3521  ca4c 2622          	jrne	L7001
3522                     ; 1190 	  if (invert_output == 0) {  // Insert 'checked'
3524  ca4e c6005e        	ld	a,_invert_output
3525  ca51 26f4          	jrne	L306
3526                     ; 1191             for(i=0; i<7; i++) {
3528  ca53 6b07          	ld	(OFST+0,sp),a
3530  ca55               L3101:
3531                     ; 1192               *pBuffer = checked[i];
3533  ca55 5f            	clrw	x
3534  ca56 97            	ld	xl,a
3535  ca57 d68080        	ld	a,(L31_checked,x)
3536  ca5a 1e08          	ldw	x,(OFST+1,sp)
3537  ca5c f7            	ld	(x),a
3538                     ; 1193               pBuffer++;
3540  ca5d 5c            	incw	x
3541  ca5e 1f08          	ldw	(OFST+1,sp),x
3542                     ; 1194               nBytes++;
3544  ca60 1e05          	ldw	x,(OFST-2,sp)
3545  ca62 5c            	incw	x
3546  ca63 1f05          	ldw	(OFST-2,sp),x
3548                     ; 1191             for(i=0; i<7; i++) {
3550  ca65 0c07          	inc	(OFST+0,sp)
3554  ca67 7b07          	ld	a,(OFST+0,sp)
3555  ca69 a107          	cp	a,#7
3556  ca6b 25e8          	jrult	L3101
3557  ca6d cccce4        	jra	L306
3558  ca70               L7001:
3559                     ; 1199         else if (nParsedMode == 'x') {
3561  ca70 a178          	cp	a,#120
3562  ca72 26f9          	jrne	L306
3563                     ; 1209           *pBuffer = 'h'; pBuffer++; nBytes++;
3565  ca74 1e08          	ldw	x,(OFST+1,sp)
3566  ca76 a668          	ld	a,#104
3567  ca78 f7            	ld	(x),a
3570  ca79 5c            	incw	x
3571  ca7a 1f08          	ldw	(OFST+1,sp),x
3574  ca7c 1e05          	ldw	x,(OFST-2,sp)
3575  ca7e 5c            	incw	x
3576  ca7f 1f05          	ldw	(OFST-2,sp),x
3578                     ; 1210           *pBuffer = 't'; pBuffer++; nBytes++;
3580  ca81 1e08          	ldw	x,(OFST+1,sp)
3581  ca83 a674          	ld	a,#116
3582  ca85 f7            	ld	(x),a
3585  ca86 5c            	incw	x
3586  ca87 1f08          	ldw	(OFST+1,sp),x
3589  ca89 1e05          	ldw	x,(OFST-2,sp)
3590  ca8b 5c            	incw	x
3591  ca8c 1f05          	ldw	(OFST-2,sp),x
3593                     ; 1211           *pBuffer = 't'; pBuffer++; nBytes++;
3595  ca8e 1e08          	ldw	x,(OFST+1,sp)
3596  ca90 f7            	ld	(x),a
3599  ca91 5c            	incw	x
3600  ca92 1f08          	ldw	(OFST+1,sp),x
3603  ca94 1e05          	ldw	x,(OFST-2,sp)
3604  ca96 5c            	incw	x
3605  ca97 1f05          	ldw	(OFST-2,sp),x
3607                     ; 1212           *pBuffer = 'p'; pBuffer++; nBytes++;
3609  ca99 1e08          	ldw	x,(OFST+1,sp)
3610  ca9b a670          	ld	a,#112
3611  ca9d f7            	ld	(x),a
3614  ca9e 5c            	incw	x
3615  ca9f 1f08          	ldw	(OFST+1,sp),x
3618  caa1 1e05          	ldw	x,(OFST-2,sp)
3619  caa3 5c            	incw	x
3620  caa4 1f05          	ldw	(OFST-2,sp),x
3622                     ; 1213           *pBuffer = ':'; pBuffer++; nBytes++;
3624  caa6 1e08          	ldw	x,(OFST+1,sp)
3625  caa8 a63a          	ld	a,#58
3626  caaa f7            	ld	(x),a
3629  caab 5c            	incw	x
3630  caac 1f08          	ldw	(OFST+1,sp),x
3633  caae 1e05          	ldw	x,(OFST-2,sp)
3634  cab0 5c            	incw	x
3635  cab1 1f05          	ldw	(OFST-2,sp),x
3637                     ; 1214           *pBuffer = '/'; pBuffer++; nBytes++;
3639  cab3 1e08          	ldw	x,(OFST+1,sp)
3640  cab5 a62f          	ld	a,#47
3641  cab7 f7            	ld	(x),a
3644  cab8 5c            	incw	x
3645  cab9 1f08          	ldw	(OFST+1,sp),x
3648  cabb 1e05          	ldw	x,(OFST-2,sp)
3649  cabd 5c            	incw	x
3650  cabe 1f05          	ldw	(OFST-2,sp),x
3652                     ; 1215           *pBuffer = '/'; pBuffer++; nBytes++;
3654  cac0 1e08          	ldw	x,(OFST+1,sp)
3655  cac2 f7            	ld	(x),a
3658  cac3 5c            	incw	x
3659  cac4 1f08          	ldw	(OFST+1,sp),x
3662  cac6 1e05          	ldw	x,(OFST-2,sp)
3663  cac8 5c            	incw	x
3664  cac9 1f05          	ldw	(OFST-2,sp),x
3666                     ; 1219           emb_itoa(ex_stored_hostaddr4,  OctetArray, 10, 3);
3668  cacb 4b03          	push	#3
3669  cacd 4b0a          	push	#10
3670  cacf ae0010        	ldw	x,#_OctetArray
3671  cad2 89            	pushw	x
3672  cad3 5500590003    	mov	c_lreg+3,_ex_stored_hostaddr4
3673  cad8 3f02          	clr	c_lreg+2
3674  cada 3f01          	clr	c_lreg+1
3675  cadc 3f00          	clr	c_lreg
3676  cade be02          	ldw	x,c_lreg+2
3677  cae0 89            	pushw	x
3678  cae1 be00          	ldw	x,c_lreg
3679  cae3 89            	pushw	x
3680  cae4 cdc278        	call	_emb_itoa
3682  cae7 5b08          	addw	sp,#8
3683                     ; 1221 	  if (OctetArray[0] != '0') {
3685  cae9 c60010        	ld	a,_OctetArray
3686  caec a130          	cp	a,#48
3687  caee 270b          	jreq	L5201
3688                     ; 1222 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3690  caf0 1e08          	ldw	x,(OFST+1,sp)
3691  caf2 f7            	ld	(x),a
3694  caf3 5c            	incw	x
3695  caf4 1f08          	ldw	(OFST+1,sp),x
3698  caf6 1e05          	ldw	x,(OFST-2,sp)
3699  caf8 5c            	incw	x
3700  caf9 1f05          	ldw	(OFST-2,sp),x
3702  cafb               L5201:
3703                     ; 1224 	  if (OctetArray[0] != '0') {
3705  cafb a130          	cp	a,#48
3706  cafd 2707          	jreq	L7201
3707                     ; 1225             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3709  caff 1e08          	ldw	x,(OFST+1,sp)
3710  cb01 c60011        	ld	a,_OctetArray+1
3714  cb04 2009          	jp	LC005
3715  cb06               L7201:
3716                     ; 1227 	  else if (OctetArray[1] != '0') {
3718  cb06 c60011        	ld	a,_OctetArray+1
3719  cb09 a130          	cp	a,#48
3720  cb0b 270b          	jreq	L1301
3721                     ; 1228             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3723  cb0d 1e08          	ldw	x,(OFST+1,sp)
3728  cb0f               LC005:
3729  cb0f f7            	ld	(x),a
3731  cb10 5c            	incw	x
3732  cb11 1f08          	ldw	(OFST+1,sp),x
3734  cb13 1e05          	ldw	x,(OFST-2,sp)
3735  cb15 5c            	incw	x
3736  cb16 1f05          	ldw	(OFST-2,sp),x
3738  cb18               L1301:
3739                     ; 1230           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3741  cb18 1e08          	ldw	x,(OFST+1,sp)
3742  cb1a c60012        	ld	a,_OctetArray+2
3743  cb1d f7            	ld	(x),a
3746  cb1e 5c            	incw	x
3747  cb1f 1f08          	ldw	(OFST+1,sp),x
3750  cb21 1e05          	ldw	x,(OFST-2,sp)
3751  cb23 5c            	incw	x
3752  cb24 1f05          	ldw	(OFST-2,sp),x
3754                     ; 1232           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3756  cb26 1e08          	ldw	x,(OFST+1,sp)
3757  cb28 a62e          	ld	a,#46
3758  cb2a f7            	ld	(x),a
3761  cb2b 5c            	incw	x
3762  cb2c 1f08          	ldw	(OFST+1,sp),x
3765  cb2e 1e05          	ldw	x,(OFST-2,sp)
3766  cb30 5c            	incw	x
3767  cb31 1f05          	ldw	(OFST-2,sp),x
3769                     ; 1235           emb_itoa(ex_stored_hostaddr3,  OctetArray, 10, 3);
3771  cb33 4b03          	push	#3
3772  cb35 4b0a          	push	#10
3773  cb37 ae0010        	ldw	x,#_OctetArray
3774  cb3a 89            	pushw	x
3775  cb3b 5500580003    	mov	c_lreg+3,_ex_stored_hostaddr3
3776  cb40 3f02          	clr	c_lreg+2
3777  cb42 3f01          	clr	c_lreg+1
3778  cb44 3f00          	clr	c_lreg
3779  cb46 be02          	ldw	x,c_lreg+2
3780  cb48 89            	pushw	x
3781  cb49 be00          	ldw	x,c_lreg
3782  cb4b 89            	pushw	x
3783  cb4c cdc278        	call	_emb_itoa
3785  cb4f 5b08          	addw	sp,#8
3786                     ; 1237 	  if (OctetArray[0] != '0') {
3788  cb51 c60010        	ld	a,_OctetArray
3789  cb54 a130          	cp	a,#48
3790  cb56 270b          	jreq	L5301
3791                     ; 1238 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3793  cb58 1e08          	ldw	x,(OFST+1,sp)
3794  cb5a f7            	ld	(x),a
3797  cb5b 5c            	incw	x
3798  cb5c 1f08          	ldw	(OFST+1,sp),x
3801  cb5e 1e05          	ldw	x,(OFST-2,sp)
3802  cb60 5c            	incw	x
3803  cb61 1f05          	ldw	(OFST-2,sp),x
3805  cb63               L5301:
3806                     ; 1240 	  if (OctetArray[0] != '0') {
3808  cb63 a130          	cp	a,#48
3809  cb65 2707          	jreq	L7301
3810                     ; 1241             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3812  cb67 1e08          	ldw	x,(OFST+1,sp)
3813  cb69 c60011        	ld	a,_OctetArray+1
3817  cb6c 2009          	jp	LC006
3818  cb6e               L7301:
3819                     ; 1243 	  else if (OctetArray[1] != '0') {
3821  cb6e c60011        	ld	a,_OctetArray+1
3822  cb71 a130          	cp	a,#48
3823  cb73 270b          	jreq	L1401
3824                     ; 1244             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3826  cb75 1e08          	ldw	x,(OFST+1,sp)
3831  cb77               LC006:
3832  cb77 f7            	ld	(x),a
3834  cb78 5c            	incw	x
3835  cb79 1f08          	ldw	(OFST+1,sp),x
3837  cb7b 1e05          	ldw	x,(OFST-2,sp)
3838  cb7d 5c            	incw	x
3839  cb7e 1f05          	ldw	(OFST-2,sp),x
3841  cb80               L1401:
3842                     ; 1246           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3844  cb80 1e08          	ldw	x,(OFST+1,sp)
3845  cb82 c60012        	ld	a,_OctetArray+2
3846  cb85 f7            	ld	(x),a
3849  cb86 5c            	incw	x
3850  cb87 1f08          	ldw	(OFST+1,sp),x
3853  cb89 1e05          	ldw	x,(OFST-2,sp)
3854  cb8b 5c            	incw	x
3855  cb8c 1f05          	ldw	(OFST-2,sp),x
3857                     ; 1248           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3859  cb8e 1e08          	ldw	x,(OFST+1,sp)
3860  cb90 a62e          	ld	a,#46
3861  cb92 f7            	ld	(x),a
3864  cb93 5c            	incw	x
3865  cb94 1f08          	ldw	(OFST+1,sp),x
3868  cb96 1e05          	ldw	x,(OFST-2,sp)
3869  cb98 5c            	incw	x
3870  cb99 1f05          	ldw	(OFST-2,sp),x
3872                     ; 1251           emb_itoa(ex_stored_hostaddr2,  OctetArray, 10, 3);
3874  cb9b 4b03          	push	#3
3875  cb9d 4b0a          	push	#10
3876  cb9f ae0010        	ldw	x,#_OctetArray
3877  cba2 89            	pushw	x
3878  cba3 5500570003    	mov	c_lreg+3,_ex_stored_hostaddr2
3879  cba8 3f02          	clr	c_lreg+2
3880  cbaa 3f01          	clr	c_lreg+1
3881  cbac 3f00          	clr	c_lreg
3882  cbae be02          	ldw	x,c_lreg+2
3883  cbb0 89            	pushw	x
3884  cbb1 be00          	ldw	x,c_lreg
3885  cbb3 89            	pushw	x
3886  cbb4 cdc278        	call	_emb_itoa
3888  cbb7 5b08          	addw	sp,#8
3889                     ; 1253 	  if (OctetArray[0] != '0') {
3891  cbb9 c60010        	ld	a,_OctetArray
3892  cbbc a130          	cp	a,#48
3893  cbbe 270b          	jreq	L5401
3894                     ; 1254 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3896  cbc0 1e08          	ldw	x,(OFST+1,sp)
3897  cbc2 f7            	ld	(x),a
3900  cbc3 5c            	incw	x
3901  cbc4 1f08          	ldw	(OFST+1,sp),x
3904  cbc6 1e05          	ldw	x,(OFST-2,sp)
3905  cbc8 5c            	incw	x
3906  cbc9 1f05          	ldw	(OFST-2,sp),x
3908  cbcb               L5401:
3909                     ; 1256 	  if (OctetArray[0] != '0') {
3911  cbcb a130          	cp	a,#48
3912  cbcd 2707          	jreq	L7401
3913                     ; 1257             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3915  cbcf 1e08          	ldw	x,(OFST+1,sp)
3916  cbd1 c60011        	ld	a,_OctetArray+1
3920  cbd4 2009          	jp	LC007
3921  cbd6               L7401:
3922                     ; 1259 	  else if (OctetArray[1] != '0') {
3924  cbd6 c60011        	ld	a,_OctetArray+1
3925  cbd9 a130          	cp	a,#48
3926  cbdb 270b          	jreq	L1501
3927                     ; 1260             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3929  cbdd 1e08          	ldw	x,(OFST+1,sp)
3934  cbdf               LC007:
3935  cbdf f7            	ld	(x),a
3937  cbe0 5c            	incw	x
3938  cbe1 1f08          	ldw	(OFST+1,sp),x
3940  cbe3 1e05          	ldw	x,(OFST-2,sp)
3941  cbe5 5c            	incw	x
3942  cbe6 1f05          	ldw	(OFST-2,sp),x
3944  cbe8               L1501:
3945                     ; 1262           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3947  cbe8 1e08          	ldw	x,(OFST+1,sp)
3948  cbea c60012        	ld	a,_OctetArray+2
3949  cbed f7            	ld	(x),a
3952  cbee 5c            	incw	x
3953  cbef 1f08          	ldw	(OFST+1,sp),x
3956  cbf1 1e05          	ldw	x,(OFST-2,sp)
3957  cbf3 5c            	incw	x
3958  cbf4 1f05          	ldw	(OFST-2,sp),x
3960                     ; 1264           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3962  cbf6 1e08          	ldw	x,(OFST+1,sp)
3963  cbf8 a62e          	ld	a,#46
3964  cbfa f7            	ld	(x),a
3967  cbfb 5c            	incw	x
3968  cbfc 1f08          	ldw	(OFST+1,sp),x
3971  cbfe 1e05          	ldw	x,(OFST-2,sp)
3972  cc00 5c            	incw	x
3973  cc01 1f05          	ldw	(OFST-2,sp),x
3975                     ; 1267           emb_itoa(ex_stored_hostaddr1,  OctetArray, 10, 3);
3977  cc03 4b03          	push	#3
3978  cc05 4b0a          	push	#10
3979  cc07 ae0010        	ldw	x,#_OctetArray
3980  cc0a 89            	pushw	x
3981  cc0b 5500560003    	mov	c_lreg+3,_ex_stored_hostaddr1
3982  cc10 3f02          	clr	c_lreg+2
3983  cc12 3f01          	clr	c_lreg+1
3984  cc14 3f00          	clr	c_lreg
3985  cc16 be02          	ldw	x,c_lreg+2
3986  cc18 89            	pushw	x
3987  cc19 be00          	ldw	x,c_lreg
3988  cc1b 89            	pushw	x
3989  cc1c cdc278        	call	_emb_itoa
3991  cc1f 5b08          	addw	sp,#8
3992                     ; 1269 	  if (OctetArray[0] != '0') {
3994  cc21 c60010        	ld	a,_OctetArray
3995  cc24 a130          	cp	a,#48
3996  cc26 270b          	jreq	L5501
3997                     ; 1270 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3999  cc28 1e08          	ldw	x,(OFST+1,sp)
4000  cc2a f7            	ld	(x),a
4003  cc2b 5c            	incw	x
4004  cc2c 1f08          	ldw	(OFST+1,sp),x
4007  cc2e 1e05          	ldw	x,(OFST-2,sp)
4008  cc30 5c            	incw	x
4009  cc31 1f05          	ldw	(OFST-2,sp),x
4011  cc33               L5501:
4012                     ; 1272 	  if (OctetArray[0] != '0') {
4014  cc33 a130          	cp	a,#48
4015  cc35 2707          	jreq	L7501
4016                     ; 1273             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
4018  cc37 1e08          	ldw	x,(OFST+1,sp)
4019  cc39 c60011        	ld	a,_OctetArray+1
4023  cc3c 2009          	jp	LC008
4024  cc3e               L7501:
4025                     ; 1275 	  else if (OctetArray[1] != '0') {
4027  cc3e c60011        	ld	a,_OctetArray+1
4028  cc41 a130          	cp	a,#48
4029  cc43 270b          	jreq	L1601
4030                     ; 1276             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
4032  cc45 1e08          	ldw	x,(OFST+1,sp)
4037  cc47               LC008:
4038  cc47 f7            	ld	(x),a
4040  cc48 5c            	incw	x
4041  cc49 1f08          	ldw	(OFST+1,sp),x
4043  cc4b 1e05          	ldw	x,(OFST-2,sp)
4044  cc4d 5c            	incw	x
4045  cc4e 1f05          	ldw	(OFST-2,sp),x
4047  cc50               L1601:
4048                     ; 1278           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
4050  cc50 1e08          	ldw	x,(OFST+1,sp)
4051  cc52 c60012        	ld	a,_OctetArray+2
4052  cc55 f7            	ld	(x),a
4055  cc56 5c            	incw	x
4056  cc57 1f08          	ldw	(OFST+1,sp),x
4059  cc59 1e05          	ldw	x,(OFST-2,sp)
4060  cc5b 5c            	incw	x
4061  cc5c 1f05          	ldw	(OFST-2,sp),x
4063                     ; 1280           *pBuffer = ':'; pBuffer++; nBytes++; // Output ':'
4065  cc5e 1e08          	ldw	x,(OFST+1,sp)
4066  cc60 a63a          	ld	a,#58
4067  cc62 f7            	ld	(x),a
4070  cc63 5c            	incw	x
4071  cc64 1f08          	ldw	(OFST+1,sp),x
4074  cc66 1e05          	ldw	x,(OFST-2,sp)
4075  cc68 5c            	incw	x
4076  cc69 1f05          	ldw	(OFST-2,sp),x
4078                     ; 1283   	  emb_itoa(ex_stored_port, OctetArray, 10, 5);
4080  cc6b 4b05          	push	#5
4081  cc6d 4b0a          	push	#10
4082  cc6f ae0010        	ldw	x,#_OctetArray
4083  cc72 89            	pushw	x
4084  cc73 ce004c        	ldw	x,_ex_stored_port
4085  cc76 cdf5c6        	call	c_uitolx
4087  cc79 be02          	ldw	x,c_lreg+2
4088  cc7b 89            	pushw	x
4089  cc7c be00          	ldw	x,c_lreg
4090  cc7e 89            	pushw	x
4091  cc7f cdc278        	call	_emb_itoa
4093  cc82 5b08          	addw	sp,#8
4094                     ; 1285 	  for(i=0; i<5; i++) {
4096  cc84 4f            	clr	a
4097  cc85 6b07          	ld	(OFST+0,sp),a
4099  cc87               L5601:
4100                     ; 1286 	    if (OctetArray[i] != '0') break;
4102  cc87 5f            	clrw	x
4103  cc88 97            	ld	xl,a
4104  cc89 d60010        	ld	a,(_OctetArray,x)
4105  cc8c a130          	cp	a,#48
4106  cc8e 261c          	jrne	L7701
4109                     ; 1285 	  for(i=0; i<5; i++) {
4111  cc90 0c07          	inc	(OFST+0,sp)
4115  cc92 7b07          	ld	a,(OFST+0,sp)
4116  cc94 a105          	cp	a,#5
4117  cc96 25ef          	jrult	L5601
4118  cc98 2012          	jra	L7701
4119  cc9a               L5701:
4120                     ; 1289 	    *pBuffer = OctetArray[i]; pBuffer++; nBytes++;
4122  cc9a 5f            	clrw	x
4123  cc9b 97            	ld	xl,a
4124  cc9c d60010        	ld	a,(_OctetArray,x)
4125  cc9f 1e08          	ldw	x,(OFST+1,sp)
4126  cca1 f7            	ld	(x),a
4129  cca2 5c            	incw	x
4130  cca3 1f08          	ldw	(OFST+1,sp),x
4133  cca5 1e05          	ldw	x,(OFST-2,sp)
4134  cca7 5c            	incw	x
4135  cca8 1f05          	ldw	(OFST-2,sp),x
4137                     ; 1290 	    i++;
4139  ccaa 0c07          	inc	(OFST+0,sp)
4141  ccac               L7701:
4142                     ; 1288 	  while(i<5) {
4144  ccac 7b07          	ld	a,(OFST+0,sp)
4145  ccae a105          	cp	a,#5
4146  ccb0 25e8          	jrult	L5701
4147                     ; 1295           *ppData = *ppData + 28;
4149  ccb2 1e0c          	ldw	x,(OFST+5,sp)
4150  ccb4 9093          	ldw	y,x
4151  ccb6 fe            	ldw	x,(x)
4152  ccb7 1c001c        	addw	x,#28
4153  ccba 90ff          	ldw	(y),x
4154                     ; 1296           *pDataLeft = *pDataLeft - 28;
4156  ccbc 1e0e          	ldw	x,(OFST+7,sp)
4157  ccbe 9093          	ldw	y,x
4158  ccc0 fe            	ldw	x,(x)
4159  ccc1 1d001c        	subw	x,#28
4160  ccc4 ccca1e        	jp	LC011
4161  ccc7               L116:
4162                     ; 1300         *pBuffer = nByte;
4164  ccc7 1e08          	ldw	x,(OFST+1,sp)
4165  ccc9 f7            	ld	(x),a
4166                     ; 1301         *ppData = *ppData + 1;
4168  ccca 1e0c          	ldw	x,(OFST+5,sp)
4169  cccc 9093          	ldw	y,x
4170  ccce fe            	ldw	x,(x)
4171  cccf 5c            	incw	x
4172  ccd0 90ff          	ldw	(y),x
4173                     ; 1302         *pDataLeft = *pDataLeft - 1;
4175  ccd2 1e0e          	ldw	x,(OFST+7,sp)
4176  ccd4 9093          	ldw	y,x
4177  ccd6 fe            	ldw	x,(x)
4178  ccd7 5a            	decw	x
4179  ccd8 90ff          	ldw	(y),x
4180                     ; 1303         pBuffer++;
4182  ccda 1e08          	ldw	x,(OFST+1,sp)
4183                     ; 1304         nBytes++;
4185  ccdc               LC009:
4188  ccdc 5c            	incw	x
4189  ccdd 1f08          	ldw	(OFST+1,sp),x
4192  ccdf 1e05          	ldw	x,(OFST-2,sp)
4193  cce1 5c            	incw	x
4194  cce2 1f05          	ldw	(OFST-2,sp),x
4196  cce4               L306:
4197                     ; 842   while (nBytes < nMaxBytes) {
4199  cce4 1e05          	ldw	x,(OFST-2,sp)
4200  cce6 1310          	cpw	x,(OFST+9,sp)
4201  cce8 2403ccc4cd    	jrult	L106
4202  cced               L506:
4203                     ; 1309   return nBytes;
4205  cced 1e05          	ldw	x,(OFST-2,sp)
4208  ccef 5b09          	addw	sp,#9
4209  ccf1 81            	ret	
4236                     ; 1313 void HttpDInit()
4236                     ; 1314 {
4237                     	switch	.text
4238  ccf2               _HttpDInit:
4242                     ; 1316   uip_listen(htons(Port_Httpd));
4244  ccf2 ce0061        	ldw	x,_Port_Httpd
4245  ccf5 cdefa2        	call	_htons
4247  ccf8 cde662        	call	_uip_listen
4249                     ; 1317   current_webpage = WEBPAGE_DEFAULT;
4251  ccfb 725f001b      	clr	_current_webpage
4252                     ; 1318 }
4255  ccff 81            	ret	
4462                     	switch	.const
4463  bd5a               L672:
4464  bd5a d274          	dc.w	L7111
4465  bd5c d27b          	dc.w	L1211
4466  bd5e d282          	dc.w	L3211
4467  bd60 d289          	dc.w	L5211
4468  bd62 d290          	dc.w	L7211
4469  bd64 d297          	dc.w	L1311
4470  bd66 d29e          	dc.w	L3311
4471  bd68 d2a5          	dc.w	L5311
4472  bd6a d2ac          	dc.w	L7311
4473  bd6c d2b3          	dc.w	L1411
4474  bd6e d2ba          	dc.w	L3411
4475  bd70 d2c1          	dc.w	L5411
4476  bd72 d2c8          	dc.w	L7411
4477  bd74 d2cf          	dc.w	L1511
4478  bd76 d2d6          	dc.w	L3511
4479  bd78 d2dd          	dc.w	L5511
4480  bd7a d2e4          	dc.w	L7511
4481  bd7c d2eb          	dc.w	L1611
4482  bd7e d2f2          	dc.w	L3611
4483  bd80 d2f9          	dc.w	L5611
4484  bd82 d300          	dc.w	L7611
4485  bd84 d307          	dc.w	L1711
4486  bd86 d30e          	dc.w	L3711
4487  bd88 d315          	dc.w	L5711
4488  bd8a d31c          	dc.w	L7711
4489  bd8c d323          	dc.w	L1021
4490  bd8e d32a          	dc.w	L3021
4491  bd90 d331          	dc.w	L5021
4492  bd92 d338          	dc.w	L7021
4493  bd94 d33f          	dc.w	L1121
4494  bd96 d346          	dc.w	L3121
4495  bd98 d34d          	dc.w	L5121
4496  bd9a d3df          	dc.w	L5421
4497  bd9c d3df          	dc.w	L5421
4498  bd9e d3df          	dc.w	L5421
4499  bda0 d3df          	dc.w	L5421
4500  bda2 d3df          	dc.w	L5421
4501  bda4 d3df          	dc.w	L5421
4502  bda6 d3df          	dc.w	L5421
4503  bda8 d3df          	dc.w	L5421
4504  bdaa d3df          	dc.w	L5421
4505  bdac d3df          	dc.w	L5421
4506  bdae d3df          	dc.w	L5421
4507  bdb0 d3df          	dc.w	L5421
4508  bdb2 d3df          	dc.w	L5421
4509  bdb4 d3df          	dc.w	L5421
4510  bdb6 d3df          	dc.w	L5421
4511  bdb8 d3df          	dc.w	L5421
4512  bdba d3df          	dc.w	L5421
4513  bdbc d3df          	dc.w	L5421
4514  bdbe d3df          	dc.w	L5421
4515  bdc0 d3df          	dc.w	L5421
4516  bdc2 d3df          	dc.w	L5421
4517  bdc4 d3df          	dc.w	L5421
4518  bdc6 d3df          	dc.w	L5421
4519  bdc8 d354          	dc.w	L7121
4520  bdca d35f          	dc.w	L1221
4521  bdcc d3df          	dc.w	L5421
4522  bdce d3df          	dc.w	L5421
4523  bdd0 d3df          	dc.w	L5421
4524  bdd2 d36a          	dc.w	L3221
4525  bdd4 d36c          	dc.w	L5221
4526  bdd6 d3df          	dc.w	L5421
4527  bdd8 d37e          	dc.w	L7221
4528  bdda d390          	dc.w	L1321
4529  bddc d3a2          	dc.w	L3321
4530  bdde d3ad          	dc.w	L5321
4531  bde0 d3af          	dc.w	L7321
4532                     ; 1321 void HttpDCall(	uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
4532                     ; 1322 {
4533                     	switch	.text
4534  cd00               _HttpDCall:
4536  cd00 89            	pushw	x
4537  cd01 5207          	subw	sp,#7
4538       00000007      OFST:	set	7
4541                     ; 1332   alpha_1 = '0';
4543                     ; 1333   alpha_2 = '0';
4545                     ; 1334   alpha_3 = '0';
4547                     ; 1335   alpha_4 = '0';
4549                     ; 1336   alpha_5 = '0';
4551                     ; 1338   if (uip_connected()) {
4553  cd03 720d00887a    	btjf	_uip_flags,#6,L5431
4554                     ; 1340     if (current_webpage == WEBPAGE_DEFAULT) {
4556  cd08 c6001b        	ld	a,_current_webpage
4557  cd0b 260e          	jrne	L7431
4558                     ; 1341       pSocket->pData = g_HtmlPageDefault;
4560  cd0d 1e0e          	ldw	x,(OFST+7,sp)
4561  cd0f 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
4562  cd13 ef01          	ldw	(1,x),y
4563                     ; 1342       pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
4565  cd15 90ae1647      	ldw	y,#5703
4567  cd19 2058          	jp	LC012
4568  cd1b               L7431:
4569                     ; 1346     else if (current_webpage == WEBPAGE_ADDRESS) {
4571  cd1b a101          	cp	a,#1
4572  cd1d 260e          	jrne	L3531
4573                     ; 1347       pSocket->pData = g_HtmlPageAddress;
4575  cd1f 1e0e          	ldw	x,(OFST+7,sp)
4576  cd21 90ae96d0      	ldw	y,#L71_g_HtmlPageAddress
4577  cd25 ef01          	ldw	(1,x),y
4578                     ; 1348       pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
4580  cd27 90ae1117      	ldw	y,#4375
4582  cd2b 2046          	jp	LC012
4583  cd2d               L3531:
4584                     ; 1352     else if (current_webpage == WEBPAGE_HELP) {
4586  cd2d a103          	cp	a,#3
4587  cd2f 260e          	jrne	L7531
4588                     ; 1353       pSocket->pData = g_HtmlPageHelp;
4590  cd31 1e0e          	ldw	x,(OFST+7,sp)
4591  cd33 90aea7e8      	ldw	y,#L12_g_HtmlPageHelp
4592  cd37 ef01          	ldw	(1,x),y
4593                     ; 1354       pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
4595  cd39 90ae076f      	ldw	y,#1903
4597  cd3d 2034          	jp	LC012
4598  cd3f               L7531:
4599                     ; 1356     else if (current_webpage == WEBPAGE_HELP2) {
4601  cd3f a104          	cp	a,#4
4602  cd41 260e          	jrne	L3631
4603                     ; 1357       pSocket->pData = g_HtmlPageHelp2;
4605  cd43 1e0e          	ldw	x,(OFST+7,sp)
4606  cd45 90aeaf58      	ldw	y,#L32_g_HtmlPageHelp2
4607  cd49 ef01          	ldw	(1,x),y
4608                     ; 1358       pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
4610  cd4b 90ae02a8      	ldw	y,#680
4612  cd4f 2022          	jp	LC012
4613  cd51               L3631:
4614                     ; 1363     else if (current_webpage == WEBPAGE_STATS) {
4616  cd51 a105          	cp	a,#5
4617  cd53 260e          	jrne	L7631
4618                     ; 1364       pSocket->pData = g_HtmlPageStats;
4620  cd55 1e0e          	ldw	x,(OFST+7,sp)
4621  cd57 90aeb201      	ldw	y,#L52_g_HtmlPageStats
4622  cd5b ef01          	ldw	(1,x),y
4623                     ; 1365       pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
4625  cd5d 90ae0a9b      	ldw	y,#2715
4627  cd61 2010          	jp	LC012
4628  cd63               L7631:
4629                     ; 1368     else if (current_webpage == WEBPAGE_RSTATE) {
4631  cd63 a106          	cp	a,#6
4632  cd65 260e          	jrne	L1531
4633                     ; 1369       pSocket->pData = g_HtmlPageRstate;
4635  cd67 1e0e          	ldw	x,(OFST+7,sp)
4636  cd69 90aebc9d      	ldw	y,#L72_g_HtmlPageRstate
4637  cd6d ef01          	ldw	(1,x),y
4638                     ; 1370       pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
4640  cd6f 90ae0078      	ldw	y,#120
4641  cd73               LC012:
4642  cd73 ef03          	ldw	(3,x),y
4643  cd75               L1531:
4644                     ; 1372     pSocket->nNewlines = 0;
4646  cd75 1e0e          	ldw	x,(OFST+7,sp)
4647                     ; 1373     pSocket->nState = STATE_CONNECTED;
4649  cd77 7f            	clr	(x)
4650  cd78 6f05          	clr	(5,x)
4651                     ; 1374     pSocket->nPrevBytes = 0xFFFF;
4653  cd7a 90aeffff      	ldw	y,#65535
4654  cd7e ef0a          	ldw	(10,x),y
4656  cd80 2041          	jra	L023
4657  cd82               L5431:
4658                     ; 1376   else if (uip_newdata() || uip_acked()) {
4660  cd82 7202008808    	btjt	_uip_flags,#1,L1041
4662  cd87 7200008803cc  	btjf	_uip_flags,#0,L7731
4663  cd8f               L1041:
4664                     ; 1377     if (pSocket->nState == STATE_CONNECTED) {
4666  cd8f 1e0e          	ldw	x,(OFST+7,sp)
4667  cd91 f6            	ld	a,(x)
4668  cd92 2627          	jrne	L3041
4669                     ; 1378       if (nBytes == 0) return;
4671  cd94 1e0c          	ldw	x,(OFST+5,sp)
4672  cd96 272b          	jreq	L023
4675                     ; 1379       if (*pBuffer == 'G') pSocket->nState = STATE_GET_G;
4677  cd98 1e08          	ldw	x,(OFST+1,sp)
4678  cd9a f6            	ld	a,(x)
4679  cd9b a147          	cp	a,#71
4680  cd9d 2606          	jrne	L7041
4683  cd9f 1e0e          	ldw	x,(OFST+7,sp)
4684  cda1 a601          	ld	a,#1
4686  cda3 2008          	jp	LC013
4687  cda5               L7041:
4688                     ; 1380       else if (*pBuffer == 'P') pSocket->nState = STATE_POST_P;
4690  cda5 a150          	cp	a,#80
4691  cda7 2605          	jrne	L1141
4694  cda9 1e0e          	ldw	x,(OFST+7,sp)
4695  cdab a604          	ld	a,#4
4696  cdad               LC013:
4697  cdad f7            	ld	(x),a
4698  cdae               L1141:
4699                     ; 1381       nBytes--;
4701  cdae 1e0c          	ldw	x,(OFST+5,sp)
4702  cdb0 5a            	decw	x
4703  cdb1 1f0c          	ldw	(OFST+5,sp),x
4704                     ; 1382       pBuffer++;
4706  cdb3 1e08          	ldw	x,(OFST+1,sp)
4707  cdb5 5c            	incw	x
4708  cdb6 1f08          	ldw	(OFST+1,sp),x
4709  cdb8 1e0e          	ldw	x,(OFST+7,sp)
4710  cdba f6            	ld	a,(x)
4711  cdbb               L3041:
4712                     ; 1385     if (pSocket->nState == STATE_GET_G) {
4714  cdbb a101          	cp	a,#1
4715  cdbd 2620          	jrne	L5141
4716                     ; 1386       if (nBytes == 0) return;
4718  cdbf 1e0c          	ldw	x,(OFST+5,sp)
4719  cdc1 2603          	jrne	L7141
4721  cdc3               L023:
4724  cdc3 5b09          	addw	sp,#9
4725  cdc5 81            	ret	
4726  cdc6               L7141:
4727                     ; 1387       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
4729  cdc6 1e08          	ldw	x,(OFST+1,sp)
4730  cdc8 f6            	ld	a,(x)
4731  cdc9 a145          	cp	a,#69
4732  cdcb 2605          	jrne	L1241
4735  cdcd 1e0e          	ldw	x,(OFST+7,sp)
4736  cdcf a602          	ld	a,#2
4737  cdd1 f7            	ld	(x),a
4738  cdd2               L1241:
4739                     ; 1388       nBytes--;
4741  cdd2 1e0c          	ldw	x,(OFST+5,sp)
4742  cdd4 5a            	decw	x
4743  cdd5 1f0c          	ldw	(OFST+5,sp),x
4744                     ; 1389       pBuffer++;
4746  cdd7 1e08          	ldw	x,(OFST+1,sp)
4747  cdd9 5c            	incw	x
4748  cdda 1f08          	ldw	(OFST+1,sp),x
4749  cddc 1e0e          	ldw	x,(OFST+7,sp)
4750  cdde f6            	ld	a,(x)
4751  cddf               L5141:
4752                     ; 1392     if (pSocket->nState == STATE_GET_GE) {
4754  cddf a102          	cp	a,#2
4755  cde1 261d          	jrne	L3241
4756                     ; 1393       if (nBytes == 0) return;
4758  cde3 1e0c          	ldw	x,(OFST+5,sp)
4759  cde5 27dc          	jreq	L023
4762                     ; 1394       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
4764  cde7 1e08          	ldw	x,(OFST+1,sp)
4765  cde9 f6            	ld	a,(x)
4766  cdea a154          	cp	a,#84
4767  cdec 2605          	jrne	L7241
4770  cdee 1e0e          	ldw	x,(OFST+7,sp)
4771  cdf0 a603          	ld	a,#3
4772  cdf2 f7            	ld	(x),a
4773  cdf3               L7241:
4774                     ; 1395       nBytes--;
4776  cdf3 1e0c          	ldw	x,(OFST+5,sp)
4777  cdf5 5a            	decw	x
4778  cdf6 1f0c          	ldw	(OFST+5,sp),x
4779                     ; 1396       pBuffer++;
4781  cdf8 1e08          	ldw	x,(OFST+1,sp)
4782  cdfa 5c            	incw	x
4783  cdfb 1f08          	ldw	(OFST+1,sp),x
4784  cdfd 1e0e          	ldw	x,(OFST+7,sp)
4785  cdff f6            	ld	a,(x)
4786  ce00               L3241:
4787                     ; 1399     if (pSocket->nState == STATE_GET_GET) {
4789  ce00 a103          	cp	a,#3
4790  ce02 261d          	jrne	L1341
4791                     ; 1400       if (nBytes == 0) return;
4793  ce04 1e0c          	ldw	x,(OFST+5,sp)
4794  ce06 27bb          	jreq	L023
4797                     ; 1401       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
4799  ce08 1e08          	ldw	x,(OFST+1,sp)
4800  ce0a f6            	ld	a,(x)
4801  ce0b a120          	cp	a,#32
4802  ce0d 2605          	jrne	L5341
4805  ce0f 1e0e          	ldw	x,(OFST+7,sp)
4806  ce11 a608          	ld	a,#8
4807  ce13 f7            	ld	(x),a
4808  ce14               L5341:
4809                     ; 1402       nBytes--;
4811  ce14 1e0c          	ldw	x,(OFST+5,sp)
4812  ce16 5a            	decw	x
4813  ce17 1f0c          	ldw	(OFST+5,sp),x
4814                     ; 1403       pBuffer++;
4816  ce19 1e08          	ldw	x,(OFST+1,sp)
4817  ce1b 5c            	incw	x
4818  ce1c 1f08          	ldw	(OFST+1,sp),x
4819  ce1e 1e0e          	ldw	x,(OFST+7,sp)
4820  ce20 f6            	ld	a,(x)
4821  ce21               L1341:
4822                     ; 1406     if (pSocket->nState == STATE_POST_P) {
4824  ce21 a104          	cp	a,#4
4825  ce23 261d          	jrne	L7341
4826                     ; 1407       if (nBytes == 0) return;
4828  ce25 1e0c          	ldw	x,(OFST+5,sp)
4829  ce27 279a          	jreq	L023
4832                     ; 1408       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
4834  ce29 1e08          	ldw	x,(OFST+1,sp)
4835  ce2b f6            	ld	a,(x)
4836  ce2c a14f          	cp	a,#79
4837  ce2e 2605          	jrne	L3441
4840  ce30 1e0e          	ldw	x,(OFST+7,sp)
4841  ce32 a605          	ld	a,#5
4842  ce34 f7            	ld	(x),a
4843  ce35               L3441:
4844                     ; 1409       nBytes--;
4846  ce35 1e0c          	ldw	x,(OFST+5,sp)
4847  ce37 5a            	decw	x
4848  ce38 1f0c          	ldw	(OFST+5,sp),x
4849                     ; 1410       pBuffer++;
4851  ce3a 1e08          	ldw	x,(OFST+1,sp)
4852  ce3c 5c            	incw	x
4853  ce3d 1f08          	ldw	(OFST+1,sp),x
4854  ce3f 1e0e          	ldw	x,(OFST+7,sp)
4855  ce41 f6            	ld	a,(x)
4856  ce42               L7341:
4857                     ; 1413     if (pSocket->nState == STATE_POST_PO) {
4859  ce42 a105          	cp	a,#5
4860  ce44 2620          	jrne	L5441
4861                     ; 1414       if (nBytes == 0) return;
4863  ce46 1e0c          	ldw	x,(OFST+5,sp)
4864  ce48 2603cccdc3    	jreq	L023
4867                     ; 1415       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
4869  ce4d 1e08          	ldw	x,(OFST+1,sp)
4870  ce4f f6            	ld	a,(x)
4871  ce50 a153          	cp	a,#83
4872  ce52 2605          	jrne	L1541
4875  ce54 1e0e          	ldw	x,(OFST+7,sp)
4876  ce56 a606          	ld	a,#6
4877  ce58 f7            	ld	(x),a
4878  ce59               L1541:
4879                     ; 1416       nBytes--;
4881  ce59 1e0c          	ldw	x,(OFST+5,sp)
4882  ce5b 5a            	decw	x
4883  ce5c 1f0c          	ldw	(OFST+5,sp),x
4884                     ; 1417       pBuffer++;
4886  ce5e 1e08          	ldw	x,(OFST+1,sp)
4887  ce60 5c            	incw	x
4888  ce61 1f08          	ldw	(OFST+1,sp),x
4889  ce63 1e0e          	ldw	x,(OFST+7,sp)
4890  ce65 f6            	ld	a,(x)
4891  ce66               L5441:
4892                     ; 1420     if (pSocket->nState == STATE_POST_POS) {
4894  ce66 a106          	cp	a,#6
4895  ce68 261d          	jrne	L3541
4896                     ; 1421       if (nBytes == 0) return;
4898  ce6a 1e0c          	ldw	x,(OFST+5,sp)
4899  ce6c 27dc          	jreq	L023
4902                     ; 1422       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
4904  ce6e 1e08          	ldw	x,(OFST+1,sp)
4905  ce70 f6            	ld	a,(x)
4906  ce71 a154          	cp	a,#84
4907  ce73 2605          	jrne	L7541
4910  ce75 1e0e          	ldw	x,(OFST+7,sp)
4911  ce77 a607          	ld	a,#7
4912  ce79 f7            	ld	(x),a
4913  ce7a               L7541:
4914                     ; 1423       nBytes--;
4916  ce7a 1e0c          	ldw	x,(OFST+5,sp)
4917  ce7c 5a            	decw	x
4918  ce7d 1f0c          	ldw	(OFST+5,sp),x
4919                     ; 1424       pBuffer++;
4921  ce7f 1e08          	ldw	x,(OFST+1,sp)
4922  ce81 5c            	incw	x
4923  ce82 1f08          	ldw	(OFST+1,sp),x
4924  ce84 1e0e          	ldw	x,(OFST+7,sp)
4925  ce86 f6            	ld	a,(x)
4926  ce87               L3541:
4927                     ; 1427     if (pSocket->nState == STATE_POST_POST) {
4929  ce87 a107          	cp	a,#7
4930  ce89 261d          	jrne	L1641
4931                     ; 1428       if (nBytes == 0) return;
4933  ce8b 1e0c          	ldw	x,(OFST+5,sp)
4934  ce8d 27bb          	jreq	L023
4937                     ; 1429       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
4939  ce8f 1e08          	ldw	x,(OFST+1,sp)
4940  ce91 f6            	ld	a,(x)
4941  ce92 a120          	cp	a,#32
4942  ce94 2605          	jrne	L5641
4945  ce96 1e0e          	ldw	x,(OFST+7,sp)
4946  ce98 a609          	ld	a,#9
4947  ce9a f7            	ld	(x),a
4948  ce9b               L5641:
4949                     ; 1430       nBytes--;
4951  ce9b 1e0c          	ldw	x,(OFST+5,sp)
4952  ce9d 5a            	decw	x
4953  ce9e 1f0c          	ldw	(OFST+5,sp),x
4954                     ; 1431       pBuffer++;
4956  cea0 1e08          	ldw	x,(OFST+1,sp)
4957  cea2 5c            	incw	x
4958  cea3 1f08          	ldw	(OFST+1,sp),x
4959  cea5 1e0e          	ldw	x,(OFST+7,sp)
4960  cea7 f6            	ld	a,(x)
4961  cea8               L1641:
4962                     ; 1434     if (pSocket->nState == STATE_GOTPOST) {
4964  cea8 a109          	cp	a,#9
4965  ceaa 2647          	jrne	L7641
4967  ceac 2041          	jra	L3741
4968  ceae               L1741:
4969                     ; 1437         if (*pBuffer == '\n') pSocket->nNewlines++;
4971  ceae 1e08          	ldw	x,(OFST+1,sp)
4972  ceb0 f6            	ld	a,(x)
4973  ceb1 a10a          	cp	a,#10
4974  ceb3 2606          	jrne	L7741
4977  ceb5 1e0e          	ldw	x,(OFST+7,sp)
4978  ceb7 6c05          	inc	(5,x)
4980  ceb9 2008          	jra	L1051
4981  cebb               L7741:
4982                     ; 1438         else if (*pBuffer == '\r') { }
4984  cebb a10d          	cp	a,#13
4985  cebd 2704          	jreq	L1051
4987                     ; 1439         else pSocket->nNewlines = 0;
4989  cebf 1e0e          	ldw	x,(OFST+7,sp)
4990  cec1 6f05          	clr	(5,x)
4991  cec3               L1051:
4992                     ; 1440         pBuffer++;
4994  cec3 1e08          	ldw	x,(OFST+1,sp)
4995  cec5 5c            	incw	x
4996  cec6 1f08          	ldw	(OFST+1,sp),x
4997                     ; 1441         nBytes--;
4999  cec8 1e0c          	ldw	x,(OFST+5,sp)
5000  ceca 5a            	decw	x
5001  cecb 1f0c          	ldw	(OFST+5,sp),x
5002                     ; 1442         if (pSocket->nNewlines == 2) {
5004  cecd 1e0e          	ldw	x,(OFST+7,sp)
5005  cecf e605          	ld	a,(5,x)
5006  ced1 a102          	cp	a,#2
5007  ced3 261a          	jrne	L3741
5008                     ; 1445           if (current_webpage == WEBPAGE_DEFAULT) pSocket->nParseLeft = PARSEBYTES_DEFAULT;
5010  ced5 c6001b        	ld	a,_current_webpage
5011  ced8 2607          	jrne	L1151
5014  ceda a67e          	ld	a,#126
5015  cedc e706          	ld	(6,x),a
5016  cede c6001b        	ld	a,_current_webpage
5017  cee1               L1151:
5018                     ; 1446           if (current_webpage == WEBPAGE_ADDRESS) pSocket->nParseLeft = PARSEBYTES_ADDRESS;
5020  cee1 4a            	dec	a
5021  cee2 2604          	jrne	L3151
5024  cee4 a693          	ld	a,#147
5025  cee6 e706          	ld	(6,x),a
5026  cee8               L3151:
5027                     ; 1447           pSocket->ParseState = PARSE_CMD;
5029  cee8 6f09          	clr	(9,x)
5030                     ; 1449           pSocket->nState = STATE_PARSEPOST;
5032  ceea a60a          	ld	a,#10
5033  ceec f7            	ld	(x),a
5034                     ; 1450           break;
5036  ceed 2004          	jra	L7641
5037  ceef               L3741:
5038                     ; 1436       while (nBytes != 0) {
5040  ceef 1e0c          	ldw	x,(OFST+5,sp)
5041  cef1 26bb          	jrne	L1741
5042  cef3               L7641:
5043                     ; 1455     if (pSocket->nState == STATE_GOTGET) {
5045  cef3 1e0e          	ldw	x,(OFST+7,sp)
5046  cef5 f6            	ld	a,(x)
5047  cef6 a108          	cp	a,#8
5048  cef8 2609          	jrne	L5151
5049                     ; 1459       pSocket->nParseLeft = 6;
5051  cefa a606          	ld	a,#6
5052  cefc e706          	ld	(6,x),a
5053                     ; 1460       pSocket->ParseState = PARSE_SLASH1;
5055  cefe e709          	ld	(9,x),a
5056                     ; 1462       pSocket->nState = STATE_PARSEGET;
5058  cf00 a60d          	ld	a,#13
5059  cf02 f7            	ld	(x),a
5060  cf03               L5151:
5061                     ; 1465     if (pSocket->nState == STATE_PARSEPOST) {
5063  cf03 a10a          	cp	a,#10
5064  cf05 2703ccd175    	jrne	L7151
5066  cf0a ccd166        	jra	L3251
5067  cf0d               L1251:
5068                     ; 1475         if (pSocket->ParseState == PARSE_CMD) {
5070  cf0d 1e0e          	ldw	x,(OFST+7,sp)
5071  cf0f e609          	ld	a,(9,x)
5072  cf11 263e          	jrne	L7251
5073                     ; 1476           pSocket->ParseCmd = *pBuffer;
5075  cf13 1e08          	ldw	x,(OFST+1,sp)
5076  cf15 f6            	ld	a,(x)
5077  cf16 1e0e          	ldw	x,(OFST+7,sp)
5078  cf18 e707          	ld	(7,x),a
5079                     ; 1477           pSocket->ParseState = PARSE_NUM10;
5081  cf1a a601          	ld	a,#1
5082  cf1c e709          	ld	(9,x),a
5083                     ; 1478 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5085  cf1e e606          	ld	a,(6,x)
5086  cf20 2704          	jreq	L1351
5089  cf22 6a06          	dec	(6,x)
5091  cf24 2004          	jra	L3351
5092  cf26               L1351:
5093                     ; 1479 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5095  cf26 a605          	ld	a,#5
5096  cf28 e709          	ld	(9,x),a
5097  cf2a               L3351:
5098                     ; 1480           pBuffer++;
5100  cf2a 1e08          	ldw	x,(OFST+1,sp)
5101  cf2c 5c            	incw	x
5102  cf2d 1f08          	ldw	(OFST+1,sp),x
5103                     ; 1482 	  if (pSocket->ParseCmd == 'o' ||
5103                     ; 1483 	      pSocket->ParseCmd == 'a' ||
5103                     ; 1484 	      pSocket->ParseCmd == 'b' ||
5103                     ; 1485 	      pSocket->ParseCmd == 'c' ||
5103                     ; 1486 	      pSocket->ParseCmd == 'd' ||
5103                     ; 1487 	      pSocket->ParseCmd == 'g') { }
5105  cf2f 1e0e          	ldw	x,(OFST+7,sp)
5106  cf31 e607          	ld	a,(7,x)
5107  cf33 a16f          	cp	a,#111
5108  cf35 2603ccd158    	jreq	L3551
5110  cf3a a161          	cp	a,#97
5111  cf3c 27f9          	jreq	L3551
5113  cf3e a162          	cp	a,#98
5114  cf40 27f5          	jreq	L3551
5116  cf42 a163          	cp	a,#99
5117  cf44 27f1          	jreq	L3551
5119  cf46 a164          	cp	a,#100
5120  cf48 27ed          	jreq	L3551
5122  cf4a a167          	cp	a,#103
5123  cf4c 27e9          	jreq	L3551
5124                     ; 1488 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5125  cf4e ccd13d        	jp	LC018
5126  cf51               L7251:
5127                     ; 1490         else if (pSocket->ParseState == PARSE_NUM10) {
5129  cf51 a101          	cp	a,#1
5130  cf53 2619          	jrne	L5551
5131                     ; 1491           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5133  cf55 1e08          	ldw	x,(OFST+1,sp)
5134  cf57 f6            	ld	a,(x)
5135  cf58 97            	ld	xl,a
5136  cf59 a60a          	ld	a,#10
5137  cf5b 42            	mul	x,a
5138  cf5c 9f            	ld	a,xl
5139  cf5d 1e0e          	ldw	x,(OFST+7,sp)
5140  cf5f a0e0          	sub	a,#224
5141  cf61 e708          	ld	(8,x),a
5142                     ; 1492           pSocket->ParseState = PARSE_NUM1;
5144  cf63 a602          	ld	a,#2
5145  cf65 e709          	ld	(9,x),a
5146                     ; 1493 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5148  cf67 e606          	ld	a,(6,x)
5149  cf69 2719          	jreq	L7651
5152  cf6b ccd14d        	jp	LC026
5153                     ; 1494 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5154                     ; 1495           pBuffer++;
5156  cf6e               L5551:
5157                     ; 1497         else if (pSocket->ParseState == PARSE_NUM1) {
5159  cf6e a102          	cp	a,#2
5160  cf70 2616          	jrne	L5651
5161                     ; 1498           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5163  cf72 1608          	ldw	y,(OFST+1,sp)
5164  cf74 90f6          	ld	a,(y)
5165  cf76 a030          	sub	a,#48
5166  cf78 eb08          	add	a,(8,x)
5167  cf7a e708          	ld	(8,x),a
5168                     ; 1499           pSocket->ParseState = PARSE_EQUAL;
5170  cf7c a603          	ld	a,#3
5171  cf7e e709          	ld	(9,x),a
5172                     ; 1500 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5174  cf80 e606          	ld	a,(6,x)
5177  cf82 26e7          	jrne	LC026
5178  cf84               L7651:
5179                     ; 1501 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5182  cf84 a605          	ld	a,#5
5183                     ; 1502           pBuffer++;
5185  cf86 200d          	jp	LC027
5186  cf88               L5651:
5187                     ; 1504         else if (pSocket->ParseState == PARSE_EQUAL) {
5189  cf88 a103          	cp	a,#3
5190  cf8a 260e          	jrne	L5751
5191                     ; 1505           pSocket->ParseState = PARSE_VAL;
5193  cf8c a604          	ld	a,#4
5194  cf8e e709          	ld	(9,x),a
5195                     ; 1506 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5197  cf90 6d06          	tnz	(6,x)
5200  cf92 26d7          	jrne	LC026
5201                     ; 1507 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5203  cf94 4c            	inc	a
5204  cf95               LC027:
5205  cf95 e709          	ld	(9,x),a
5206                     ; 1508           pBuffer++;
5208  cf97 ccd14f        	jp	LC017
5209  cf9a               L5751:
5210                     ; 1510         else if (pSocket->ParseState == PARSE_VAL) {
5212  cf9a a104          	cp	a,#4
5213  cf9c 2703ccd143    	jrne	L5061
5214                     ; 1518           if (pSocket->ParseCmd == 'o') {
5216  cfa1 e607          	ld	a,(7,x)
5217  cfa3 a16f          	cp	a,#111
5218  cfa5 2625          	jrne	L7061
5219                     ; 1521             if ((uint8_t)(*pBuffer) == '1') GpioSetPin(pSocket->ParseNum, (uint8_t)1);
5221  cfa7 1e08          	ldw	x,(OFST+1,sp)
5222  cfa9 f6            	ld	a,(x)
5223  cfaa a131          	cp	a,#49
5224  cfac 2609          	jrne	L1161
5227  cfae 1e0e          	ldw	x,(OFST+7,sp)
5228  cfb0 e608          	ld	a,(8,x)
5229  cfb2 ae0001        	ldw	x,#1
5232  cfb5 2005          	jra	L3161
5233  cfb7               L1161:
5234                     ; 1522             else GpioSetPin(pSocket->ParseNum, (uint8_t)0);
5236  cfb7 1e0e          	ldw	x,(OFST+7,sp)
5237  cfb9 e608          	ld	a,(8,x)
5238  cfbb 5f            	clrw	x
5240  cfbc               L3161:
5241  cfbc 95            	ld	xh,a
5242  cfbd cdd5e1        	call	_GpioSetPin
5243                     ; 1523 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5245  cfc0 1e0e          	ldw	x,(OFST+7,sp)
5246  cfc2 e606          	ld	a,(6,x)
5247  cfc4 2603ccd136    	jreq	L5661
5249                     ; 1524             pBuffer++;
5251  cfc9 ccd134        	jp	LC025
5252  cfcc               L7061:
5253                     ; 1527           else if (pSocket->ParseCmd == 'a') {
5255  cfcc a161          	cp	a,#97
5256  cfce 2656          	jrne	L1261
5257                     ; 1537             ex_stored_devicename[0] = (uint8_t)(*pBuffer);
5259  cfd0 1e08          	ldw	x,(OFST+1,sp)
5260  cfd2 f6            	ld	a,(x)
5261  cfd3 c70038        	ld	_ex_stored_devicename,a
5262                     ; 1538             pSocket->nParseLeft--;
5264  cfd6 1e0e          	ldw	x,(OFST+7,sp)
5265  cfd8 6a06          	dec	(6,x)
5266                     ; 1539             pBuffer++; // nBytes already decremented for first char
5268  cfda 1e08          	ldw	x,(OFST+1,sp)
5269  cfdc 5c            	incw	x
5270  cfdd 1f08          	ldw	(OFST+1,sp),x
5271                     ; 1543 	    amp_found = 0;
5273  cfdf 0f06          	clr	(OFST-1,sp)
5275                     ; 1544 	    for(i=1; i<20; i++) {
5277  cfe1 a601          	ld	a,#1
5278  cfe3 6b07          	ld	(OFST+0,sp),a
5280  cfe5               L3261:
5281                     ; 1545 	      if ((uint8_t)(*pBuffer) == 38) amp_found = 1;
5283  cfe5 1e08          	ldw	x,(OFST+1,sp)
5284  cfe7 f6            	ld	a,(x)
5285  cfe8 a126          	cp	a,#38
5286  cfea 2604          	jrne	L1361
5289  cfec a601          	ld	a,#1
5290  cfee 6b06          	ld	(OFST-1,sp),a
5292  cff0               L1361:
5293                     ; 1546 	      if (amp_found == 0) {
5295  cff0 7b06          	ld	a,(OFST-1,sp)
5296  cff2 261a          	jrne	L3361
5297                     ; 1548                 ex_stored_devicename[i] = (uint8_t)(*pBuffer);
5299  cff4 7b07          	ld	a,(OFST+0,sp)
5300  cff6 5f            	clrw	x
5301  cff7 1608          	ldw	y,(OFST+1,sp)
5302  cff9 97            	ld	xl,a
5303  cffa 90f6          	ld	a,(y)
5304  cffc d70038        	ld	(_ex_stored_devicename,x),a
5305                     ; 1549                 pSocket->nParseLeft--;
5307  cfff 1e0e          	ldw	x,(OFST+7,sp)
5308  d001 6a06          	dec	(6,x)
5309                     ; 1550                 pBuffer++;
5311  d003 93            	ldw	x,y
5312  d004 5c            	incw	x
5313  d005 1f08          	ldw	(OFST+1,sp),x
5314                     ; 1551                 nBytes--; // Must subtract 1 from nBytes for extra byte read
5316  d007 1e0c          	ldw	x,(OFST+5,sp)
5317  d009 5a            	decw	x
5318  d00a 1f0c          	ldw	(OFST+5,sp),x
5320  d00c 200d          	jra	L5361
5321  d00e               L3361:
5322                     ; 1555 	        ex_stored_devicename[i] = ' ';
5324  d00e 7b07          	ld	a,(OFST+0,sp)
5325  d010 5f            	clrw	x
5326  d011 97            	ld	xl,a
5327  d012 a620          	ld	a,#32
5328  d014 d70038        	ld	(_ex_stored_devicename,x),a
5329                     ; 1564                 pSocket->nParseLeft--;
5331  d017 1e0e          	ldw	x,(OFST+7,sp)
5332  d019 6a06          	dec	(6,x)
5333  d01b               L5361:
5334                     ; 1544 	    for(i=1; i<20; i++) {
5336  d01b 0c07          	inc	(OFST+0,sp)
5340  d01d 7b07          	ld	a,(OFST+0,sp)
5341  d01f a114          	cp	a,#20
5342  d021 25c2          	jrult	L3261
5344  d023 ccd13b        	jra	L7161
5345  d026               L1261:
5346                     ; 1569           else if (pSocket->ParseCmd == 'b') {
5348  d026 a162          	cp	a,#98
5349  d028 2646          	jrne	L1461
5350                     ; 1576 	    alpha_1 = '-';
5352                     ; 1577 	    alpha_2 = '-';
5354                     ; 1578 	    alpha_3 = '-';
5356                     ; 1580             alpha_1 = (uint8_t)(*pBuffer);
5358  d02a 1e08          	ldw	x,(OFST+1,sp)
5359  d02c f6            	ld	a,(x)
5360  d02d 6b07          	ld	(OFST+0,sp),a
5362                     ; 1581             pSocket->nParseLeft--;
5364  d02f 1e0e          	ldw	x,(OFST+7,sp)
5365  d031 6a06          	dec	(6,x)
5366                     ; 1582             pBuffer++; // nBytes already decremented for first char
5368  d033 1e08          	ldw	x,(OFST+1,sp)
5369  d035 5c            	incw	x
5370  d036 1f08          	ldw	(OFST+1,sp),x
5371                     ; 1584 	    alpha_2 = (uint8_t)(*pBuffer);
5373  d038 f6            	ld	a,(x)
5374  d039 6b05          	ld	(OFST-2,sp),a
5376                     ; 1585             pSocket->nParseLeft--;
5378  d03b 1e0e          	ldw	x,(OFST+7,sp)
5379  d03d 6a06          	dec	(6,x)
5380                     ; 1586             pBuffer++;
5382  d03f 1e08          	ldw	x,(OFST+1,sp)
5383  d041 5c            	incw	x
5384  d042 1f08          	ldw	(OFST+1,sp),x
5385                     ; 1587 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5387  d044 1e0c          	ldw	x,(OFST+5,sp)
5388  d046 5a            	decw	x
5389  d047 1f0c          	ldw	(OFST+5,sp),x
5390                     ; 1589 	    alpha_3 = (uint8_t)(*pBuffer);
5392  d049 1e08          	ldw	x,(OFST+1,sp)
5393  d04b f6            	ld	a,(x)
5394  d04c 6b06          	ld	(OFST-1,sp),a
5396                     ; 1590             pSocket->nParseLeft--;
5398  d04e 1e0e          	ldw	x,(OFST+7,sp)
5399  d050 6a06          	dec	(6,x)
5400                     ; 1591             pBuffer++;
5402  d052 1e08          	ldw	x,(OFST+1,sp)
5403  d054 5c            	incw	x
5404  d055 1f08          	ldw	(OFST+1,sp),x
5405                     ; 1592 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5407  d057 1e0c          	ldw	x,(OFST+5,sp)
5408  d059 5a            	decw	x
5409  d05a 1f0c          	ldw	(OFST+5,sp),x
5410                     ; 1594 	    SetAddresses(pSocket->ParseNum, (uint8_t)alpha_1, (uint8_t)alpha_2, (uint8_t)alpha_3);
5412  d05c 88            	push	a
5413  d05d 7b06          	ld	a,(OFST-1,sp)
5414  d05f 88            	push	a
5415  d060 7b09          	ld	a,(OFST+2,sp)
5416  d062 1610          	ldw	y,(OFST+9,sp)
5417  d064 97            	ld	xl,a
5418  d065 90e608        	ld	a,(8,y)
5419  d068 95            	ld	xh,a
5420  d069 cdd70d        	call	_SetAddresses
5422  d06c 85            	popw	x
5424  d06d ccd13b        	jra	L7161
5425  d070               L1461:
5426                     ; 1597           else if (pSocket->ParseCmd == 'c') {
5428  d070 a163          	cp	a,#99
5429  d072 2672          	jrne	L5461
5430                     ; 1603 	    alpha_1 = '-';
5432                     ; 1604 	    alpha_2 = '-';
5434                     ; 1605 	    alpha_3 = '-';
5436                     ; 1606 	    alpha_4 = '-';
5438                     ; 1607 	    alpha_5 = '-';
5440                     ; 1610   	    alpha_1 = (uint8_t)(*pBuffer);
5442  d074 1e08          	ldw	x,(OFST+1,sp)
5443  d076 f6            	ld	a,(x)
5444  d077 6b07          	ld	(OFST+0,sp),a
5446                     ; 1611             pSocket->nParseLeft--;
5448  d079 1e0e          	ldw	x,(OFST+7,sp)
5449  d07b 6a06          	dec	(6,x)
5450                     ; 1612             pBuffer++; // nBytes already decremented for first char
5452  d07d 1e08          	ldw	x,(OFST+1,sp)
5453  d07f 5c            	incw	x
5454  d080 1f08          	ldw	(OFST+1,sp),x
5455                     ; 1614 	    alpha_2 = (uint8_t)(*pBuffer);
5457  d082 f6            	ld	a,(x)
5458  d083 6b05          	ld	(OFST-2,sp),a
5460                     ; 1615             pSocket->nParseLeft--;
5462  d085 1e0e          	ldw	x,(OFST+7,sp)
5463  d087 6a06          	dec	(6,x)
5464                     ; 1616             pBuffer++;
5466  d089 1e08          	ldw	x,(OFST+1,sp)
5467  d08b 5c            	incw	x
5468  d08c 1f08          	ldw	(OFST+1,sp),x
5469                     ; 1617 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5471  d08e 1e0c          	ldw	x,(OFST+5,sp)
5472  d090 5a            	decw	x
5473  d091 1f0c          	ldw	(OFST+5,sp),x
5474                     ; 1619 	    alpha_3 = (uint8_t)(*pBuffer);
5476  d093 1e08          	ldw	x,(OFST+1,sp)
5477  d095 f6            	ld	a,(x)
5478  d096 6b06          	ld	(OFST-1,sp),a
5480                     ; 1620             pSocket->nParseLeft--;
5482  d098 1e0e          	ldw	x,(OFST+7,sp)
5483  d09a 6a06          	dec	(6,x)
5484                     ; 1621             pBuffer++;
5486  d09c 1e08          	ldw	x,(OFST+1,sp)
5487  d09e 5c            	incw	x
5488  d09f 1f08          	ldw	(OFST+1,sp),x
5489                     ; 1622 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5491  d0a1 1e0c          	ldw	x,(OFST+5,sp)
5492  d0a3 5a            	decw	x
5493  d0a4 1f0c          	ldw	(OFST+5,sp),x
5494                     ; 1624 	    alpha_4 = (uint8_t)(*pBuffer);
5496  d0a6 1e08          	ldw	x,(OFST+1,sp)
5497  d0a8 f6            	ld	a,(x)
5498  d0a9 6b03          	ld	(OFST-4,sp),a
5500                     ; 1625             pSocket->nParseLeft--;
5502  d0ab 1e0e          	ldw	x,(OFST+7,sp)
5503  d0ad 6a06          	dec	(6,x)
5504                     ; 1626             pBuffer++;
5506  d0af 1e08          	ldw	x,(OFST+1,sp)
5507  d0b1 5c            	incw	x
5508  d0b2 1f08          	ldw	(OFST+1,sp),x
5509                     ; 1627 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5511  d0b4 1e0c          	ldw	x,(OFST+5,sp)
5512  d0b6 5a            	decw	x
5513  d0b7 1f0c          	ldw	(OFST+5,sp),x
5514                     ; 1629             alpha_5 = (uint8_t)(*pBuffer);
5516  d0b9 1e08          	ldw	x,(OFST+1,sp)
5517  d0bb f6            	ld	a,(x)
5518  d0bc 6b04          	ld	(OFST-3,sp),a
5520                     ; 1630             pSocket->nParseLeft--;
5522  d0be 1e0e          	ldw	x,(OFST+7,sp)
5523  d0c0 6a06          	dec	(6,x)
5524                     ; 1631             pBuffer++;
5526  d0c2 1e08          	ldw	x,(OFST+1,sp)
5527  d0c4 5c            	incw	x
5528  d0c5 1f08          	ldw	(OFST+1,sp),x
5529                     ; 1632 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5531  d0c7 1e0c          	ldw	x,(OFST+5,sp)
5532  d0c9 5a            	decw	x
5533  d0ca 1f0c          	ldw	(OFST+5,sp),x
5534                     ; 1634 	    SetPort(pSocket->ParseNum,
5534                     ; 1635 	            (uint8_t)alpha_1,
5534                     ; 1636 		    (uint8_t)alpha_2,
5534                     ; 1637 		    (uint8_t)alpha_3,
5534                     ; 1638 		    (uint8_t)alpha_4,
5534                     ; 1639 		    (uint8_t)alpha_5);
5536  d0cc 88            	push	a
5537  d0cd 7b04          	ld	a,(OFST-3,sp)
5538  d0cf 88            	push	a
5539  d0d0 7b08          	ld	a,(OFST+1,sp)
5540  d0d2 88            	push	a
5541  d0d3 7b08          	ld	a,(OFST+1,sp)
5542  d0d5 88            	push	a
5543  d0d6 7b0b          	ld	a,(OFST+4,sp)
5544  d0d8 1612          	ldw	y,(OFST+11,sp)
5545  d0da 97            	ld	xl,a
5546  d0db 90e608        	ld	a,(8,y)
5547  d0de 95            	ld	xh,a
5548  d0df cdd797        	call	_SetPort
5550  d0e2 5b04          	addw	sp,#4
5552  d0e4 2055          	jra	L7161
5553  d0e6               L5461:
5554                     ; 1642           else if (pSocket->ParseCmd == 'd') {
5556  d0e6 a164          	cp	a,#100
5557  d0e8 262f          	jrne	L1561
5558                     ; 1648 	    alpha_1 = (uint8_t)(*pBuffer);
5560  d0ea 1e08          	ldw	x,(OFST+1,sp)
5561  d0ec f6            	ld	a,(x)
5562  d0ed 6b07          	ld	(OFST+0,sp),a
5564                     ; 1649             pSocket->nParseLeft--;
5566  d0ef 1e0e          	ldw	x,(OFST+7,sp)
5567  d0f1 6a06          	dec	(6,x)
5568                     ; 1650             pBuffer++; // nBytes already decremented for first char
5570  d0f3 1e08          	ldw	x,(OFST+1,sp)
5571  d0f5 5c            	incw	x
5572  d0f6 1f08          	ldw	(OFST+1,sp),x
5573                     ; 1652 	    alpha_2 = (uint8_t)(*pBuffer);
5575  d0f8 f6            	ld	a,(x)
5576  d0f9 6b05          	ld	(OFST-2,sp),a
5578                     ; 1653             pSocket->nParseLeft--;
5580  d0fb 1e0e          	ldw	x,(OFST+7,sp)
5581  d0fd 6a06          	dec	(6,x)
5582                     ; 1654             pBuffer++;
5584  d0ff 1e08          	ldw	x,(OFST+1,sp)
5585  d101 5c            	incw	x
5586  d102 1f08          	ldw	(OFST+1,sp),x
5587                     ; 1655 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5589  d104 1e0c          	ldw	x,(OFST+5,sp)
5590  d106 5a            	decw	x
5591  d107 1f0c          	ldw	(OFST+5,sp),x
5592                     ; 1657 	    SetMAC(pSocket->ParseNum, alpha_1, alpha_2);
5594  d109 88            	push	a
5595  d10a 7b08          	ld	a,(OFST+1,sp)
5596  d10c 160f          	ldw	y,(OFST+8,sp)
5597  d10e 97            	ld	xl,a
5598  d10f 90e608        	ld	a,(8,y)
5599  d112 95            	ld	xh,a
5600  d113 cdd7db        	call	_SetMAC
5602  d116 84            	pop	a
5604  d117 2022          	jra	L7161
5605  d119               L1561:
5606                     ; 1660 	  else if (pSocket->ParseCmd == 'g') {
5608  d119 a167          	cp	a,#103
5609  d11b 261e          	jrne	L7161
5610                     ; 1663             if ((uint8_t)(*pBuffer) == '1') invert_output = 1;
5612  d11d 1e08          	ldw	x,(OFST+1,sp)
5613  d11f f6            	ld	a,(x)
5614  d120 a131          	cp	a,#49
5615  d122 2606          	jrne	L7561
5618  d124 3501005e      	mov	_invert_output,#1
5620  d128 2004          	jra	L1661
5621  d12a               L7561:
5622                     ; 1664             else invert_output = 0;
5624  d12a 725f005e      	clr	_invert_output
5625  d12e               L1661:
5626                     ; 1665 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--;
5628  d12e 1e0e          	ldw	x,(OFST+7,sp)
5629  d130 e606          	ld	a,(6,x)
5630  d132 2702          	jreq	L5661
5633  d134               LC025:
5635  d134 6a06          	dec	(6,x)
5637  d136               L5661:
5638                     ; 1667             pBuffer++;
5641  d136 1e08          	ldw	x,(OFST+1,sp)
5642  d138 5c            	incw	x
5643  d139 1f08          	ldw	(OFST+1,sp),x
5644  d13b               L7161:
5645                     ; 1670           pSocket->ParseState = PARSE_DELIM;
5647  d13b 1e0e          	ldw	x,(OFST+7,sp)
5648  d13d               LC018:
5650  d13d a605          	ld	a,#5
5651  d13f e709          	ld	(9,x),a
5653  d141 2015          	jra	L3551
5654  d143               L5061:
5655                     ; 1673         else if (pSocket->ParseState == PARSE_DELIM) {
5657  d143 a105          	cp	a,#5
5658  d145 2611          	jrne	L3551
5659                     ; 1674           if (pSocket->nParseLeft > 0) {
5661  d147 e606          	ld	a,(6,x)
5662  d149 270b          	jreq	L3761
5663                     ; 1675             pSocket->ParseState = PARSE_CMD;
5665  d14b 6f09          	clr	(9,x)
5666                     ; 1676             pSocket->nParseLeft--;
5668  d14d               LC026:
5672  d14d 6a06          	dec	(6,x)
5673                     ; 1677             pBuffer++;
5675  d14f               LC017:
5679  d14f 1e08          	ldw	x,(OFST+1,sp)
5680  d151 5c            	incw	x
5681  d152 1f08          	ldw	(OFST+1,sp),x
5683  d154 2002          	jra	L3551
5684  d156               L3761:
5685                     ; 1680             pSocket->nParseLeft = 0; // Something out of sync - end the parsing
5687  d156 e706          	ld	(6,x),a
5688  d158               L3551:
5689                     ; 1684         if (pSocket->nParseLeft == 0) {
5691  d158 1e0e          	ldw	x,(OFST+7,sp)
5692  d15a e606          	ld	a,(6,x)
5693  d15c 2608          	jrne	L3251
5694                     ; 1686           pSocket->nState = STATE_SENDHEADER;
5696  d15e a60b          	ld	a,#11
5697  d160 f7            	ld	(x),a
5698                     ; 1687           break;
5699  d161               L5251:
5700                     ; 1691       pSocket->nState = STATE_SENDHEADER;
5702  d161 1e0e          	ldw	x,(OFST+7,sp)
5703  d163 f7            	ld	(x),a
5704  d164 200f          	jra	L7151
5705  d166               L3251:
5706                     ; 1474       while (nBytes--) {
5708  d166 1e0c          	ldw	x,(OFST+5,sp)
5709  d168 5a            	decw	x
5710  d169 1f0c          	ldw	(OFST+5,sp),x
5711  d16b 5c            	incw	x
5712  d16c 2703cccf0d    	jrne	L1251
5713  d171 a60b          	ld	a,#11
5714  d173 20ec          	jra	L5251
5715  d175               L7151:
5716                     ; 1694     if (pSocket->nState == STATE_PARSEGET) {
5718  d175 a10d          	cp	a,#13
5719  d177 2703ccd42d    	jrne	L1071
5721  d17c ccd422        	jra	L5071
5722  d17f               L3071:
5723                     ; 1708         if (pSocket->ParseState == PARSE_SLASH1) {
5725  d17f 1e0e          	ldw	x,(OFST+7,sp)
5726  d181 e609          	ld	a,(9,x)
5727  d183 a106          	cp	a,#6
5728  d185 263e          	jrne	L1171
5729                     ; 1711           pSocket->ParseCmd = *pBuffer;
5731  d187 1e08          	ldw	x,(OFST+1,sp)
5732  d189 f6            	ld	a,(x)
5733  d18a 1e0e          	ldw	x,(OFST+7,sp)
5734  d18c e707          	ld	(7,x),a
5735                     ; 1712           pSocket->nParseLeft--;
5737  d18e 6a06          	dec	(6,x)
5738                     ; 1713           pBuffer++;
5740  d190 1e08          	ldw	x,(OFST+1,sp)
5741  d192 5c            	incw	x
5742  d193 1f08          	ldw	(OFST+1,sp),x
5743                     ; 1714 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
5745  d195 1e0e          	ldw	x,(OFST+7,sp)
5746  d197 e607          	ld	a,(7,x)
5747  d199 a12f          	cp	a,#47
5748  d19b 2604          	jrne	L3171
5749                     ; 1715 	    pSocket->ParseState = PARSE_NUM10;
5751  d19d a601          	ld	a,#1
5752  d19f e709          	ld	(9,x),a
5753  d1a1               L3171:
5754                     ; 1717 	  if (pSocket->nParseLeft == 0) {
5756  d1a1 e606          	ld	a,(6,x)
5757  d1a3 2703ccd400    	jrne	L7171
5758                     ; 1719 	    current_webpage = WEBPAGE_DEFAULT;
5760  d1a8 c7001b        	ld	_current_webpage,a
5761                     ; 1720             pSocket->pData = g_HtmlPageDefault;
5763  d1ab 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5764  d1af ef01          	ldw	(1,x),y
5765                     ; 1721             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5767  d1b1 90ae1647      	ldw	y,#5703
5768  d1b5 ef03          	ldw	(3,x),y
5769                     ; 1722             pSocket->nNewlines = 0;
5771  d1b7 e705          	ld	(5,x),a
5772                     ; 1723             pSocket->nState = STATE_SENDHEADER;
5774  d1b9 a60b          	ld	a,#11
5775  d1bb f7            	ld	(x),a
5776                     ; 1724             pSocket->nPrevBytes = 0xFFFF;
5778  d1bc 90aeffff      	ldw	y,#65535
5779  d1c0 ef0a          	ldw	(10,x),y
5780                     ; 1725             break;
5782  d1c2 ccd42d        	jra	L1071
5783  d1c5               L1171:
5784                     ; 1728         else if (pSocket->ParseState == PARSE_NUM10) {
5786  d1c5 a101          	cp	a,#1
5787  d1c7 264e          	jrne	L1271
5788                     ; 1733 	  if (*pBuffer == ' ') {
5790  d1c9 1e08          	ldw	x,(OFST+1,sp)
5791  d1cb f6            	ld	a,(x)
5792  d1cc a120          	cp	a,#32
5793  d1ce 2620          	jrne	L3271
5794                     ; 1734 	    current_webpage = WEBPAGE_DEFAULT;
5796  d1d0 725f001b      	clr	_current_webpage
5797                     ; 1735             pSocket->pData = g_HtmlPageDefault;
5799  d1d4 1e0e          	ldw	x,(OFST+7,sp)
5800  d1d6 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5801  d1da ef01          	ldw	(1,x),y
5802                     ; 1736             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5804  d1dc 90ae1647      	ldw	y,#5703
5805  d1e0 ef03          	ldw	(3,x),y
5806                     ; 1737             pSocket->nNewlines = 0;
5808  d1e2 6f05          	clr	(5,x)
5809                     ; 1738             pSocket->nState = STATE_SENDHEADER;
5811  d1e4 a60b          	ld	a,#11
5812  d1e6 f7            	ld	(x),a
5813                     ; 1739             pSocket->nPrevBytes = 0xFFFF;
5815  d1e7 90aeffff      	ldw	y,#65535
5816  d1eb ef0a          	ldw	(10,x),y
5817                     ; 1740 	    break;
5819  d1ed ccd42d        	jra	L1071
5820  d1f0               L3271:
5821                     ; 1743 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5823  d1f0 a130          	cp	a,#48
5824  d1f2 2504          	jrult	L5271
5826  d1f4 a13a          	cp	a,#58
5827  d1f6 2506          	jrult	L7271
5829  d1f8               L5271:
5830                     ; 1744 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5832  d1f8 1e0e          	ldw	x,(OFST+7,sp)
5833  d1fa a605          	ld	a,#5
5834  d1fc e709          	ld	(9,x),a
5835  d1fe               L7271:
5836                     ; 1745           if (pSocket->ParseState == PARSE_NUM10) {      // Still good - parse number
5838  d1fe 1e0e          	ldw	x,(OFST+7,sp)
5839  d200 e609          	ld	a,(9,x)
5840  d202 4a            	dec	a
5841  d203 26a0          	jrne	L7171
5842                     ; 1746             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5844  d205 1e08          	ldw	x,(OFST+1,sp)
5845  d207 f6            	ld	a,(x)
5846  d208 97            	ld	xl,a
5847  d209 a60a          	ld	a,#10
5848  d20b 42            	mul	x,a
5849  d20c 9f            	ld	a,xl
5850  d20d 1e0e          	ldw	x,(OFST+7,sp)
5851  d20f a0e0          	sub	a,#224
5852  d211 e708          	ld	(8,x),a
5853                     ; 1747 	    pSocket->ParseState = PARSE_NUM1;
5855  d213 a602          	ld	a,#2
5856                     ; 1748             pSocket->nParseLeft--;
5857                     ; 1749             pBuffer++;
5858  d215 202c          	jp	LC023
5859  d217               L1271:
5860                     ; 1753         else if (pSocket->ParseState == PARSE_NUM1) {
5862  d217 a102          	cp	a,#2
5863  d219 2634          	jrne	L5371
5864                     ; 1754 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5866  d21b 1e08          	ldw	x,(OFST+1,sp)
5867  d21d f6            	ld	a,(x)
5868  d21e a130          	cp	a,#48
5869  d220 2504          	jrult	L7371
5871  d222 a13a          	cp	a,#58
5872  d224 2506          	jrult	L1471
5874  d226               L7371:
5875                     ; 1755 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5877  d226 1e0e          	ldw	x,(OFST+7,sp)
5878  d228 a605          	ld	a,#5
5879  d22a e709          	ld	(9,x),a
5880  d22c               L1471:
5881                     ; 1756           if (pSocket->ParseState == PARSE_NUM1) {       // Still good - parse number
5883  d22c 1e0e          	ldw	x,(OFST+7,sp)
5884  d22e e609          	ld	a,(9,x)
5885  d230 a102          	cp	a,#2
5886  d232 2703ccd400    	jrne	L7171
5887                     ; 1757             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5889  d237 1608          	ldw	y,(OFST+1,sp)
5890  d239 90f6          	ld	a,(y)
5891  d23b a030          	sub	a,#48
5892  d23d eb08          	add	a,(8,x)
5893  d23f e708          	ld	(8,x),a
5894                     ; 1758             pSocket->ParseState = PARSE_VAL;
5896  d241 a604          	ld	a,#4
5897                     ; 1759             pSocket->nParseLeft--;
5899                     ; 1760             pBuffer++;
5901  d243               LC023:
5902  d243 e709          	ld	(9,x),a
5904  d245 6a06          	dec	(6,x)
5906  d247 1e08          	ldw	x,(OFST+1,sp)
5907  d249 5c            	incw	x
5908  d24a 1f08          	ldw	(OFST+1,sp),x
5909  d24c ccd400        	jra	L7171
5910  d24f               L5371:
5911                     ; 1763         else if (pSocket->ParseState == PARSE_VAL) {
5913  d24f a104          	cp	a,#4
5914  d251 2703ccd408    	jrne	L7471
5915                     ; 1815           switch(pSocket->ParseNum)
5917  d256 e608          	ld	a,(8,x)
5919                     ; 1949 	      break;
5920  d258 a144          	cp	a,#68
5921  d25a 2407          	jruge	L472
5922  d25c 5f            	clrw	x
5923  d25d 97            	ld	xl,a
5924  d25e 58            	sllw	x
5925  d25f debd5a        	ldw	x,(L672,x)
5926  d262 fc            	jp	(x)
5927  d263               L472:
5928  d263 a05b          	sub	a,#91
5929  d265 2603ccd3c4    	jreq	L1421
5930  d26a a008          	sub	a,#8
5931  d26c 2603ccd3ca    	jreq	L3421
5932  d271 ccd3df        	jra	L5421
5933  d274               L7111:
5934                     ; 1817 	    case 0:  Relays_8to1 &= (uint8_t)(~0x01);  break; // Relay-01 OFF
5936  d274 7211005f      	bres	_Relays_8to1,#0
5939  d278 ccd3fa        	jra	L3571
5940  d27b               L1211:
5941                     ; 1818 	    case 1:  Relays_8to1 |= (uint8_t)0x01;     break; // Relay-01 ON
5943  d27b 7210005f      	bset	_Relays_8to1,#0
5946  d27f ccd3fa        	jra	L3571
5947  d282               L3211:
5948                     ; 1819 	    case 2:  Relays_8to1 &= (uint8_t)(~0x02);  break; // Relay-02 OFF
5950  d282 7213005f      	bres	_Relays_8to1,#1
5953  d286 ccd3fa        	jra	L3571
5954  d289               L5211:
5955                     ; 1820 	    case 3:  Relays_8to1 |= (uint8_t)0x02;     break; // Relay-02 ON
5957  d289 7212005f      	bset	_Relays_8to1,#1
5960  d28d ccd3fa        	jra	L3571
5961  d290               L7211:
5962                     ; 1821 	    case 4:  Relays_8to1 &= (uint8_t)(~0x04);  break; // Relay-03 OFF
5964  d290 7215005f      	bres	_Relays_8to1,#2
5967  d294 ccd3fa        	jra	L3571
5968  d297               L1311:
5969                     ; 1822 	    case 5:  Relays_8to1 |= (uint8_t)0x04;     break; // Relay-03 ON
5971  d297 7214005f      	bset	_Relays_8to1,#2
5974  d29b ccd3fa        	jra	L3571
5975  d29e               L3311:
5976                     ; 1823 	    case 6:  Relays_8to1 &= (uint8_t)(~0x08);  break; // Relay-04 OFF
5978  d29e 7217005f      	bres	_Relays_8to1,#3
5981  d2a2 ccd3fa        	jra	L3571
5982  d2a5               L5311:
5983                     ; 1824 	    case 7:  Relays_8to1 |= (uint8_t)0x08;     break; // Relay-04 ON
5985  d2a5 7216005f      	bset	_Relays_8to1,#3
5988  d2a9 ccd3fa        	jra	L3571
5989  d2ac               L7311:
5990                     ; 1825 	    case 8:  Relays_8to1 &= (uint8_t)(~0x10);  break; // Relay-05 OFF
5992  d2ac 7219005f      	bres	_Relays_8to1,#4
5995  d2b0 ccd3fa        	jra	L3571
5996  d2b3               L1411:
5997                     ; 1826 	    case 9:  Relays_8to1 |= (uint8_t)0x10;     break; // Relay-05 ON
5999  d2b3 7218005f      	bset	_Relays_8to1,#4
6002  d2b7 ccd3fa        	jra	L3571
6003  d2ba               L3411:
6004                     ; 1827 	    case 10: Relays_8to1 &= (uint8_t)(~0x20);  break; // Relay-06 OFF
6006  d2ba 721b005f      	bres	_Relays_8to1,#5
6009  d2be ccd3fa        	jra	L3571
6010  d2c1               L5411:
6011                     ; 1828 	    case 11: Relays_8to1 |= (uint8_t)0x20;     break; // Relay-06 ON
6013  d2c1 721a005f      	bset	_Relays_8to1,#5
6016  d2c5 ccd3fa        	jra	L3571
6017  d2c8               L7411:
6018                     ; 1829 	    case 12: Relays_8to1 &= (uint8_t)(~0x40);  break; // Relay-07 OFF
6020  d2c8 721d005f      	bres	_Relays_8to1,#6
6023  d2cc ccd3fa        	jra	L3571
6024  d2cf               L1511:
6025                     ; 1830 	    case 13: Relays_8to1 |= (uint8_t)0x40;     break; // Relay-07 ON
6027  d2cf 721c005f      	bset	_Relays_8to1,#6
6030  d2d3 ccd3fa        	jra	L3571
6031  d2d6               L3511:
6032                     ; 1831 	    case 14: Relays_8to1 &= (uint8_t)(~0x80);  break; // Relay-08 OFF
6034  d2d6 721f005f      	bres	_Relays_8to1,#7
6037  d2da ccd3fa        	jra	L3571
6038  d2dd               L5511:
6039                     ; 1832 	    case 15: Relays_8to1 |= (uint8_t)0x80;     break; // Relay-08 ON
6041  d2dd 721e005f      	bset	_Relays_8to1,#7
6044  d2e1 ccd3fa        	jra	L3571
6045  d2e4               L7511:
6046                     ; 1833 	    case 16: Relays_16to9 &= (uint8_t)(~0x01); break; // Relay-09 OFF
6048  d2e4 72110060      	bres	_Relays_16to9,#0
6051  d2e8 ccd3fa        	jra	L3571
6052  d2eb               L1611:
6053                     ; 1834 	    case 17: Relays_16to9 |= (uint8_t)0x01;    break; // Relay-09 ON
6055  d2eb 72100060      	bset	_Relays_16to9,#0
6058  d2ef ccd3fa        	jra	L3571
6059  d2f2               L3611:
6060                     ; 1835 	    case 18: Relays_16to9 &= (uint8_t)(~0x02); break; // Relay-10 OFF
6062  d2f2 72130060      	bres	_Relays_16to9,#1
6065  d2f6 ccd3fa        	jra	L3571
6066  d2f9               L5611:
6067                     ; 1836 	    case 19: Relays_16to9 |= (uint8_t)0x02;    break; // Relay-10 ON
6069  d2f9 72120060      	bset	_Relays_16to9,#1
6072  d2fd ccd3fa        	jra	L3571
6073  d300               L7611:
6074                     ; 1837 	    case 20: Relays_16to9 &= (uint8_t)(~0x04); break; // Relay-11 OFF
6076  d300 72150060      	bres	_Relays_16to9,#2
6079  d304 ccd3fa        	jra	L3571
6080  d307               L1711:
6081                     ; 1838 	    case 21: Relays_16to9 |= (uint8_t)0x04;    break; // Relay-11 ON
6083  d307 72140060      	bset	_Relays_16to9,#2
6086  d30b ccd3fa        	jra	L3571
6087  d30e               L3711:
6088                     ; 1839 	    case 22: Relays_16to9 &= (uint8_t)(~0x08); break; // Relay-12 OFF
6090  d30e 72170060      	bres	_Relays_16to9,#3
6093  d312 ccd3fa        	jra	L3571
6094  d315               L5711:
6095                     ; 1840 	    case 23: Relays_16to9 |= (uint8_t)0x08;    break; // Relay-12 ON
6097  d315 72160060      	bset	_Relays_16to9,#3
6100  d319 ccd3fa        	jra	L3571
6101  d31c               L7711:
6102                     ; 1841 	    case 24: Relays_16to9 &= (uint8_t)(~0x10); break; // Relay-13 OFF
6104  d31c 72190060      	bres	_Relays_16to9,#4
6107  d320 ccd3fa        	jra	L3571
6108  d323               L1021:
6109                     ; 1842 	    case 25: Relays_16to9 |= (uint8_t)0x10;    break; // Relay-13 ON
6111  d323 72180060      	bset	_Relays_16to9,#4
6114  d327 ccd3fa        	jra	L3571
6115  d32a               L3021:
6116                     ; 1843 	    case 26: Relays_16to9 &= (uint8_t)(~0x20); break; // Relay-14 OFF
6118  d32a 721b0060      	bres	_Relays_16to9,#5
6121  d32e ccd3fa        	jra	L3571
6122  d331               L5021:
6123                     ; 1844 	    case 27: Relays_16to9 |= (uint8_t)0x20;    break; // Relay-14 ON
6125  d331 721a0060      	bset	_Relays_16to9,#5
6128  d335 ccd3fa        	jra	L3571
6129  d338               L7021:
6130                     ; 1845 	    case 28: Relays_16to9 &= (uint8_t)(~0x40); break; // Relay-15 OFF
6132  d338 721d0060      	bres	_Relays_16to9,#6
6135  d33c ccd3fa        	jra	L3571
6136  d33f               L1121:
6137                     ; 1846 	    case 29: Relays_16to9 |= (uint8_t)0x40;    break; // Relay-15 ON
6139  d33f 721c0060      	bset	_Relays_16to9,#6
6142  d343 ccd3fa        	jra	L3571
6143  d346               L3121:
6144                     ; 1847 	    case 30: Relays_16to9 &= (uint8_t)(~0x80); break; // Relay-16 OFF
6146  d346 721f0060      	bres	_Relays_16to9,#7
6149  d34a ccd3fa        	jra	L3571
6150  d34d               L5121:
6151                     ; 1848 	    case 31: Relays_16to9 |= (uint8_t)0x80;    break; // Relay-16 ON
6153  d34d 721e0060      	bset	_Relays_16to9,#7
6156  d351 ccd3fa        	jra	L3571
6157  d354               L7121:
6158                     ; 1849 	    case 55:
6158                     ; 1850   	      Relays_8to1 = (uint8_t)0xff; // Relays 1-8 ON
6160  d354 35ff005f      	mov	_Relays_8to1,#255
6161                     ; 1851   	      Relays_16to9 = (uint8_t)0xff; // Relays 9-16 ON
6163  d358 35ff0060      	mov	_Relays_16to9,#255
6164                     ; 1852 	      break;
6166  d35c ccd3fa        	jra	L3571
6167  d35f               L1221:
6168                     ; 1853 	    case 56:
6168                     ; 1854               Relays_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
6170  d35f 725f005f      	clr	_Relays_8to1
6171                     ; 1855               Relays_16to9 = (uint8_t)0x00; // Relays 9-16 OFF
6173  d363 725f0060      	clr	_Relays_16to9
6174                     ; 1856 	      break;
6176  d367 ccd3fa        	jra	L3571
6177  d36a               L3221:
6178                     ; 1858 	    case 60: // Show relay states page
6178                     ; 1859 	      current_webpage = WEBPAGE_DEFAULT;
6179                     ; 1860               pSocket->pData = g_HtmlPageDefault;
6180                     ; 1861               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
6181                     ; 1862               pSocket->nNewlines = 0;
6182                     ; 1863               pSocket->nState = STATE_CONNECTED;
6183                     ; 1864               pSocket->nPrevBytes = 0xFFFF;
6184                     ; 1865 	      break;
6186  d36a 2073          	jp	L5421
6187  d36c               L5221:
6188                     ; 1867 	    case 61: // Show address settings page
6188                     ; 1868 	      current_webpage = WEBPAGE_ADDRESS;
6190  d36c 3501001b      	mov	_current_webpage,#1
6191                     ; 1869               pSocket->pData = g_HtmlPageAddress;
6193  d370 1e0e          	ldw	x,(OFST+7,sp)
6194  d372 90ae96d0      	ldw	y,#L71_g_HtmlPageAddress
6195  d376 ef01          	ldw	(1,x),y
6196                     ; 1870               pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
6198  d378 90ae1117      	ldw	y,#4375
6199                     ; 1871               pSocket->nNewlines = 0;
6200                     ; 1872               pSocket->nState = STATE_CONNECTED;
6201                     ; 1873               pSocket->nPrevBytes = 0xFFFF;
6202                     ; 1874 	      break;
6204  d37c 2071          	jp	LC020
6205  d37e               L7221:
6206                     ; 1877 	    case 63: // Show help page 1
6206                     ; 1878 	      current_webpage = WEBPAGE_HELP;
6208  d37e 3503001b      	mov	_current_webpage,#3
6209                     ; 1879               pSocket->pData = g_HtmlPageHelp;
6211  d382 1e0e          	ldw	x,(OFST+7,sp)
6212  d384 90aea7e8      	ldw	y,#L12_g_HtmlPageHelp
6213  d388 ef01          	ldw	(1,x),y
6214                     ; 1880               pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
6216  d38a 90ae076f      	ldw	y,#1903
6217                     ; 1881               pSocket->nNewlines = 0;
6218                     ; 1882               pSocket->nState = STATE_CONNECTED;
6219                     ; 1883               pSocket->nPrevBytes = 0xFFFF;
6220                     ; 1884 	      break;
6222  d38e 205f          	jp	LC020
6223  d390               L1321:
6224                     ; 1886 	    case 64: // Show help page 2
6224                     ; 1887 	      current_webpage = WEBPAGE_HELP2;
6226  d390 3504001b      	mov	_current_webpage,#4
6227                     ; 1888               pSocket->pData = g_HtmlPageHelp2;
6229  d394 1e0e          	ldw	x,(OFST+7,sp)
6230  d396 90aeaf58      	ldw	y,#L32_g_HtmlPageHelp2
6231  d39a ef01          	ldw	(1,x),y
6232                     ; 1889               pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
6234  d39c 90ae02a8      	ldw	y,#680
6235                     ; 1890               pSocket->nNewlines = 0;
6236                     ; 1891               pSocket->nState = STATE_CONNECTED;
6237                     ; 1892               pSocket->nPrevBytes = 0xFFFF;
6238                     ; 1893 	      break;
6240  d3a0 204d          	jp	LC020
6241  d3a2               L3321:
6242                     ; 1896 	    case 65: // Flash LED for diagnostics
6242                     ; 1897 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6242                     ; 1898 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6242                     ; 1899 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6242                     ; 1900 	      debugflash();
6244  d3a2 cde264        	call	_debugflash
6246                     ; 1901 	      debugflash();
6248  d3a5 cde264        	call	_debugflash
6250                     ; 1902 	      debugflash();
6252  d3a8 cde264        	call	_debugflash
6254                     ; 1906 	      break;
6256  d3ab 204d          	jra	L3571
6257  d3ad               L5321:
6258                     ; 1909             case 66: // Show statistics page
6258                     ; 1910 	      current_webpage = WEBPAGE_STATS;
6259                     ; 1911               pSocket->pData = g_HtmlPageStats;
6260                     ; 1912               pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
6261                     ; 1913               pSocket->nNewlines = 0;
6262                     ; 1914               pSocket->nState = STATE_CONNECTED;
6263                     ; 1915               pSocket->nPrevBytes = 0xFFFF;
6264                     ; 1916 	      break;
6266  d3ad 2003          	jp	LC022
6267  d3af               L7321:
6268                     ; 1918             case 67: // Clear statistics
6268                     ; 1919 	      uip_init_stats();
6270  d3af cde5b6        	call	_uip_init_stats
6272                     ; 1920 	      current_webpage = WEBPAGE_STATS;
6274                     ; 1921               pSocket->pData = g_HtmlPageStats;
6276                     ; 1922               pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
6278  d3b2               LC022:
6280  d3b2 3505001b      	mov	_current_webpage,#5
6282  d3b6 1e0e          	ldw	x,(OFST+7,sp)
6283  d3b8 90aeb201      	ldw	y,#L52_g_HtmlPageStats
6284  d3bc ef01          	ldw	(1,x),y
6286  d3be 90ae0a9b      	ldw	y,#2715
6287                     ; 1923               pSocket->nNewlines = 0;
6288                     ; 1924               pSocket->nState = STATE_CONNECTED;
6289                     ; 1925               pSocket->nPrevBytes = 0xFFFF;
6290                     ; 1926 	      break;
6292  d3c2 202b          	jp	LC020
6293  d3c4               L1421:
6294                     ; 1929 	    case 91: // Reboot
6294                     ; 1930 	      submit_changes = 2;
6296  d3c4 3502001d      	mov	_submit_changes,#2
6297                     ; 1931 	      break;
6299  d3c8 2030          	jra	L3571
6300  d3ca               L3421:
6301                     ; 1933             case 99: // Show simplified relay state page
6301                     ; 1934 	      current_webpage = WEBPAGE_RSTATE;
6303  d3ca 3506001b      	mov	_current_webpage,#6
6304                     ; 1935               pSocket->pData = g_HtmlPageRstate;
6306  d3ce 90aebc9d      	ldw	y,#L72_g_HtmlPageRstate
6307  d3d2 ef01          	ldw	(1,x),y
6308                     ; 1936               pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
6310  d3d4 90ae0078      	ldw	y,#120
6311  d3d8 ef03          	ldw	(3,x),y
6312                     ; 1937               pSocket->nNewlines = 0;
6314  d3da e705          	ld	(5,x),a
6315                     ; 1938               pSocket->nState = STATE_CONNECTED;
6317  d3dc f7            	ld	(x),a
6318                     ; 1939               pSocket->nPrevBytes = 0xFFFF;
6319                     ; 1940 	      break;
6321  d3dd 2015          	jp	LC019
6322  d3df               L5421:
6323                     ; 1942 	    default: // Show relay state page
6323                     ; 1943 	      current_webpage = WEBPAGE_DEFAULT;
6325                     ; 1944               pSocket->pData = g_HtmlPageDefault;
6327                     ; 1945               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
6330  d3df 725f001b      	clr	_current_webpage
6332  d3e3 1e0e          	ldw	x,(OFST+7,sp)
6333  d3e5 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
6334  d3e9 ef01          	ldw	(1,x),y
6336  d3eb 90ae1647      	ldw	y,#5703
6337                     ; 1946               pSocket->nNewlines = 0;
6339                     ; 1947               pSocket->nState = STATE_CONNECTED;
6341  d3ef               LC020:
6342  d3ef ef03          	ldw	(3,x),y
6349  d3f1 6f05          	clr	(5,x)
6356  d3f3 7f            	clr	(x)
6357                     ; 1948               pSocket->nPrevBytes = 0xFFFF;
6359  d3f4               LC019:
6367  d3f4 90aeffff      	ldw	y,#65535
6368  d3f8 ef0a          	ldw	(10,x),y
6369                     ; 1949 	      break;
6371  d3fa               L3571:
6372                     ; 1951           pSocket->ParseState = PARSE_DELIM;
6374  d3fa 1e0e          	ldw	x,(OFST+7,sp)
6375  d3fc a605          	ld	a,#5
6376  d3fe e709          	ld	(9,x),a
6378  d400               L7171:
6379                     ; 1965         if (pSocket->nParseLeft == 0) {
6381  d400 1e0e          	ldw	x,(OFST+7,sp)
6382  d402 e606          	ld	a,(6,x)
6383  d404 261c          	jrne	L5071
6384                     ; 1967           pSocket->nState = STATE_SENDHEADER;
6385                     ; 1968           break;
6387  d406 2015          	jp	LC024
6388  d408               L7471:
6389                     ; 1954         else if (pSocket->ParseState == PARSE_DELIM) {
6391  d408 a105          	cp	a,#5
6392  d40a 26f4          	jrne	L7171
6393                     ; 1956           pSocket->ParseState = PARSE_DELIM;
6395  d40c a605          	ld	a,#5
6396  d40e e709          	ld	(9,x),a
6397                     ; 1957           pSocket->nParseLeft--;
6399  d410 6a06          	dec	(6,x)
6400                     ; 1958           pBuffer++;
6402  d412 1e08          	ldw	x,(OFST+1,sp)
6403  d414 5c            	incw	x
6404  d415 1f08          	ldw	(OFST+1,sp),x
6405                     ; 1959 	  if (pSocket->nParseLeft == 0) {
6407  d417 1e0e          	ldw	x,(OFST+7,sp)
6408  d419 e606          	ld	a,(6,x)
6409  d41b 26e3          	jrne	L7171
6410                     ; 1961             pSocket->nState = STATE_SENDHEADER;
6412  d41d               LC024:
6414  d41d a60b          	ld	a,#11
6415  d41f f7            	ld	(x),a
6416                     ; 1962             break;
6418  d420 200b          	jra	L1071
6419  d422               L5071:
6420                     ; 1707       while (nBytes--) {
6422  d422 1e0c          	ldw	x,(OFST+5,sp)
6423  d424 5a            	decw	x
6424  d425 1f0c          	ldw	(OFST+5,sp),x
6425  d427 5c            	incw	x
6426  d428 2703ccd17f    	jrne	L3071
6427  d42d               L1071:
6428                     ; 1973     if (pSocket->nState == STATE_SENDHEADER) {
6430  d42d 1e0e          	ldw	x,(OFST+7,sp)
6431  d42f f6            	ld	a,(x)
6432  d430 a10b          	cp	a,#11
6433  d432 2623          	jrne	L5671
6434                     ; 1974       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
6436  d434 ee03          	ldw	x,(3,x)
6437  d436 cdf5c6        	call	c_uitolx
6439  d439 be02          	ldw	x,c_lreg+2
6440  d43b 89            	pushw	x
6441  d43c be00          	ldw	x,c_lreg
6442  d43e 89            	pushw	x
6443  d43f ce01d9        	ldw	x,_uip_appdata
6444  d442 cdc41d        	call	L7_CopyHttpHeader
6446  d445 5b04          	addw	sp,#4
6447  d447 89            	pushw	x
6448  d448 ce01d9        	ldw	x,_uip_appdata
6449  d44b cdefa3        	call	_uip_send
6451  d44e 85            	popw	x
6452                     ; 1975       pSocket->nState = STATE_SENDDATA;
6454  d44f 1e0e          	ldw	x,(OFST+7,sp)
6455  d451 a60c          	ld	a,#12
6456  d453 f7            	ld	(x),a
6457                     ; 1976       return;
6459  d454 cccdc3        	jra	L023
6460  d457               L5671:
6461                     ; 1979     if (pSocket->nState == STATE_SENDDATA) {
6463  d457 a10c          	cp	a,#12
6464  d459 26f9          	jrne	L023
6465                     ; 1983       pSocket->nPrevBytes = pSocket->nDataLeft;
6467  d45b 9093          	ldw	y,x
6468  d45d 90ee03        	ldw	y,(3,y)
6469  d460 ef0a          	ldw	(10,x),y
6470                     ; 1984       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6472  d462 ce01d5        	ldw	x,_uip_conn
6473  d465 ee12          	ldw	x,(18,x)
6474  d467 89            	pushw	x
6475  d468 1e10          	ldw	x,(OFST+9,sp)
6476  d46a 1c0003        	addw	x,#3
6477  d46d 89            	pushw	x
6478  d46e 1e12          	ldw	x,(OFST+11,sp)
6479  d470 5c            	incw	x
6480  d471 89            	pushw	x
6481  d472 ce01d9        	ldw	x,_uip_appdata
6482  d475 cdc4b5        	call	L11_CopyHttpData
6484  d478 5b06          	addw	sp,#6
6485  d47a 1f01          	ldw	(OFST-6,sp),x
6487                     ; 1985       pSocket->nPrevBytes -= pSocket->nDataLeft;
6489  d47c 1e0e          	ldw	x,(OFST+7,sp)
6490  d47e e60b          	ld	a,(11,x)
6491  d480 e004          	sub	a,(4,x)
6492  d482 e70b          	ld	(11,x),a
6493  d484 e60a          	ld	a,(10,x)
6494  d486 e203          	sbc	a,(3,x)
6495  d488 e70a          	ld	(10,x),a
6496                     ; 1987       if (nBufSize == 0) {
6498  d48a 1e01          	ldw	x,(OFST-6,sp)
6499  d48c 262d          	jrne	LC014
6500                     ; 1989         uip_close();
6502  d48e               LC015:
6504  d48e 35100088      	mov	_uip_flags,#16
6506  d492 cccdc3        	jra	L023
6507                     ; 1993         uip_send(uip_appdata, nBufSize);
6509                     ; 1995       return;
6511  d495               L7731:
6512                     ; 1999   else if (uip_rexmit()) {
6514  d495 7204008803cc  	btjf	_uip_flags,#2,L5731
6515                     ; 2000     if (pSocket->nPrevBytes == 0xFFFF) {
6517  d49d 160e          	ldw	y,(OFST+7,sp)
6518  d49f 90ee0a        	ldw	y,(10,y)
6519  d4a2 905c          	incw	y
6520  d4a4 2620          	jrne	L1002
6521                     ; 2002       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
6523  d4a6 1e0e          	ldw	x,(OFST+7,sp)
6524  d4a8 ee03          	ldw	x,(3,x)
6525  d4aa cdf5c6        	call	c_uitolx
6527  d4ad be02          	ldw	x,c_lreg+2
6528  d4af 89            	pushw	x
6529  d4b0 be00          	ldw	x,c_lreg
6530  d4b2 89            	pushw	x
6531  d4b3 ce01d9        	ldw	x,_uip_appdata
6532  d4b6 cdc41d        	call	L7_CopyHttpHeader
6534  d4b9 5b04          	addw	sp,#4
6536  d4bb               LC014:
6538  d4bb 89            	pushw	x
6539  d4bc ce01d9        	ldw	x,_uip_appdata
6540  d4bf cdefa3        	call	_uip_send
6541  d4c2 85            	popw	x
6543  d4c3 cccdc3        	jra	L023
6544  d4c6               L1002:
6545                     ; 2005       pSocket->pData -= pSocket->nPrevBytes;
6547  d4c6 1e0e          	ldw	x,(OFST+7,sp)
6548  d4c8 e602          	ld	a,(2,x)
6549  d4ca e00b          	sub	a,(11,x)
6550  d4cc e702          	ld	(2,x),a
6551  d4ce e601          	ld	a,(1,x)
6552  d4d0 e20a          	sbc	a,(10,x)
6553  d4d2 e701          	ld	(1,x),a
6554                     ; 2006       pSocket->nDataLeft += pSocket->nPrevBytes;
6556  d4d4 e604          	ld	a,(4,x)
6557  d4d6 eb0b          	add	a,(11,x)
6558  d4d8 e704          	ld	(4,x),a
6559  d4da e603          	ld	a,(3,x)
6560  d4dc e90a          	adc	a,(10,x)
6561                     ; 2007       pSocket->nPrevBytes = pSocket->nDataLeft;
6563  d4de 9093          	ldw	y,x
6564  d4e0 e703          	ld	(3,x),a
6565  d4e2 90ee03        	ldw	y,(3,y)
6566  d4e5 ef0a          	ldw	(10,x),y
6567                     ; 2008       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6569  d4e7 ce01d5        	ldw	x,_uip_conn
6570  d4ea ee12          	ldw	x,(18,x)
6571  d4ec 89            	pushw	x
6572  d4ed 1e10          	ldw	x,(OFST+9,sp)
6573  d4ef 1c0003        	addw	x,#3
6574  d4f2 89            	pushw	x
6575  d4f3 1e12          	ldw	x,(OFST+11,sp)
6576  d4f5 5c            	incw	x
6577  d4f6 89            	pushw	x
6578  d4f7 ce01d9        	ldw	x,_uip_appdata
6579  d4fa cdc4b5        	call	L11_CopyHttpData
6581  d4fd 5b06          	addw	sp,#6
6582  d4ff 1f01          	ldw	(OFST-6,sp),x
6584                     ; 2009       pSocket->nPrevBytes -= pSocket->nDataLeft;
6586  d501 1e0e          	ldw	x,(OFST+7,sp)
6587  d503 e60b          	ld	a,(11,x)
6588  d505 e004          	sub	a,(4,x)
6589  d507 e70b          	ld	(11,x),a
6590  d509 e60a          	ld	a,(10,x)
6591  d50b e203          	sbc	a,(3,x)
6592  d50d e70a          	ld	(10,x),a
6593                     ; 2010       if (nBufSize == 0) {
6595  d50f 1e01          	ldw	x,(OFST-6,sp)
6596                     ; 2012         uip_close();
6598  d511 2603ccd48e    	jreq	LC015
6599                     ; 2016         uip_send(uip_appdata, nBufSize);
6601  d516 89            	pushw	x
6602  d517 ce01d9        	ldw	x,_uip_appdata
6603  d51a cdefa3        	call	_uip_send
6605  d51d 85            	popw	x
6606                     ; 2019     return;
6608  d51e               L5731:
6609                     ; 2021 }
6611  d51e cccdc3        	jra	L023
6645                     ; 2024 uint8_t GpioGetPin(uint8_t nGpio)
6645                     ; 2025 {
6646                     	switch	.text
6647  d521               _GpioGetPin:
6649       00000000      OFST:	set	0
6652                     ; 2027   if (nGpio == 0       && (Relays_8to1  & (uint8_t)(0x01))) return 1; // Relay-01 is ON
6654  d521 4d            	tnz	a
6655  d522 2607          	jrne	L5202
6657  d524 7201005f02    	btjf	_Relays_8to1,#0,L5202
6660  d529 4c            	inc	a
6663  d52a 81            	ret	
6664  d52b               L5202:
6665                     ; 2028   else if (nGpio == 1  && (Relays_8to1  & (uint8_t)(0x02))) return 1; // Relay-02 is ON
6667  d52b a101          	cp	a,#1
6668  d52d 2608          	jrne	L1302
6670  d52f 7203005f03    	btjf	_Relays_8to1,#1,L1302
6673  d534 a601          	ld	a,#1
6676  d536 81            	ret	
6677  d537               L1302:
6678                     ; 2029   else if (nGpio == 2  && (Relays_8to1  & (uint8_t)(0x04))) return 1; // Relay-03 is ON
6680  d537 a102          	cp	a,#2
6681  d539 2608          	jrne	L5302
6683  d53b 7205005f03    	btjf	_Relays_8to1,#2,L5302
6686  d540 a601          	ld	a,#1
6689  d542 81            	ret	
6690  d543               L5302:
6691                     ; 2030   else if (nGpio == 3  && (Relays_8to1  & (uint8_t)(0x08))) return 1; // Relay-04 is ON
6693  d543 a103          	cp	a,#3
6694  d545 2608          	jrne	L1402
6696  d547 7207005f03    	btjf	_Relays_8to1,#3,L1402
6699  d54c a601          	ld	a,#1
6702  d54e 81            	ret	
6703  d54f               L1402:
6704                     ; 2031   else if (nGpio == 4  && (Relays_8to1  & (uint8_t)(0x10))) return 1; // Relay-05 is ON
6706  d54f a104          	cp	a,#4
6707  d551 2608          	jrne	L5402
6709  d553 7209005f03    	btjf	_Relays_8to1,#4,L5402
6712  d558 a601          	ld	a,#1
6715  d55a 81            	ret	
6716  d55b               L5402:
6717                     ; 2032   else if (nGpio == 5  && (Relays_8to1  & (uint8_t)(0x20))) return 1; // Relay-06 is ON
6719  d55b a105          	cp	a,#5
6720  d55d 2608          	jrne	L1502
6722  d55f 720b005f03    	btjf	_Relays_8to1,#5,L1502
6725  d564 a601          	ld	a,#1
6728  d566 81            	ret	
6729  d567               L1502:
6730                     ; 2033   else if (nGpio == 6  && (Relays_8to1  & (uint8_t)(0x40))) return 1; // Relay-07 is ON
6732  d567 a106          	cp	a,#6
6733  d569 2608          	jrne	L5502
6735  d56b 720d005f03    	btjf	_Relays_8to1,#6,L5502
6738  d570 a601          	ld	a,#1
6741  d572 81            	ret	
6742  d573               L5502:
6743                     ; 2034   else if (nGpio == 7  && (Relays_8to1  & (uint8_t)(0x80))) return 1; // Relay-08 is ON
6745  d573 a107          	cp	a,#7
6746  d575 2608          	jrne	L1602
6748  d577 720f005f03    	btjf	_Relays_8to1,#7,L1602
6751  d57c a601          	ld	a,#1
6754  d57e 81            	ret	
6755  d57f               L1602:
6756                     ; 2035   else if (nGpio == 8  && (Relays_16to9 & (uint8_t)(0x01))) return 1; // Relay-09 is ON
6758  d57f a108          	cp	a,#8
6759  d581 2608          	jrne	L5602
6761  d583 7201006003    	btjf	_Relays_16to9,#0,L5602
6764  d588 a601          	ld	a,#1
6767  d58a 81            	ret	
6768  d58b               L5602:
6769                     ; 2036   else if (nGpio == 9  && (Relays_16to9 & (uint8_t)(0x02))) return 1; // Relay-10 is ON
6771  d58b a109          	cp	a,#9
6772  d58d 2608          	jrne	L1702
6774  d58f 7203006003    	btjf	_Relays_16to9,#1,L1702
6777  d594 a601          	ld	a,#1
6780  d596 81            	ret	
6781  d597               L1702:
6782                     ; 2037   else if (nGpio == 10 && (Relays_16to9 & (uint8_t)(0x04))) return 1; // Relay-11 is ON
6784  d597 a10a          	cp	a,#10
6785  d599 2608          	jrne	L5702
6787  d59b 7205006003    	btjf	_Relays_16to9,#2,L5702
6790  d5a0 a601          	ld	a,#1
6793  d5a2 81            	ret	
6794  d5a3               L5702:
6795                     ; 2038   else if (nGpio == 11 && (Relays_16to9 & (uint8_t)(0x08))) return 1; // Relay-12 is ON
6797  d5a3 a10b          	cp	a,#11
6798  d5a5 2608          	jrne	L1012
6800  d5a7 7207006003    	btjf	_Relays_16to9,#3,L1012
6803  d5ac a601          	ld	a,#1
6806  d5ae 81            	ret	
6807  d5af               L1012:
6808                     ; 2039   else if (nGpio == 12 && (Relays_16to9 & (uint8_t)(0x10))) return 1; // Relay-13 is ON
6810  d5af a10c          	cp	a,#12
6811  d5b1 2608          	jrne	L5012
6813  d5b3 7209006003    	btjf	_Relays_16to9,#4,L5012
6816  d5b8 a601          	ld	a,#1
6819  d5ba 81            	ret	
6820  d5bb               L5012:
6821                     ; 2040   else if (nGpio == 13 && (Relays_16to9 & (uint8_t)(0x20))) return 1; // Relay-14 is ON
6823  d5bb a10d          	cp	a,#13
6824  d5bd 2608          	jrne	L1112
6826  d5bf 720b006003    	btjf	_Relays_16to9,#5,L1112
6829  d5c4 a601          	ld	a,#1
6832  d5c6 81            	ret	
6833  d5c7               L1112:
6834                     ; 2041   else if (nGpio == 14 && (Relays_16to9 & (uint8_t)(0x40))) return 1; // Relay-15 is ON
6836  d5c7 a10e          	cp	a,#14
6837  d5c9 2608          	jrne	L5112
6839  d5cb 720d006003    	btjf	_Relays_16to9,#6,L5112
6842  d5d0 a601          	ld	a,#1
6845  d5d2 81            	ret	
6846  d5d3               L5112:
6847                     ; 2042   else if (nGpio == 15 && (Relays_16to9 & (uint8_t)(0x80))) return 1; // Relay-16 is ON
6849  d5d3 a10f          	cp	a,#15
6850  d5d5 2608          	jrne	L7202
6852  d5d7 720f006003    	btjf	_Relays_16to9,#7,L7202
6855  d5dc a601          	ld	a,#1
6858  d5de 81            	ret	
6859  d5df               L7202:
6860                     ; 2043   return 0;
6862  d5df 4f            	clr	a
6865  d5e0 81            	ret	
6906                     	switch	.const
6907  bde2               L033:
6908  bde2 d5fe          	dc.w	L3212
6909  bde4 d610          	dc.w	L5212
6910  bde6 d622          	dc.w	L7212
6911  bde8 d634          	dc.w	L1312
6912  bdea d646          	dc.w	L3312
6913  bdec d658          	dc.w	L5312
6914  bdee d66a          	dc.w	L7312
6915  bdf0 d67c          	dc.w	L1412
6916  bdf2 d68d          	dc.w	L3412
6917  bdf4 d69d          	dc.w	L5412
6918  bdf6 d6ad          	dc.w	L7412
6919  bdf8 d6bd          	dc.w	L1512
6920  bdfa d6cd          	dc.w	L3512
6921  bdfc d6dd          	dc.w	L5512
6922  bdfe d6ed          	dc.w	L7512
6923  be00 d6fd          	dc.w	L1612
6924                     ; 2047 void GpioSetPin(uint8_t nGpio, uint8_t nState)
6924                     ; 2048 {
6925                     	switch	.text
6926  d5e1               _GpioSetPin:
6928  d5e1 89            	pushw	x
6929       00000000      OFST:	set	0
6932                     ; 2052   if (nState != 0 && nState != 1) nState = 1;
6934  d5e2 9f            	ld	a,xl
6935  d5e3 4d            	tnz	a
6936  d5e4 2708          	jreq	L3022
6938  d5e6 9f            	ld	a,xl
6939  d5e7 4a            	dec	a
6940  d5e8 2704          	jreq	L3022
6943  d5ea a601          	ld	a,#1
6944  d5ec 6b02          	ld	(OFST+2,sp),a
6945  d5ee               L3022:
6946                     ; 2054   switch(nGpio)
6948  d5ee 7b01          	ld	a,(OFST+1,sp)
6950                     ; 2120   default: break;
6951  d5f0 a110          	cp	a,#16
6952  d5f2 2503ccd70b    	jruge	L7022
6953  d5f7 5f            	clrw	x
6954  d5f8 97            	ld	xl,a
6955  d5f9 58            	sllw	x
6956  d5fa debde2        	ldw	x,(L033,x)
6957  d5fd fc            	jp	(x)
6958  d5fe               L3212:
6959                     ; 2056   case 0:
6959                     ; 2057     if (nState == 0) Relays_8to1 &= (uint8_t)(~0x01); // Relay-01 OFF
6961  d5fe 7b02          	ld	a,(OFST+2,sp)
6962  d600 2607          	jrne	L1122
6965  d602 7211005f      	bres	_Relays_8to1,#0
6967  d606 ccd70b        	jra	L7022
6968  d609               L1122:
6969                     ; 2058     else Relays_8to1 |= (uint8_t)0x01; // Relay-01 ON
6971  d609 7210005f      	bset	_Relays_8to1,#0
6972  d60d ccd70b        	jra	L7022
6973  d610               L5212:
6974                     ; 2060   case 1:
6974                     ; 2061     if (nState == 0) Relays_8to1 &= (uint8_t)(~0x02); // Relay-02 OFF
6976  d610 7b02          	ld	a,(OFST+2,sp)
6977  d612 2607          	jrne	L5122
6980  d614 7213005f      	bres	_Relays_8to1,#1
6982  d618 ccd70b        	jra	L7022
6983  d61b               L5122:
6984                     ; 2062     else Relays_8to1 |= (uint8_t)0x02; // Relay-02 ON
6986  d61b 7212005f      	bset	_Relays_8to1,#1
6987  d61f ccd70b        	jra	L7022
6988  d622               L7212:
6989                     ; 2064   case 2:
6989                     ; 2065     if (nState == 0) Relays_8to1 &= (uint8_t)(~0x04); // Relay-03 OFF
6991  d622 7b02          	ld	a,(OFST+2,sp)
6992  d624 2607          	jrne	L1222
6995  d626 7215005f      	bres	_Relays_8to1,#2
6997  d62a ccd70b        	jra	L7022
6998  d62d               L1222:
6999                     ; 2066     else Relays_8to1 |= (uint8_t)0x04; // Relay-03 ON
7001  d62d 7214005f      	bset	_Relays_8to1,#2
7002  d631 ccd70b        	jra	L7022
7003  d634               L1312:
7004                     ; 2068   case 3:
7004                     ; 2069     if (nState == 0) Relays_8to1 &= (uint8_t)(~0x08); // Relay-04 OFF
7006  d634 7b02          	ld	a,(OFST+2,sp)
7007  d636 2607          	jrne	L5222
7010  d638 7217005f      	bres	_Relays_8to1,#3
7012  d63c ccd70b        	jra	L7022
7013  d63f               L5222:
7014                     ; 2070     else Relays_8to1 |= (uint8_t)0x08; // Relay-04 ON
7016  d63f 7216005f      	bset	_Relays_8to1,#3
7017  d643 ccd70b        	jra	L7022
7018  d646               L3312:
7019                     ; 2072   case 4:
7019                     ; 2073     if (nState == 0) Relays_8to1 &= (uint8_t)(~0x10); // Relay-05 OFF
7021  d646 7b02          	ld	a,(OFST+2,sp)
7022  d648 2607          	jrne	L1322
7025  d64a 7219005f      	bres	_Relays_8to1,#4
7027  d64e ccd70b        	jra	L7022
7028  d651               L1322:
7029                     ; 2074     else Relays_8to1 |= (uint8_t)0x10; // Relay-05 ON
7031  d651 7218005f      	bset	_Relays_8to1,#4
7032  d655 ccd70b        	jra	L7022
7033  d658               L5312:
7034                     ; 2076   case 5:
7034                     ; 2077     if (nState == 0) Relays_8to1 &= (uint8_t)(~0x20); // Relay-06 OFF
7036  d658 7b02          	ld	a,(OFST+2,sp)
7037  d65a 2607          	jrne	L5322
7040  d65c 721b005f      	bres	_Relays_8to1,#5
7042  d660 ccd70b        	jra	L7022
7043  d663               L5322:
7044                     ; 2078     else Relays_8to1 |= (uint8_t)0x20; // Relay-06 ON
7046  d663 721a005f      	bset	_Relays_8to1,#5
7047  d667 ccd70b        	jra	L7022
7048  d66a               L7312:
7049                     ; 2080   case 6:
7049                     ; 2081     if (nState == 0) Relays_8to1 &= (uint8_t)(~0x40); // Relay-07 OFF
7051  d66a 7b02          	ld	a,(OFST+2,sp)
7052  d66c 2607          	jrne	L1422
7055  d66e 721d005f      	bres	_Relays_8to1,#6
7057  d672 ccd70b        	jra	L7022
7058  d675               L1422:
7059                     ; 2082     else Relays_8to1 |= (uint8_t)0x40; // Relay-07 ON
7061  d675 721c005f      	bset	_Relays_8to1,#6
7062  d679 ccd70b        	jra	L7022
7063  d67c               L1412:
7064                     ; 2084   case 7:
7064                     ; 2085     if (nState == 0) Relays_8to1 &= (uint8_t)(~0x80); // Relay-08 OFF
7066  d67c 7b02          	ld	a,(OFST+2,sp)
7067  d67e 2607          	jrne	L5422
7070  d680 721f005f      	bres	_Relays_8to1,#7
7072  d684 ccd70b        	jra	L7022
7073  d687               L5422:
7074                     ; 2086     else Relays_8to1 |= (uint8_t)0x80; // Relay-08 ON
7076  d687 721e005f      	bset	_Relays_8to1,#7
7077  d68b 207e          	jra	L7022
7078  d68d               L3412:
7079                     ; 2088   case 8:
7079                     ; 2089     if (nState == 0) Relays_16to9 &= (uint8_t)(~0x01); // Relay-09 OFF
7081  d68d 7b02          	ld	a,(OFST+2,sp)
7082  d68f 2606          	jrne	L1522
7085  d691 72110060      	bres	_Relays_16to9,#0
7087  d695 2074          	jra	L7022
7088  d697               L1522:
7089                     ; 2090     else Relays_16to9 |= (uint8_t)0x01; // Relay-09 ON
7091  d697 72100060      	bset	_Relays_16to9,#0
7092  d69b 206e          	jra	L7022
7093  d69d               L5412:
7094                     ; 2092   case 9:
7094                     ; 2093     if (nState == 0) Relays_16to9 &= (uint8_t)(~0x02); // Relay-10 OFF
7096  d69d 7b02          	ld	a,(OFST+2,sp)
7097  d69f 2606          	jrne	L5522
7100  d6a1 72130060      	bres	_Relays_16to9,#1
7102  d6a5 2064          	jra	L7022
7103  d6a7               L5522:
7104                     ; 2094     else Relays_16to9 |= (uint8_t)0x02; // Relay-10 ON
7106  d6a7 72120060      	bset	_Relays_16to9,#1
7107  d6ab 205e          	jra	L7022
7108  d6ad               L7412:
7109                     ; 2096   case 10:
7109                     ; 2097     if (nState == 0) Relays_16to9 &= (uint8_t)(~0x04); // Relay-11 OFF
7111  d6ad 7b02          	ld	a,(OFST+2,sp)
7112  d6af 2606          	jrne	L1622
7115  d6b1 72150060      	bres	_Relays_16to9,#2
7117  d6b5 2054          	jra	L7022
7118  d6b7               L1622:
7119                     ; 2098     else Relays_16to9 |= (uint8_t)0x04; // Relay-11 ON
7121  d6b7 72140060      	bset	_Relays_16to9,#2
7122  d6bb 204e          	jra	L7022
7123  d6bd               L1512:
7124                     ; 2100   case 11:
7124                     ; 2101     if (nState == 0) Relays_16to9 &= (uint8_t)(~0x08); // Relay-12 OFF
7126  d6bd 7b02          	ld	a,(OFST+2,sp)
7127  d6bf 2606          	jrne	L5622
7130  d6c1 72170060      	bres	_Relays_16to9,#3
7132  d6c5 2044          	jra	L7022
7133  d6c7               L5622:
7134                     ; 2102     else Relays_16to9 |= (uint8_t)0x08; // Relay-12 ON
7136  d6c7 72160060      	bset	_Relays_16to9,#3
7137  d6cb 203e          	jra	L7022
7138  d6cd               L3512:
7139                     ; 2104   case 12:
7139                     ; 2105     if (nState == 0) Relays_16to9 &= (uint8_t)(~0x10); // Relay-13 OFF
7141  d6cd 7b02          	ld	a,(OFST+2,sp)
7142  d6cf 2606          	jrne	L1722
7145  d6d1 72190060      	bres	_Relays_16to9,#4
7147  d6d5 2034          	jra	L7022
7148  d6d7               L1722:
7149                     ; 2106     else Relays_16to9 |= (uint8_t)0x10; // Relay-13 ON
7151  d6d7 72180060      	bset	_Relays_16to9,#4
7152  d6db 202e          	jra	L7022
7153  d6dd               L5512:
7154                     ; 2108   case 13:
7154                     ; 2109     if (nState == 0) Relays_16to9 &= (uint8_t)(~0x20); // Relay-14 OFF
7156  d6dd 7b02          	ld	a,(OFST+2,sp)
7157  d6df 2606          	jrne	L5722
7160  d6e1 721b0060      	bres	_Relays_16to9,#5
7162  d6e5 2024          	jra	L7022
7163  d6e7               L5722:
7164                     ; 2110     else Relays_16to9 |= (uint8_t)0x20; // Relay-14 ON
7166  d6e7 721a0060      	bset	_Relays_16to9,#5
7167  d6eb 201e          	jra	L7022
7168  d6ed               L7512:
7169                     ; 2112   case 14:
7169                     ; 2113     if (nState == 0) Relays_16to9 &= (uint8_t)(~0x40); // Relay-15 OFF
7171  d6ed 7b02          	ld	a,(OFST+2,sp)
7172  d6ef 2606          	jrne	L1032
7175  d6f1 721d0060      	bres	_Relays_16to9,#6
7177  d6f5 2014          	jra	L7022
7178  d6f7               L1032:
7179                     ; 2114     else Relays_16to9 |= (uint8_t)0x40; // Relay-15 ON
7181  d6f7 721c0060      	bset	_Relays_16to9,#6
7182  d6fb 200e          	jra	L7022
7183  d6fd               L1612:
7184                     ; 2116   case 15:
7184                     ; 2117     if (nState == 0) Relays_16to9 &= (uint8_t)(~0x80); // Relay-16 OFF
7186  d6fd 7b02          	ld	a,(OFST+2,sp)
7187  d6ff 2606          	jrne	L5032
7190  d701 721f0060      	bres	_Relays_16to9,#7
7192  d705 2004          	jra	L7022
7193  d707               L5032:
7194                     ; 2118     else Relays_16to9 |= (uint8_t)0x80; // Relay-16 ON
7196  d707 721e0060      	bset	_Relays_16to9,#7
7197                     ; 2120   default: break;
7199  d70b               L7022:
7200                     ; 2122 }
7203  d70b 85            	popw	x
7204  d70c 81            	ret	
7294                     	switch	.const
7295  be02               L043:
7296  be02 d742          	dc.w	L1132
7297  be04 d749          	dc.w	L3132
7298  be06 d750          	dc.w	L5132
7299  be08 d757          	dc.w	L7132
7300  be0a d75e          	dc.w	L1232
7301  be0c d765          	dc.w	L3232
7302  be0e d76c          	dc.w	L5232
7303  be10 d773          	dc.w	L7232
7304  be12 d77a          	dc.w	L1332
7305  be14 d781          	dc.w	L3332
7306  be16 d788          	dc.w	L5332
7307  be18 d78f          	dc.w	L7332
7308                     ; 2125 void SetAddresses(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
7308                     ; 2126 {
7309                     	switch	.text
7310  d70d               _SetAddresses:
7312  d70d 89            	pushw	x
7313  d70e 5207          	subw	sp,#7
7314       00000007      OFST:	set	7
7317                     ; 2139   temp = 0;
7319                     ; 2140   invalid = 0;
7321  d710 0f01          	clr	(OFST-6,sp)
7323                     ; 2143   str[0] = (uint8_t)alpha1;
7325  d712 9f            	ld	a,xl
7326  d713 6b02          	ld	(OFST-5,sp),a
7328                     ; 2144   str[1] = (uint8_t)alpha2;
7330  d715 7b0c          	ld	a,(OFST+5,sp)
7331  d717 6b03          	ld	(OFST-4,sp),a
7333                     ; 2145   str[2] = (uint8_t)alpha3;
7335  d719 7b0d          	ld	a,(OFST+6,sp)
7336  d71b 6b04          	ld	(OFST-3,sp),a
7338                     ; 2146   str[3] = 0;
7340  d71d 0f05          	clr	(OFST-2,sp)
7342                     ; 2147   temp = atoi(str);
7344  d71f 96            	ldw	x,sp
7345  d720 1c0002        	addw	x,#OFST-5
7346  d723 cdf360        	call	_atoi
7348  d726 1f06          	ldw	(OFST-1,sp),x
7350                     ; 2148   if (temp > 255) invalid = 1; // If an invalid entry set indicator
7352  d728 a30100        	cpw	x,#256
7353  d72b 2504          	jrult	L5732
7356  d72d a601          	ld	a,#1
7357  d72f 6b01          	ld	(OFST-6,sp),a
7359  d731               L5732:
7360                     ; 2150   if (invalid == 0) { // Make change only if valid entry
7362  d731 7b01          	ld	a,(OFST-6,sp)
7363  d733 265f          	jrne	L7732
7364                     ; 2151     switch(itemnum)
7366  d735 7b08          	ld	a,(OFST+1,sp)
7368                     ; 2165     default: break;
7369  d737 a10c          	cp	a,#12
7370  d739 2459          	jruge	L7732
7371  d73b 5f            	clrw	x
7372  d73c 97            	ld	xl,a
7373  d73d 58            	sllw	x
7374  d73e debe02        	ldw	x,(L043,x)
7375  d741 fc            	jp	(x)
7376  d742               L1132:
7377                     ; 2153     case 0:  Pending_hostaddr4 = (uint8_t)temp; break;
7379  d742 7b07          	ld	a,(OFST+0,sp)
7380  d744 c70037        	ld	_Pending_hostaddr4,a
7383  d747 204b          	jra	L7732
7384  d749               L3132:
7385                     ; 2154     case 1:  Pending_hostaddr3 = (uint8_t)temp; break;
7387  d749 7b07          	ld	a,(OFST+0,sp)
7388  d74b c70036        	ld	_Pending_hostaddr3,a
7391  d74e 2044          	jra	L7732
7392  d750               L5132:
7393                     ; 2155     case 2:  Pending_hostaddr2 = (uint8_t)temp; break;
7395  d750 7b07          	ld	a,(OFST+0,sp)
7396  d752 c70035        	ld	_Pending_hostaddr2,a
7399  d755 203d          	jra	L7732
7400  d757               L7132:
7401                     ; 2156     case 3:  Pending_hostaddr1 = (uint8_t)temp; break;
7403  d757 7b07          	ld	a,(OFST+0,sp)
7404  d759 c70034        	ld	_Pending_hostaddr1,a
7407  d75c 2036          	jra	L7732
7408  d75e               L1232:
7409                     ; 2157     case 4:  Pending_draddr4 = (uint8_t)temp; break;
7411  d75e 7b07          	ld	a,(OFST+0,sp)
7412  d760 c70033        	ld	_Pending_draddr4,a
7415  d763 202f          	jra	L7732
7416  d765               L3232:
7417                     ; 2158     case 5:  Pending_draddr3 = (uint8_t)temp; break;
7419  d765 7b07          	ld	a,(OFST+0,sp)
7420  d767 c70032        	ld	_Pending_draddr3,a
7423  d76a 2028          	jra	L7732
7424  d76c               L5232:
7425                     ; 2159     case 6:  Pending_draddr2 = (uint8_t)temp; break;
7427  d76c 7b07          	ld	a,(OFST+0,sp)
7428  d76e c70031        	ld	_Pending_draddr2,a
7431  d771 2021          	jra	L7732
7432  d773               L7232:
7433                     ; 2160     case 7:  Pending_draddr1 = (uint8_t)temp; break;
7435  d773 7b07          	ld	a,(OFST+0,sp)
7436  d775 c70030        	ld	_Pending_draddr1,a
7439  d778 201a          	jra	L7732
7440  d77a               L1332:
7441                     ; 2161     case 8:  Pending_netmask4 = (uint8_t)temp; break;
7443  d77a 7b07          	ld	a,(OFST+0,sp)
7444  d77c c7002f        	ld	_Pending_netmask4,a
7447  d77f 2013          	jra	L7732
7448  d781               L3332:
7449                     ; 2162     case 9:  Pending_netmask3 = (uint8_t)temp; break;
7451  d781 7b07          	ld	a,(OFST+0,sp)
7452  d783 c7002e        	ld	_Pending_netmask3,a
7455  d786 200c          	jra	L7732
7456  d788               L5332:
7457                     ; 2163     case 10: Pending_netmask2 = (uint8_t)temp; break;
7459  d788 7b07          	ld	a,(OFST+0,sp)
7460  d78a c7002d        	ld	_Pending_netmask2,a
7463  d78d 2005          	jra	L7732
7464  d78f               L7332:
7465                     ; 2164     case 11: Pending_netmask1 = (uint8_t)temp; break;
7467  d78f 7b07          	ld	a,(OFST+0,sp)
7468  d791 c7002c        	ld	_Pending_netmask1,a
7471                     ; 2165     default: break;
7473  d794               L7732:
7474                     ; 2168 }
7477  d794 5b09          	addw	sp,#9
7478  d796 81            	ret	
7571                     ; 2171 void SetPort(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3, uint8_t alpha4, uint8_t alpha5)
7571                     ; 2172 {
7572                     	switch	.text
7573  d797               _SetPort:
7575  d797 89            	pushw	x
7576  d798 5209          	subw	sp,#9
7577       00000009      OFST:	set	9
7580                     ; 2185   temp = 0;
7582  d79a 5f            	clrw	x
7583  d79b 1f01          	ldw	(OFST-8,sp),x
7585                     ; 2186   invalid = 0;
7587  d79d 0f03          	clr	(OFST-6,sp)
7589                     ; 2189   if (alpha1 > '6') invalid = 1;
7591  d79f 7b0b          	ld	a,(OFST+2,sp)
7592  d7a1 a137          	cp	a,#55
7593  d7a3 2506          	jrult	L3442
7596  d7a5 a601          	ld	a,#1
7597  d7a7 6b03          	ld	(OFST-6,sp),a
7600  d7a9 201d          	jra	L5442
7601  d7ab               L3442:
7602                     ; 2191     str[0] = (uint8_t)alpha1;
7604  d7ab 6b04          	ld	(OFST-5,sp),a
7606                     ; 2192     str[1] = (uint8_t)alpha2;
7608  d7ad 7b0e          	ld	a,(OFST+5,sp)
7609  d7af 6b05          	ld	(OFST-4,sp),a
7611                     ; 2193     str[2] = (uint8_t)alpha3;
7613  d7b1 7b0f          	ld	a,(OFST+6,sp)
7614  d7b3 6b06          	ld	(OFST-3,sp),a
7616                     ; 2194     str[3] = (uint8_t)alpha4;
7618  d7b5 7b10          	ld	a,(OFST+7,sp)
7619  d7b7 6b07          	ld	(OFST-2,sp),a
7621                     ; 2195     str[4] = (uint8_t)alpha5;
7623  d7b9 7b11          	ld	a,(OFST+8,sp)
7624  d7bb 6b08          	ld	(OFST-1,sp),a
7626                     ; 2196     str[5] = 0;
7628  d7bd 0f09          	clr	(OFST+0,sp)
7630                     ; 2197     temp = atoi(str);
7632  d7bf 96            	ldw	x,sp
7633  d7c0 1c0004        	addw	x,#OFST-5
7634  d7c3 cdf360        	call	_atoi
7636  d7c6 1f01          	ldw	(OFST-8,sp),x
7638  d7c8               L5442:
7639                     ; 2200   if (temp < 10) invalid = 1;
7641  d7c8 a3000a        	cpw	x,#10
7642  d7cb 2404          	jruge	L7442
7645  d7cd a601          	ld	a,#1
7646  d7cf 6b03          	ld	(OFST-6,sp),a
7648  d7d1               L7442:
7649                     ; 2202   if (invalid == 0) { // Make change only if valid entry
7651  d7d1 7b03          	ld	a,(OFST-6,sp)
7652  d7d3 2603          	jrne	L1542
7653                     ; 2203     Pending_port = (uint16_t)temp;
7655  d7d5 cf002a        	ldw	_Pending_port,x
7656  d7d8               L1542:
7657                     ; 2205 }
7660  d7d8 5b0b          	addw	sp,#11
7661  d7da 81            	ret	
7727                     ; 2208 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7727                     ; 2209 {
7728                     	switch	.text
7729  d7db               _SetMAC:
7731  d7db 89            	pushw	x
7732  d7dc 5203          	subw	sp,#3
7733       00000003      OFST:	set	3
7736                     ; 2221   temp = 0;
7738                     ; 2222   invalid = 0;
7740  d7de 0f01          	clr	(OFST-2,sp)
7742                     ; 2225   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7744  d7e0 9f            	ld	a,xl
7745  d7e1 a130          	cp	a,#48
7746  d7e3 250b          	jrult	L5152
7748  d7e5 9f            	ld	a,xl
7749  d7e6 a13a          	cp	a,#58
7750  d7e8 2406          	jruge	L5152
7753  d7ea 7b05          	ld	a,(OFST+2,sp)
7754  d7ec a030          	sub	a,#48
7756  d7ee 200c          	jp	LC029
7757  d7f0               L5152:
7758                     ; 2226   else if (alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7760  d7f0 7b05          	ld	a,(OFST+2,sp)
7761  d7f2 a161          	cp	a,#97
7762  d7f4 250a          	jrult	L1252
7764  d7f6 a167          	cp	a,#103
7765  d7f8 2406          	jruge	L1252
7768  d7fa a057          	sub	a,#87
7769  d7fc               LC029:
7770  d7fc 6b05          	ld	(OFST+2,sp),a
7772  d7fe 2004          	jra	L7152
7773  d800               L1252:
7774                     ; 2227   else invalid = 1; // If an invalid entry set indicator
7776  d800 a601          	ld	a,#1
7777  d802 6b01          	ld	(OFST-2,sp),a
7779  d804               L7152:
7780                     ; 2229   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7782  d804 7b08          	ld	a,(OFST+5,sp)
7783  d806 a130          	cp	a,#48
7784  d808 2508          	jrult	L5252
7786  d80a a13a          	cp	a,#58
7787  d80c 2404          	jruge	L5252
7790  d80e a030          	sub	a,#48
7792  d810 200a          	jp	LC030
7793  d812               L5252:
7794                     ; 2230   else if (alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7796  d812 a161          	cp	a,#97
7797  d814 250a          	jrult	L1352
7799  d816 a167          	cp	a,#103
7800  d818 2406          	jruge	L1352
7803  d81a a057          	sub	a,#87
7804  d81c               LC030:
7805  d81c 6b08          	ld	(OFST+5,sp),a
7807  d81e 2004          	jra	L7252
7808  d820               L1352:
7809                     ; 2231   else invalid = 1; // If an invalid entry set indicator
7811  d820 a601          	ld	a,#1
7812  d822 6b01          	ld	(OFST-2,sp),a
7814  d824               L7252:
7815                     ; 2233   if (invalid == 0) { // Change value only if valid entry
7817  d824 7b01          	ld	a,(OFST-2,sp)
7818  d826 264a          	jrne	L5352
7819                     ; 2234     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7821  d828 7b05          	ld	a,(OFST+2,sp)
7822  d82a 97            	ld	xl,a
7823  d82b a610          	ld	a,#16
7824  d82d 42            	mul	x,a
7825  d82e 01            	rrwa	x,a
7826  d82f 1b08          	add	a,(OFST+5,sp)
7827  d831 5f            	clrw	x
7828  d832 97            	ld	xl,a
7829  d833 1f02          	ldw	(OFST-1,sp),x
7831                     ; 2235     switch(itemnum)
7833  d835 7b04          	ld	a,(OFST+1,sp)
7835                     ; 2243     default: break;
7836  d837 2711          	jreq	L3542
7837  d839 4a            	dec	a
7838  d83a 2715          	jreq	L5542
7839  d83c 4a            	dec	a
7840  d83d 2719          	jreq	L7542
7841  d83f 4a            	dec	a
7842  d840 271d          	jreq	L1642
7843  d842 4a            	dec	a
7844  d843 2721          	jreq	L3642
7845  d845 4a            	dec	a
7846  d846 2725          	jreq	L5642
7847  d848 2028          	jra	L5352
7848  d84a               L3542:
7849                     ; 2237     case 0: Pending_uip_ethaddr1 = (uint8_t)temp; break;
7851  d84a 7b03          	ld	a,(OFST+0,sp)
7852  d84c c70024        	ld	_Pending_uip_ethaddr1,a
7855  d84f 2021          	jra	L5352
7856  d851               L5542:
7857                     ; 2238     case 1: Pending_uip_ethaddr2 = (uint8_t)temp; break;
7859  d851 7b03          	ld	a,(OFST+0,sp)
7860  d853 c70025        	ld	_Pending_uip_ethaddr2,a
7863  d856 201a          	jra	L5352
7864  d858               L7542:
7865                     ; 2239     case 2: Pending_uip_ethaddr3 = (uint8_t)temp; break;
7867  d858 7b03          	ld	a,(OFST+0,sp)
7868  d85a c70026        	ld	_Pending_uip_ethaddr3,a
7871  d85d 2013          	jra	L5352
7872  d85f               L1642:
7873                     ; 2240     case 3: Pending_uip_ethaddr4 = (uint8_t)temp; break;
7875  d85f 7b03          	ld	a,(OFST+0,sp)
7876  d861 c70027        	ld	_Pending_uip_ethaddr4,a
7879  d864 200c          	jra	L5352
7880  d866               L3642:
7881                     ; 2241     case 4: Pending_uip_ethaddr5 = (uint8_t)temp; break;
7883  d866 7b03          	ld	a,(OFST+0,sp)
7884  d868 c70028        	ld	_Pending_uip_ethaddr5,a
7887  d86b 2005          	jra	L5352
7888  d86d               L5642:
7889                     ; 2242     case 5: Pending_uip_ethaddr6 = (uint8_t)temp; break;
7891  d86d 7b03          	ld	a,(OFST+0,sp)
7892  d86f c70029        	ld	_Pending_uip_ethaddr6,a
7895                     ; 2243     default: break;
7897  d872               L5352:
7898                     ; 2246 }
7901  d872 5b05          	addw	sp,#5
7902  d874 81            	ret	
8004                     	switch	.bss
8005  0010               _OctetArray:
8006  0010 000000000000  	ds.b	11
8007                     	xdef	_OctetArray
8008                     	xref	_submit_changes
8009                     	xref	_ex_stored_devicename
8010                     	xref	_uip_ethaddr6
8011                     	xref	_uip_ethaddr5
8012                     	xref	_uip_ethaddr4
8013                     	xref	_uip_ethaddr3
8014                     	xref	_uip_ethaddr2
8015                     	xref	_uip_ethaddr1
8016                     	xref	_ex_stored_port
8017                     	xref	_ex_stored_netmask1
8018                     	xref	_ex_stored_netmask2
8019                     	xref	_ex_stored_netmask3
8020                     	xref	_ex_stored_netmask4
8021                     	xref	_ex_stored_draddr1
8022                     	xref	_ex_stored_draddr2
8023                     	xref	_ex_stored_draddr3
8024                     	xref	_ex_stored_draddr4
8025                     	xref	_ex_stored_hostaddr1
8026                     	xref	_ex_stored_hostaddr2
8027                     	xref	_ex_stored_hostaddr3
8028                     	xref	_ex_stored_hostaddr4
8029                     	xref	_Pending_uip_ethaddr6
8030                     	xref	_Pending_uip_ethaddr5
8031                     	xref	_Pending_uip_ethaddr4
8032                     	xref	_Pending_uip_ethaddr3
8033                     	xref	_Pending_uip_ethaddr2
8034                     	xref	_Pending_uip_ethaddr1
8035                     	xref	_Pending_port
8036                     	xref	_Pending_netmask1
8037                     	xref	_Pending_netmask2
8038                     	xref	_Pending_netmask3
8039                     	xref	_Pending_netmask4
8040                     	xref	_Pending_draddr1
8041                     	xref	_Pending_draddr2
8042                     	xref	_Pending_draddr3
8043                     	xref	_Pending_draddr4
8044                     	xref	_Pending_hostaddr1
8045                     	xref	_Pending_hostaddr2
8046                     	xref	_Pending_hostaddr3
8047                     	xref	_Pending_hostaddr4
8048                     	xref	_invert_output
8049                     	xref	_Relays_8to1
8050                     	xref	_Relays_16to9
8051                     	xref	_Port_Httpd
8052  001b               _current_webpage:
8053  001b 00            	ds.b	1
8054                     	xdef	_current_webpage
8055                     	xref	_atoi
8056                     	xref	_debugflash
8057                     	xref	_uip_flags
8058                     	xref	_uip_stat
8059                     	xref	_uip_conn
8060                     	xref	_uip_appdata
8061                     	xref	_htons
8062                     	xref	_uip_send
8063                     	xref	_uip_listen
8064                     	xref	_uip_init_stats
8065                     	xdef	_SetMAC
8066                     	xdef	_SetPort
8067                     	xdef	_SetAddresses
8068                     	xdef	_GpioSetPin
8069                     	xdef	_GpioGetPin
8070                     	xdef	_HttpDCall
8071                     	xdef	_HttpDInit
8072                     	xdef	_reverse
8073                     	xdef	_emb_itoa
8074                     	xdef	_two_alpha_to_uint
8075                     	xdef	_three_alpha_to_uint
8076                     	switch	.const
8077  be1a               L714:
8078  be1a 436f6e6e6563  	dc.b	"Connection:close",13
8079  be2b 0a00          	dc.b	10,0
8080  be2d               L514:
8081  be2d 436f6e74656e  	dc.b	"Content-Type:text/"
8082  be3f 68746d6c0d    	dc.b	"html",13
8083  be44 0a00          	dc.b	10,0
8084  be46               L314:
8085  be46 436f6e74656e  	dc.b	"Content-Length:",0
8086  be56               L114:
8087  be56 0d0a00        	dc.b	13,10,0
8088  be59               L704:
8089  be59 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
8090                     	xref.b	c_lreg
8091                     	xref.b	c_x
8092                     	xref.b	c_y
8112                     	xref	c_uitolx
8113                     	xref	c_ludv
8114                     	xref	c_lumd
8115                     	xref	c_rtol
8116                     	xref	c_ltor
8117                     	xref	c_lzmp
8118                     	end
