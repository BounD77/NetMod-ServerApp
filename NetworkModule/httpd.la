   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     .const:	section	.text
  18  8080               L31_checked:
  19  8080 636865636b65  	dc.b	"checked",0
  20  8088               L51_g_HtmlPageDefault:
  21  8088 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
  22  809a 4c49432022    	dc.b	"LIC ",34
  23  809f 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
  24  80b1 2e3031205472  	dc.b	".01 Transitional//"
  25  80c3 454e22        	dc.b	"EN",34
  26  80c6 3e3c68746d6c  	dc.b	"><html><head><titl"
  27  80d8 653e52656c61  	dc.b	"e>Relay Control</t"
  28  80ea 69746c653e3c  	dc.b	"itle><style type='"
  29  80fc 746578742f63  	dc.b	"text/css'>.s0 { ba"
  30  810e 636b67726f75  	dc.b	"ckground-color: re"
  31  8120 643b207d2e73  	dc.b	"d; }.s1 { backgrou"
  32  8132 6e642d636f6c  	dc.b	"nd-color: green; }"
  33  8144 7464207b2074  	dc.b	"td { text-align: c"
  34  8156 656e7465723b  	dc.b	"enter; }.tclass { "
  35  8168 77696474683a  	dc.b	"width: 145px; }</s"
  36  817a 74796c653e3c  	dc.b	"tyle></head><"
  37  8187 626f64793e3c  	dc.b	"body><h1>Relay Con"
  38  8199 74726f6c3c2f  	dc.b	"trol</h1><form met"
  39  81ab 686f643d2750  	dc.b	"hod='POST' action="
  40  81bd 272f273e3c74  	dc.b	"'/'><table border="
  41  81cf 27317078273e  	dc.b	"'1px'><colgroup><c"
  42  81e1 6f6c20776964  	dc.b	"ol width='100px'><"
  43  81f3 636f6c207769  	dc.b	"col width='152px'>"
  44  8205 3c2f636f6c67  	dc.b	"</colgroup><tr><td"
  45  8217 3e4e616d653a  	dc.b	">Name:</td><td><in"
  46  8229 707574207479  	dc.b	"put type='text' na"
  47  823b 6d653d276130  	dc.b	"me='a00' class='tc"
  48  824d 6c6173732720  	dc.b	"lass' value='%a00x"
  49  825f 787878787878  	dc.b	"xxxxxxxxxxxxxxxxxx"
  50  8271 782720706174  	dc.b	"x' pattern='[0-9a-"
  51  8283 7a412d        	dc.b	"zA-"
  52  8286 5a2d5f2a2e5d  	dc.b	"Z-_*.]{1,20}' titl"
  53  8298 653d27312074  	dc.b	"e='1 to 20 letters"
  54  82aa 2c206e756d62  	dc.b	", numbers, and -_*"
  55  82bc 2e206e6f2073  	dc.b	". no spaces' maxle"
  56  82ce 6e6774683d27  	dc.b	"ngth='20' size='20"
  57  82e0 273e3c2f7464  	dc.b	"'></td></tr></tabl"
  58  82f2 653e3c746162  	dc.b	"e><table border='1"
  59  8304 7078273e3c63  	dc.b	"px'><colgroup><col"
  60  8316 207769647468  	dc.b	" width='100px'><co"
  61  8328 6c2077696474  	dc.b	"l width='30px'><co"
  62  833a 6c2077696474  	dc.b	"l width='120px'></"
  63  834c 636f6c67726f  	dc.b	"colgroup><tr><td><"
  64  835e 2f74643e3c74  	dc.b	"/td><td></td><td>S"
  65  8370 45543c2f7464  	dc.b	"ET</td></tr><tr><t"
  66  8382 643e52        	dc.b	"d>R"
  67  8385 656c61793031  	dc.b	"elay01</td><td cla"
  68  8397 73733d277325  	dc.b	"ss='s%i00'></td><t"
  69  83a9 643e3c696e70  	dc.b	"d><input type='rad"
  70  83bb 696f27206964  	dc.b	"io' id='relay01on'"
  71  83cd 206e616d653d  	dc.b	" name='o00' value="
  72  83df 27312720256f  	dc.b	"'1' %o00><label fo"
  73  83f1 723d2772656c  	dc.b	"r='relay01on'>ON</"
  74  8403 6c6162656c3e  	dc.b	"label><input type="
  75  8415 27726164696f  	dc.b	"'radio' id='relay0"
  76  8427 316f66662720  	dc.b	"1off' name='o00' v"
  77  8439 616c75653d27  	dc.b	"alue='0' %p00><lab"
  78  844b 656c20666f72  	dc.b	"el for='relay01off"
  79  845d 273e4f46463c  	dc.b	"'>OFF</label></td>"
  80  846f 3c2f74723e3c  	dc.b	"</tr><tr><td>Relay"
  81  8481 30323c        	dc.b	"02<"
  82  8484 2f74643e3c74  	dc.b	"/td><td class='s%i"
  83  8496 3031273e3c2f  	dc.b	"01'></td><td><inpu"
  84  84a8 742074797065  	dc.b	"t type='radio' id="
  85  84ba 2772656c6179  	dc.b	"'relay02on' name='"
  86  84cc 6f3031272076  	dc.b	"o01' value='1' %o0"
  87  84de 313e3c6c6162  	dc.b	"1><label for='rela"
  88  84f0 7930326f6e27  	dc.b	"y02on'>ON</label><"
  89  8502 696e70757420  	dc.b	"input type='radio'"
  90  8514 2069643d2772  	dc.b	" id='relay02off' n"
  91  8526 616d653d276f  	dc.b	"ame='o01' value='0"
  92  8538 272025703031  	dc.b	"' %p01><label for="
  93  854a 2772656c6179  	dc.b	"'relay02off'>OFF</"
  94  855c 6c6162656c3e  	dc.b	"label></td></tr><t"
  95  856e 723e3c74643e  	dc.b	"r><td>Relay03</td>"
  96  8580 3c7464        	dc.b	"<td"
  97  8583 20636c617373  	dc.b	" class='s%i02'></t"
  98  8595 643e3c74643e  	dc.b	"d><td><input type="
  99  85a7 27726164696f  	dc.b	"'radio' id='relay0"
 100  85b9 336f6e27206e  	dc.b	"3on' name='o02' va"
 101  85cb 6c75653d2731  	dc.b	"lue='1' %o02><labe"
 102  85dd 6c20666f723d  	dc.b	"l for='relay03on'>"
 103  85ef 4f4e3c2f6c61  	dc.b	"ON</label><input t"
 104  8601 7970653d2772  	dc.b	"ype='radio' id='re"
 105  8613 6c617930336f  	dc.b	"lay03off' name='o0"
 106  8625 32272076616c  	dc.b	"2' value='0' %p02>"
 107  8637 3c6c6162656c  	dc.b	"<label for='relay0"
 108  8649 336f6666273e  	dc.b	"3off'>OFF</label><"
 109  865b 2f74643e3c2f  	dc.b	"/td></tr><tr><td>R"
 110  866d 656c61793034  	dc.b	"elay04</td><td cla"
 111  867f 73733d        	dc.b	"ss="
 112  8682 277325693033  	dc.b	"'s%i03'></td><td><"
 113  8694 696e70757420  	dc.b	"input type='radio'"
 114  86a6 2069643d2772  	dc.b	" id='relay04on' na"
 115  86b8 6d653d276f30  	dc.b	"me='o03' value='1'"
 116  86ca 20256f30333e  	dc.b	" %o03><label for='"
 117  86dc 72656c617930  	dc.b	"relay04on'>ON</lab"
 118  86ee 656c3e3c696e  	dc.b	"el><input type='ra"
 119  8700 64696f272069  	dc.b	"dio' id='relay04of"
 120  8712 6627206e616d  	dc.b	"f' name='o03' valu"
 121  8724 653d27302720  	dc.b	"e='0' %p03><label "
 122  8736 666f723d2772  	dc.b	"for='relay04off'>O"
 123  8748 46463c2f6c61  	dc.b	"FF</label></td></t"
 124  875a 723e3c74723e  	dc.b	"r><tr><td>Relay05<"
 125  876c 2f74643e3c74  	dc.b	"/td><td class='s%i"
 126  877e 303427        	dc.b	"04'"
 127  8781 3e3c2f74643e  	dc.b	"></td><td><input t"
 128  8793 7970653d2772  	dc.b	"ype='radio' id='re"
 129  87a5 6c617930356f  	dc.b	"lay05on' name='o04"
 130  87b7 272076616c75  	dc.b	"' value='1' %o04><"
 131  87c9 6c6162656c20  	dc.b	"label for='relay05"
 132  87db 6f6e273e4f4e  	dc.b	"on'>ON</label><inp"
 133  87ed 757420747970  	dc.b	"ut type='radio' id"
 134  87ff 3d2772656c61  	dc.b	"='relay05off' name"
 135  8811 3d276f303427  	dc.b	"='o04' value='0' %"
 136  8823 7030343e3c6c  	dc.b	"p04><label for='re"
 137  8835 6c617930356f  	dc.b	"lay05off'>OFF</lab"
 138  8847 656c3e3c2f74  	dc.b	"el></td></tr><tr><"
 139  8859 74643e52656c  	dc.b	"td>Relay06</td><td"
 140  886b 20636c617373  	dc.b	" class='s%i05'></t"
 141  887d 643e3c        	dc.b	"d><"
 142  8880 74643e3c696e  	dc.b	"td><input type='ra"
 143  8892 64696f272069  	dc.b	"dio' id='relay06on"
 144  88a4 27206e616d65  	dc.b	"' name='o05' value"
 145  88b6 3d2731272025  	dc.b	"='1' %o05><label f"
 146  88c8 6f723d277265  	dc.b	"or='relay06on'>ON<"
 147  88da 2f6c6162656c  	dc.b	"/label><input type"
 148  88ec 3d2772616469  	dc.b	"='radio' id='relay"
 149  88fe 30366f666627  	dc.b	"06off' name='o05' "
 150  8910 76616c75653d  	dc.b	"value='0' %p05><la"
 151  8922 62656c20666f  	dc.b	"bel for='relay06of"
 152  8934 66273e4f4646  	dc.b	"f'>OFF</label></td"
 153  8946 3e3c2f74723e  	dc.b	"></tr><tr><td>Rela"
 154  8958 7930373c2f74  	dc.b	"y07</td><td class="
 155  896a 277325693036  	dc.b	"'s%i06'></td><td><"
 156  897c 696e70        	dc.b	"inp"
 157  897f 757420747970  	dc.b	"ut type='radio' id"
 158  8991 3d2772656c61  	dc.b	"='relay07on' name="
 159  89a3 276f30362720  	dc.b	"'o06' value='1' %o"
 160  89b5 30363e3c6c61  	dc.b	"06><label for='rel"
 161  89c7 617930376f6e  	dc.b	"ay07on'>ON</label>"
 162  89d9 3c696e707574  	dc.b	"<input type='radio"
 163  89eb 272069643d27  	dc.b	"' id='relay07off' "
 164  89fd 6e616d653d27  	dc.b	"name='o06' value='"
 165  8a0f 302720257030  	dc.b	"0' %p06><label for"
 166  8a21 3d2772656c61  	dc.b	"='relay07off'>OFF<"
 167  8a33 2f6c6162656c  	dc.b	"/label></td></tr><"
 168  8a45 74723e3c7464  	dc.b	"tr><td>Relay08</td"
 169  8a57 3e3c74642063  	dc.b	"><td class='s%i07'"
 170  8a69 3e3c2f74643e  	dc.b	"></td><td><input t"
 171  8a7b 797065        	dc.b	"ype"
 172  8a7e 3d2772616469  	dc.b	"='radio' id='relay"
 173  8a90 30386f6e2720  	dc.b	"08on' name='o07' v"
 174  8aa2 616c75653d27  	dc.b	"alue='1' %o07><lab"
 175  8ab4 656c20666f72  	dc.b	"el for='relay08on'"
 176  8ac6 3e4f4e3c2f6c  	dc.b	">ON</label><input "
 177  8ad8 747970653d27  	dc.b	"type='radio' id='r"
 178  8aea 656c61793038  	dc.b	"elay08off' name='o"
 179  8afc 303727207661  	dc.b	"07' value='0' %p07"
 180  8b0e 3e3c6c616265  	dc.b	"><label for='relay"
 181  8b20 30386f666627  	dc.b	"08off'>OFF</label>"
 182  8b32 3c2f74643e3c  	dc.b	"</td></tr><tr><td>"
 183  8b44 52656c617930  	dc.b	"Relay09</td><td cl"
 184  8b56 6173733d2773  	dc.b	"ass='s%i08'></td><"
 185  8b68 74643e3c696e  	dc.b	"td><input type='ra"
 186  8b7a 64696f        	dc.b	"dio"
 187  8b7d 272069643d27  	dc.b	"' id='relay09on' n"
 188  8b8f 616d653d276f  	dc.b	"ame='o08' value='1"
 189  8ba1 2720256f3038  	dc.b	"' %o08><label for="
 190  8bb3 2772656c6179  	dc.b	"'relay09on'>ON</la"
 191  8bc5 62656c3e3c69  	dc.b	"bel><input type='r"
 192  8bd7 6164696f2720  	dc.b	"adio' id='relay09o"
 193  8be9 666627206e61  	dc.b	"ff' name='o08' val"
 194  8bfb 75653d273027  	dc.b	"ue='0' %p08><label"
 195  8c0d 20666f723d27  	dc.b	" for='relay09off'>"
 196  8c1f 4f46463c2f6c  	dc.b	"OFF</label></td></"
 197  8c31 74723e3c7472  	dc.b	"tr><tr><td>Relay10"
 198  8c43 3c2f74643e3c  	dc.b	"</td><td class='s%"
 199  8c55 693039273e3c  	dc.b	"i09'></td><td><inp"
 200  8c67 757420747970  	dc.b	"ut type='radio' id"
 201  8c79 3d2772        	dc.b	"='r"
 202  8c7c 656c61793130  	dc.b	"elay10on' name='o0"
 203  8c8e 39272076616c  	dc.b	"9' value='1' %o09>"
 204  8ca0 3c6c6162656c  	dc.b	"<label for='relay1"
 205  8cb2 306f6e273e4f  	dc.b	"0on'>ON</label><in"
 206  8cc4 707574207479  	dc.b	"put type='radio' i"
 207  8cd6 643d2772656c  	dc.b	"d='relay10off' nam"
 208  8ce8 653d276f3039  	dc.b	"e='o09' value='0' "
 209  8cfa 257030393e3c  	dc.b	"%p09><label for='r"
 210  8d0c 656c61793130  	dc.b	"elay10off'>OFF</la"
 211  8d1e 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
 212  8d30 3c74643e5265  	dc.b	"<td>Relay11</td><t"
 213  8d42 6420636c6173  	dc.b	"d class='s%i10'></"
 214  8d54 74643e3c7464  	dc.b	"td><td><input type"
 215  8d66 3d2772616469  	dc.b	"='radio' id='relay"
 216  8d78 31316f        	dc.b	"11o"
 217  8d7b 6e27206e616d  	dc.b	"n' name='o10' valu"
 218  8d8d 653d27312720  	dc.b	"e='1' %o10><label "
 219  8d9f 666f723d2772  	dc.b	"for='relay11on'>ON"
 220  8db1 3c2f6c616265  	dc.b	"</label><input typ"
 221  8dc3 653d27726164  	dc.b	"e='radio' id='rela"
 222  8dd5 7931316f6666  	dc.b	"y11off' name='o10'"
 223  8de7 2076616c7565  	dc.b	" value='0' %p10><l"
 224  8df9 6162656c2066  	dc.b	"abel for='relay11o"
 225  8e0b 6666273e4f46  	dc.b	"ff'>OFF</label></t"
 226  8e1d 643e3c2f7472  	dc.b	"d></tr><tr><td>Rel"
 227  8e2f 617931323c2f  	dc.b	"ay12</td><td class"
 228  8e41 3d2773256931  	dc.b	"='s%i11'></td><td>"
 229  8e53 3c696e707574  	dc.b	"<input type='radio"
 230  8e65 272069643d27  	dc.b	"' id='relay12on' n"
 231  8e77 616d65        	dc.b	"ame"
 232  8e7a 3d276f313127  	dc.b	"='o11' value='1' %"
 233  8e8c 6f31313e3c6c  	dc.b	"o11><label for='re"
 234  8e9e 6c617931326f  	dc.b	"lay12on'>ON</label"
 235  8eb0 3e3c696e7075  	dc.b	"><input type='radi"
 236  8ec2 6f272069643d  	dc.b	"o' id='relay12off'"
 237  8ed4 206e616d653d  	dc.b	" name='o11' value="
 238  8ee6 273027202570  	dc.b	"'0' %p11><label fo"
 239  8ef8 723d2772656c  	dc.b	"r='relay12off'>OFF"
 240  8f0a 3c2f6c616265  	dc.b	"</label></td></tr>"
 241  8f1c 3c74723e3c74  	dc.b	"<tr><td>Relay13</t"
 242  8f2e 643e3c746420  	dc.b	"d><td class='s%i12"
 243  8f40 273e3c2f7464  	dc.b	"'></td><td><input "
 244  8f52 747970653d27  	dc.b	"type='radio' id='r"
 245  8f64 656c61793133  	dc.b	"elay13on' name='o1"
 246  8f76 322720        	dc.b	"2' "
 247  8f79 76616c75653d  	dc.b	"value='1' %o12><la"
 248  8f8b 62656c20666f  	dc.b	"bel for='relay13on"
 249  8f9d 273e4f4e3c2f  	dc.b	"'>ON</label><input"
 250  8faf 20747970653d  	dc.b	" type='radio' id='"
 251  8fc1 72656c617931  	dc.b	"relay13off' name='"
 252  8fd3 6f3132272076  	dc.b	"o12' value='0' %p1"
 253  8fe5 323e3c6c6162  	dc.b	"2><label for='rela"
 254  8ff7 7931336f6666  	dc.b	"y13off'>OFF</label"
 255  9009 3e3c2f74643e  	dc.b	"></td></tr><tr><td"
 256  901b 3e52656c6179  	dc.b	">Relay14</td><td c"
 257  902d 6c6173733d27  	dc.b	"lass='s%i13'></td>"
 258  903f 3c74643e3c69  	dc.b	"<td><input type='r"
 259  9051 6164696f2720  	dc.b	"adio' id='relay14o"
 260  9063 6e27206e616d  	dc.b	"n' name='o13' valu"
 261  9075 653d27        	dc.b	"e='"
 262  9078 312720256f31  	dc.b	"1' %o13><label for"
 263  908a 3d2772656c61  	dc.b	"='relay14on'>ON</l"
 264  909c 6162656c3e3c  	dc.b	"abel><input type='"
 265  90ae 726164696f27  	dc.b	"radio' id='relay14"
 266  90c0 6f666627206e  	dc.b	"off' name='o13' va"
 267  90d2 6c75653d2730  	dc.b	"lue='0' %p13><labe"
 268  90e4 6c20666f723d  	dc.b	"l for='relay14off'"
 269  90f6 3e4f46463c2f  	dc.b	">OFF</label></td><"
 270  9108 2f74723e3c74  	dc.b	"/tr><tr><td>Relay1"
 271  911a 353c2f74643e  	dc.b	"5</td><td class='s"
 272  912c 25693134273e  	dc.b	"%i14'></td><td><in"
 273  913e 707574207479  	dc.b	"put type='radio' i"
 274  9150 643d2772656c  	dc.b	"d='relay15on' name"
 275  9162 3d276f313427  	dc.b	"='o14' value='1' %"
 276  9174 6f3134        	dc.b	"o14"
 277  9177 3e3c6c616265  	dc.b	"><label for='relay"
 278  9189 31356f6e273e  	dc.b	"15on'>ON</label><i"
 279  919b 6e7075742074  	dc.b	"nput type='radio' "
 280  91ad 69643d277265  	dc.b	"id='relay15off' na"
 281  91bf 6d653d276f31  	dc.b	"me='o14' value='0'"
 282  91d1 20257031343e  	dc.b	" %p14><label for='"
 283  91e3 72656c617931  	dc.b	"relay15off'>OFF</l"
 284  91f5 6162656c3e3c  	dc.b	"abel></td></tr><tr"
 285  9207 3e3c74643e52  	dc.b	"><td>Relay16</td><"
 286  9219 746420636c61  	dc.b	"td class='s%i15'><"
 287  922b 2f74643e3c74  	dc.b	"/td><td><input typ"
 288  923d 653d27726164  	dc.b	"e='radio' id='rela"
 289  924f 7931366f6e27  	dc.b	"y16on' name='o15' "
 290  9261 76616c75653d  	dc.b	"value='1' %o15><la"
 291  9273 62656c        	dc.b	"bel"
 292  9276 20666f723d27  	dc.b	" for='relay16on'>O"
 293  9288 4e3c2f6c6162  	dc.b	"N</label><input ty"
 294  929a 70653d277261  	dc.b	"pe='radio' id='rel"
 295  92ac 617931366f66  	dc.b	"ay16off' name='o15"
 296  92be 272076616c75  	dc.b	"' value='0' %p15><"
 297  92d0 6c6162656c20  	dc.b	"label for='relay16"
 298  92e2 6f6666273e4f  	dc.b	"off'>OFF</label></"
 299  92f4 74643e3c2f74  	dc.b	"td></tr><tr><td>In"
 300  9306 766572743c2f  	dc.b	"vert</td><td></td>"
 301  9318 3c74643e3c69  	dc.b	"<td><input type='r"
 302  932a 6164696f2720  	dc.b	"adio' id='invertOn"
 303  933c 27206e616d65  	dc.b	"' name='g00' value"
 304  934e 3d2731272025  	dc.b	"='1' %g00><label f"
 305  9360 6f723d27696e  	dc.b	"or='invertOn'>ON</"
 306  9372 6c6162        	dc.b	"lab"
 307  9375 656c3e3c696e  	dc.b	"el><input type='ra"
 308  9387 64696f272069  	dc.b	"dio' id='invertOff"
 309  9399 27206e616d65  	dc.b	"' name='g00' value"
 310  93ab 3d2730272025  	dc.b	"='0' %h00><label f"
 311  93bd 6f723d27696e  	dc.b	"or='invertOff'>OFF"
 312  93cf 3c2f6c616265  	dc.b	"</label></td></tr>"
 313  93e1 3c2f7461626c  	dc.b	"</table><button ty"
 314  93f3 70653d277375  	dc.b	"pe='submit' title="
 315  9405 275361766573  	dc.b	"'Saves your change"
 316  9417 73202d20646f  	dc.b	"s - does not resta"
 317  9429 727420746865  	dc.b	"rt the Network Mod"
 318  943b 756c65273e53  	dc.b	"ule'>Save</button>"
 319  944d 3c627574746f  	dc.b	"<button type='rese"
 320  945f 742720746974  	dc.b	"t' title='Un-does "
 321  9471 616e79        	dc.b	"any"
 322  9474 206368616e67  	dc.b	" changes that have"
 323  9486 206e6f742062  	dc.b	" not been saved'>U"
 324  9498 6e646f20416c  	dc.b	"ndo All</button></"
 325  94aa 666f726d3e3c  	dc.b	"form><a href='%x00"
 326  94bc 687474703a2f  	dc.b	"http://192.168.001"
 327  94ce 2e3030343a30  	dc.b	".004:08080/61'><bu"
 328  94e0 74746f6e2074  	dc.b	"tton title='Save f"
 329  94f2 697273742120  	dc.b	"irst! This button "
 330  9504 77696c6c206e  	dc.b	"will not save your"
 331  9516 206368616e67  	dc.b	" changes'>Address "
 332  9528 53657474696e  	dc.b	"Settings</button><"
 333  953a 2f613e3c6120  	dc.b	"/a><a href='%x00ht"
 334  954c 74703a2f2f31  	dc.b	"tp://192.168.001.0"
 335  955e 30343a303830  	dc.b	"04:08080/66'><butt"
 336  9570 6f6e20        	dc.b	"on "
 337  9573 7469746c653d  	dc.b	"title='Save first!"
 338  9585 205468697320  	dc.b	" This button will "
 339  9597 6e6f74207361  	dc.b	"not save your chan"
 340  95a9 676573273e4e  	dc.b	"ges'>Network Stati"
 341  95bb 73746963733c  	dc.b	"stics</button></a>"
 342  95cd 3c6120687265  	dc.b	"<a href='%x00http:"
 343  95df 2f2f3139322e  	dc.b	"//192.168.001.004:"
 344  95f1 30383038302f  	dc.b	"08080/63'><button "
 345  9603 7469746c653d  	dc.b	"title='Save first!"
 346  9615 205468697320  	dc.b	" This button will "
 347  9627 6e6f74207361  	dc.b	"not save your chan"
 348  9639 676573273e48  	dc.b	"ges'>Help</button>"
 349  964b 3c2f613e3c2f  	dc.b	"</a></body></html>",0
 350  965e               L71_g_HtmlPageAddress:
 351  965e 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
 352  9670 4c49432022    	dc.b	"LIC ",34
 353  9675 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
 354  9687 2e3031205472  	dc.b	".01 Transitional//"
 355  9699 454e22        	dc.b	"EN",34
 356  969c 3e3c68746d6c  	dc.b	"><html><head><titl"
 357  96ae 653e41646472  	dc.b	"e>Address Settings"
 358  96c0 3c2f7469746c  	dc.b	"</title><style typ"
 359  96d2 653d27746578  	dc.b	"e='text/css'>td { "
 360  96e4 746578742d61  	dc.b	"text-align: center"
 361  96f6 3b207d2e7463  	dc.b	"; }.tclass { width"
 362  9708 3a2032357078  	dc.b	": 25px; }.tclass1 "
 363  971a 7b2077696474  	dc.b	"{ width: 30px; }.t"
 364  972c 636c61737332  	dc.b	"class2 { width: 46"
 365  973e 70783b207d3c  	dc.b	"px; }</style></hea"
 366  9750 643e3c626f64  	dc.b	"d><body><h1>A"
 367  975d 646472657373  	dc.b	"ddress Settings</h"
 368  976f 313e3c666f72  	dc.b	"1><form method='PO"
 369  9781 535427206163  	dc.b	"ST' action='/'><ta"
 370  9793 626c6520626f  	dc.b	"ble border='1px'><"
 371  97a5 636f6c67726f  	dc.b	"colgroup><col widt"
 372  97b7 683d27313030  	dc.b	"h='100px'><col wid"
 373  97c9 74683d273435  	dc.b	"th='45px'><col wid"
 374  97db 74683d273435  	dc.b	"th='45px'><col wid"
 375  97ed 74683d273435  	dc.b	"th='45px'><col wid"
 376  97ff 74683d273434  	dc.b	"th='44px'></colgro"
 377  9811 75703e3c7472  	dc.b	"up><tr><td>IP Addr"
 378  9823 3c2f74643e3c  	dc.b	"</td><td><input ty"
 379  9835 70653d277465  	dc.b	"pe='text' name='b0"
 380  9847 302720636c61  	dc.b	"0' class='tclass1'"
 381  9859 207661        	dc.b	" va"
 382  985c 6c75653d2725  	dc.b	"lue='%b00' pattern"
 383  986e 3d275b302d39  	dc.b	"='[0-9]{3}' title="
 384  9880 275468726565  	dc.b	"'Three digits from"
 385  9892 203030302074  	dc.b	" 000 to 255' maxle"
 386  98a4 6e6774683d27  	dc.b	"ngth='3' size='3'>"
 387  98b6 3c2f74643e3c  	dc.b	"</td><td><input ty"
 388  98c8 70653d277465  	dc.b	"pe='text' name='b0"
 389  98da 312720636c61  	dc.b	"1' class='tclass1'"
 390  98ec 2076616c7565  	dc.b	" value='%b01' patt"
 391  98fe 65726e3d275b  	dc.b	"ern='[0-9]{3}' tit"
 392  9910 6c653d275468  	dc.b	"le='Three digits f"
 393  9922 726f6d203030  	dc.b	"rom 000 to 255' ma"
 394  9934 786c656e6774  	dc.b	"xlength='3' size='"
 395  9946 33273e3c2f74  	dc.b	"3'></td><td><input"
 396  9958 207479        	dc.b	" ty"
 397  995b 70653d277465  	dc.b	"pe='text' name='b0"
 398  996d 322720636c61  	dc.b	"2' class='tclass1'"
 399  997f 2076616c7565  	dc.b	" value='%b02' patt"
 400  9991 65726e3d275b  	dc.b	"ern='[0-9]{3}' tit"
 401  99a3 6c653d275468  	dc.b	"le='Three digits f"
 402  99b5 726f6d203030  	dc.b	"rom 000 to 255' ma"
 403  99c7 786c656e6774  	dc.b	"xlength='3' size='"
 404  99d9 33273e3c2f74  	dc.b	"3'></td><td><input"
 405  99eb 20747970653d  	dc.b	" type='text' name="
 406  99fd 276230332720  	dc.b	"'b03' class='tclas"
 407  9a0f 733127207661  	dc.b	"s1' value='%b03' p"
 408  9a21 61747465726e  	dc.b	"attern='[0-9]{3}' "
 409  9a33 7469746c653d  	dc.b	"title='Three digit"
 410  9a45 732066726f6d  	dc.b	"s from 000 to 255'"
 411  9a57 206d61        	dc.b	" ma"
 412  9a5a 786c656e6774  	dc.b	"xlength='3' size='"
 413  9a6c 33273e3c2f74  	dc.b	"3'></td></tr><tr><"
 414  9a7e 74643e476174  	dc.b	"td>Gateway</td><td"
 415  9a90 3e3c696e7075  	dc.b	"><input type='text"
 416  9aa2 27206e616d65  	dc.b	"' name='b04' class"
 417  9ab4 3d2774636c61  	dc.b	"='tclass1' value='"
 418  9ac6 256230342720  	dc.b	"%b04' pattern='[0-"
 419  9ad8 395d7b337d27  	dc.b	"9]{3}' title='Thre"
 420  9aea 652064696769  	dc.b	"e digits from 000 "
 421  9afc 746f20323535  	dc.b	"to 255' maxlength="
 422  9b0e 273327207369  	dc.b	"'3' size='3'></td>"
 423  9b20 3c74643e3c69  	dc.b	"<td><input type='t"
 424  9b32 65787427206e  	dc.b	"ext' name='b05' cl"
 425  9b44 6173733d2774  	dc.b	"ass='tclass1' valu"
 426  9b56 653d27        	dc.b	"e='"
 427  9b59 256230352720  	dc.b	"%b05' pattern='[0-"
 428  9b6b 395d7b337d27  	dc.b	"9]{3}' title='Thre"
 429  9b7d 652064696769  	dc.b	"e digits from 000 "
 430  9b8f 746f20323535  	dc.b	"to 255' maxlength="
 431  9ba1 273327207369  	dc.b	"'3' size='3'></td>"
 432  9bb3 3c74643e3c69  	dc.b	"<td><input type='t"
 433  9bc5 65787427206e  	dc.b	"ext' name='b06' cl"
 434  9bd7 6173733d2774  	dc.b	"ass='tclass1' valu"
 435  9be9 653d27256230  	dc.b	"e='%b06' pattern='"
 436  9bfb 5b302d395d7b  	dc.b	"[0-9]{3}' title='T"
 437  9c0d 687265652064  	dc.b	"hree digits from 0"
 438  9c1f 303020746f20  	dc.b	"00 to 255' maxleng"
 439  9c31 74683d273327  	dc.b	"th='3' size='3'></"
 440  9c43 74643e3c7464  	dc.b	"td><td><input type"
 441  9c55 3d2774        	dc.b	"='t"
 442  9c58 65787427206e  	dc.b	"ext' name='b07' cl"
 443  9c6a 6173733d2774  	dc.b	"ass='tclass1' valu"
 444  9c7c 653d27256230  	dc.b	"e='%b07' pattern='"
 445  9c8e 5b302d395d7b  	dc.b	"[0-9]{3}' title='T"
 446  9ca0 687265652064  	dc.b	"hree digits from 0"
 447  9cb2 303020746f20  	dc.b	"00 to 255' maxleng"
 448  9cc4 74683d273327  	dc.b	"th='3' size='3'></"
 449  9cd6 74643e3c2f74  	dc.b	"td></tr><tr><td>Ne"
 450  9ce8 746d61736b3c  	dc.b	"tmask</td><td><inp"
 451  9cfa 757420747970  	dc.b	"ut type='text' nam"
 452  9d0c 653d27623038  	dc.b	"e='b08' class='tcl"
 453  9d1e 617373312720  	dc.b	"ass1' value='%b08'"
 454  9d30 207061747465  	dc.b	" pattern='[0-9]{3}"
 455  9d42 27207469746c  	dc.b	"' title='Three dig"
 456  9d54 697473        	dc.b	"its"
 457  9d57 2066726f6d20  	dc.b	" from 000 to 255' "
 458  9d69 6d61786c656e  	dc.b	"maxlength='3' size"
 459  9d7b 3d2733273e3c  	dc.b	"='3'></td><td><inp"
 460  9d8d 757420747970  	dc.b	"ut type='text' nam"
 461  9d9f 653d27623039  	dc.b	"e='b09' class='tcl"
 462  9db1 617373312720  	dc.b	"ass1' value='%b09'"
 463  9dc3 207061747465  	dc.b	" pattern='[0-9]{3}"
 464  9dd5 27207469746c  	dc.b	"' title='Three dig"
 465  9de7 697473206672  	dc.b	"its from 000 to 25"
 466  9df9 3527206d6178  	dc.b	"5' maxlength='3' s"
 467  9e0b 697a653d2733  	dc.b	"ize='3'></td><td><"
 468  9e1d 696e70757420  	dc.b	"input type='text' "
 469  9e2f 6e616d653d27  	dc.b	"name='b10' class='"
 470  9e41 74636c617373  	dc.b	"tclass1' value='%b"
 471  9e53 313027        	dc.b	"10'"
 472  9e56 207061747465  	dc.b	" pattern='[0-9]{3}"
 473  9e68 27207469746c  	dc.b	"' title='Three dig"
 474  9e7a 697473206672  	dc.b	"its from 000 to 25"
 475  9e8c 3527206d6178  	dc.b	"5' maxlength='3' s"
 476  9e9e 697a653d2733  	dc.b	"ize='3'></td><td><"
 477  9eb0 696e70757420  	dc.b	"input type='text' "
 478  9ec2 6e616d653d27  	dc.b	"name='b11' class='"
 479  9ed4 74636c617373  	dc.b	"tclass1' value='%b"
 480  9ee6 313127207061  	dc.b	"11' pattern='[0-9]"
 481  9ef8 7b337d272074  	dc.b	"{3}' title='Three "
 482  9f0a 646967697473  	dc.b	"digits from 000 to"
 483  9f1c 203235352720  	dc.b	" 255' maxlength='3"
 484  9f2e 272073697a65  	dc.b	"' size='3'></td></"
 485  9f40 74723e3c7472  	dc.b	"tr><tr><td>Port   "
 486  9f52 3c2f74        	dc.b	"</t"
 487  9f55 643e3c74643e  	dc.b	"d><td><input type="
 488  9f67 277465787427  	dc.b	"'text' name='c00' "
 489  9f79 636c6173733d  	dc.b	"class='tclass2' va"
 490  9f8b 6c75653d2725  	dc.b	"lue='%c00' pattern"
 491  9f9d 3d275b302d39  	dc.b	"='[0-9]{5}' title="
 492  9faf 274669766520  	dc.b	"'Five digits from "
 493  9fc1 303030303020  	dc.b	"00000 to 65536' ma"
 494  9fd3 786c656e6774  	dc.b	"xlength='5' size='"
 495  9fe5 35273e3c2f74  	dc.b	"5'></td></tr></tab"
 496  9ff7 6c653e3c7461  	dc.b	"le><table border='"
 497  a009 317078273e3c  	dc.b	"1px'><colgroup><co"
 498  a01b 6c2077696474  	dc.b	"l width='100px'><c"
 499  a02d 6f6c20776964  	dc.b	"ol width='30px'><c"
 500  a03f 6f6c20776964  	dc.b	"ol width='30px'><c"
 501  a051 6f6c20        	dc.b	"ol "
 502  a054 77696474683d  	dc.b	"width='30px'><col "
 503  a066 77696474683d  	dc.b	"width='30px'><col "
 504  a078 77696474683d  	dc.b	"width='30px'><col "
 505  a08a 77696474683d  	dc.b	"width='30px'></col"
 506  a09c 67726f75703e  	dc.b	"group><tr><td>MAC "
 507  a0ae 416464726573  	dc.b	"Address</td><td><i"
 508  a0c0 6e7075742074  	dc.b	"nput type='text' n"
 509  a0d2 616d653d2764  	dc.b	"ame='d00' class='t"
 510  a0e4 636c61737327  	dc.b	"class' value='%d00"
 511  a0f6 272070617474  	dc.b	"' pattern='[0-9a-f"
 512  a108 5d7b327d2720  	dc.b	"]{2}' title='Two h"
 513  a11a 657820646967  	dc.b	"ex digits from 00 "
 514  a12c 746f20666627  	dc.b	"to ff' maxlength='"
 515  a13e 32272073697a  	dc.b	"2' size='2'></td><"
 516  a150 74643e        	dc.b	"td>"
 517  a153 3c696e707574  	dc.b	"<input type='text'"
 518  a165 206e616d653d  	dc.b	" name='d01' class="
 519  a177 2774636c6173  	dc.b	"'tclass' value='%d"
 520  a189 303127207061  	dc.b	"01' pattern='[0-9a"
 521  a19b 2d665d7b327d  	dc.b	"-f]{2}' title='Two"
 522  a1ad 206865782064  	dc.b	" hex digits from 0"
 523  a1bf 3020746f2066  	dc.b	"0 to ff' maxlength"
 524  a1d1 3d2732272073  	dc.b	"='2' size='2'></td"
 525  a1e3 3e3c74643e3c  	dc.b	"><td><input type='"
 526  a1f5 746578742720  	dc.b	"text' name='d02' c"
 527  a207 6c6173733d27  	dc.b	"lass='tclass' valu"
 528  a219 653d27256430  	dc.b	"e='%d02' pattern='"
 529  a22b 5b302d39612d  	dc.b	"[0-9a-f]{2}' title"
 530  a23d 3d2754776f20  	dc.b	"='Two hex digits f"
 531  a24f 726f6d        	dc.b	"rom"
 532  a252 20303020746f  	dc.b	" 00 to ff' maxleng"
 533  a264 74683d273227  	dc.b	"th='2' size='2'></"
 534  a276 74643e3c7464  	dc.b	"td><td><input type"
 535  a288 3d2774657874  	dc.b	"='text' name='d03'"
 536  a29a 20636c617373  	dc.b	" class='tclass' va"
 537  a2ac 6c75653d2725  	dc.b	"lue='%d03' pattern"
 538  a2be 3d275b302d39  	dc.b	"='[0-9a-f]{2}' tit"
 539  a2d0 6c653d275477  	dc.b	"le='Two hex digits"
 540  a2e2 2066726f6d20  	dc.b	" from 00 to ff' ma"
 541  a2f4 786c656e6774  	dc.b	"xlength='2' size='"
 542  a306 32273e3c2f74  	dc.b	"2'></td><td><input"
 543  a318 20747970653d  	dc.b	" type='text' name="
 544  a32a 276430342720  	dc.b	"'d04' class='tclas"
 545  a33c 73272076616c  	dc.b	"s' value='%d04' pa"
 546  a34e 747465        	dc.b	"tte"
 547  a351 726e3d275b30  	dc.b	"rn='[0-9a-f]{2}' t"
 548  a363 69746c653d27  	dc.b	"itle='Two hex digi"
 549  a375 74732066726f  	dc.b	"ts from 00 to ff' "
 550  a387 6d61786c656e  	dc.b	"maxlength='2' size"
 551  a399 3d2732273e3c  	dc.b	"='2'></td><td><inp"
 552  a3ab 757420747970  	dc.b	"ut type='text' nam"
 553  a3bd 653d27643035  	dc.b	"e='d05' class='tcl"
 554  a3cf 617373272076  	dc.b	"ass' value='%d05' "
 555  a3e1 706174746572  	dc.b	"pattern='[0-9a-f]{"
 556  a3f3 327d27207469  	dc.b	"2}' title='Two hex"
 557  a405 206469676974  	dc.b	" digits from 00 to"
 558  a417 20666627206d  	dc.b	" ff' maxlength='2'"
 559  a429 2073697a653d  	dc.b	" size='2'></td></t"
 560  a43b 723e3c2f7461  	dc.b	"r></table><button "
 561  a44d 747970        	dc.b	"typ"
 562  a450 653d27737562  	dc.b	"e='submit' title='"
 563  a462 536176657320  	dc.b	"Saves your changes"
 564  a474 207468656e20  	dc.b	" then restarts the"
 565  a486 204e6574776f  	dc.b	" Network Module'>S"
 566  a498 6176653c2f62  	dc.b	"ave</button><butto"
 567  a4aa 6e2074797065  	dc.b	"n type='reset' tit"
 568  a4bc 6c653d27556e  	dc.b	"le='Un-does any ch"
 569  a4ce 616e67657320  	dc.b	"anges that have no"
 570  a4e0 74206265656e  	dc.b	"t been saved'>Undo"
 571  a4f2 20416c6c3c2f  	dc.b	" All</button></for"
 572  a504 6d3e3c70206c  	dc.b	"m><p line-height 2"
 573  a516 3070783e5573  	dc.b	"0px>Use caution wh"
 574  a528 656e20636861  	dc.b	"en changing the ab"
 575  a53a 6f76652e2049  	dc.b	"ove. If you make a"
 576  a54c 206d69        	dc.b	" mi"
 577  a54f 7374616b6520  	dc.b	"stake you may have"
 578  a561 20746f3c6272  	dc.b	" to<br>restore fac"
 579  a573 746f72792064  	dc.b	"tory defaults by h"
 580  a585 6f6c64696e67  	dc.b	"olding down the re"
 581  a597 736574206275  	dc.b	"set button for 10 "
 582  a5a9 7365636f6e64  	dc.b	"seconds.<br><br>Ma"
 583  a5bb 6b6520737572  	dc.b	"ke sure the MAC yo"
 584  a5cd 752061737369  	dc.b	"u assign is unique"
 585  a5df 20746f20796f  	dc.b	" to your local net"
 586  a5f1 776f726b2e20  	dc.b	"work. Recommended<"
 587  a603 62723e697320  	dc.b	"br>is that you jus"
 588  a615 7420696e6372  	dc.b	"t increment the lo"
 589  a627 77657374206f  	dc.b	"west octet and the"
 590  a639 6e206c616265  	dc.b	"n label your devic"
 591  a64b 657320        	dc.b	"es "
 592  a64e 666f723c6272  	dc.b	"for<br>future refe"
 593  a660 72656e63652e  	dc.b	"rence.<br><br>If y"
 594  a672 6f7520636861  	dc.b	"ou change the high"
 595  a684 657374206f63  	dc.b	"est octet of the M"
 596  a696 414320796f75  	dc.b	"AC you MUST use an"
 597  a6a8 206576656e20  	dc.b	" even number to<br"
 598  a6ba 3e666f726d20  	dc.b	">form a unicast ad"
 599  a6cc 64726573732e  	dc.b	"dress. 00, 02, ..."
 600  a6de 2066632c2066  	dc.b	" fc, fe etc work f"
 601  a6f0 696e652e2030  	dc.b	"ine. 01, 03 ... fd"
 602  a702 2c2066662061  	dc.b	", ff are for<br>mu"
 603  a714 6c7469636173  	dc.b	"lticast and will n"
 604  a726 6f7420776f72  	dc.b	"ot work.</p><a hre"
 605  a738 663d27257830  	dc.b	"f='%x00http://192."
 606  a74a 313638        	dc.b	"168"
 607  a74d 2e3030312e30  	dc.b	".001.004:08080/91'"
 608  a75f 3e3c62757474  	dc.b	"><button title='Sa"
 609  a771 766520666972  	dc.b	"ve first! This but"
 610  a783 746f6e207769  	dc.b	"ton will not save "
 611  a795 796f75722063  	dc.b	"your changes'>Rebo"
 612  a7a7 6f743c2f6275  	dc.b	"ot</button></a>&nb"
 613  a7b9 7370266e6273  	dc.b	"sp&nbspNOTE: Reboo"
 614  a7cb 74206d617920  	dc.b	"t may cause the re"
 615  a7dd 6c6179732074  	dc.b	"lays to cycle.<br>"
 616  a7ef 3c62723e3c61  	dc.b	"<br><a href='%x00h"
 617  a801 7474703a2f2f  	dc.b	"ttp://192.168.001."
 618  a813 3030343a3038  	dc.b	"004:08080/60'><but"
 619  a825 746f6e207469  	dc.b	"ton title='Save fi"
 620  a837 727374212054  	dc.b	"rst! This button w"
 621  a849 696c6c        	dc.b	"ill"
 622  a84c 206e6f742073  	dc.b	" not save your cha"
 623  a85e 6e676573273e  	dc.b	"nges'>Relay Contro"
 624  a870 6c733c2f6275  	dc.b	"ls</button></a><a "
 625  a882 687265663d27  	dc.b	"href='%x00http://1"
 626  a894 39322e313638  	dc.b	"92.168.001.004:080"
 627  a8a6 38302f363627  	dc.b	"80/66'><button tit"
 628  a8b8 6c653d275361  	dc.b	"le='Save first! Th"
 629  a8ca 697320627574  	dc.b	"is button will not"
 630  a8dc 207361766520  	dc.b	" save your changes"
 631  a8ee 273e4e657477  	dc.b	"'>Network Statisti"
 632  a900 63733c2f6275  	dc.b	"cs</button></a><a "
 633  a912 687265663d27  	dc.b	"href='%x00http://1"
 634  a924 39322e313638  	dc.b	"92.168.001.004:080"
 635  a936 38302f363327  	dc.b	"80/63'><button tit"
 636  a948 6c653d        	dc.b	"le="
 637  a94b 275361766520  	dc.b	"'Save first! This "
 638  a95d 627574746f6e  	dc.b	"button will not sa"
 639  a96f 766520796f75  	dc.b	"ve your changes'>H"
 640  a981 656c703c2f62  	dc.b	"elp</button></a></"
 641  a993 626f64793e3c  	dc.b	"body></html>",0
 642  a9a0               L12_g_HtmlPageHelp:
 643  a9a0 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
 644  a9b2 4c49432022    	dc.b	"LIC ",34
 645  a9b7 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
 646  a9c9 2e3031205472  	dc.b	".01 Transitional//"
 647  a9db 454e22        	dc.b	"EN",34
 648  a9de 3e3c68746d6c  	dc.b	"><html><head><titl"
 649  a9f0 653e48656c70  	dc.b	"e>Help Page</title"
 650  aa02 3e3c7374796c  	dc.b	"><style type='text"
 651  aa14 2f637373273e  	dc.b	"/css'>td { width: "
 652  aa26 31343070783b  	dc.b	"140px; padding: 0p"
 653  aa38 783b207d3c2f  	dc.b	"x; }</style></head"
 654  aa4a 3e3c626f6479  	dc.b	"><body><h1>Help Pa"
 655  aa5c 676520313c2f  	dc.b	"ge 1</h1><p line-h"
 656  aa6e 656967687420  	dc.b	"eight 20px>An alte"
 657  aa80 726e61746976  	dc.b	"rnative to using t"
 658  aa92 686520776562  	dc.b	"he web interf"
 659  aa9f 61636520666f  	dc.b	"ace for changing r"
 660  aab1 656c61792073  	dc.b	"elay states is to "
 661  aac3 73656e642072  	dc.b	"send relay<br>spec"
 662  aad5 696669632068  	dc.b	"ific html commands"
 663  aae7 2e20456e7465  	dc.b	". Enter http://IP:"
 664  aaf9 506f72742f78  	dc.b	"Port/xx where<br>-"
 665  ab0b 204950203d20  	dc.b	" IP = the device I"
 666  ab1d 502041646472  	dc.b	"P Address, for exa"
 667  ab2f 6d706c652031  	dc.b	"mple 192.168.1.4<b"
 668  ab41 723e2d20506f  	dc.b	"r>- Port = the dev"
 669  ab53 69636520506f  	dc.b	"ice Port number, f"
 670  ab65 6f7220657861  	dc.b	"or example 8080<br"
 671  ab77 3e2d20787820  	dc.b	">- xx = one of the"
 672  ab89 20636f646573  	dc.b	" codes below:<br><"
 673  ab9b 746162        	dc.b	"tab"
 674  ab9e 6c653e3c7472  	dc.b	"le><tr><td>00 = Re"
 675  abb0 6c61792d3031  	dc.b	"lay-01 OFF</td><td"
 676  abc2 3e3039203d20  	dc.b	">09 = Relay-05 OFF"
 677  abd4 3c2f74643e3c  	dc.b	"</td><td>17 = Rela"
 678  abe6 792d3039204f  	dc.b	"y-09 OFF</td><td>2"
 679  abf8 35203d205265  	dc.b	"5 = Relay-13 OFF<b"
 680  ac0a 723e3c2f7464  	dc.b	"r></td></tr><tr><t"
 681  ac1c 643e3031203d  	dc.b	"d>01 = Relay-01  O"
 682  ac2e 4e3c2f74643e  	dc.b	"N</td><td>10 = Rel"
 683  ac40 61792d303520  	dc.b	"ay-05  ON</td><td>"
 684  ac52 3138203d2052  	dc.b	"18 = Relay-09  ON<"
 685  ac64 2f74643e3c74  	dc.b	"/td><td>26 = Relay"
 686  ac76 2d313320204f  	dc.b	"-13  ON<br></td></"
 687  ac88 74723e3c7472  	dc.b	"tr><tr><td>02 = Re"
 688  ac9a 6c6179        	dc.b	"lay"
 689  ac9d 2d3032204f46  	dc.b	"-02 OFF</td><td>11"
 690  acaf 203d2052656c  	dc.b	" = Relay-06 OFF</t"
 691  acc1 643e3c74643e  	dc.b	"d><td>19 = Relay-1"
 692  acd3 30204f46463c  	dc.b	"0 OFF</td><td>27 ="
 693  ace5 2052656c6179  	dc.b	" Relay-14 OFF<br><"
 694  acf7 2f74643e3c2f  	dc.b	"/td></tr><tr><td>0"
 695  ad09 33203d205265  	dc.b	"3 = Relay-02  ON</"
 696  ad1b 74643e3c7464  	dc.b	"td><td>12 = Relay-"
 697  ad2d 303620204f4e  	dc.b	"06  ON</td><td>20 "
 698  ad3f 3d2052656c61  	dc.b	"= Relay-10  ON</td"
 699  ad51 3e3c74643e32  	dc.b	"><td>28 = Relay-14"
 700  ad63 20204f4e3c62  	dc.b	"  ON<br></td></tr>"
 701  ad75 3c74723e3c74  	dc.b	"<tr><td>04 = Relay"
 702  ad87 2d3033204f46  	dc.b	"-03 OFF</td><td>13"
 703  ad99 203d20        	dc.b	" = "
 704  ad9c 52656c61792d  	dc.b	"Relay-07 OFF</td><"
 705  adae 74643e323120  	dc.b	"td>21 = Relay-11 O"
 706  adc0 46463c2f7464  	dc.b	"FF</td><td>29 = Re"
 707  add2 6c61792d3135  	dc.b	"lay-15 OFF<br></td"
 708  ade4 3e3c2f74723e  	dc.b	"></tr><tr><td>05 ="
 709  adf6 2052656c6179  	dc.b	" Relay-03  ON</td>"
 710  ae08 3c74643e3134  	dc.b	"<td>14 = Relay-07 "
 711  ae1a 204f4e3c2f74  	dc.b	" ON</td><td>22 = R"
 712  ae2c 656c61792d31  	dc.b	"elay-11  ON</td><t"
 713  ae3e 643e3330203d  	dc.b	"d>30 = Relay-15  O"
 714  ae50 4e3c62723e3c  	dc.b	"N<br></td></tr><tr"
 715  ae62 3e3c74643e30  	dc.b	"><td>07 = Relay-04"
 716  ae74 204f46463c2f  	dc.b	" OFF</td><td>15 = "
 717  ae86 52656c61792d  	dc.b	"Relay-08 OFF</td><"
 718  ae98 74643e        	dc.b	"td>"
 719  ae9b 3233203d2052  	dc.b	"23 = Relay-12 OFF<"
 720  aead 2f74643e3c74  	dc.b	"/td><td>31 = Relay"
 721  aebf 2d3136204f46  	dc.b	"-16 OFF<br></td></"
 722  aed1 74723e3c7472  	dc.b	"tr><tr><td>08 = Re"
 723  aee3 6c61792d3034  	dc.b	"lay-04  ON</td><td"
 724  aef5 3e3136203d20  	dc.b	">16 = Relay-08  ON"
 725  af07 3c2f74643e3c  	dc.b	"</td><td>24 = Rela"
 726  af19 792d31322020  	dc.b	"y-12  ON</td><td>3"
 727  af2b 32203d205265  	dc.b	"2 = Relay-16  ON<b"
 728  af3d 723e3c2f7464  	dc.b	"r></td></tr></tabl"
 729  af4f 653e3535203d  	dc.b	"e>55 = All Relays "
 730  af61 4f4e3c62723e  	dc.b	"ON<br>56 = All Rel"
 731  af73 617973204f46  	dc.b	"ays OFF<br><br>The"
 732  af85 20666f6c6c6f  	dc.b	" following are als"
 733  af97 6f2061        	dc.b	"o a"
 734  af9a 7661696c6162  	dc.b	"vailable:<br>60 = "
 735  afac 53686f772052  	dc.b	"Show Relay Control"
 736  afbe 20706167653c  	dc.b	" page<br>61 = Show"
 737  afd0 204164647265  	dc.b	" Address Settings "
 738  afe2 706167653c62  	dc.b	"page<br>63 = Show "
 739  aff4 48656c702050  	dc.b	"Help Page 1<br>64 "
 740  b006 3d2053686f77  	dc.b	"= Show Help Page 2"
 741  b018 3c62723e3635  	dc.b	"<br>65 = Flash LED"
 742  b02a 3c62723e3636  	dc.b	"<br>66 = Show Stat"
 743  b03c 697374696373  	dc.b	"istics<br>91 = Reb"
 744  b04e 6f6f743c6272  	dc.b	"oot<br>99 = Show S"
 745  b060 686f72742046  	dc.b	"hort Form Relay Se"
 746  b072 7474696e6773  	dc.b	"ttings<br></p><a h"
 747  b084 7265663d2725  	dc.b	"ref='%x00http://19"
 748  b096 322e31        	dc.b	"2.1"
 749  b099 36382e303031  	dc.b	"68.001.004:08080/6"
 750  b0ab 34273e3c6275  	dc.b	"4'><button title='"
 751  b0bd 476f20746f20  	dc.b	"Go to next Help pa"
 752  b0cf 6765273e4e65  	dc.b	"ge'>Next Help Page"
 753  b0e1 3c2f62757474  	dc.b	"</button></a></bod"
 754  b0f3 793e3c2f6874  	dc.b	"y></html>",0
 755  b0fd               L32_g_HtmlPageHelp2:
 756  b0fd 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
 757  b10f 4c49432022    	dc.b	"LIC ",34
 758  b114 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
 759  b126 2e3031205472  	dc.b	".01 Transitional//"
 760  b138 454e22        	dc.b	"EN",34
 761  b13b 3e3c68746d6c  	dc.b	"><html><head><titl"
 762  b14d 653e48656c70  	dc.b	"e>Help Page</title"
 763  b15f 3e3c7374796c  	dc.b	"><style type='text"
 764  b171 2f637373273e  	dc.b	"/css'></style></he"
 765  b183 61643e3c626f  	dc.b	"ad><body><h1>Help "
 766  b195 506167652032  	dc.b	"Page 2</h1><p line"
 767  b1a7 2d6865696768  	dc.b	"-height 20px>IP Ad"
 768  b1b9 64726573732c  	dc.b	"dress, Gateway Add"
 769  b1cb 726573732c20  	dc.b	"ress, Netmask, Por"
 770  b1dd 742c20616e64  	dc.b	"t, and MAC Address"
 771  b1ef 2063616e206f  	dc.b	" can only be<"
 772  b1fc 62723e636861  	dc.b	"br>changed via the"
 773  b20e 207765622069  	dc.b	" web interface. If"
 774  b220 207468652064  	dc.b	" the device become"
 775  b232 7320696e6163  	dc.b	"s inaccessible you"
 776  b244 2063616e3c62  	dc.b	" can<br>reset to f"
 777  b256 6163746f7279  	dc.b	"actory defaults by"
 778  b268 20686f6c6469  	dc.b	" holding the reset"
 779  b27a 20627574746f  	dc.b	" button down for 1"
 780  b28c 30207365636f  	dc.b	"0 seconds.<br>Defa"
 781  b29e 756c74733a3c  	dc.b	"ults:<br> IP 192.1"
 782  b2b0 36382e312e34  	dc.b	"68.1.4<br> Gateway"
 783  b2c2 203139322e31  	dc.b	" 192.168.1.1<br> N"
 784  b2d4 65746d61736b  	dc.b	"etmask 255.255.255"
 785  b2e6 2e303c62723e  	dc.b	".0<br> Port 08080<"
 786  b2f8 62723e        	dc.b	"br>"
 787  b2fb 204d41432063  	dc.b	" MAC c2-4d-69-6b-6"
 788  b30d 352d30303c62  	dc.b	"5-00<br><br>Code R"
 789  b31f 65766973696f  	dc.b	"evision 20200612 0"
 790  b331 3830303c2f70  	dc.b	"800</p><a href='%x"
 791  b343 303068747470  	dc.b	"00http://192.168.0"
 792  b355 30312e303034  	dc.b	"01.004:08080/60'><"
 793  b367 627574746f6e  	dc.b	"button title='Go t"
 794  b379 6f2052656c61  	dc.b	"o Relay Control Pa"
 795  b38b 6765273e5265  	dc.b	"ge'>Relay Controls"
 796  b39d 3c2f62757474  	dc.b	"</button></a></bod"
 797  b3af 793e3c2f6874  	dc.b	"y></html>",0
 798  b3b9               L52_g_HtmlPageStats:
 799  b3b9 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
 800  b3cb 4c49432022    	dc.b	"LIC ",34
 801  b3d0 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
 802  b3e2 2e3031205472  	dc.b	".01 Transitional//"
 803  b3f4 454e22        	dc.b	"EN",34
 804  b3f7 3e3c68746d6c  	dc.b	"><html><head><titl"
 805  b409 653e53746174  	dc.b	"e>Statistics</titl"
 806  b41b 653e3c737479  	dc.b	"e><style type='tex"
 807  b42d 742f63737327  	dc.b	"t/css'>.tclass { w"
 808  b43f 696474683a20  	dc.b	"idth: 450px; }</st"
 809  b451 796c653e3c2f  	dc.b	"yle></head><body><"
 810  b463 68313e4e6574  	dc.b	"h1>Network Statist"
 811  b475 6963733c2f68  	dc.b	"ics</h1><p>Values "
 812  b487 73686f776e20  	dc.b	"shown are since la"
 813  b499 737420706f77  	dc.b	"st power on or res"
 814  b4ab 65743c2f703e  	dc.b	"et</p><table "
 815  b4b8 626f72646572  	dc.b	"border='1px'><colg"
 816  b4ca 726f75703e3c  	dc.b	"roup><col width='1"
 817  b4dc 30307078273e  	dc.b	"00px'><col width='"
 818  b4ee 343530707827  	dc.b	"450px'></colgroup>"
 819  b500 3c74723e3c74  	dc.b	"<tr><td>%e00xxxxxx"
 820  b512 787878783c2f  	dc.b	"xxxx</td><td class"
 821  b524 3d2774636c61  	dc.b	"='tclass'>Dropped "
 822  b536 7061636b6574  	dc.b	"packets at the IP "
 823  b548 6c617965723c  	dc.b	"layer</td></tr><tr"
 824  b55a 3e3c74643e25  	dc.b	"><td>%e01xxxxxxxxx"
 825  b56c 783c2f74643e  	dc.b	"x</td><td class='t"
 826  b57e 636c61737327  	dc.b	"class'>Received pa"
 827  b590 636b65747320  	dc.b	"ckets at the IP la"
 828  b5a2 7965723c2f74  	dc.b	"yer</td></tr><tr><"
 829  b5b4 74643e        	dc.b	"td>"
 830  b5b7 256530327878  	dc.b	"%e02xxxxxxxxxx</td"
 831  b5c9 3e3c74642063  	dc.b	"><td class='tclass"
 832  b5db 273e53656e74  	dc.b	"'>Sent packets at "
 833  b5ed 746865204950  	dc.b	"the IP layer</td><"
 834  b5ff 2f74723e3c74  	dc.b	"/tr><tr><td>%e03xx"
 835  b611 787878787878  	dc.b	"xxxxxxxx</td><td c"
 836  b623 6c6173733d27  	dc.b	"lass='tclass'>Pack"
 837  b635 657473206472  	dc.b	"ets dropped due to"
 838  b647 2077726f6e67  	dc.b	" wrong IP version "
 839  b659 6f7220686561  	dc.b	"or header length</"
 840  b66b 74643e3c2f74  	dc.b	"td></tr><tr><td>%e"
 841  b67d 303478787878  	dc.b	"04xxxxxxxxxx</td><"
 842  b68f 746420636c61  	dc.b	"td class='tclass'>"
 843  b6a1 5061636b6574  	dc.b	"Packets dropped du"
 844  b6b3 652074        	dc.b	"e t"
 845  b6b6 6f2077726f6e  	dc.b	"o wrong IP length,"
 846  b6c8 206869676820  	dc.b	" high byte</td></t"
 847  b6da 723e3c74723e  	dc.b	"r><tr><td>%e05xxxx"
 848  b6ec 787878787878  	dc.b	"xxxxxx</td><td cla"
 849  b6fe 73733d277463  	dc.b	"ss='tclass'>Packet"
 850  b710 732064726f70  	dc.b	"s dropped due to w"
 851  b722 726f6e672049  	dc.b	"rong IP length, lo"
 852  b734 772062797465  	dc.b	"w byte</td></tr><t"
 853  b746 723e3c74643e  	dc.b	"r><td>%e06xxxxxxxx"
 854  b758 78783c2f7464  	dc.b	"xx</td><td class='"
 855  b76a 74636c617373  	dc.b	"tclass'>Packets dr"
 856  b77c 6f7070656420  	dc.b	"opped since they w"
 857  b78e 657265204950  	dc.b	"ere IP fragments</"
 858  b7a0 74643e3c2f74  	dc.b	"td></tr><tr><td>%e"
 859  b7b2 303778        	dc.b	"07x"
 860  b7b5 787878787878  	dc.b	"xxxxxxxxx</td><td "
 861  b7c7 636c6173733d  	dc.b	"class='tclass'>Pac"
 862  b7d9 6b6574732064  	dc.b	"kets dropped due t"
 863  b7eb 6f2049502063  	dc.b	"o IP checksum erro"
 864  b7fd 72733c2f7464  	dc.b	"rs</td></tr><tr><t"
 865  b80f 643e25653038  	dc.b	"d>%e08xxxxxxxxxx</"
 866  b821 74643e3c7464  	dc.b	"td><td class='tcla"
 867  b833 7373273e5061  	dc.b	"ss'>Packets droppe"
 868  b845 642073696e63  	dc.b	"d since they were "
 869  b857 6e6f74204943  	dc.b	"not ICMP or TCP</t"
 870  b869 643e3c2f7472  	dc.b	"d></tr><tr><td>%e0"
 871  b87b 397878787878  	dc.b	"9xxxxxxxxxx</td><t"
 872  b88d 6420636c6173  	dc.b	"d class='tclass'>D"
 873  b89f 726f70706564  	dc.b	"ropped ICMP packet"
 874  b8b1 733c2f        	dc.b	"s</"
 875  b8b4 74643e3c2f74  	dc.b	"td></tr><tr><td>%e"
 876  b8c6 313078787878  	dc.b	"10xxxxxxxxxx</td><"
 877  b8d8 746420636c61  	dc.b	"td class='tclass'>"
 878  b8ea 526563656976  	dc.b	"Received ICMP pack"
 879  b8fc 6574733c2f74  	dc.b	"ets</td></tr><tr><"
 880  b90e 74643e256531  	dc.b	"td>%e11xxxxxxxxxx<"
 881  b920 2f74643e3c74  	dc.b	"/td><td class='tcl"
 882  b932 617373273e53  	dc.b	"ass'>Sent ICMP pac"
 883  b944 6b6574733c2f  	dc.b	"kets</td></tr><tr>"
 884  b956 3c74643e2565  	dc.b	"<td>%e12xxxxxxxxxx"
 885  b968 3c2f74643e3c  	dc.b	"</td><td class='tc"
 886  b97a 6c617373273e  	dc.b	"lass'>ICMP packets"
 887  b98c 207769746820  	dc.b	" with a wrong type"
 888  b99e 3c2f74643e3c  	dc.b	"</td></tr><tr><td>"
 889  b9b0 256531        	dc.b	"%e1"
 890  b9b3 337878787878  	dc.b	"3xxxxxxxxxx</td><t"
 891  b9c5 6420636c6173  	dc.b	"d class='tclass'>D"
 892  b9d7 726f70706564  	dc.b	"ropped TCP segment"
 893  b9e9 733c2f74643e  	dc.b	"s</td></tr><tr><td"
 894  b9fb 3e2565313478  	dc.b	">%e14xxxxxxxxxx</t"
 895  ba0d 643e3c746420  	dc.b	"d><td class='tclas"
 896  ba1f 73273e526563  	dc.b	"s'>Received TCP se"
 897  ba31 676d656e7473  	dc.b	"gments</td></tr><t"
 898  ba43 723e3c74643e  	dc.b	"r><td>%e15xxxxxxxx"
 899  ba55 78783c2f7464  	dc.b	"xx</td><td class='"
 900  ba67 74636c617373  	dc.b	"tclass'>Sent TCP s"
 901  ba79 65676d656e74  	dc.b	"egments</td></tr><"
 902  ba8b 74723e3c7464  	dc.b	"tr><td>%e16xxxxxxx"
 903  ba9d 7878783c2f74  	dc.b	"xxx</td><td class="
 904  baaf 277463        	dc.b	"'tc"
 905  bab2 6c617373273e  	dc.b	"lass'>TCP segments"
 906  bac4 207769746820  	dc.b	" with a bad checks"
 907  bad6 756d3c2f7464  	dc.b	"um</td></tr><tr><t"
 908  bae8 643e25653137  	dc.b	"d>%e17xxxxxxxxxx</"
 909  bafa 74643e3c7464  	dc.b	"td><td class='tcla"
 910  bb0c 7373273e5443  	dc.b	"ss'>TCP segments w"
 911  bb1e 697468206120  	dc.b	"ith a bad ACK numb"
 912  bb30 65723c2f7464  	dc.b	"er</td></tr><tr><t"
 913  bb42 643e25653138  	dc.b	"d>%e18xxxxxxxxxx</"
 914  bb54 74643e3c7464  	dc.b	"td><td class='tcla"
 915  bb66 7373273e5265  	dc.b	"ss'>Received TCP R"
 916  bb78 535420287265  	dc.b	"ST (reset) segment"
 917  bb8a 733c2f74643e  	dc.b	"s</td></tr><tr><td"
 918  bb9c 3e2565313978  	dc.b	">%e19xxxxxxxxxx</t"
 919  bbae 643e3c        	dc.b	"d><"
 920  bbb1 746420636c61  	dc.b	"td class='tclass'>"
 921  bbc3 52657472616e  	dc.b	"Retransmitted TCP "
 922  bbd5 7365676d656e  	dc.b	"segments</td></tr>"
 923  bbe7 3c74723e3c74  	dc.b	"<tr><td>%e20xxxxxx"
 924  bbf9 787878783c2f  	dc.b	"xxxx</td><td class"
 925  bc0b 3d2774636c61  	dc.b	"='tclass'>Dropped "
 926  bc1d 53594e732064  	dc.b	"SYNs due to too fe"
 927  bc2f 7720636f6e6e  	dc.b	"w connections aval"
 928  bc41 6961626c653c  	dc.b	"iable</td></tr><tr"
 929  bc53 3e3c74643e25  	dc.b	"><td>%e21xxxxxxxxx"
 930  bc65 783c2f74643e  	dc.b	"x</td><td class='t"
 931  bc77 636c61737327  	dc.b	"class'>SYNs for cl"
 932  bc89 6f7365642070  	dc.b	"osed ports, trigge"
 933  bc9b 72696e672061  	dc.b	"ring a RST</td></t"
 934  bcad 723e3c        	dc.b	"r><"
 935  bcb0 2f7461626c65  	dc.b	"/table><a href='%x"
 936  bcc2 303068747470  	dc.b	"00http://192.168.0"
 937  bcd4 30312e303034  	dc.b	"01.004:08080/60'><"
 938  bce6 627574746f6e  	dc.b	"button title='Go t"
 939  bcf8 6f2052656c61  	dc.b	"o Relay Control Pa"
 940  bd0a 6765273e5265  	dc.b	"ge'>Relay Controls"
 941  bd1c 3c2f62757474  	dc.b	"</button></a></bod"
 942  bd2e 793e3c2f6874  	dc.b	"y></html>",0
 943  bd38               L72_g_HtmlPageRstate:
 944  bd38 3c21444f4354  	dc.b	"<!DOCTYPE HTML PUB"
 945  bd4a 4c49432022    	dc.b	"LIC ",34
 946  bd4f 2d2f2f573343  	dc.b	"-//W3C//DTD HTML 4"
 947  bd61 2e3031205472  	dc.b	".01 Transitional//"
 948  bd73 454e22        	dc.b	"EN",34
 949  bd76 3e3c68746d6c  	dc.b	"><html><head><styl"
 950  bd88 652074797065  	dc.b	"e type='text/css'>"
 951  bd9a 3c2f7374796c  	dc.b	"</style></head><bo"
 952  bdac 64793e3c703e  	dc.b	"dy><p>%f00xxxxxxxx"
 953  bdbe 787878787878  	dc.b	"xxxxxxxx</p></body"
 954  bdd0 3e3c2f68746d  	dc.b	"></html>",0
1020                     ; 459 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1020                     ; 460 {
1022                     	switch	.text
1023  c384               L3_CopyStringP:
1025  c384 89            	pushw	x
1026  c385 5203          	subw	sp,#3
1027       00000003      OFST:	set	3
1030                     ; 465   nBytes = 0;
1032  c387 5f            	clrw	x
1034  c388 2014          	jra	L17
1035  c38a               L56:
1036                     ; 467     **ppBuffer = Character;
1038  c38a 1e04          	ldw	x,(OFST+1,sp)
1039  c38c fe            	ldw	x,(x)
1040  c38d f7            	ld	(x),a
1041                     ; 468     *ppBuffer = *ppBuffer + 1;
1043  c38e 1e04          	ldw	x,(OFST+1,sp)
1044  c390 9093          	ldw	y,x
1045  c392 fe            	ldw	x,(x)
1046  c393 5c            	incw	x
1047  c394 90ff          	ldw	(y),x
1048                     ; 469     pString = pString + 1;
1050  c396 1e08          	ldw	x,(OFST+5,sp)
1051  c398 5c            	incw	x
1052  c399 1f08          	ldw	(OFST+5,sp),x
1053                     ; 470     nBytes++;
1055  c39b 1e01          	ldw	x,(OFST-2,sp)
1056  c39d 5c            	incw	x
1057  c39e               L17:
1058  c39e 1f01          	ldw	(OFST-2,sp),x
1060                     ; 466   while ((Character = pString[0]) != '\0') {
1060                     ; 467     **ppBuffer = Character;
1060                     ; 468     *ppBuffer = *ppBuffer + 1;
1060                     ; 469     pString = pString + 1;
1060                     ; 470     nBytes++;
1062  c3a0 1e08          	ldw	x,(OFST+5,sp)
1063  c3a2 f6            	ld	a,(x)
1064  c3a3 6b03          	ld	(OFST+0,sp),a
1066  c3a5 26e3          	jrne	L56
1067                     ; 472   return nBytes;
1069  c3a7 1e01          	ldw	x,(OFST-2,sp)
1072  c3a9 5b05          	addw	sp,#5
1073  c3ab 81            	ret	
1118                     ; 476 static uint16_t CopyValue(uint8_t** ppBuffer, uint32_t nValue)
1118                     ; 477 {
1119                     	switch	.text
1120  c3ac               L5_CopyValue:
1122  c3ac 89            	pushw	x
1123       00000000      OFST:	set	0
1126                     ; 485   emb_itoa(nValue, OctetArray, 10, 5);
1128  c3ad 4b05          	push	#5
1129  c3af 4b0a          	push	#10
1130  c3b1 ae0010        	ldw	x,#_OctetArray
1131  c3b4 89            	pushw	x
1132  c3b5 1e0b          	ldw	x,(OFST+11,sp)
1133  c3b7 89            	pushw	x
1134  c3b8 1e0b          	ldw	x,(OFST+11,sp)
1135  c3ba 89            	pushw	x
1136  c3bb ad53          	call	_emb_itoa
1138  c3bd 5b08          	addw	sp,#8
1139                     ; 487   **ppBuffer = OctetArray[0];
1141  c3bf 1e01          	ldw	x,(OFST+1,sp)
1142  c3c1 fe            	ldw	x,(x)
1143  c3c2 c60010        	ld	a,_OctetArray
1144  c3c5 f7            	ld	(x),a
1145                     ; 488   *ppBuffer = *ppBuffer + 1;
1147  c3c6 1e01          	ldw	x,(OFST+1,sp)
1148  c3c8 9093          	ldw	y,x
1149  c3ca fe            	ldw	x,(x)
1150  c3cb 5c            	incw	x
1151  c3cc 90ff          	ldw	(y),x
1152                     ; 490   **ppBuffer = OctetArray[1];
1154  c3ce 1e01          	ldw	x,(OFST+1,sp)
1155  c3d0 fe            	ldw	x,(x)
1156  c3d1 c60011        	ld	a,_OctetArray+1
1157  c3d4 f7            	ld	(x),a
1158                     ; 491   *ppBuffer = *ppBuffer + 1;
1160  c3d5 1e01          	ldw	x,(OFST+1,sp)
1161  c3d7 9093          	ldw	y,x
1162  c3d9 fe            	ldw	x,(x)
1163  c3da 5c            	incw	x
1164  c3db 90ff          	ldw	(y),x
1165                     ; 493   **ppBuffer = OctetArray[2];
1167  c3dd 1e01          	ldw	x,(OFST+1,sp)
1168  c3df fe            	ldw	x,(x)
1169  c3e0 c60012        	ld	a,_OctetArray+2
1170  c3e3 f7            	ld	(x),a
1171                     ; 494   *ppBuffer = *ppBuffer + 1;
1173  c3e4 1e01          	ldw	x,(OFST+1,sp)
1174  c3e6 9093          	ldw	y,x
1175  c3e8 fe            	ldw	x,(x)
1176  c3e9 5c            	incw	x
1177  c3ea 90ff          	ldw	(y),x
1178                     ; 496   **ppBuffer = OctetArray[3];
1180  c3ec 1e01          	ldw	x,(OFST+1,sp)
1181  c3ee fe            	ldw	x,(x)
1182  c3ef c60013        	ld	a,_OctetArray+3
1183  c3f2 f7            	ld	(x),a
1184                     ; 497   *ppBuffer = *ppBuffer + 1;
1186  c3f3 1e01          	ldw	x,(OFST+1,sp)
1187  c3f5 9093          	ldw	y,x
1188  c3f7 fe            	ldw	x,(x)
1189  c3f8 5c            	incw	x
1190  c3f9 90ff          	ldw	(y),x
1191                     ; 499   **ppBuffer = OctetArray[4];
1193  c3fb 1e01          	ldw	x,(OFST+1,sp)
1194  c3fd fe            	ldw	x,(x)
1195  c3fe c60014        	ld	a,_OctetArray+4
1196  c401 f7            	ld	(x),a
1197                     ; 500   *ppBuffer = *ppBuffer + 1;
1199  c402 1e01          	ldw	x,(OFST+1,sp)
1200  c404 9093          	ldw	y,x
1201  c406 fe            	ldw	x,(x)
1202  c407 5c            	incw	x
1203  c408 90ff          	ldw	(y),x
1204                     ; 502   return 5;
1206  c40a ae0005        	ldw	x,#5
1209  c40d 5b02          	addw	sp,#2
1210  c40f 81            	ret	
1282                     ; 506 char* emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
1282                     ; 507 {
1283                     	switch	.text
1284  c410               _emb_itoa:
1286  c410 5206          	subw	sp,#6
1287       00000006      OFST:	set	6
1290                     ; 522   for (i=0; i < 10; i++) str[i] = '0';
1292  c412 4f            	clr	a
1293  c413 6b06          	ld	(OFST+0,sp),a
1295  c415               L541:
1298  c415 5f            	clrw	x
1299  c416 97            	ld	xl,a
1300  c417 72fb0d        	addw	x,(OFST+7,sp)
1301  c41a a630          	ld	a,#48
1302  c41c f7            	ld	(x),a
1305  c41d 0c06          	inc	(OFST+0,sp)
1309  c41f 7b06          	ld	a,(OFST+0,sp)
1310  c421 a10a          	cp	a,#10
1311  c423 25f0          	jrult	L541
1312                     ; 523   str[pad] = '\0';
1314  c425 7b10          	ld	a,(OFST+10,sp)
1315  c427 5f            	clrw	x
1316  c428 97            	ld	xl,a
1317  c429 72fb0d        	addw	x,(OFST+7,sp)
1318  c42c 7f            	clr	(x)
1319                     ; 524   if (num == 0) return str;
1321  c42d 96            	ldw	x,sp
1322  c42e 1c0009        	addw	x,#OFST+3
1323  c431 cdf562        	call	c_lzmp
1327  c434 2775          	jreq	L61
1328                     ; 527   i = 0;
1330  c436 0f06          	clr	(OFST+0,sp)
1333  c438 2060          	jra	L161
1334  c43a               L551:
1335                     ; 529     rem = (uint8_t)(num % base);
1337  c43a 7b0f          	ld	a,(OFST+9,sp)
1338  c43c b703          	ld	c_lreg+3,a
1339  c43e 3f02          	clr	c_lreg+2
1340  c440 3f01          	clr	c_lreg+1
1341  c442 3f00          	clr	c_lreg
1342  c444 96            	ldw	x,sp
1343  c445 5c            	incw	x
1344  c446 cdf575        	call	c_rtol
1347  c449 96            	ldw	x,sp
1348  c44a 1c0009        	addw	x,#OFST+3
1349  c44d cdf40f        	call	c_ltor
1351  c450 96            	ldw	x,sp
1352  c451 5c            	incw	x
1353  c452 cdf548        	call	c_lumd
1355  c455 b603          	ld	a,c_lreg+3
1356  c457 6b05          	ld	(OFST-1,sp),a
1358                     ; 530     if(rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
1360  c459 a10a          	cp	a,#10
1361  c45b 7b06          	ld	a,(OFST+0,sp)
1362  c45d 250d          	jrult	L561
1365  c45f 0c06          	inc	(OFST+0,sp)
1367  c461 5f            	clrw	x
1368  c462 97            	ld	xl,a
1369  c463 72fb0d        	addw	x,(OFST+7,sp)
1370  c466 7b05          	ld	a,(OFST-1,sp)
1371  c468 ab57          	add	a,#87
1373  c46a 200b          	jra	L761
1374  c46c               L561:
1375                     ; 531     else str[i++] = (uint8_t)(rem + '0');
1377  c46c 0c06          	inc	(OFST+0,sp)
1379  c46e 5f            	clrw	x
1380  c46f 97            	ld	xl,a
1381  c470 72fb0d        	addw	x,(OFST+7,sp)
1382  c473 7b05          	ld	a,(OFST-1,sp)
1383  c475 ab30          	add	a,#48
1384  c477               L761:
1385  c477 f7            	ld	(x),a
1386                     ; 532     num = num/base;
1388  c478 7b0f          	ld	a,(OFST+9,sp)
1389  c47a b703          	ld	c_lreg+3,a
1390  c47c 3f02          	clr	c_lreg+2
1391  c47e 3f01          	clr	c_lreg+1
1392  c480 3f00          	clr	c_lreg
1393  c482 96            	ldw	x,sp
1394  c483 5c            	incw	x
1395  c484 cdf575        	call	c_rtol
1398  c487 96            	ldw	x,sp
1399  c488 1c0009        	addw	x,#OFST+3
1400  c48b cdf40f        	call	c_ltor
1402  c48e 96            	ldw	x,sp
1403  c48f 5c            	incw	x
1404  c490 cdf421        	call	c_ludv
1406  c493 96            	ldw	x,sp
1407  c494 1c0009        	addw	x,#OFST+3
1408  c497 cdf575        	call	c_rtol
1410  c49a               L161:
1411                     ; 528   while (num != 0) {
1413  c49a 96            	ldw	x,sp
1414  c49b 1c0009        	addw	x,#OFST+3
1415  c49e cdf562        	call	c_lzmp
1417  c4a1 2697          	jrne	L551
1418                     ; 536   reverse(str, pad);
1420  c4a3 7b10          	ld	a,(OFST+10,sp)
1421  c4a5 88            	push	a
1422  c4a6 1e0e          	ldw	x,(OFST+8,sp)
1423  c4a8 ad06          	call	_reverse
1425  c4aa 84            	pop	a
1426                     ; 538   return str;
1429  c4ab               L61:
1431  c4ab 1e0d          	ldw	x,(OFST+7,sp)
1433  c4ad 5b06          	addw	sp,#6
1434  c4af 81            	ret	
1497                     ; 543 void reverse(char str[], uint8_t length)
1497                     ; 544 {
1498                     	switch	.text
1499  c4b0               _reverse:
1501  c4b0 89            	pushw	x
1502  c4b1 5203          	subw	sp,#3
1503       00000003      OFST:	set	3
1506                     ; 549   start = 0;
1508  c4b3 0f02          	clr	(OFST-1,sp)
1510                     ; 550   end = (uint8_t)(length - 1);
1512  c4b5 7b08          	ld	a,(OFST+5,sp)
1513  c4b7 4a            	dec	a
1514  c4b8 6b03          	ld	(OFST+0,sp),a
1517  c4ba 2029          	jra	L322
1518  c4bc               L712:
1519                     ; 553     temp = str[start];
1521  c4bc 5f            	clrw	x
1522  c4bd 97            	ld	xl,a
1523  c4be 72fb04        	addw	x,(OFST+1,sp)
1524  c4c1 f6            	ld	a,(x)
1525  c4c2 6b01          	ld	(OFST-2,sp),a
1527                     ; 554     str[start] = str[end];
1529  c4c4 5f            	clrw	x
1530  c4c5 7b02          	ld	a,(OFST-1,sp)
1531  c4c7 97            	ld	xl,a
1532  c4c8 72fb04        	addw	x,(OFST+1,sp)
1533  c4cb 7b03          	ld	a,(OFST+0,sp)
1534  c4cd 905f          	clrw	y
1535  c4cf 9097          	ld	yl,a
1536  c4d1 72f904        	addw	y,(OFST+1,sp)
1537  c4d4 90f6          	ld	a,(y)
1538  c4d6 f7            	ld	(x),a
1539                     ; 555     str[end] = temp;
1541  c4d7 5f            	clrw	x
1542  c4d8 7b03          	ld	a,(OFST+0,sp)
1543  c4da 97            	ld	xl,a
1544  c4db 72fb04        	addw	x,(OFST+1,sp)
1545  c4de 7b01          	ld	a,(OFST-2,sp)
1546  c4e0 f7            	ld	(x),a
1547                     ; 556     start++;
1549  c4e1 0c02          	inc	(OFST-1,sp)
1551                     ; 557     end--;
1553  c4e3 0a03          	dec	(OFST+0,sp)
1555  c4e5               L322:
1556                     ; 552   while (start < end) {
1556                     ; 553     temp = str[start];
1556                     ; 554     str[start] = str[end];
1556                     ; 555     str[end] = temp;
1556                     ; 556     start++;
1556                     ; 557     end--;
1558  c4e5 7b02          	ld	a,(OFST-1,sp)
1559  c4e7 1103          	cp	a,(OFST+0,sp)
1560  c4e9 25d1          	jrult	L712
1561                     ; 559 }
1564  c4eb 5b05          	addw	sp,#5
1565  c4ed 81            	ret	
1626                     ; 562 uint8_t three_alpha_to_uint(uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
1626                     ; 563 {
1627                     	switch	.text
1628  c4ee               _three_alpha_to_uint:
1630  c4ee 89            	pushw	x
1631  c4ef 89            	pushw	x
1632       00000002      OFST:	set	2
1635                     ; 571   value = (uint8_t)((alpha1 - '0') *100);
1637  c4f0 9e            	ld	a,xh
1638  c4f1 97            	ld	xl,a
1639  c4f2 a664          	ld	a,#100
1640  c4f4 42            	mul	x,a
1641  c4f5 9f            	ld	a,xl
1642  c4f6 a0c0          	sub	a,#192
1643  c4f8 6b02          	ld	(OFST+0,sp),a
1645                     ; 572   digit = (uint8_t)((alpha2 - '0') * 10);
1647  c4fa 7b04          	ld	a,(OFST+2,sp)
1648  c4fc 97            	ld	xl,a
1649  c4fd a60a          	ld	a,#10
1650  c4ff 42            	mul	x,a
1651  c500 9f            	ld	a,xl
1652  c501 a0e0          	sub	a,#224
1654                     ; 573   value = (uint8_t)(value + digit);
1656  c503 1b02          	add	a,(OFST+0,sp)
1657  c505 6b02          	ld	(OFST+0,sp),a
1659                     ; 574   digit = (uint8_t)(alpha3 - '0');
1661  c507 7b07          	ld	a,(OFST+5,sp)
1662  c509 a030          	sub	a,#48
1663  c50b 6b01          	ld	(OFST-1,sp),a
1665                     ; 575   value = (uint8_t)(value + digit);
1667  c50d 1b02          	add	a,(OFST+0,sp)
1669                     ; 577   if(value >= 255) value = 0;
1671  c50f a1ff          	cp	a,#255
1672  c511 2501          	jrult	L352
1675  c513 4f            	clr	a
1677  c514               L352:
1678                     ; 579   return value;
1682  c514 5b04          	addw	sp,#4
1683  c516 81            	ret	
1729                     ; 583 uint8_t two_alpha_to_uint(uint8_t alpha1, uint8_t alpha2)
1729                     ; 584 {
1730                     	switch	.text
1731  c517               _two_alpha_to_uint:
1733  c517 89            	pushw	x
1734  c518 88            	push	a
1735       00000001      OFST:	set	1
1738                     ; 591   if (alpha1 >= '0' && alpha1 <= '9') value = (uint8_t)((alpha1 - '0') << 4);
1740  c519 9e            	ld	a,xh
1741  c51a a130          	cp	a,#48
1742  c51c 250f          	jrult	L572
1744  c51e 9e            	ld	a,xh
1745  c51f a13a          	cp	a,#58
1746  c521 240a          	jruge	L572
1749  c523 9e            	ld	a,xh
1750  c524 97            	ld	xl,a
1751  c525 a610          	ld	a,#16
1752  c527 42            	mul	x,a
1753  c528 9f            	ld	a,xl
1754  c529 a000          	sub	a,#0
1756  c52b 2030          	jp	LC001
1757  c52d               L572:
1758                     ; 592   else if(alpha1 == 'a') value = 0xa0;
1760  c52d 7b02          	ld	a,(OFST+1,sp)
1761  c52f a161          	cp	a,#97
1762  c531 2604          	jrne	L103
1765  c533 a6a0          	ld	a,#160
1767  c535 2026          	jp	LC001
1768  c537               L103:
1769                     ; 593   else if(alpha1 == 'b') value = 0xb0;
1771  c537 a162          	cp	a,#98
1772  c539 2604          	jrne	L503
1775  c53b a6b0          	ld	a,#176
1777  c53d 201e          	jp	LC001
1778  c53f               L503:
1779                     ; 594   else if(alpha1 == 'c') value = 0xc0;
1781  c53f a163          	cp	a,#99
1782  c541 2604          	jrne	L113
1785  c543 a6c0          	ld	a,#192
1787  c545 2016          	jp	LC001
1788  c547               L113:
1789                     ; 595   else if(alpha1 == 'd') value = 0xd0;
1791  c547 a164          	cp	a,#100
1792  c549 2604          	jrne	L513
1795  c54b a6d0          	ld	a,#208
1797  c54d 200e          	jp	LC001
1798  c54f               L513:
1799                     ; 596   else if(alpha1 == 'e') value = 0xe0;
1801  c54f a165          	cp	a,#101
1802  c551 2604          	jrne	L123
1805  c553 a6e0          	ld	a,#224
1807  c555 2006          	jp	LC001
1808  c557               L123:
1809                     ; 597   else if(alpha1 == 'f') value = 0xf0;
1811  c557 a166          	cp	a,#102
1812  c559 2606          	jrne	L523
1815  c55b a6f0          	ld	a,#240
1816  c55d               LC001:
1817  c55d 6b01          	ld	(OFST+0,sp),a
1820  c55f 2002          	jra	L772
1821  c561               L523:
1822                     ; 598   else value = 0; // If an invalid entry is made convert it to 0
1824  c561 0f01          	clr	(OFST+0,sp)
1826  c563               L772:
1827                     ; 600   if (alpha2 >= '0' && alpha2 <= '9') value = (uint8_t)(value + alpha2 - '0');
1829  c563 7b03          	ld	a,(OFST+2,sp)
1830  c565 a130          	cp	a,#48
1831  c567 250c          	jrult	L133
1833  c569 a13a          	cp	a,#58
1834  c56b 2408          	jruge	L133
1837  c56d 7b01          	ld	a,(OFST+0,sp)
1838  c56f 1b03          	add	a,(OFST+2,sp)
1839  c571 a030          	sub	a,#48
1841  c573 203d          	jp	L333
1842  c575               L133:
1843                     ; 601   else if(alpha2 == 'a') value = (uint8_t)(value + 0x0a);
1845  c575 a161          	cp	a,#97
1846  c577 2606          	jrne	L533
1849  c579 7b01          	ld	a,(OFST+0,sp)
1850  c57b ab0a          	add	a,#10
1852  c57d 2033          	jp	L333
1853  c57f               L533:
1854                     ; 602   else if(alpha2 == 'b') value = (uint8_t)(value + 0x0b);
1856  c57f a162          	cp	a,#98
1857  c581 2606          	jrne	L143
1860  c583 7b01          	ld	a,(OFST+0,sp)
1861  c585 ab0b          	add	a,#11
1863  c587 2029          	jp	L333
1864  c589               L143:
1865                     ; 603   else if(alpha2 == 'c') value = (uint8_t)(value + 0x0c);
1867  c589 a163          	cp	a,#99
1868  c58b 2606          	jrne	L543
1871  c58d 7b01          	ld	a,(OFST+0,sp)
1872  c58f ab0c          	add	a,#12
1874  c591 201f          	jp	L333
1875  c593               L543:
1876                     ; 604   else if(alpha2 == 'd') value = (uint8_t)(value + 0x0d);
1878  c593 a164          	cp	a,#100
1879  c595 2606          	jrne	L153
1882  c597 7b01          	ld	a,(OFST+0,sp)
1883  c599 ab0d          	add	a,#13
1885  c59b 2015          	jp	L333
1886  c59d               L153:
1887                     ; 605   else if(alpha2 == 'e') value = (uint8_t)(value + 0x0e);
1889  c59d a165          	cp	a,#101
1890  c59f 2606          	jrne	L553
1893  c5a1 7b01          	ld	a,(OFST+0,sp)
1894  c5a3 ab0e          	add	a,#14
1896  c5a5 200b          	jp	L333
1897  c5a7               L553:
1898                     ; 606   else if(alpha2 == 'f') value = (uint8_t)(value + 0x0f);
1900  c5a7 a166          	cp	a,#102
1901  c5a9 2606          	jrne	L163
1904  c5ab 7b01          	ld	a,(OFST+0,sp)
1905  c5ad ab0f          	add	a,#15
1908  c5af 2001          	jra	L333
1909  c5b1               L163:
1910                     ; 607   else value = 0; // If an invalid entry is made convert it to 0
1912  c5b1 4f            	clr	a
1914  c5b2               L333:
1915                     ; 609   return value;
1919  c5b2 5b03          	addw	sp,#3
1920  c5b4 81            	ret	
1971                     ; 613 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint32_t nDataLen)
1971                     ; 614 {
1972                     	switch	.text
1973  c5b5               L7_CopyHttpHeader:
1975  c5b5 89            	pushw	x
1976  c5b6 89            	pushw	x
1977       00000002      OFST:	set	2
1980                     ; 617   nBytes = 0;
1982  c5b7 5f            	clrw	x
1983  c5b8 1f01          	ldw	(OFST-1,sp),x
1985                     ; 619   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
1987  c5ba aebf1a        	ldw	x,#L704
1988  c5bd 89            	pushw	x
1989  c5be 96            	ldw	x,sp
1990  c5bf 1c0005        	addw	x,#OFST+3
1991  c5c2 cdc384        	call	L3_CopyStringP
1993  c5c5 5b02          	addw	sp,#2
1994  c5c7 72fb01        	addw	x,(OFST-1,sp)
1995  c5ca 1f01          	ldw	(OFST-1,sp),x
1997                     ; 620   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1999  c5cc aebf17        	ldw	x,#L114
2000  c5cf 89            	pushw	x
2001  c5d0 96            	ldw	x,sp
2002  c5d1 1c0005        	addw	x,#OFST+3
2003  c5d4 cdc384        	call	L3_CopyStringP
2005  c5d7 5b02          	addw	sp,#2
2006  c5d9 72fb01        	addw	x,(OFST-1,sp)
2007  c5dc 1f01          	ldw	(OFST-1,sp),x
2009                     ; 622   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
2011  c5de aebf07        	ldw	x,#L314
2012  c5e1 89            	pushw	x
2013  c5e2 96            	ldw	x,sp
2014  c5e3 1c0005        	addw	x,#OFST+3
2015  c5e6 cdc384        	call	L3_CopyStringP
2017  c5e9 5b02          	addw	sp,#2
2018  c5eb 72fb01        	addw	x,(OFST-1,sp)
2019  c5ee 1f01          	ldw	(OFST-1,sp),x
2021                     ; 623   nBytes += CopyValue(&pBuffer, nDataLen);
2023  c5f0 1e09          	ldw	x,(OFST+7,sp)
2024  c5f2 89            	pushw	x
2025  c5f3 1e09          	ldw	x,(OFST+7,sp)
2026  c5f5 89            	pushw	x
2027  c5f6 96            	ldw	x,sp
2028  c5f7 1c0007        	addw	x,#OFST+5
2029  c5fa cdc3ac        	call	L5_CopyValue
2031  c5fd 5b04          	addw	sp,#4
2032  c5ff 72fb01        	addw	x,(OFST-1,sp)
2033  c602 1f01          	ldw	(OFST-1,sp),x
2035                     ; 624   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2037  c604 aebf17        	ldw	x,#L114
2038  c607 89            	pushw	x
2039  c608 96            	ldw	x,sp
2040  c609 1c0005        	addw	x,#OFST+3
2041  c60c cdc384        	call	L3_CopyStringP
2043  c60f 5b02          	addw	sp,#2
2044  c611 72fb01        	addw	x,(OFST-1,sp)
2045  c614 1f01          	ldw	(OFST-1,sp),x
2047                     ; 626   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type:text/html\r\n"));
2049  c616 aebeee        	ldw	x,#L514
2050  c619 89            	pushw	x
2051  c61a 96            	ldw	x,sp
2052  c61b 1c0005        	addw	x,#OFST+3
2053  c61e cdc384        	call	L3_CopyStringP
2055  c621 5b02          	addw	sp,#2
2056  c623 72fb01        	addw	x,(OFST-1,sp)
2057  c626 1f01          	ldw	(OFST-1,sp),x
2059                     ; 627   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
2061  c628 aebedb        	ldw	x,#L714
2062  c62b 89            	pushw	x
2063  c62c 96            	ldw	x,sp
2064  c62d 1c0005        	addw	x,#OFST+3
2065  c630 cdc384        	call	L3_CopyStringP
2067  c633 5b02          	addw	sp,#2
2068  c635 72fb01        	addw	x,(OFST-1,sp)
2069  c638 1f01          	ldw	(OFST-1,sp),x
2071                     ; 628   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
2073  c63a aebf17        	ldw	x,#L114
2074  c63d 89            	pushw	x
2075  c63e 96            	ldw	x,sp
2076  c63f 1c0005        	addw	x,#OFST+3
2077  c642 cdc384        	call	L3_CopyStringP
2079  c645 5b02          	addw	sp,#2
2080  c647 72fb01        	addw	x,(OFST-1,sp)
2082                     ; 630   return nBytes;
2086  c64a 5b04          	addw	sp,#4
2087  c64c 81            	ret	
2226                     	switch	.const
2227  bdd9               L421:
2228  bdd9 c7f1          	dc.w	L124
2229  bddb c7ff          	dc.w	L324
2230  bddd c80d          	dc.w	L524
2231  bddf c81a          	dc.w	L724
2232  bde1 c827          	dc.w	L134
2233  bde3 c834          	dc.w	L334
2234  bde5 c841          	dc.w	L534
2235  bde7 c84e          	dc.w	L734
2236  bde9 c85b          	dc.w	L144
2237  bdeb c868          	dc.w	L344
2238  bded c875          	dc.w	L544
2239  bdef c882          	dc.w	L744
2240  bdf1               L422:
2241  bdf1 c9c1          	dc.w	L354
2242  bdf3 c9d3          	dc.w	L554
2243  bdf5 c9e5          	dc.w	L754
2244  bdf7 c9f7          	dc.w	L164
2245  bdf9 ca09          	dc.w	L364
2246  bdfb ca1b          	dc.w	L564
2247  bdfd ca2d          	dc.w	L764
2248  bdff ca3f          	dc.w	L174
2249  be01 ca51          	dc.w	L374
2250  be03 ca63          	dc.w	L574
2251  be05 ca75          	dc.w	L774
2252  be07 ca87          	dc.w	L105
2253  be09 ca99          	dc.w	L305
2254  be0b caab          	dc.w	L505
2255  be0d cabd          	dc.w	L705
2256  be0f cacf          	dc.w	L115
2257  be11 cae0          	dc.w	L315
2258  be13 caf1          	dc.w	L515
2259  be15 cb02          	dc.w	L715
2260  be17 cb13          	dc.w	L125
2261  be19 cb24          	dc.w	L325
2262  be1b cb35          	dc.w	L525
2263                     ; 634 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
2263                     ; 635 {
2264                     	switch	.text
2265  c64d               L11_CopyHttpData:
2267  c64d 89            	pushw	x
2268  c64e 5207          	subw	sp,#7
2269       00000007      OFST:	set	7
2272                     ; 651   nBytes = 0;
2274  c650 5f            	clrw	x
2275  c651 1f05          	ldw	(OFST-2,sp),x
2277                     ; 687   if(nMaxBytes > 400) nMaxBytes = 400; // limit just in case
2279  c653 1e10          	ldw	x,(OFST+9,sp)
2280  c655 a30191        	cpw	x,#401
2281  c658 2403cccde1    	jrult	L306
2284  c65d ae0190        	ldw	x,#400
2285  c660 1f10          	ldw	(OFST+9,sp),x
2286  c662 cccde1        	jra	L306
2287  c665               L106:
2288                     ; 710     if (*pDataLeft > 0) {
2290  c665 1e0e          	ldw	x,(OFST+7,sp)
2291  c667 e601          	ld	a,(1,x)
2292  c669 fa            	or	a,(x)
2293  c66a 2603cccdea    	jreq	L506
2294                     ; 714       memcpy(&nByte, *ppData, 1);
2296  c66f 96            	ldw	x,sp
2297  c670 5c            	incw	x
2298  c671 bf04          	ldw	c_x,x
2299  c673 160c          	ldw	y,(OFST+5,sp)
2300  c675 90fe          	ldw	y,(y)
2301  c677 90bf07        	ldw	c_y,y
2302  c67a ae0001        	ldw	x,#1
2303  c67d               L25:
2304  c67d 5a            	decw	x
2305  c67e 92d607        	ld	a,([c_y.w],x)
2306  c681 92d704        	ld	([c_x.w],x),a
2307  c684 5d            	tnzw	x
2308  c685 26f6          	jrne	L25
2309                     ; 740       if (nByte == '%') {
2311  c687 7b01          	ld	a,(OFST-6,sp)
2312  c689 a125          	cp	a,#37
2313  c68b 2703cccdc4    	jrne	L116
2314                     ; 741         *ppData = *ppData + 1;
2316  c690 1e0c          	ldw	x,(OFST+5,sp)
2317  c692 9093          	ldw	y,x
2318  c694 fe            	ldw	x,(x)
2319  c695 5c            	incw	x
2320  c696 90ff          	ldw	(y),x
2321                     ; 742         *pDataLeft = *pDataLeft - 1;
2323  c698 1e0e          	ldw	x,(OFST+7,sp)
2324  c69a 9093          	ldw	y,x
2325  c69c fe            	ldw	x,(x)
2326  c69d 5a            	decw	x
2327  c69e 90ff          	ldw	(y),x
2328                     ; 747         memcpy(&nParsedMode, *ppData, 1);
2330  c6a0 96            	ldw	x,sp
2331  c6a1 1c0003        	addw	x,#OFST-4
2332  c6a4 bf04          	ldw	c_x,x
2333  c6a6 160c          	ldw	y,(OFST+5,sp)
2334  c6a8 90fe          	ldw	y,(y)
2335  c6aa 90bf07        	ldw	c_y,y
2336  c6ad ae0001        	ldw	x,#1
2337  c6b0               L45:
2338  c6b0 5a            	decw	x
2339  c6b1 92d607        	ld	a,([c_y.w],x)
2340  c6b4 92d704        	ld	([c_x.w],x),a
2341  c6b7 5d            	tnzw	x
2342  c6b8 26f6          	jrne	L45
2343                     ; 748         *ppData = *ppData + 1;
2345  c6ba 1e0c          	ldw	x,(OFST+5,sp)
2346  c6bc 9093          	ldw	y,x
2347  c6be fe            	ldw	x,(x)
2348  c6bf 5c            	incw	x
2349  c6c0 90ff          	ldw	(y),x
2350                     ; 749         *pDataLeft = *pDataLeft - 1;
2352  c6c2 1e0e          	ldw	x,(OFST+7,sp)
2353  c6c4 9093          	ldw	y,x
2354  c6c6 fe            	ldw	x,(x)
2355  c6c7 5a            	decw	x
2356  c6c8 90ff          	ldw	(y),x
2357                     ; 753         memcpy(&temp, *ppData, 1);
2359  c6ca 96            	ldw	x,sp
2360  c6cb 1c0002        	addw	x,#OFST-5
2361  c6ce bf04          	ldw	c_x,x
2362  c6d0 160c          	ldw	y,(OFST+5,sp)
2363  c6d2 90fe          	ldw	y,(y)
2364  c6d4 90bf07        	ldw	c_y,y
2365  c6d7 ae0001        	ldw	x,#1
2366  c6da               L65:
2367  c6da 5a            	decw	x
2368  c6db 92d607        	ld	a,([c_y.w],x)
2369  c6de 92d704        	ld	([c_x.w],x),a
2370  c6e1 5d            	tnzw	x
2371  c6e2 26f6          	jrne	L65
2372                     ; 754 	nParsedNum = (uint8_t)((temp - '0') * 10);
2374  c6e4 7b02          	ld	a,(OFST-5,sp)
2375  c6e6 97            	ld	xl,a
2376  c6e7 a60a          	ld	a,#10
2377  c6e9 42            	mul	x,a
2378  c6ea 9f            	ld	a,xl
2379  c6eb a0e0          	sub	a,#224
2380  c6ed 6b04          	ld	(OFST-3,sp),a
2382                     ; 755         *ppData = *ppData + 1;
2384  c6ef 1e0c          	ldw	x,(OFST+5,sp)
2385  c6f1 9093          	ldw	y,x
2386  c6f3 fe            	ldw	x,(x)
2387  c6f4 5c            	incw	x
2388  c6f5 90ff          	ldw	(y),x
2389                     ; 756         *pDataLeft = *pDataLeft - 1;
2391  c6f7 1e0e          	ldw	x,(OFST+7,sp)
2392  c6f9 9093          	ldw	y,x
2393  c6fb fe            	ldw	x,(x)
2394  c6fc 5a            	decw	x
2395  c6fd 90ff          	ldw	(y),x
2396                     ; 760         memcpy(&temp, *ppData, 1);
2398  c6ff 96            	ldw	x,sp
2399  c700 1c0002        	addw	x,#OFST-5
2400  c703 bf04          	ldw	c_x,x
2401  c705 160c          	ldw	y,(OFST+5,sp)
2402  c707 90fe          	ldw	y,(y)
2403  c709 90bf07        	ldw	c_y,y
2404  c70c ae0001        	ldw	x,#1
2405  c70f               L06:
2406  c70f 5a            	decw	x
2407  c710 92d607        	ld	a,([c_y.w],x)
2408  c713 92d704        	ld	([c_x.w],x),a
2409  c716 5d            	tnzw	x
2410  c717 26f6          	jrne	L06
2411                     ; 761 	nParsedNum = (uint8_t)(nParsedNum + temp - '0');
2413  c719 7b04          	ld	a,(OFST-3,sp)
2414  c71b 1b02          	add	a,(OFST-5,sp)
2415  c71d a030          	sub	a,#48
2416  c71f 6b04          	ld	(OFST-3,sp),a
2418                     ; 762         *ppData = *ppData + 1;
2420  c721 1e0c          	ldw	x,(OFST+5,sp)
2421  c723 9093          	ldw	y,x
2422  c725 fe            	ldw	x,(x)
2423  c726 5c            	incw	x
2424  c727 90ff          	ldw	(y),x
2425                     ; 763         *pDataLeft = *pDataLeft - 1;
2427  c729 1e0e          	ldw	x,(OFST+7,sp)
2428  c72b 9093          	ldw	y,x
2429  c72d fe            	ldw	x,(x)
2430  c72e 5a            	decw	x
2431  c72f 90ff          	ldw	(y),x
2432                     ; 773         if (nParsedMode == 'i') {
2434  c731 7b03          	ld	a,(OFST-4,sp)
2435  c733 a169          	cp	a,#105
2436  c735 2614          	jrne	L316
2437                     ; 775 	  *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
2439  c737 7b04          	ld	a,(OFST-3,sp)
2440  c739 cdd61e        	call	_GpioGetPin
2442  c73c 1e08          	ldw	x,(OFST+1,sp)
2443  c73e ab30          	add	a,#48
2444  c740 f7            	ld	(x),a
2445                     ; 776           pBuffer++;
2447  c741 5c            	incw	x
2448  c742 1f08          	ldw	(OFST+1,sp),x
2449                     ; 777           nBytes++;
2451  c744 1e05          	ldw	x,(OFST-2,sp)
2452  c746 5c            	incw	x
2453  c747 1f05          	ldw	(OFST-2,sp),x
2456  c749 204e          	jra	L516
2457  c74b               L316:
2458                     ; 780         else if (nParsedMode == 'o') {
2460  c74b a16f          	cp	a,#111
2461  c74d 2624          	jrne	L716
2462                     ; 783           if((uint8_t)(GpioGetPin(nParsedNum) == 1)) { // Insert 'checked'
2464  c74f 7b04          	ld	a,(OFST-3,sp)
2465  c751 cdd61e        	call	_GpioGetPin
2467  c754 4a            	dec	a
2468  c755 2642          	jrne	L516
2469                     ; 784             for(i=0; i<7; i++) {
2471  c757 6b07          	ld	(OFST+0,sp),a
2473  c759               L326:
2474                     ; 785               *pBuffer = checked[i];
2476  c759 5f            	clrw	x
2477  c75a 97            	ld	xl,a
2478  c75b d68080        	ld	a,(L31_checked,x)
2479  c75e 1e08          	ldw	x,(OFST+1,sp)
2480  c760 f7            	ld	(x),a
2481                     ; 786               pBuffer++;
2483  c761 5c            	incw	x
2484  c762 1f08          	ldw	(OFST+1,sp),x
2485                     ; 787               nBytes++;
2487  c764 1e05          	ldw	x,(OFST-2,sp)
2488  c766 5c            	incw	x
2489  c767 1f05          	ldw	(OFST-2,sp),x
2491                     ; 784             for(i=0; i<7; i++) {
2493  c769 0c07          	inc	(OFST+0,sp)
2497  c76b 7b07          	ld	a,(OFST+0,sp)
2498  c76d a107          	cp	a,#7
2499  c76f 25e8          	jrult	L326
2501  c771 2026          	jra	L516
2502  c773               L716:
2503                     ; 794         else if (nParsedMode == 'p') {
2505  c773 a170          	cp	a,#112
2506  c775 2622          	jrne	L516
2507                     ; 797           if((uint8_t)(GpioGetPin(nParsedNum) == 0)) { // Insert 'checked'
2509  c777 7b04          	ld	a,(OFST-3,sp)
2510  c779 cdd61e        	call	_GpioGetPin
2512  c77c 4d            	tnz	a
2513  c77d 261a          	jrne	L516
2514                     ; 798             for(i=0; i<7; i++) {
2516  c77f 6b07          	ld	(OFST+0,sp),a
2518  c781               L146:
2519                     ; 799               *pBuffer = checked[i];
2521  c781 5f            	clrw	x
2522  c782 97            	ld	xl,a
2523  c783 d68080        	ld	a,(L31_checked,x)
2524  c786 1e08          	ldw	x,(OFST+1,sp)
2525  c788 f7            	ld	(x),a
2526                     ; 800               pBuffer++;
2528  c789 5c            	incw	x
2529  c78a 1f08          	ldw	(OFST+1,sp),x
2530                     ; 801               nBytes++;
2532  c78c 1e05          	ldw	x,(OFST-2,sp)
2533  c78e 5c            	incw	x
2534  c78f 1f05          	ldw	(OFST-2,sp),x
2536                     ; 798             for(i=0; i<7; i++) {
2538  c791 0c07          	inc	(OFST+0,sp)
2542  c793 7b07          	ld	a,(OFST+0,sp)
2543  c795 a107          	cp	a,#7
2544  c797 25e8          	jrult	L146
2546  c799               L516:
2547                     ; 808         if (nParsedMode == 'a') {
2549  c799 7b03          	ld	a,(OFST-4,sp)
2550  c79b a161          	cp	a,#97
2551  c79d 263b          	jrne	L156
2552                     ; 810 	  for(i=0; i<20; i++) {
2554  c79f 4f            	clr	a
2555  c7a0 6b07          	ld	(OFST+0,sp),a
2557  c7a2               L356:
2558                     ; 811 	    if(ex_stored_devicename[i] != ' ') { // Don't write spaces out - confuses the
2560  c7a2 5f            	clrw	x
2561  c7a3 97            	ld	xl,a
2562  c7a4 d60038        	ld	a,(_ex_stored_devicename,x)
2563  c7a7 a120          	cp	a,#32
2564  c7a9 2712          	jreq	L166
2565                     ; 813               *pBuffer = (uint8_t)(ex_stored_devicename[i]);
2567  c7ab 7b07          	ld	a,(OFST+0,sp)
2568  c7ad 5f            	clrw	x
2569  c7ae 97            	ld	xl,a
2570  c7af d60038        	ld	a,(_ex_stored_devicename,x)
2571  c7b2 1e08          	ldw	x,(OFST+1,sp)
2572  c7b4 f7            	ld	(x),a
2573                     ; 814               pBuffer++;
2575  c7b5 5c            	incw	x
2576  c7b6 1f08          	ldw	(OFST+1,sp),x
2577                     ; 815               nBytes++;
2579  c7b8 1e05          	ldw	x,(OFST-2,sp)
2580  c7ba 5c            	incw	x
2581  c7bb 1f05          	ldw	(OFST-2,sp),x
2583  c7bd               L166:
2584                     ; 810 	  for(i=0; i<20; i++) {
2586  c7bd 0c07          	inc	(OFST+0,sp)
2590  c7bf 7b07          	ld	a,(OFST+0,sp)
2591  c7c1 a114          	cp	a,#20
2592  c7c3 25dd          	jrult	L356
2593                     ; 830           *ppData = *ppData + 20;
2595  c7c5 1e0c          	ldw	x,(OFST+5,sp)
2596  c7c7 9093          	ldw	y,x
2597  c7c9 fe            	ldw	x,(x)
2598  c7ca 1c0014        	addw	x,#20
2599  c7cd 90ff          	ldw	(y),x
2600                     ; 831           *pDataLeft = *pDataLeft - 20;
2602  c7cf 1e0e          	ldw	x,(OFST+7,sp)
2603  c7d1 9093          	ldw	y,x
2604  c7d3 fe            	ldw	x,(x)
2605  c7d4 1d0014        	subw	x,#20
2607  c7d7 cccbb6        	jp	LC007
2608  c7da               L156:
2609                     ; 834         else if (nParsedMode == 'b') {
2611  c7da a162          	cp	a,#98
2612  c7dc 2703ccc8da    	jrne	L566
2613                     ; 839 	  advanceptrs = 0;
2615                     ; 841           switch (nParsedNum)
2617  c7e1 7b04          	ld	a,(OFST-3,sp)
2619                     ; 856 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2620  c7e3 a10c          	cp	a,#12
2621  c7e5 2503ccc89c    	jruge	L154
2622  c7ea 5f            	clrw	x
2623  c7eb 97            	ld	xl,a
2624  c7ec 58            	sllw	x
2625  c7ed debdd9        	ldw	x,(L421,x)
2626  c7f0 fc            	jp	(x)
2627  c7f1               L124:
2628                     ; 844 	    case 0:  emb_itoa(ex_stored_hostaddr4, OctetArray, 10, 3); advanceptrs = 1; break;
2630  c7f1 4b03          	push	#3
2631  c7f3 4b0a          	push	#10
2632  c7f5 ae0010        	ldw	x,#_OctetArray
2633  c7f8 89            	pushw	x
2634  c7f9 c60059        	ld	a,_ex_stored_hostaddr4
2639  c7fc ccc88d        	jp	LC003
2640  c7ff               L324:
2641                     ; 845 	    case 1:  emb_itoa(ex_stored_hostaddr3, OctetArray, 10, 3); advanceptrs = 1; break;
2643  c7ff 4b03          	push	#3
2644  c801 4b0a          	push	#10
2645  c803 ae0010        	ldw	x,#_OctetArray
2646  c806 89            	pushw	x
2647  c807 c60058        	ld	a,_ex_stored_hostaddr3
2652  c80a ccc88d        	jp	LC003
2653  c80d               L524:
2654                     ; 846 	    case 2:  emb_itoa(ex_stored_hostaddr2, OctetArray, 10, 3); advanceptrs = 1; break;
2656  c80d 4b03          	push	#3
2657  c80f 4b0a          	push	#10
2658  c811 ae0010        	ldw	x,#_OctetArray
2659  c814 89            	pushw	x
2660  c815 c60057        	ld	a,_ex_stored_hostaddr2
2665  c818 2073          	jp	LC003
2666  c81a               L724:
2667                     ; 847 	    case 3:  emb_itoa(ex_stored_hostaddr1, OctetArray, 10, 3); advanceptrs = 1; break;
2669  c81a 4b03          	push	#3
2670  c81c 4b0a          	push	#10
2671  c81e ae0010        	ldw	x,#_OctetArray
2672  c821 89            	pushw	x
2673  c822 c60056        	ld	a,_ex_stored_hostaddr1
2678  c825 2066          	jp	LC003
2679  c827               L134:
2680                     ; 848 	    case 4:  emb_itoa(ex_stored_draddr4,   OctetArray, 10, 3); advanceptrs = 1; break;
2682  c827 4b03          	push	#3
2683  c829 4b0a          	push	#10
2684  c82b ae0010        	ldw	x,#_OctetArray
2685  c82e 89            	pushw	x
2686  c82f c60055        	ld	a,_ex_stored_draddr4
2691  c832 2059          	jp	LC003
2692  c834               L334:
2693                     ; 849 	    case 5:  emb_itoa(ex_stored_draddr3,   OctetArray, 10, 3); advanceptrs = 1; break;
2695  c834 4b03          	push	#3
2696  c836 4b0a          	push	#10
2697  c838 ae0010        	ldw	x,#_OctetArray
2698  c83b 89            	pushw	x
2699  c83c c60054        	ld	a,_ex_stored_draddr3
2704  c83f 204c          	jp	LC003
2705  c841               L534:
2706                     ; 850 	    case 6:  emb_itoa(ex_stored_draddr2,   OctetArray, 10, 3); advanceptrs = 1; break;
2708  c841 4b03          	push	#3
2709  c843 4b0a          	push	#10
2710  c845 ae0010        	ldw	x,#_OctetArray
2711  c848 89            	pushw	x
2712  c849 c60053        	ld	a,_ex_stored_draddr2
2717  c84c 203f          	jp	LC003
2718  c84e               L734:
2719                     ; 851 	    case 7:  emb_itoa(ex_stored_draddr1,   OctetArray, 10, 3); advanceptrs = 1; break;
2721  c84e 4b03          	push	#3
2722  c850 4b0a          	push	#10
2723  c852 ae0010        	ldw	x,#_OctetArray
2724  c855 89            	pushw	x
2725  c856 c60052        	ld	a,_ex_stored_draddr1
2730  c859 2032          	jp	LC003
2731  c85b               L144:
2732                     ; 852 	    case 8:  emb_itoa(ex_stored_netmask4,  OctetArray, 10, 3); advanceptrs = 1; break;
2734  c85b 4b03          	push	#3
2735  c85d 4b0a          	push	#10
2736  c85f ae0010        	ldw	x,#_OctetArray
2737  c862 89            	pushw	x
2738  c863 c60051        	ld	a,_ex_stored_netmask4
2743  c866 2025          	jp	LC003
2744  c868               L344:
2745                     ; 853 	    case 9:  emb_itoa(ex_stored_netmask3,  OctetArray, 10, 3); advanceptrs = 1; break;
2747  c868 4b03          	push	#3
2748  c86a 4b0a          	push	#10
2749  c86c ae0010        	ldw	x,#_OctetArray
2750  c86f 89            	pushw	x
2751  c870 c60050        	ld	a,_ex_stored_netmask3
2756  c873 2018          	jp	LC003
2757  c875               L544:
2758                     ; 854 	    case 10: emb_itoa(ex_stored_netmask2,  OctetArray, 10, 3); advanceptrs = 1; break;
2760  c875 4b03          	push	#3
2761  c877 4b0a          	push	#10
2762  c879 ae0010        	ldw	x,#_OctetArray
2763  c87c 89            	pushw	x
2764  c87d c6004f        	ld	a,_ex_stored_netmask2
2769  c880 200b          	jp	LC003
2770  c882               L744:
2771                     ; 855 	    case 11: emb_itoa(ex_stored_netmask1,  OctetArray, 10, 3); advanceptrs = 1; break;
2773  c882 4b03          	push	#3
2774  c884 4b0a          	push	#10
2775  c886 ae0010        	ldw	x,#_OctetArray
2776  c889 89            	pushw	x
2777  c88a c6004e        	ld	a,_ex_stored_netmask1
2778  c88d               LC003:
2779  c88d b703          	ld	c_lreg+3,a
2780  c88f 3f02          	clr	c_lreg+2
2781  c891 3f01          	clr	c_lreg+1
2782  c893 3f00          	clr	c_lreg
2783  c895 be02          	ldw	x,c_lreg+2
2784  c897 89            	pushw	x
2785  c898 be00          	ldw	x,c_lreg
2790  c89a 200a          	jra	L176
2791  c89c               L154:
2792                     ; 856 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2794  c89c 4b03          	push	#3
2795  c89e 4b0a          	push	#10
2796  c8a0 ae0010        	ldw	x,#_OctetArray
2797  c8a3 89            	pushw	x
2798  c8a4 5f            	clrw	x
2799  c8a5 89            	pushw	x
2805  c8a6               L176:
2806  c8a6 89            	pushw	x
2807  c8a7 cdc410        	call	_emb_itoa
2808  c8aa 5b08          	addw	sp,#8
2821  c8ac a601          	ld	a,#1
2822  c8ae 6b07          	ld	(OFST+0,sp),a
2824                     ; 859 	  if(advanceptrs == 1) { // Copy OctetArray and advance pointers if one of the above
2826  c8b0 4a            	dec	a
2827  c8b1 2703cccde1    	jrne	L306
2828                     ; 861             *pBuffer = (uint8_t)OctetArray[0];
2830  c8b6 1e08          	ldw	x,(OFST+1,sp)
2831  c8b8 c60010        	ld	a,_OctetArray
2832  c8bb f7            	ld	(x),a
2833                     ; 862             pBuffer++;
2835  c8bc 5c            	incw	x
2836  c8bd 1f08          	ldw	(OFST+1,sp),x
2837                     ; 863             nBytes++;
2839  c8bf 1e05          	ldw	x,(OFST-2,sp)
2840  c8c1 5c            	incw	x
2841  c8c2 1f05          	ldw	(OFST-2,sp),x
2843                     ; 865             *pBuffer = (uint8_t)OctetArray[1];
2845  c8c4 1e08          	ldw	x,(OFST+1,sp)
2846  c8c6 c60011        	ld	a,_OctetArray+1
2847  c8c9 f7            	ld	(x),a
2848                     ; 866             pBuffer++;
2850  c8ca 5c            	incw	x
2851  c8cb 1f08          	ldw	(OFST+1,sp),x
2852                     ; 867             nBytes++;
2854  c8cd 1e05          	ldw	x,(OFST-2,sp)
2855  c8cf 5c            	incw	x
2856  c8d0 1f05          	ldw	(OFST-2,sp),x
2858                     ; 869             *pBuffer = (uint8_t)OctetArray[2];
2860  c8d2 c60012        	ld	a,_OctetArray+2
2861  c8d5 1e08          	ldw	x,(OFST+1,sp)
2862                     ; 870             pBuffer++;
2863                     ; 871             nBytes++;
2864  c8d7 ccc9a6        	jp	LC006
2865  c8da               L566:
2866                     ; 875         else if (nParsedMode == 'c') {
2868  c8da a163          	cp	a,#99
2869  c8dc 2637          	jrne	L776
2870                     ; 881           emb_itoa(ex_stored_port, OctetArray, 10, 5);
2872  c8de 4b05          	push	#5
2873  c8e0 4b0a          	push	#10
2874  c8e2 ae0010        	ldw	x,#_OctetArray
2875  c8e5 89            	pushw	x
2876  c8e6 ce004c        	ldw	x,_ex_stored_port
2877  c8e9 cdf587        	call	c_uitolx
2879  c8ec be02          	ldw	x,c_lreg+2
2880  c8ee 89            	pushw	x
2881  c8ef be00          	ldw	x,c_lreg
2882  c8f1 89            	pushw	x
2883  c8f2 cdc410        	call	_emb_itoa
2885  c8f5 5b08          	addw	sp,#8
2886                     ; 883 	  for(i=0; i<5; i++) {
2888  c8f7 4f            	clr	a
2889  c8f8 6b07          	ld	(OFST+0,sp),a
2891  c8fa               L107:
2892                     ; 884             *pBuffer = (uint8_t)OctetArray[i];
2894  c8fa 5f            	clrw	x
2895  c8fb 97            	ld	xl,a
2896  c8fc d60010        	ld	a,(_OctetArray,x)
2897  c8ff 1e08          	ldw	x,(OFST+1,sp)
2898  c901 f7            	ld	(x),a
2899                     ; 885             pBuffer++;
2901  c902 5c            	incw	x
2902  c903 1f08          	ldw	(OFST+1,sp),x
2903                     ; 886             nBytes++;
2905  c905 1e05          	ldw	x,(OFST-2,sp)
2906  c907 5c            	incw	x
2907  c908 1f05          	ldw	(OFST-2,sp),x
2909                     ; 883 	  for(i=0; i<5; i++) {
2911  c90a 0c07          	inc	(OFST+0,sp)
2915  c90c 7b07          	ld	a,(OFST+0,sp)
2916  c90e a105          	cp	a,#5
2917  c910 25e8          	jrult	L107
2919  c912 cccde1        	jra	L306
2920  c915               L776:
2921                     ; 890         else if (nParsedMode == 'd') {
2923  c915 a164          	cp	a,#100
2924  c917 2703ccc9aa    	jrne	L117
2925                     ; 895 	  if(nParsedNum == 0)      emb_itoa(uip_ethaddr1, OctetArray, 16, 2);
2927  c91c 7b04          	ld	a,(OFST-3,sp)
2928  c91e 260d          	jrne	L317
2931  c920 4b02          	push	#2
2932  c922 4b10          	push	#16
2933  c924 ae0010        	ldw	x,#_OctetArray
2934  c927 89            	pushw	x
2935  c928 c6001e        	ld	a,_uip_ethaddr1
2938  c92b 2053          	jp	LC004
2939  c92d               L317:
2940                     ; 896 	  else if(nParsedNum == 1) emb_itoa(uip_ethaddr2, OctetArray, 16, 2);
2942  c92d a101          	cp	a,#1
2943  c92f 260d          	jrne	L717
2946  c931 4b02          	push	#2
2947  c933 4b10          	push	#16
2948  c935 ae0010        	ldw	x,#_OctetArray
2949  c938 89            	pushw	x
2950  c939 c6001f        	ld	a,_uip_ethaddr2
2953  c93c 2042          	jp	LC004
2954  c93e               L717:
2955                     ; 897 	  else if(nParsedNum == 2) emb_itoa(uip_ethaddr3, OctetArray, 16, 2);
2957  c93e a102          	cp	a,#2
2958  c940 260d          	jrne	L327
2961  c942 4b02          	push	#2
2962  c944 4b10          	push	#16
2963  c946 ae0010        	ldw	x,#_OctetArray
2964  c949 89            	pushw	x
2965  c94a c60020        	ld	a,_uip_ethaddr3
2968  c94d 2031          	jp	LC004
2969  c94f               L327:
2970                     ; 898 	  else if(nParsedNum == 3) emb_itoa(uip_ethaddr4, OctetArray, 16, 2);
2972  c94f a103          	cp	a,#3
2973  c951 260d          	jrne	L727
2976  c953 4b02          	push	#2
2977  c955 4b10          	push	#16
2978  c957 ae0010        	ldw	x,#_OctetArray
2979  c95a 89            	pushw	x
2980  c95b c60021        	ld	a,_uip_ethaddr4
2983  c95e 2020          	jp	LC004
2984  c960               L727:
2985                     ; 899 	  else if(nParsedNum == 4) emb_itoa(uip_ethaddr5, OctetArray, 16, 2);
2987  c960 a104          	cp	a,#4
2988  c962 260d          	jrne	L337
2991  c964 4b02          	push	#2
2992  c966 4b10          	push	#16
2993  c968 ae0010        	ldw	x,#_OctetArray
2994  c96b 89            	pushw	x
2995  c96c c60022        	ld	a,_uip_ethaddr5
2998  c96f 200f          	jp	LC004
2999  c971               L337:
3000                     ; 900 	  else if(nParsedNum == 5) emb_itoa(uip_ethaddr6, OctetArray, 16, 2);
3002  c971 a105          	cp	a,#5
3003  c973 261e          	jrne	L517
3006  c975 4b02          	push	#2
3007  c977 4b10          	push	#16
3008  c979 ae0010        	ldw	x,#_OctetArray
3009  c97c 89            	pushw	x
3010  c97d c60023        	ld	a,_uip_ethaddr6
3012  c980               LC004:
3013  c980 b703          	ld	c_lreg+3,a
3014  c982 3f02          	clr	c_lreg+2
3015  c984 3f01          	clr	c_lreg+1
3016  c986 3f00          	clr	c_lreg
3017  c988 be02          	ldw	x,c_lreg+2
3018  c98a 89            	pushw	x
3019  c98b be00          	ldw	x,c_lreg
3020  c98d 89            	pushw	x
3021  c98e cdc410        	call	_emb_itoa
3022  c991 5b08          	addw	sp,#8
3023  c993               L517:
3024                     ; 902           *pBuffer = OctetArray[0];
3026  c993 1e08          	ldw	x,(OFST+1,sp)
3027  c995 c60010        	ld	a,_OctetArray
3028  c998 f7            	ld	(x),a
3029                     ; 903           pBuffer++;
3031  c999 5c            	incw	x
3032  c99a 1f08          	ldw	(OFST+1,sp),x
3033                     ; 904           nBytes++;
3035  c99c 1e05          	ldw	x,(OFST-2,sp)
3036  c99e 5c            	incw	x
3037  c99f 1f05          	ldw	(OFST-2,sp),x
3039                     ; 906           *pBuffer = OctetArray[1];
3041  c9a1 c60011        	ld	a,_OctetArray+1
3042  c9a4 1e08          	ldw	x,(OFST+1,sp)
3043  c9a6               LC006:
3044  c9a6 f7            	ld	(x),a
3045                     ; 907           pBuffer++;
3046                     ; 908           nBytes++;
3048  c9a7 cccdd9        	jp	LC005
3049  c9aa               L117:
3050                     ; 913         else if (nParsedMode == 'e') {
3052  c9aa a165          	cp	a,#101
3053  c9ac 2703cccb85    	jrne	L347
3054                     ; 940           switch (nParsedNum)
3056  c9b1 7b04          	ld	a,(OFST-3,sp)
3058                     ; 965 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3059  c9b3 a116          	cp	a,#22
3060  c9b5 2503cccb46    	jruge	L725
3061  c9ba 5f            	clrw	x
3062  c9bb 97            	ld	xl,a
3063  c9bc 58            	sllw	x
3064  c9bd debdf1        	ldw	x,(L422,x)
3065  c9c0 fc            	jp	(x)
3066  c9c1               L354:
3067                     ; 943 	    case 0:  emb_itoa(uip_stat.ip.drop,      OctetArray, 10, 10); break;
3069  c9c1 4b0a          	push	#10
3070  c9c3 4b0a          	push	#10
3071  c9c5 ae0010        	ldw	x,#_OctetArray
3072  c9c8 89            	pushw	x
3073  c9c9 ce008b        	ldw	x,_uip_stat+2
3074  c9cc 89            	pushw	x
3075  c9cd ce0089        	ldw	x,_uip_stat
3079  c9d0 cccb50        	jra	L747
3080  c9d3               L554:
3081                     ; 944 	    case 1:  emb_itoa(uip_stat.ip.recv,      OctetArray, 10, 10); break;
3083  c9d3 4b0a          	push	#10
3084  c9d5 4b0a          	push	#10
3085  c9d7 ae0010        	ldw	x,#_OctetArray
3086  c9da 89            	pushw	x
3087  c9db ce008f        	ldw	x,_uip_stat+6
3088  c9de 89            	pushw	x
3089  c9df ce008d        	ldw	x,_uip_stat+4
3093  c9e2 cccb50        	jra	L747
3094  c9e5               L754:
3095                     ; 945 	    case 2:  emb_itoa(uip_stat.ip.sent,      OctetArray, 10, 10); break;
3097  c9e5 4b0a          	push	#10
3098  c9e7 4b0a          	push	#10
3099  c9e9 ae0010        	ldw	x,#_OctetArray
3100  c9ec 89            	pushw	x
3101  c9ed ce0093        	ldw	x,_uip_stat+10
3102  c9f0 89            	pushw	x
3103  c9f1 ce0091        	ldw	x,_uip_stat+8
3107  c9f4 cccb50        	jra	L747
3108  c9f7               L164:
3109                     ; 946 	    case 3:  emb_itoa(uip_stat.ip.vhlerr,    OctetArray, 10, 10); break;
3111  c9f7 4b0a          	push	#10
3112  c9f9 4b0a          	push	#10
3113  c9fb ae0010        	ldw	x,#_OctetArray
3114  c9fe 89            	pushw	x
3115  c9ff ce0097        	ldw	x,_uip_stat+14
3116  ca02 89            	pushw	x
3117  ca03 ce0095        	ldw	x,_uip_stat+12
3121  ca06 cccb50        	jra	L747
3122  ca09               L364:
3123                     ; 947 	    case 4:  emb_itoa(uip_stat.ip.hblenerr,  OctetArray, 10, 10); break;
3125  ca09 4b0a          	push	#10
3126  ca0b 4b0a          	push	#10
3127  ca0d ae0010        	ldw	x,#_OctetArray
3128  ca10 89            	pushw	x
3129  ca11 ce009b        	ldw	x,_uip_stat+18
3130  ca14 89            	pushw	x
3131  ca15 ce0099        	ldw	x,_uip_stat+16
3135  ca18 cccb50        	jra	L747
3136  ca1b               L564:
3137                     ; 948 	    case 5:  emb_itoa(uip_stat.ip.lblenerr,  OctetArray, 10, 10); break;
3139  ca1b 4b0a          	push	#10
3140  ca1d 4b0a          	push	#10
3141  ca1f ae0010        	ldw	x,#_OctetArray
3142  ca22 89            	pushw	x
3143  ca23 ce009f        	ldw	x,_uip_stat+22
3144  ca26 89            	pushw	x
3145  ca27 ce009d        	ldw	x,_uip_stat+20
3149  ca2a cccb50        	jra	L747
3150  ca2d               L764:
3151                     ; 949 	    case 6:  emb_itoa(uip_stat.ip.fragerr,   OctetArray, 10, 10); break;
3153  ca2d 4b0a          	push	#10
3154  ca2f 4b0a          	push	#10
3155  ca31 ae0010        	ldw	x,#_OctetArray
3156  ca34 89            	pushw	x
3157  ca35 ce00a3        	ldw	x,_uip_stat+26
3158  ca38 89            	pushw	x
3159  ca39 ce00a1        	ldw	x,_uip_stat+24
3163  ca3c cccb50        	jra	L747
3164  ca3f               L174:
3165                     ; 950 	    case 7:  emb_itoa(uip_stat.ip.chkerr,    OctetArray, 10, 10); break;
3167  ca3f 4b0a          	push	#10
3168  ca41 4b0a          	push	#10
3169  ca43 ae0010        	ldw	x,#_OctetArray
3170  ca46 89            	pushw	x
3171  ca47 ce00a7        	ldw	x,_uip_stat+30
3172  ca4a 89            	pushw	x
3173  ca4b ce00a5        	ldw	x,_uip_stat+28
3177  ca4e cccb50        	jra	L747
3178  ca51               L374:
3179                     ; 951 	    case 8:  emb_itoa(uip_stat.ip.protoerr,  OctetArray, 10, 10); break;
3181  ca51 4b0a          	push	#10
3182  ca53 4b0a          	push	#10
3183  ca55 ae0010        	ldw	x,#_OctetArray
3184  ca58 89            	pushw	x
3185  ca59 ce00ab        	ldw	x,_uip_stat+34
3186  ca5c 89            	pushw	x
3187  ca5d ce00a9        	ldw	x,_uip_stat+32
3191  ca60 cccb50        	jra	L747
3192  ca63               L574:
3193                     ; 952 	    case 9:  emb_itoa(uip_stat.icmp.drop,    OctetArray, 10, 10); break;
3195  ca63 4b0a          	push	#10
3196  ca65 4b0a          	push	#10
3197  ca67 ae0010        	ldw	x,#_OctetArray
3198  ca6a 89            	pushw	x
3199  ca6b ce00af        	ldw	x,_uip_stat+38
3200  ca6e 89            	pushw	x
3201  ca6f ce00ad        	ldw	x,_uip_stat+36
3205  ca72 cccb50        	jra	L747
3206  ca75               L774:
3207                     ; 953 	    case 10: emb_itoa(uip_stat.icmp.recv,    OctetArray, 10, 10); break;
3209  ca75 4b0a          	push	#10
3210  ca77 4b0a          	push	#10
3211  ca79 ae0010        	ldw	x,#_OctetArray
3212  ca7c 89            	pushw	x
3213  ca7d ce00b3        	ldw	x,_uip_stat+42
3214  ca80 89            	pushw	x
3215  ca81 ce00b1        	ldw	x,_uip_stat+40
3219  ca84 cccb50        	jra	L747
3220  ca87               L105:
3221                     ; 954 	    case 11: emb_itoa(uip_stat.icmp.sent,    OctetArray, 10, 10); break;
3223  ca87 4b0a          	push	#10
3224  ca89 4b0a          	push	#10
3225  ca8b ae0010        	ldw	x,#_OctetArray
3226  ca8e 89            	pushw	x
3227  ca8f ce00b7        	ldw	x,_uip_stat+46
3228  ca92 89            	pushw	x
3229  ca93 ce00b5        	ldw	x,_uip_stat+44
3233  ca96 cccb50        	jra	L747
3234  ca99               L305:
3235                     ; 955 	    case 12: emb_itoa(uip_stat.icmp.typeerr, OctetArray, 10, 10); break;
3237  ca99 4b0a          	push	#10
3238  ca9b 4b0a          	push	#10
3239  ca9d ae0010        	ldw	x,#_OctetArray
3240  caa0 89            	pushw	x
3241  caa1 ce00bb        	ldw	x,_uip_stat+50
3242  caa4 89            	pushw	x
3243  caa5 ce00b9        	ldw	x,_uip_stat+48
3247  caa8 cccb50        	jra	L747
3248  caab               L505:
3249                     ; 956 	    case 13: emb_itoa(uip_stat.tcp.drop,     OctetArray, 10, 10); break;
3251  caab 4b0a          	push	#10
3252  caad 4b0a          	push	#10
3253  caaf ae0010        	ldw	x,#_OctetArray
3254  cab2 89            	pushw	x
3255  cab3 ce00bf        	ldw	x,_uip_stat+54
3256  cab6 89            	pushw	x
3257  cab7 ce00bd        	ldw	x,_uip_stat+52
3261  caba cccb50        	jra	L747
3262  cabd               L705:
3263                     ; 957 	    case 14: emb_itoa(uip_stat.tcp.recv,     OctetArray, 10, 10); break;
3265  cabd 4b0a          	push	#10
3266  cabf 4b0a          	push	#10
3267  cac1 ae0010        	ldw	x,#_OctetArray
3268  cac4 89            	pushw	x
3269  cac5 ce00c3        	ldw	x,_uip_stat+58
3270  cac8 89            	pushw	x
3271  cac9 ce00c1        	ldw	x,_uip_stat+56
3275  cacc cccb50        	jra	L747
3276  cacf               L115:
3277                     ; 958 	    case 15: emb_itoa(uip_stat.tcp.sent,     OctetArray, 10, 10); break;
3279  cacf 4b0a          	push	#10
3280  cad1 4b0a          	push	#10
3281  cad3 ae0010        	ldw	x,#_OctetArray
3282  cad6 89            	pushw	x
3283  cad7 ce00c7        	ldw	x,_uip_stat+62
3284  cada 89            	pushw	x
3285  cadb ce00c5        	ldw	x,_uip_stat+60
3289  cade 2070          	jra	L747
3290  cae0               L315:
3291                     ; 959 	    case 16: emb_itoa(uip_stat.tcp.chkerr,   OctetArray, 10, 10); break;
3293  cae0 4b0a          	push	#10
3294  cae2 4b0a          	push	#10
3295  cae4 ae0010        	ldw	x,#_OctetArray
3296  cae7 89            	pushw	x
3297  cae8 ce00cb        	ldw	x,_uip_stat+66
3298  caeb 89            	pushw	x
3299  caec ce00c9        	ldw	x,_uip_stat+64
3303  caef 205f          	jra	L747
3304  caf1               L515:
3305                     ; 960 	    case 17: emb_itoa(uip_stat.tcp.ackerr,   OctetArray, 10, 10); break;
3307  caf1 4b0a          	push	#10
3308  caf3 4b0a          	push	#10
3309  caf5 ae0010        	ldw	x,#_OctetArray
3310  caf8 89            	pushw	x
3311  caf9 ce00cf        	ldw	x,_uip_stat+70
3312  cafc 89            	pushw	x
3313  cafd ce00cd        	ldw	x,_uip_stat+68
3317  cb00 204e          	jra	L747
3318  cb02               L715:
3319                     ; 961 	    case 18: emb_itoa(uip_stat.tcp.rst,      OctetArray, 10, 10); break;
3321  cb02 4b0a          	push	#10
3322  cb04 4b0a          	push	#10
3323  cb06 ae0010        	ldw	x,#_OctetArray
3324  cb09 89            	pushw	x
3325  cb0a ce00d3        	ldw	x,_uip_stat+74
3326  cb0d 89            	pushw	x
3327  cb0e ce00d1        	ldw	x,_uip_stat+72
3331  cb11 203d          	jra	L747
3332  cb13               L125:
3333                     ; 962 	    case 19: emb_itoa(uip_stat.tcp.rexmit,   OctetArray, 10, 10); break;
3335  cb13 4b0a          	push	#10
3336  cb15 4b0a          	push	#10
3337  cb17 ae0010        	ldw	x,#_OctetArray
3338  cb1a 89            	pushw	x
3339  cb1b ce00d7        	ldw	x,_uip_stat+78
3340  cb1e 89            	pushw	x
3341  cb1f ce00d5        	ldw	x,_uip_stat+76
3345  cb22 202c          	jra	L747
3346  cb24               L325:
3347                     ; 963 	    case 20: emb_itoa(uip_stat.tcp.syndrop,  OctetArray, 10, 10); break;
3349  cb24 4b0a          	push	#10
3350  cb26 4b0a          	push	#10
3351  cb28 ae0010        	ldw	x,#_OctetArray
3352  cb2b 89            	pushw	x
3353  cb2c ce00db        	ldw	x,_uip_stat+82
3354  cb2f 89            	pushw	x
3355  cb30 ce00d9        	ldw	x,_uip_stat+80
3359  cb33 201b          	jra	L747
3360  cb35               L525:
3361                     ; 964 	    case 21: emb_itoa(uip_stat.tcp.synrst,   OctetArray, 10, 10); break;
3363  cb35 4b0a          	push	#10
3364  cb37 4b0a          	push	#10
3365  cb39 ae0010        	ldw	x,#_OctetArray
3366  cb3c 89            	pushw	x
3367  cb3d ce00df        	ldw	x,_uip_stat+86
3368  cb40 89            	pushw	x
3369  cb41 ce00dd        	ldw	x,_uip_stat+84
3373  cb44 200a          	jra	L747
3374  cb46               L725:
3375                     ; 965 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3377  cb46 4b0a          	push	#10
3378  cb48 4b0a          	push	#10
3379  cb4a ae0010        	ldw	x,#_OctetArray
3380  cb4d 89            	pushw	x
3381  cb4e 5f            	clrw	x
3382  cb4f 89            	pushw	x
3386  cb50               L747:
3387  cb50 89            	pushw	x
3388  cb51 cdc410        	call	_emb_itoa
3389  cb54 5b08          	addw	sp,#8
3390                     ; 968 	  for (i=0; i<10; i++) {
3392  cb56 4f            	clr	a
3393  cb57 6b07          	ld	(OFST+0,sp),a
3395  cb59               L157:
3396                     ; 969             *pBuffer = OctetArray[i];
3398  cb59 5f            	clrw	x
3399  cb5a 97            	ld	xl,a
3400  cb5b d60010        	ld	a,(_OctetArray,x)
3401  cb5e 1e08          	ldw	x,(OFST+1,sp)
3402  cb60 f7            	ld	(x),a
3403                     ; 970             pBuffer++;
3405  cb61 5c            	incw	x
3406  cb62 1f08          	ldw	(OFST+1,sp),x
3407                     ; 971             nBytes++;
3409  cb64 1e05          	ldw	x,(OFST-2,sp)
3410  cb66 5c            	incw	x
3411  cb67 1f05          	ldw	(OFST-2,sp),x
3413                     ; 968 	  for (i=0; i<10; i++) {
3415  cb69 0c07          	inc	(OFST+0,sp)
3419  cb6b 7b07          	ld	a,(OFST+0,sp)
3420  cb6d a10a          	cp	a,#10
3421  cb6f 25e8          	jrult	L157
3422                     ; 976           *ppData = *ppData + 10;
3424  cb71 1e0c          	ldw	x,(OFST+5,sp)
3425  cb73 9093          	ldw	y,x
3426  cb75 fe            	ldw	x,(x)
3427  cb76 1c000a        	addw	x,#10
3428  cb79 90ff          	ldw	(y),x
3429                     ; 977           *pDataLeft = *pDataLeft - 10;
3431  cb7b 1e0e          	ldw	x,(OFST+7,sp)
3432  cb7d 9093          	ldw	y,x
3433  cb7f fe            	ldw	x,(x)
3434  cb80 1d000a        	subw	x,#10
3436  cb83 2031          	jp	LC007
3437  cb85               L347:
3438                     ; 982         else if (nParsedMode == 'f') {
3440  cb85 a166          	cp	a,#102
3441  cb87 2632          	jrne	L167
3442                     ; 985 	  for(i=0; i<16; i++) {
3444  cb89 4f            	clr	a
3445  cb8a 6b07          	ld	(OFST+0,sp),a
3447  cb8c               L367:
3448                     ; 986 	    *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
3450  cb8c cdd61e        	call	_GpioGetPin
3452  cb8f 1e08          	ldw	x,(OFST+1,sp)
3453  cb91 ab30          	add	a,#48
3454  cb93 f7            	ld	(x),a
3455                     ; 987             pBuffer++;
3457  cb94 5c            	incw	x
3458  cb95 1f08          	ldw	(OFST+1,sp),x
3459                     ; 988             nBytes++;
3461  cb97 1e05          	ldw	x,(OFST-2,sp)
3462  cb99 5c            	incw	x
3463  cb9a 1f05          	ldw	(OFST-2,sp),x
3465                     ; 985 	  for(i=0; i<16; i++) {
3467  cb9c 0c07          	inc	(OFST+0,sp)
3471  cb9e 7b07          	ld	a,(OFST+0,sp)
3472  cba0 a110          	cp	a,#16
3473  cba2 25e8          	jrult	L367
3474                     ; 992           *ppData = *ppData + 16;
3476  cba4 1e0c          	ldw	x,(OFST+5,sp)
3477  cba6 9093          	ldw	y,x
3478  cba8 fe            	ldw	x,(x)
3479  cba9 1c0010        	addw	x,#16
3480  cbac 90ff          	ldw	(y),x
3481                     ; 993           *pDataLeft = *pDataLeft - 16;
3483  cbae 1e0e          	ldw	x,(OFST+7,sp)
3484  cbb0 9093          	ldw	y,x
3485  cbb2 fe            	ldw	x,(x)
3486  cbb3 1d0010        	subw	x,#16
3487  cbb6               LC007:
3488  cbb6 90ff          	ldw	(y),x
3490  cbb8 cccde1        	jra	L306
3491  cbbb               L167:
3492                     ; 996         else if (nParsedMode == 'g') {
3494  cbbb a167          	cp	a,#103
3495  cbbd 2623          	jrne	L377
3496                     ; 1000 	  if (invert_output == 1) {  // Insert 'checked'
3498  cbbf c6005e        	ld	a,_invert_output
3499  cbc2 4a            	dec	a
3500  cbc3 26f3          	jrne	L306
3501                     ; 1001             for(i=0; i<7; i++) {
3503  cbc5 6b07          	ld	(OFST+0,sp),a
3505  cbc7               L777:
3506                     ; 1002               *pBuffer = checked[i];
3508  cbc7 5f            	clrw	x
3509  cbc8 97            	ld	xl,a
3510  cbc9 d68080        	ld	a,(L31_checked,x)
3511  cbcc 1e08          	ldw	x,(OFST+1,sp)
3512  cbce f7            	ld	(x),a
3513                     ; 1003               pBuffer++;
3515  cbcf 5c            	incw	x
3516  cbd0 1f08          	ldw	(OFST+1,sp),x
3517                     ; 1004               nBytes++;
3519  cbd2 1e05          	ldw	x,(OFST-2,sp)
3520  cbd4 5c            	incw	x
3521  cbd5 1f05          	ldw	(OFST-2,sp),x
3523                     ; 1001             for(i=0; i<7; i++) {
3525  cbd7 0c07          	inc	(OFST+0,sp)
3529  cbd9 7b07          	ld	a,(OFST+0,sp)
3530  cbdb a107          	cp	a,#7
3531  cbdd 25e8          	jrult	L777
3532  cbdf cccde1        	jra	L306
3533  cbe2               L377:
3534                     ; 1009         else if (nParsedMode == 'h') {
3536  cbe2 a168          	cp	a,#104
3537  cbe4 2622          	jrne	L7001
3538                     ; 1014 	  if (invert_output == 0) {  // Insert 'checked'
3540  cbe6 c6005e        	ld	a,_invert_output
3541  cbe9 26f4          	jrne	L306
3542                     ; 1015             for(i=0; i<7; i++) {
3544  cbeb 6b07          	ld	(OFST+0,sp),a
3546  cbed               L3101:
3547                     ; 1016               *pBuffer = checked[i];
3549  cbed 5f            	clrw	x
3550  cbee 97            	ld	xl,a
3551  cbef d68080        	ld	a,(L31_checked,x)
3552  cbf2 1e08          	ldw	x,(OFST+1,sp)
3553  cbf4 f7            	ld	(x),a
3554                     ; 1017               pBuffer++;
3556  cbf5 5c            	incw	x
3557  cbf6 1f08          	ldw	(OFST+1,sp),x
3558                     ; 1018               nBytes++;
3560  cbf8 1e05          	ldw	x,(OFST-2,sp)
3561  cbfa 5c            	incw	x
3562  cbfb 1f05          	ldw	(OFST-2,sp),x
3564                     ; 1015             for(i=0; i<7; i++) {
3566  cbfd 0c07          	inc	(OFST+0,sp)
3570  cbff 7b07          	ld	a,(OFST+0,sp)
3571  cc01 a107          	cp	a,#7
3572  cc03 25e8          	jrult	L3101
3573  cc05 cccde1        	jra	L306
3574  cc08               L7001:
3575                     ; 1023         else if (nParsedMode == 'x') {
3577  cc08 a178          	cp	a,#120
3578  cc0a 26f9          	jrne	L306
3579                     ; 1033           *pBuffer = 'h'; pBuffer++; nBytes++;
3581  cc0c 1e08          	ldw	x,(OFST+1,sp)
3582  cc0e a668          	ld	a,#104
3583  cc10 f7            	ld	(x),a
3586  cc11 5c            	incw	x
3587  cc12 1f08          	ldw	(OFST+1,sp),x
3590  cc14 1e05          	ldw	x,(OFST-2,sp)
3591  cc16 5c            	incw	x
3592  cc17 1f05          	ldw	(OFST-2,sp),x
3594                     ; 1034           *pBuffer = 't'; pBuffer++; nBytes++;
3596  cc19 1e08          	ldw	x,(OFST+1,sp)
3597  cc1b a674          	ld	a,#116
3598  cc1d f7            	ld	(x),a
3601  cc1e 5c            	incw	x
3602  cc1f 1f08          	ldw	(OFST+1,sp),x
3605  cc21 1e05          	ldw	x,(OFST-2,sp)
3606  cc23 5c            	incw	x
3607  cc24 1f05          	ldw	(OFST-2,sp),x
3609                     ; 1035           *pBuffer = 't'; pBuffer++; nBytes++;
3611  cc26 1e08          	ldw	x,(OFST+1,sp)
3612  cc28 f7            	ld	(x),a
3615  cc29 5c            	incw	x
3616  cc2a 1f08          	ldw	(OFST+1,sp),x
3619  cc2c 1e05          	ldw	x,(OFST-2,sp)
3620  cc2e 5c            	incw	x
3621  cc2f 1f05          	ldw	(OFST-2,sp),x
3623                     ; 1036           *pBuffer = 'p'; pBuffer++; nBytes++;
3625  cc31 1e08          	ldw	x,(OFST+1,sp)
3626  cc33 a670          	ld	a,#112
3627  cc35 f7            	ld	(x),a
3630  cc36 5c            	incw	x
3631  cc37 1f08          	ldw	(OFST+1,sp),x
3634  cc39 1e05          	ldw	x,(OFST-2,sp)
3635  cc3b 5c            	incw	x
3636  cc3c 1f05          	ldw	(OFST-2,sp),x
3638                     ; 1037           *pBuffer = ':'; pBuffer++; nBytes++;
3640  cc3e 1e08          	ldw	x,(OFST+1,sp)
3641  cc40 a63a          	ld	a,#58
3642  cc42 f7            	ld	(x),a
3645  cc43 5c            	incw	x
3646  cc44 1f08          	ldw	(OFST+1,sp),x
3649  cc46 1e05          	ldw	x,(OFST-2,sp)
3650  cc48 5c            	incw	x
3651  cc49 1f05          	ldw	(OFST-2,sp),x
3653                     ; 1038           *pBuffer = '/'; pBuffer++; nBytes++;
3655  cc4b 1e08          	ldw	x,(OFST+1,sp)
3656  cc4d a62f          	ld	a,#47
3657  cc4f f7            	ld	(x),a
3660  cc50 5c            	incw	x
3661  cc51 1f08          	ldw	(OFST+1,sp),x
3664  cc53 1e05          	ldw	x,(OFST-2,sp)
3665  cc55 5c            	incw	x
3666  cc56 1f05          	ldw	(OFST-2,sp),x
3668                     ; 1039           *pBuffer = '/'; pBuffer++; nBytes++;
3670  cc58 1e08          	ldw	x,(OFST+1,sp)
3671  cc5a f7            	ld	(x),a
3674  cc5b 5c            	incw	x
3675  cc5c 1f08          	ldw	(OFST+1,sp),x
3678  cc5e 1e05          	ldw	x,(OFST-2,sp)
3679  cc60 5c            	incw	x
3680  cc61 1f05          	ldw	(OFST-2,sp),x
3682                     ; 1042 	  emb_itoa(ex_stored_hostaddr4,  OctetArray, 10, 3); // First IP Address Octet
3684  cc63 4b03          	push	#3
3685  cc65 4b0a          	push	#10
3686  cc67 ae0010        	ldw	x,#_OctetArray
3687  cc6a 89            	pushw	x
3688  cc6b 5500590003    	mov	c_lreg+3,_ex_stored_hostaddr4
3689  cc70 3f02          	clr	c_lreg+2
3690  cc72 3f01          	clr	c_lreg+1
3691  cc74 3f00          	clr	c_lreg
3692  cc76 be02          	ldw	x,c_lreg+2
3693  cc78 89            	pushw	x
3694  cc79 be00          	ldw	x,c_lreg
3695  cc7b 89            	pushw	x
3696  cc7c cdc410        	call	_emb_itoa
3698  cc7f 5b08          	addw	sp,#8
3699                     ; 1043 	  for(i=0; i<3; i++) { *pBuffer = OctetArray[i]; pBuffer++; nBytes++; }
3701  cc81 4f            	clr	a
3702  cc82 6b07          	ld	(OFST+0,sp),a
3704  cc84               L5201:
3707  cc84 5f            	clrw	x
3708  cc85 97            	ld	xl,a
3709  cc86 d60010        	ld	a,(_OctetArray,x)
3710  cc89 1e08          	ldw	x,(OFST+1,sp)
3711  cc8b f7            	ld	(x),a
3714  cc8c 5c            	incw	x
3715  cc8d 1f08          	ldw	(OFST+1,sp),x
3718  cc8f 1e05          	ldw	x,(OFST-2,sp)
3719  cc91 5c            	incw	x
3720  cc92 1f05          	ldw	(OFST-2,sp),x
3724  cc94 0c07          	inc	(OFST+0,sp)
3728  cc96 7b07          	ld	a,(OFST+0,sp)
3729  cc98 a103          	cp	a,#3
3730  cc9a 25e8          	jrult	L5201
3731                     ; 1044           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3733  cc9c 1e08          	ldw	x,(OFST+1,sp)
3734  cc9e a62e          	ld	a,#46
3735  cca0 f7            	ld	(x),a
3738  cca1 5c            	incw	x
3739  cca2 1f08          	ldw	(OFST+1,sp),x
3742  cca4 1e05          	ldw	x,(OFST-2,sp)
3743  cca6 5c            	incw	x
3744  cca7 1f05          	ldw	(OFST-2,sp),x
3746                     ; 1046 	  emb_itoa(ex_stored_hostaddr3,  OctetArray, 10, 3); // Second IP Address Octet
3748  cca9 4b03          	push	#3
3749  ccab 4b0a          	push	#10
3750  ccad ae0010        	ldw	x,#_OctetArray
3751  ccb0 89            	pushw	x
3752  ccb1 5500580003    	mov	c_lreg+3,_ex_stored_hostaddr3
3753  ccb6 3f02          	clr	c_lreg+2
3754  ccb8 3f01          	clr	c_lreg+1
3755  ccba 3f00          	clr	c_lreg
3756  ccbc be02          	ldw	x,c_lreg+2
3757  ccbe 89            	pushw	x
3758  ccbf be00          	ldw	x,c_lreg
3759  ccc1 89            	pushw	x
3760  ccc2 cdc410        	call	_emb_itoa
3762  ccc5 5b08          	addw	sp,#8
3763                     ; 1047 	  for(i=0; i<3; i++) { *pBuffer = OctetArray[i]; pBuffer++; nBytes++; }
3765  ccc7 4f            	clr	a
3766  ccc8 6b07          	ld	(OFST+0,sp),a
3768  ccca               L3301:
3771  ccca 5f            	clrw	x
3772  cccb 97            	ld	xl,a
3773  cccc d60010        	ld	a,(_OctetArray,x)
3774  cccf 1e08          	ldw	x,(OFST+1,sp)
3775  ccd1 f7            	ld	(x),a
3778  ccd2 5c            	incw	x
3779  ccd3 1f08          	ldw	(OFST+1,sp),x
3782  ccd5 1e05          	ldw	x,(OFST-2,sp)
3783  ccd7 5c            	incw	x
3784  ccd8 1f05          	ldw	(OFST-2,sp),x
3788  ccda 0c07          	inc	(OFST+0,sp)
3792  ccdc 7b07          	ld	a,(OFST+0,sp)
3793  ccde a103          	cp	a,#3
3794  cce0 25e8          	jrult	L3301
3795                     ; 1048           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3797  cce2 1e08          	ldw	x,(OFST+1,sp)
3798  cce4 a62e          	ld	a,#46
3799  cce6 f7            	ld	(x),a
3802  cce7 5c            	incw	x
3803  cce8 1f08          	ldw	(OFST+1,sp),x
3806  ccea 1e05          	ldw	x,(OFST-2,sp)
3807  ccec 5c            	incw	x
3808  cced 1f05          	ldw	(OFST-2,sp),x
3810                     ; 1050 	  emb_itoa(ex_stored_hostaddr2,  OctetArray, 10, 3); // Third IP Address Octet
3812  ccef 4b03          	push	#3
3813  ccf1 4b0a          	push	#10
3814  ccf3 ae0010        	ldw	x,#_OctetArray
3815  ccf6 89            	pushw	x
3816  ccf7 5500570003    	mov	c_lreg+3,_ex_stored_hostaddr2
3817  ccfc 3f02          	clr	c_lreg+2
3818  ccfe 3f01          	clr	c_lreg+1
3819  cd00 3f00          	clr	c_lreg
3820  cd02 be02          	ldw	x,c_lreg+2
3821  cd04 89            	pushw	x
3822  cd05 be00          	ldw	x,c_lreg
3823  cd07 89            	pushw	x
3824  cd08 cdc410        	call	_emb_itoa
3826  cd0b 5b08          	addw	sp,#8
3827                     ; 1051 	  for(i=0; i<3; i++) { *pBuffer = OctetArray[i]; pBuffer++; nBytes++; }
3829  cd0d 4f            	clr	a
3830  cd0e 6b07          	ld	(OFST+0,sp),a
3832  cd10               L1401:
3835  cd10 5f            	clrw	x
3836  cd11 97            	ld	xl,a
3837  cd12 d60010        	ld	a,(_OctetArray,x)
3838  cd15 1e08          	ldw	x,(OFST+1,sp)
3839  cd17 f7            	ld	(x),a
3842  cd18 5c            	incw	x
3843  cd19 1f08          	ldw	(OFST+1,sp),x
3846  cd1b 1e05          	ldw	x,(OFST-2,sp)
3847  cd1d 5c            	incw	x
3848  cd1e 1f05          	ldw	(OFST-2,sp),x
3852  cd20 0c07          	inc	(OFST+0,sp)
3856  cd22 7b07          	ld	a,(OFST+0,sp)
3857  cd24 a103          	cp	a,#3
3858  cd26 25e8          	jrult	L1401
3859                     ; 1052           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3861  cd28 1e08          	ldw	x,(OFST+1,sp)
3862  cd2a a62e          	ld	a,#46
3863  cd2c f7            	ld	(x),a
3866  cd2d 5c            	incw	x
3867  cd2e 1f08          	ldw	(OFST+1,sp),x
3870  cd30 1e05          	ldw	x,(OFST-2,sp)
3871  cd32 5c            	incw	x
3872  cd33 1f05          	ldw	(OFST-2,sp),x
3874                     ; 1054 	  emb_itoa(ex_stored_hostaddr1,  OctetArray, 10, 3); // Fourth IP Address Octet
3876  cd35 4b03          	push	#3
3877  cd37 4b0a          	push	#10
3878  cd39 ae0010        	ldw	x,#_OctetArray
3879  cd3c 89            	pushw	x
3880  cd3d 5500560003    	mov	c_lreg+3,_ex_stored_hostaddr1
3881  cd42 3f02          	clr	c_lreg+2
3882  cd44 3f01          	clr	c_lreg+1
3883  cd46 3f00          	clr	c_lreg
3884  cd48 be02          	ldw	x,c_lreg+2
3885  cd4a 89            	pushw	x
3886  cd4b be00          	ldw	x,c_lreg
3887  cd4d 89            	pushw	x
3888  cd4e cdc410        	call	_emb_itoa
3890  cd51 5b08          	addw	sp,#8
3891                     ; 1055 	  for(i=0; i<3; i++) { *pBuffer = OctetArray[i]; pBuffer++; nBytes++; }
3893  cd53 4f            	clr	a
3894  cd54 6b07          	ld	(OFST+0,sp),a
3896  cd56               L7401:
3899  cd56 5f            	clrw	x
3900  cd57 97            	ld	xl,a
3901  cd58 d60010        	ld	a,(_OctetArray,x)
3902  cd5b 1e08          	ldw	x,(OFST+1,sp)
3903  cd5d f7            	ld	(x),a
3906  cd5e 5c            	incw	x
3907  cd5f 1f08          	ldw	(OFST+1,sp),x
3910  cd61 1e05          	ldw	x,(OFST-2,sp)
3911  cd63 5c            	incw	x
3912  cd64 1f05          	ldw	(OFST-2,sp),x
3916  cd66 0c07          	inc	(OFST+0,sp)
3920  cd68 7b07          	ld	a,(OFST+0,sp)
3921  cd6a a103          	cp	a,#3
3922  cd6c 25e8          	jrult	L7401
3923                     ; 1056           *pBuffer = ':'; pBuffer++; nBytes++; // Output ':'
3925  cd6e 1e08          	ldw	x,(OFST+1,sp)
3926  cd70 a63a          	ld	a,#58
3927  cd72 f7            	ld	(x),a
3930  cd73 5c            	incw	x
3931  cd74 1f08          	ldw	(OFST+1,sp),x
3934  cd76 1e05          	ldw	x,(OFST-2,sp)
3935  cd78 5c            	incw	x
3936  cd79 1f05          	ldw	(OFST-2,sp),x
3938                     ; 1058 	  emb_itoa(ex_stored_port, OctetArray, 10, 5); // Now output the Port number
3940  cd7b 4b05          	push	#5
3941  cd7d 4b0a          	push	#10
3942  cd7f ae0010        	ldw	x,#_OctetArray
3943  cd82 89            	pushw	x
3944  cd83 ce004c        	ldw	x,_ex_stored_port
3945  cd86 cdf587        	call	c_uitolx
3947  cd89 be02          	ldw	x,c_lreg+2
3948  cd8b 89            	pushw	x
3949  cd8c be00          	ldw	x,c_lreg
3950  cd8e 89            	pushw	x
3951  cd8f cdc410        	call	_emb_itoa
3953  cd92 5b08          	addw	sp,#8
3954                     ; 1059 	  for(i=0; i<5; i++) { *pBuffer = OctetArray[i]; pBuffer++; nBytes++; }
3956  cd94 4f            	clr	a
3957  cd95 6b07          	ld	(OFST+0,sp),a
3959  cd97               L5501:
3962  cd97 5f            	clrw	x
3963  cd98 97            	ld	xl,a
3964  cd99 d60010        	ld	a,(_OctetArray,x)
3965  cd9c 1e08          	ldw	x,(OFST+1,sp)
3966  cd9e f7            	ld	(x),a
3969  cd9f 5c            	incw	x
3970  cda0 1f08          	ldw	(OFST+1,sp),x
3973  cda2 1e05          	ldw	x,(OFST-2,sp)
3974  cda4 5c            	incw	x
3975  cda5 1f05          	ldw	(OFST-2,sp),x
3979  cda7 0c07          	inc	(OFST+0,sp)
3983  cda9 7b07          	ld	a,(OFST+0,sp)
3984  cdab a105          	cp	a,#5
3985  cdad 25e8          	jrult	L5501
3986                     ; 1063           *ppData = *ppData + 28;
3988  cdaf 1e0c          	ldw	x,(OFST+5,sp)
3989  cdb1 9093          	ldw	y,x
3990  cdb3 fe            	ldw	x,(x)
3991  cdb4 1c001c        	addw	x,#28
3992  cdb7 90ff          	ldw	(y),x
3993                     ; 1064           *pDataLeft = *pDataLeft - 28;
3995  cdb9 1e0e          	ldw	x,(OFST+7,sp)
3996  cdbb 9093          	ldw	y,x
3997  cdbd fe            	ldw	x,(x)
3998  cdbe 1d001c        	subw	x,#28
3999  cdc1 cccbb6        	jp	LC007
4000  cdc4               L116:
4001                     ; 1068         *pBuffer = nByte;
4003  cdc4 1e08          	ldw	x,(OFST+1,sp)
4004  cdc6 f7            	ld	(x),a
4005                     ; 1069         *ppData = *ppData + 1;
4007  cdc7 1e0c          	ldw	x,(OFST+5,sp)
4008  cdc9 9093          	ldw	y,x
4009  cdcb fe            	ldw	x,(x)
4010  cdcc 5c            	incw	x
4011  cdcd 90ff          	ldw	(y),x
4012                     ; 1070         *pDataLeft = *pDataLeft - 1;
4014  cdcf 1e0e          	ldw	x,(OFST+7,sp)
4015  cdd1 9093          	ldw	y,x
4016  cdd3 fe            	ldw	x,(x)
4017  cdd4 5a            	decw	x
4018  cdd5 90ff          	ldw	(y),x
4019                     ; 1071         pBuffer++;
4021  cdd7 1e08          	ldw	x,(OFST+1,sp)
4022                     ; 1072         nBytes++;
4024  cdd9               LC005:
4027  cdd9 5c            	incw	x
4028  cdda 1f08          	ldw	(OFST+1,sp),x
4031  cddc 1e05          	ldw	x,(OFST-2,sp)
4032  cdde 5c            	incw	x
4033  cddf 1f05          	ldw	(OFST-2,sp),x
4035  cde1               L306:
4036                     ; 689   while (nBytes < nMaxBytes) {
4038  cde1 1e05          	ldw	x,(OFST-2,sp)
4039  cde3 1310          	cpw	x,(OFST+9,sp)
4040  cde5 2403ccc665    	jrult	L106
4041  cdea               L506:
4042                     ; 1077   return nBytes;
4044  cdea 1e05          	ldw	x,(OFST-2,sp)
4047  cdec 5b09          	addw	sp,#9
4048  cdee 81            	ret	
4075                     ; 1081 void HttpDInit()
4075                     ; 1082 {
4076                     	switch	.text
4077  cdef               _HttpDInit:
4081                     ; 1084   uip_listen(htons(Port_Httpd));
4083  cdef ce0061        	ldw	x,_Port_Httpd
4084  cdf2 cdef63        	call	_htons
4086  cdf5 cde623        	call	_uip_listen
4088                     ; 1085   current_webpage = WEBPAGE_DEFAULT;
4090  cdf8 725f001b      	clr	_current_webpage
4091                     ; 1086 }
4094  cdfc 81            	ret	
4300                     	switch	.const
4301  be1d               L472:
4302  be1d d376          	dc.w	L7701
4303  be1f d37d          	dc.w	L1011
4304  be21 d384          	dc.w	L3011
4305  be23 d38b          	dc.w	L5011
4306  be25 d392          	dc.w	L7011
4307  be27 d399          	dc.w	L1111
4308  be29 d3a0          	dc.w	L3111
4309  be2b d3a7          	dc.w	L5111
4310  be2d d3ae          	dc.w	L7111
4311  be2f d3b5          	dc.w	L1211
4312  be31 d3bc          	dc.w	L3211
4313  be33 d3c3          	dc.w	L5211
4314  be35 d3ca          	dc.w	L7211
4315  be37 d3d1          	dc.w	L1311
4316  be39 d3d8          	dc.w	L3311
4317  be3b d3df          	dc.w	L5311
4318  be3d d3e6          	dc.w	L7311
4319  be3f d3ed          	dc.w	L1411
4320  be41 d3f4          	dc.w	L3411
4321  be43 d3fb          	dc.w	L5411
4322  be45 d402          	dc.w	L7411
4323  be47 d409          	dc.w	L1511
4324  be49 d410          	dc.w	L3511
4325  be4b d417          	dc.w	L5511
4326  be4d d41e          	dc.w	L7511
4327  be4f d425          	dc.w	L1611
4328  be51 d42c          	dc.w	L3611
4329  be53 d433          	dc.w	L5611
4330  be55 d43a          	dc.w	L7611
4331  be57 d441          	dc.w	L1711
4332  be59 d448          	dc.w	L3711
4333  be5b d44f          	dc.w	L5711
4334  be5d d4dc          	dc.w	L3221
4335  be5f d4dc          	dc.w	L3221
4336  be61 d4dc          	dc.w	L3221
4337  be63 d4dc          	dc.w	L3221
4338  be65 d4dc          	dc.w	L3221
4339  be67 d4dc          	dc.w	L3221
4340  be69 d4dc          	dc.w	L3221
4341  be6b d4dc          	dc.w	L3221
4342  be6d d4dc          	dc.w	L3221
4343  be6f d4dc          	dc.w	L3221
4344  be71 d4dc          	dc.w	L3221
4345  be73 d4dc          	dc.w	L3221
4346  be75 d4dc          	dc.w	L3221
4347  be77 d4dc          	dc.w	L3221
4348  be79 d4dc          	dc.w	L3221
4349  be7b d4dc          	dc.w	L3221
4350  be7d d4dc          	dc.w	L3221
4351  be7f d4dc          	dc.w	L3221
4352  be81 d4dc          	dc.w	L3221
4353  be83 d4dc          	dc.w	L3221
4354  be85 d4dc          	dc.w	L3221
4355  be87 d4dc          	dc.w	L3221
4356  be89 d4dc          	dc.w	L3221
4357  be8b d456          	dc.w	L7711
4358  be8d d461          	dc.w	L1021
4359  be8f d4dc          	dc.w	L3221
4360  be91 d4dc          	dc.w	L3221
4361  be93 d4dc          	dc.w	L3221
4362  be95 d46c          	dc.w	L3021
4363  be97 d46e          	dc.w	L5021
4364  be99 d4dc          	dc.w	L3221
4365  be9b d480          	dc.w	L7021
4366  be9d d492          	dc.w	L1121
4367  be9f d4a4          	dc.w	L3121
4368  bea1 d4af          	dc.w	L5121
4369                     ; 1089 void HttpDCall(	uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
4369                     ; 1090 {
4370                     	switch	.text
4371  cdfd               _HttpDCall:
4373  cdfd 89            	pushw	x
4374  cdfe 5207          	subw	sp,#7
4375       00000007      OFST:	set	7
4378                     ; 1100   alpha_1 = '0';
4380                     ; 1101   alpha_2 = '0';
4382                     ; 1102   alpha_3 = '0';
4384                     ; 1103   alpha_4 = '0';
4386                     ; 1104   alpha_5 = '0';
4388                     ; 1106   if(uip_connected()) {
4390  ce00 720d00887a    	btjf	_uip_flags,#6,L3231
4391                     ; 1108     if(current_webpage == WEBPAGE_DEFAULT) {
4393  ce05 c6001b        	ld	a,_current_webpage
4394  ce08 260e          	jrne	L5231
4395                     ; 1109       pSocket->pData = g_HtmlPageDefault;
4397  ce0a 1e0e          	ldw	x,(OFST+7,sp)
4398  ce0c 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
4399  ce10 ef01          	ldw	(1,x),y
4400                     ; 1110       pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
4402  ce12 90ae15d5      	ldw	y,#5589
4404  ce16 2058          	jp	LC008
4405  ce18               L5231:
4406                     ; 1114     else if(current_webpage == WEBPAGE_ADDRESS) {
4408  ce18 a101          	cp	a,#1
4409  ce1a 260e          	jrne	L1331
4410                     ; 1115       pSocket->pData = g_HtmlPageAddress;
4412  ce1c 1e0e          	ldw	x,(OFST+7,sp)
4413  ce1e 90ae965e      	ldw	y,#L71_g_HtmlPageAddress
4414  ce22 ef01          	ldw	(1,x),y
4415                     ; 1116       pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
4417  ce24 90ae1341      	ldw	y,#4929
4419  ce28 2046          	jp	LC008
4420  ce2a               L1331:
4421                     ; 1120     else if(current_webpage == WEBPAGE_HELP) {
4423  ce2a a103          	cp	a,#3
4424  ce2c 260e          	jrne	L5331
4425                     ; 1121       pSocket->pData = g_HtmlPageHelp;
4427  ce2e 1e0e          	ldw	x,(OFST+7,sp)
4428  ce30 90aea9a0      	ldw	y,#L12_g_HtmlPageHelp
4429  ce34 ef01          	ldw	(1,x),y
4430                     ; 1122       pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
4432  ce36 90ae075c      	ldw	y,#1884
4434  ce3a 2034          	jp	LC008
4435  ce3c               L5331:
4436                     ; 1124     else if(current_webpage == WEBPAGE_HELP2) {
4438  ce3c a104          	cp	a,#4
4439  ce3e 260e          	jrne	L1431
4440                     ; 1125       pSocket->pData = g_HtmlPageHelp2;
4442  ce40 1e0e          	ldw	x,(OFST+7,sp)
4443  ce42 90aeb0fd      	ldw	y,#L32_g_HtmlPageHelp2
4444  ce46 ef01          	ldw	(1,x),y
4445                     ; 1126       pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
4447  ce48 90ae02bb      	ldw	y,#699
4449  ce4c 2022          	jp	LC008
4450  ce4e               L1431:
4451                     ; 1131     else if(current_webpage == WEBPAGE_STATS) {
4453  ce4e a105          	cp	a,#5
4454  ce50 260e          	jrne	L5431
4455                     ; 1132       pSocket->pData = g_HtmlPageStats;
4457  ce52 1e0e          	ldw	x,(OFST+7,sp)
4458  ce54 90aeb3b9      	ldw	y,#L52_g_HtmlPageStats
4459  ce58 ef01          	ldw	(1,x),y
4460                     ; 1133       pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
4462  ce5a 90ae097e      	ldw	y,#2430
4464  ce5e 2010          	jp	LC008
4465  ce60               L5431:
4466                     ; 1136     else if(current_webpage == WEBPAGE_RSTATE) {
4468  ce60 a106          	cp	a,#6
4469  ce62 260e          	jrne	L7231
4470                     ; 1137       pSocket->pData = g_HtmlPageRstate;
4472  ce64 1e0e          	ldw	x,(OFST+7,sp)
4473  ce66 90aebd38      	ldw	y,#L72_g_HtmlPageRstate
4474  ce6a ef01          	ldw	(1,x),y
4475                     ; 1138       pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
4477  ce6c 90ae00a0      	ldw	y,#160
4478  ce70               LC008:
4479  ce70 ef03          	ldw	(3,x),y
4480  ce72               L7231:
4481                     ; 1140     pSocket->nNewlines = 0;
4483  ce72 1e0e          	ldw	x,(OFST+7,sp)
4484                     ; 1141     pSocket->nState = STATE_CONNECTED;
4486  ce74 7f            	clr	(x)
4487  ce75 6f05          	clr	(5,x)
4488                     ; 1142     pSocket->nPrevBytes = 0xFFFF;
4490  ce77 90aeffff      	ldw	y,#65535
4491  ce7b ef0a          	ldw	(10,x),y
4493  ce7d 2041          	jra	L613
4494  ce7f               L3231:
4495                     ; 1144   else if (uip_newdata() || uip_acked()) {
4497  ce7f 7202008808    	btjt	_uip_flags,#1,L7531
4499  ce84 7200008803cc  	btjf	_uip_flags,#0,L5531
4500  ce8c               L7531:
4501                     ; 1145     if (pSocket->nState == STATE_CONNECTED) {
4503  ce8c 1e0e          	ldw	x,(OFST+7,sp)
4504  ce8e f6            	ld	a,(x)
4505  ce8f 2627          	jrne	L1631
4506                     ; 1146       if (nBytes == 0) return;
4508  ce91 1e0c          	ldw	x,(OFST+5,sp)
4509  ce93 272b          	jreq	L613
4512                     ; 1147       if (*pBuffer == 'G') pSocket->nState = STATE_GET_G;
4514  ce95 1e08          	ldw	x,(OFST+1,sp)
4515  ce97 f6            	ld	a,(x)
4516  ce98 a147          	cp	a,#71
4517  ce9a 2606          	jrne	L5631
4520  ce9c 1e0e          	ldw	x,(OFST+7,sp)
4521  ce9e a601          	ld	a,#1
4523  cea0 2008          	jp	LC009
4524  cea2               L5631:
4525                     ; 1148       else if (*pBuffer == 'P') pSocket->nState = STATE_POST_P;
4527  cea2 a150          	cp	a,#80
4528  cea4 2605          	jrne	L7631
4531  cea6 1e0e          	ldw	x,(OFST+7,sp)
4532  cea8 a604          	ld	a,#4
4533  ceaa               LC009:
4534  ceaa f7            	ld	(x),a
4535  ceab               L7631:
4536                     ; 1149       nBytes--;
4538  ceab 1e0c          	ldw	x,(OFST+5,sp)
4539  cead 5a            	decw	x
4540  ceae 1f0c          	ldw	(OFST+5,sp),x
4541                     ; 1150       pBuffer++;
4543  ceb0 1e08          	ldw	x,(OFST+1,sp)
4544  ceb2 5c            	incw	x
4545  ceb3 1f08          	ldw	(OFST+1,sp),x
4546  ceb5 1e0e          	ldw	x,(OFST+7,sp)
4547  ceb7 f6            	ld	a,(x)
4548  ceb8               L1631:
4549                     ; 1153     if (pSocket->nState == STATE_GET_G) {
4551  ceb8 a101          	cp	a,#1
4552  ceba 2620          	jrne	L3731
4553                     ; 1154       if (nBytes == 0) return;
4555  cebc 1e0c          	ldw	x,(OFST+5,sp)
4556  cebe 2603          	jrne	L5731
4558  cec0               L613:
4561  cec0 5b09          	addw	sp,#9
4562  cec2 81            	ret	
4563  cec3               L5731:
4564                     ; 1155       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
4566  cec3 1e08          	ldw	x,(OFST+1,sp)
4567  cec5 f6            	ld	a,(x)
4568  cec6 a145          	cp	a,#69
4569  cec8 2605          	jrne	L7731
4572  ceca 1e0e          	ldw	x,(OFST+7,sp)
4573  cecc a602          	ld	a,#2
4574  cece f7            	ld	(x),a
4575  cecf               L7731:
4576                     ; 1156       nBytes--;
4578  cecf 1e0c          	ldw	x,(OFST+5,sp)
4579  ced1 5a            	decw	x
4580  ced2 1f0c          	ldw	(OFST+5,sp),x
4581                     ; 1157       pBuffer++;
4583  ced4 1e08          	ldw	x,(OFST+1,sp)
4584  ced6 5c            	incw	x
4585  ced7 1f08          	ldw	(OFST+1,sp),x
4586  ced9 1e0e          	ldw	x,(OFST+7,sp)
4587  cedb f6            	ld	a,(x)
4588  cedc               L3731:
4589                     ; 1160     if (pSocket->nState == STATE_GET_GE) {
4591  cedc a102          	cp	a,#2
4592  cede 261d          	jrne	L1041
4593                     ; 1161       if (nBytes == 0) return;
4595  cee0 1e0c          	ldw	x,(OFST+5,sp)
4596  cee2 27dc          	jreq	L613
4599                     ; 1162       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
4601  cee4 1e08          	ldw	x,(OFST+1,sp)
4602  cee6 f6            	ld	a,(x)
4603  cee7 a154          	cp	a,#84
4604  cee9 2605          	jrne	L5041
4607  ceeb 1e0e          	ldw	x,(OFST+7,sp)
4608  ceed a603          	ld	a,#3
4609  ceef f7            	ld	(x),a
4610  cef0               L5041:
4611                     ; 1163       nBytes--;
4613  cef0 1e0c          	ldw	x,(OFST+5,sp)
4614  cef2 5a            	decw	x
4615  cef3 1f0c          	ldw	(OFST+5,sp),x
4616                     ; 1164       pBuffer++;
4618  cef5 1e08          	ldw	x,(OFST+1,sp)
4619  cef7 5c            	incw	x
4620  cef8 1f08          	ldw	(OFST+1,sp),x
4621  cefa 1e0e          	ldw	x,(OFST+7,sp)
4622  cefc f6            	ld	a,(x)
4623  cefd               L1041:
4624                     ; 1167     if (pSocket->nState == STATE_GET_GET) {
4626  cefd a103          	cp	a,#3
4627  ceff 261d          	jrne	L7041
4628                     ; 1168       if (nBytes == 0) return;
4630  cf01 1e0c          	ldw	x,(OFST+5,sp)
4631  cf03 27bb          	jreq	L613
4634                     ; 1169       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
4636  cf05 1e08          	ldw	x,(OFST+1,sp)
4637  cf07 f6            	ld	a,(x)
4638  cf08 a120          	cp	a,#32
4639  cf0a 2605          	jrne	L3141
4642  cf0c 1e0e          	ldw	x,(OFST+7,sp)
4643  cf0e a608          	ld	a,#8
4644  cf10 f7            	ld	(x),a
4645  cf11               L3141:
4646                     ; 1170       nBytes--;
4648  cf11 1e0c          	ldw	x,(OFST+5,sp)
4649  cf13 5a            	decw	x
4650  cf14 1f0c          	ldw	(OFST+5,sp),x
4651                     ; 1171       pBuffer++;
4653  cf16 1e08          	ldw	x,(OFST+1,sp)
4654  cf18 5c            	incw	x
4655  cf19 1f08          	ldw	(OFST+1,sp),x
4656  cf1b 1e0e          	ldw	x,(OFST+7,sp)
4657  cf1d f6            	ld	a,(x)
4658  cf1e               L7041:
4659                     ; 1174     if (pSocket->nState == STATE_POST_P) {
4661  cf1e a104          	cp	a,#4
4662  cf20 261d          	jrne	L5141
4663                     ; 1175       if (nBytes == 0) return;
4665  cf22 1e0c          	ldw	x,(OFST+5,sp)
4666  cf24 279a          	jreq	L613
4669                     ; 1176       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
4671  cf26 1e08          	ldw	x,(OFST+1,sp)
4672  cf28 f6            	ld	a,(x)
4673  cf29 a14f          	cp	a,#79
4674  cf2b 2605          	jrne	L1241
4677  cf2d 1e0e          	ldw	x,(OFST+7,sp)
4678  cf2f a605          	ld	a,#5
4679  cf31 f7            	ld	(x),a
4680  cf32               L1241:
4681                     ; 1177       nBytes--;
4683  cf32 1e0c          	ldw	x,(OFST+5,sp)
4684  cf34 5a            	decw	x
4685  cf35 1f0c          	ldw	(OFST+5,sp),x
4686                     ; 1178       pBuffer++;
4688  cf37 1e08          	ldw	x,(OFST+1,sp)
4689  cf39 5c            	incw	x
4690  cf3a 1f08          	ldw	(OFST+1,sp),x
4691  cf3c 1e0e          	ldw	x,(OFST+7,sp)
4692  cf3e f6            	ld	a,(x)
4693  cf3f               L5141:
4694                     ; 1181     if (pSocket->nState == STATE_POST_PO) {
4696  cf3f a105          	cp	a,#5
4697  cf41 2620          	jrne	L3241
4698                     ; 1182       if (nBytes == 0) return;
4700  cf43 1e0c          	ldw	x,(OFST+5,sp)
4701  cf45 2603cccec0    	jreq	L613
4704                     ; 1183       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
4706  cf4a 1e08          	ldw	x,(OFST+1,sp)
4707  cf4c f6            	ld	a,(x)
4708  cf4d a153          	cp	a,#83
4709  cf4f 2605          	jrne	L7241
4712  cf51 1e0e          	ldw	x,(OFST+7,sp)
4713  cf53 a606          	ld	a,#6
4714  cf55 f7            	ld	(x),a
4715  cf56               L7241:
4716                     ; 1184       nBytes--;
4718  cf56 1e0c          	ldw	x,(OFST+5,sp)
4719  cf58 5a            	decw	x
4720  cf59 1f0c          	ldw	(OFST+5,sp),x
4721                     ; 1185       pBuffer++;
4723  cf5b 1e08          	ldw	x,(OFST+1,sp)
4724  cf5d 5c            	incw	x
4725  cf5e 1f08          	ldw	(OFST+1,sp),x
4726  cf60 1e0e          	ldw	x,(OFST+7,sp)
4727  cf62 f6            	ld	a,(x)
4728  cf63               L3241:
4729                     ; 1188     if (pSocket->nState == STATE_POST_POS) {
4731  cf63 a106          	cp	a,#6
4732  cf65 261d          	jrne	L1341
4733                     ; 1189       if (nBytes == 0) return;
4735  cf67 1e0c          	ldw	x,(OFST+5,sp)
4736  cf69 27dc          	jreq	L613
4739                     ; 1190       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
4741  cf6b 1e08          	ldw	x,(OFST+1,sp)
4742  cf6d f6            	ld	a,(x)
4743  cf6e a154          	cp	a,#84
4744  cf70 2605          	jrne	L5341
4747  cf72 1e0e          	ldw	x,(OFST+7,sp)
4748  cf74 a607          	ld	a,#7
4749  cf76 f7            	ld	(x),a
4750  cf77               L5341:
4751                     ; 1191       nBytes--;
4753  cf77 1e0c          	ldw	x,(OFST+5,sp)
4754  cf79 5a            	decw	x
4755  cf7a 1f0c          	ldw	(OFST+5,sp),x
4756                     ; 1192       pBuffer++;
4758  cf7c 1e08          	ldw	x,(OFST+1,sp)
4759  cf7e 5c            	incw	x
4760  cf7f 1f08          	ldw	(OFST+1,sp),x
4761  cf81 1e0e          	ldw	x,(OFST+7,sp)
4762  cf83 f6            	ld	a,(x)
4763  cf84               L1341:
4764                     ; 1195     if (pSocket->nState == STATE_POST_POST) {
4766  cf84 a107          	cp	a,#7
4767  cf86 261d          	jrne	L7341
4768                     ; 1196       if (nBytes == 0) return;
4770  cf88 1e0c          	ldw	x,(OFST+5,sp)
4771  cf8a 27bb          	jreq	L613
4774                     ; 1197       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
4776  cf8c 1e08          	ldw	x,(OFST+1,sp)
4777  cf8e f6            	ld	a,(x)
4778  cf8f a120          	cp	a,#32
4779  cf91 2605          	jrne	L3441
4782  cf93 1e0e          	ldw	x,(OFST+7,sp)
4783  cf95 a609          	ld	a,#9
4784  cf97 f7            	ld	(x),a
4785  cf98               L3441:
4786                     ; 1198       nBytes--;
4788  cf98 1e0c          	ldw	x,(OFST+5,sp)
4789  cf9a 5a            	decw	x
4790  cf9b 1f0c          	ldw	(OFST+5,sp),x
4791                     ; 1199       pBuffer++;
4793  cf9d 1e08          	ldw	x,(OFST+1,sp)
4794  cf9f 5c            	incw	x
4795  cfa0 1f08          	ldw	(OFST+1,sp),x
4796  cfa2 1e0e          	ldw	x,(OFST+7,sp)
4797  cfa4 f6            	ld	a,(x)
4798  cfa5               L7341:
4799                     ; 1202     if (pSocket->nState == STATE_GOTPOST) {
4801  cfa5 a109          	cp	a,#9
4802  cfa7 264c          	jrne	L5441
4804  cfa9 2046          	jra	L1541
4805  cfab               L7441:
4806                     ; 1205         if (*pBuffer == '\n') {
4808  cfab 1e08          	ldw	x,(OFST+1,sp)
4809  cfad f6            	ld	a,(x)
4810  cfae a10a          	cp	a,#10
4811  cfb0 2606          	jrne	L5541
4812                     ; 1206           pSocket->nNewlines++;
4814  cfb2 1e0e          	ldw	x,(OFST+7,sp)
4815  cfb4 6c05          	inc	(5,x)
4817  cfb6 2008          	jra	L7541
4818  cfb8               L5541:
4819                     ; 1208         else if (*pBuffer == '\r') {
4821  cfb8 a10d          	cp	a,#13
4822  cfba 2704          	jreq	L7541
4824                     ; 1211           pSocket->nNewlines = 0;
4826  cfbc 1e0e          	ldw	x,(OFST+7,sp)
4827  cfbe 6f05          	clr	(5,x)
4828  cfc0               L7541:
4829                     ; 1213         pBuffer++;
4831  cfc0 1e08          	ldw	x,(OFST+1,sp)
4832  cfc2 5c            	incw	x
4833  cfc3 1f08          	ldw	(OFST+1,sp),x
4834                     ; 1214         nBytes--;
4836  cfc5 1e0c          	ldw	x,(OFST+5,sp)
4837  cfc7 5a            	decw	x
4838  cfc8 1f0c          	ldw	(OFST+5,sp),x
4839                     ; 1215         if (pSocket->nNewlines == 2) {
4841  cfca 1e0e          	ldw	x,(OFST+7,sp)
4842  cfcc e605          	ld	a,(5,x)
4843  cfce a102          	cp	a,#2
4844  cfd0 261f          	jrne	L1541
4845                     ; 1217           if (pSocket->nState == STATE_GOTPOST) {
4847  cfd2 f6            	ld	a,(x)
4848  cfd3 a109          	cp	a,#9
4849  cfd5 261e          	jrne	L5441
4850                     ; 1219             if(current_webpage == WEBPAGE_DEFAULT) pSocket->nParseLeft = PARSEBYTES_DEFAULT;
4852  cfd7 c6001b        	ld	a,_current_webpage
4853  cfda 2607          	jrne	L1741
4856  cfdc a67e          	ld	a,#126
4857  cfde e706          	ld	(6,x),a
4858  cfe0 c6001b        	ld	a,_current_webpage
4859  cfe3               L1741:
4860                     ; 1220             if(current_webpage == WEBPAGE_ADDRESS) pSocket->nParseLeft = PARSEBYTES_ADDRESS;
4862  cfe3 4a            	dec	a
4863  cfe4 2604          	jrne	L3741
4866  cfe6 a693          	ld	a,#147
4867  cfe8 e706          	ld	(6,x),a
4868  cfea               L3741:
4869                     ; 1221             pSocket->ParseState = PARSE_CMD;
4871  cfea 6f09          	clr	(9,x)
4872                     ; 1223             pSocket->nState = STATE_PARSEPOST;
4874  cfec a60a          	ld	a,#10
4875  cfee f7            	ld	(x),a
4876  cfef 2004          	jra	L5441
4877  cff1               L1541:
4878                     ; 1204       while (nBytes != 0) {
4880  cff1 1e0c          	ldw	x,(OFST+5,sp)
4881  cff3 26b6          	jrne	L7441
4882  cff5               L5441:
4883                     ; 1230     if (pSocket->nState == STATE_GOTGET) {
4885  cff5 1e0e          	ldw	x,(OFST+7,sp)
4886  cff7 f6            	ld	a,(x)
4887  cff8 a108          	cp	a,#8
4888  cffa 2609          	jrne	L5741
4889                     ; 1233       pSocket->nParseLeft = 6; // Small parse number since we should have short
4891  cffc a606          	ld	a,#6
4892  cffe e706          	ld	(6,x),a
4893                     ; 1235       pSocket->ParseState = PARSE_SLASH1;
4895  d000 e709          	ld	(9,x),a
4896                     ; 1237       pSocket->nState = STATE_PARSEGET;
4898  d002 a60d          	ld	a,#13
4899  d004 f7            	ld	(x),a
4900  d005               L5741:
4901                     ; 1240     if (pSocket->nState == STATE_PARSEPOST) {
4903  d005 a10a          	cp	a,#10
4904  d007 2703ccd277    	jrne	L7741
4906  d00c ccd268        	jra	L3051
4907  d00f               L1051:
4908                     ; 1250         if (pSocket->ParseState == PARSE_CMD) {
4910  d00f 1e0e          	ldw	x,(OFST+7,sp)
4911  d011 e609          	ld	a,(9,x)
4912  d013 263e          	jrne	L7051
4913                     ; 1251           pSocket->ParseCmd = *pBuffer;
4915  d015 1e08          	ldw	x,(OFST+1,sp)
4916  d017 f6            	ld	a,(x)
4917  d018 1e0e          	ldw	x,(OFST+7,sp)
4918  d01a e707          	ld	(7,x),a
4919                     ; 1252           pSocket->ParseState = PARSE_NUM10;
4921  d01c a601          	ld	a,#1
4922  d01e e709          	ld	(9,x),a
4923                     ; 1253 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
4925  d020 e606          	ld	a,(6,x)
4926  d022 2704          	jreq	L1151
4929  d024 6a06          	dec	(6,x)
4931  d026 2004          	jra	L3151
4932  d028               L1151:
4933                     ; 1254 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
4935  d028 a605          	ld	a,#5
4936  d02a e709          	ld	(9,x),a
4937  d02c               L3151:
4938                     ; 1255           pBuffer++;
4940  d02c 1e08          	ldw	x,(OFST+1,sp)
4941  d02e 5c            	incw	x
4942  d02f 1f08          	ldw	(OFST+1,sp),x
4943                     ; 1257 	  if (pSocket->ParseCmd == 'o' ||
4943                     ; 1258 	      pSocket->ParseCmd == 'a' ||
4943                     ; 1259 	      pSocket->ParseCmd == 'b' ||
4943                     ; 1260 	      pSocket->ParseCmd == 'c' ||
4943                     ; 1261 	      pSocket->ParseCmd == 'd' ||
4943                     ; 1262 	      pSocket->ParseCmd == 'g') { }
4945  d031 1e0e          	ldw	x,(OFST+7,sp)
4946  d033 e607          	ld	a,(7,x)
4947  d035 a16f          	cp	a,#111
4948  d037 2603ccd25a    	jreq	L3351
4950  d03c a161          	cp	a,#97
4951  d03e 27f9          	jreq	L3351
4953  d040 a162          	cp	a,#98
4954  d042 27f5          	jreq	L3351
4956  d044 a163          	cp	a,#99
4957  d046 27f1          	jreq	L3351
4959  d048 a164          	cp	a,#100
4960  d04a 27ed          	jreq	L3351
4962  d04c a167          	cp	a,#103
4963  d04e 27e9          	jreq	L3351
4964                     ; 1263 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
4965  d050 ccd23f        	jp	LC014
4966  d053               L7051:
4967                     ; 1265         else if (pSocket->ParseState == PARSE_NUM10) {
4969  d053 a101          	cp	a,#1
4970  d055 2619          	jrne	L5351
4971                     ; 1266           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
4973  d057 1e08          	ldw	x,(OFST+1,sp)
4974  d059 f6            	ld	a,(x)
4975  d05a 97            	ld	xl,a
4976  d05b a60a          	ld	a,#10
4977  d05d 42            	mul	x,a
4978  d05e 9f            	ld	a,xl
4979  d05f 1e0e          	ldw	x,(OFST+7,sp)
4980  d061 a0e0          	sub	a,#224
4981  d063 e708          	ld	(8,x),a
4982                     ; 1267           pSocket->ParseState = PARSE_NUM1;
4984  d065 a602          	ld	a,#2
4985  d067 e709          	ld	(9,x),a
4986                     ; 1268 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
4988  d069 e606          	ld	a,(6,x)
4989  d06b 2719          	jreq	L7451
4992  d06d ccd24f        	jp	LC021
4993                     ; 1269 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
4994                     ; 1270           pBuffer++;
4996  d070               L5351:
4997                     ; 1272         else if (pSocket->ParseState == PARSE_NUM1) {
4999  d070 a102          	cp	a,#2
5000  d072 2616          	jrne	L5451
5001                     ; 1273           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5003  d074 1608          	ldw	y,(OFST+1,sp)
5004  d076 90f6          	ld	a,(y)
5005  d078 a030          	sub	a,#48
5006  d07a eb08          	add	a,(8,x)
5007  d07c e708          	ld	(8,x),a
5008                     ; 1274           pSocket->ParseState = PARSE_EQUAL;
5010  d07e a603          	ld	a,#3
5011  d080 e709          	ld	(9,x),a
5012                     ; 1275 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5014  d082 e606          	ld	a,(6,x)
5017  d084 26e7          	jrne	LC021
5018  d086               L7451:
5019                     ; 1276 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5022  d086 a605          	ld	a,#5
5023                     ; 1277           pBuffer++;
5025  d088 200d          	jp	LC022
5026  d08a               L5451:
5027                     ; 1279         else if (pSocket->ParseState == PARSE_EQUAL) {
5029  d08a a103          	cp	a,#3
5030  d08c 260e          	jrne	L5551
5031                     ; 1280           pSocket->ParseState = PARSE_VAL;
5033  d08e a604          	ld	a,#4
5034  d090 e709          	ld	(9,x),a
5035                     ; 1281 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5037  d092 6d06          	tnz	(6,x)
5040  d094 26d7          	jrne	LC021
5041                     ; 1282 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
5043  d096 4c            	inc	a
5044  d097               LC022:
5045  d097 e709          	ld	(9,x),a
5046                     ; 1283           pBuffer++;
5048  d099 ccd251        	jp	LC013
5049  d09c               L5551:
5050                     ; 1285         else if (pSocket->ParseState == PARSE_VAL) {
5052  d09c a104          	cp	a,#4
5053  d09e 2703ccd245    	jrne	L5651
5054                     ; 1293           if (pSocket->ParseCmd == 'o') {
5056  d0a3 e607          	ld	a,(7,x)
5057  d0a5 a16f          	cp	a,#111
5058  d0a7 2625          	jrne	L7651
5059                     ; 1296             if ((uint8_t)(*pBuffer) == '1') GpioSetPin(pSocket->ParseNum, (uint8_t)1);
5061  d0a9 1e08          	ldw	x,(OFST+1,sp)
5062  d0ab f6            	ld	a,(x)
5063  d0ac a131          	cp	a,#49
5064  d0ae 2609          	jrne	L1751
5067  d0b0 1e0e          	ldw	x,(OFST+7,sp)
5068  d0b2 e608          	ld	a,(8,x)
5069  d0b4 ae0001        	ldw	x,#1
5072  d0b7 2005          	jra	L3751
5073  d0b9               L1751:
5074                     ; 1297             else GpioSetPin(pSocket->ParseNum, (uint8_t)0);
5076  d0b9 1e0e          	ldw	x,(OFST+7,sp)
5077  d0bb e608          	ld	a,(8,x)
5078  d0bd 5f            	clrw	x
5080  d0be               L3751:
5081  d0be 95            	ld	xh,a
5082  d0bf cdd6de        	call	_GpioSetPin
5083                     ; 1298 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
5085  d0c2 1e0e          	ldw	x,(OFST+7,sp)
5086  d0c4 e606          	ld	a,(6,x)
5087  d0c6 2603ccd238    	jreq	L5461
5089                     ; 1299             pBuffer++;
5091  d0cb ccd236        	jp	LC020
5092  d0ce               L7651:
5093                     ; 1302           else if (pSocket->ParseCmd == 'a') {
5095  d0ce a161          	cp	a,#97
5096  d0d0 2656          	jrne	L1061
5097                     ; 1312             ex_stored_devicename[0] = (uint8_t)(*pBuffer);
5099  d0d2 1e08          	ldw	x,(OFST+1,sp)
5100  d0d4 f6            	ld	a,(x)
5101  d0d5 c70038        	ld	_ex_stored_devicename,a
5102                     ; 1313             pSocket->nParseLeft--;
5104  d0d8 1e0e          	ldw	x,(OFST+7,sp)
5105  d0da 6a06          	dec	(6,x)
5106                     ; 1314             pBuffer++; // nBytes already decremented for first char
5108  d0dc 1e08          	ldw	x,(OFST+1,sp)
5109  d0de 5c            	incw	x
5110  d0df 1f08          	ldw	(OFST+1,sp),x
5111                     ; 1318 	    amp_found = 0;
5113  d0e1 0f06          	clr	(OFST-1,sp)
5115                     ; 1319 	    for(i=1; i<20; i++) {
5117  d0e3 a601          	ld	a,#1
5118  d0e5 6b07          	ld	(OFST+0,sp),a
5120  d0e7               L3061:
5121                     ; 1320 	      if((uint8_t)(*pBuffer) == 38) amp_found = 1;
5123  d0e7 1e08          	ldw	x,(OFST+1,sp)
5124  d0e9 f6            	ld	a,(x)
5125  d0ea a126          	cp	a,#38
5126  d0ec 2604          	jrne	L1161
5129  d0ee a601          	ld	a,#1
5130  d0f0 6b06          	ld	(OFST-1,sp),a
5132  d0f2               L1161:
5133                     ; 1321 	      if(amp_found == 0) {
5135  d0f2 7b06          	ld	a,(OFST-1,sp)
5136  d0f4 261a          	jrne	L3161
5137                     ; 1323                 ex_stored_devicename[i] = (uint8_t)(*pBuffer);
5139  d0f6 7b07          	ld	a,(OFST+0,sp)
5140  d0f8 5f            	clrw	x
5141  d0f9 1608          	ldw	y,(OFST+1,sp)
5142  d0fb 97            	ld	xl,a
5143  d0fc 90f6          	ld	a,(y)
5144  d0fe d70038        	ld	(_ex_stored_devicename,x),a
5145                     ; 1324                 pSocket->nParseLeft--;
5147  d101 1e0e          	ldw	x,(OFST+7,sp)
5148  d103 6a06          	dec	(6,x)
5149                     ; 1325                 pBuffer++;
5151  d105 93            	ldw	x,y
5152  d106 5c            	incw	x
5153  d107 1f08          	ldw	(OFST+1,sp),x
5154                     ; 1326                 nBytes--; // Must subtract 1 from nBytes for extra byte read
5156  d109 1e0c          	ldw	x,(OFST+5,sp)
5157  d10b 5a            	decw	x
5158  d10c 1f0c          	ldw	(OFST+5,sp),x
5160  d10e 200d          	jra	L5161
5161  d110               L3161:
5162                     ; 1330 	        ex_stored_devicename[i] = ' ';
5164  d110 7b07          	ld	a,(OFST+0,sp)
5165  d112 5f            	clrw	x
5166  d113 97            	ld	xl,a
5167  d114 a620          	ld	a,#32
5168  d116 d70038        	ld	(_ex_stored_devicename,x),a
5169                     ; 1339                 pSocket->nParseLeft--;
5171  d119 1e0e          	ldw	x,(OFST+7,sp)
5172  d11b 6a06          	dec	(6,x)
5173  d11d               L5161:
5174                     ; 1319 	    for(i=1; i<20; i++) {
5176  d11d 0c07          	inc	(OFST+0,sp)
5180  d11f 7b07          	ld	a,(OFST+0,sp)
5181  d121 a114          	cp	a,#20
5182  d123 25c2          	jrult	L3061
5184  d125 ccd23d        	jra	L7751
5185  d128               L1061:
5186                     ; 1344           else if (pSocket->ParseCmd == 'b') {
5188  d128 a162          	cp	a,#98
5189  d12a 2646          	jrne	L1261
5190                     ; 1351 	    alpha_1 = '-';
5192                     ; 1352 	    alpha_2 = '-';
5194                     ; 1353 	    alpha_3 = '-';
5196                     ; 1355             alpha_1 = (uint8_t)(*pBuffer);
5198  d12c 1e08          	ldw	x,(OFST+1,sp)
5199  d12e f6            	ld	a,(x)
5200  d12f 6b07          	ld	(OFST+0,sp),a
5202                     ; 1356             pSocket->nParseLeft--;
5204  d131 1e0e          	ldw	x,(OFST+7,sp)
5205  d133 6a06          	dec	(6,x)
5206                     ; 1357             pBuffer++; // nBytes already decremented for first char
5208  d135 1e08          	ldw	x,(OFST+1,sp)
5209  d137 5c            	incw	x
5210  d138 1f08          	ldw	(OFST+1,sp),x
5211                     ; 1359 	    alpha_2 = (uint8_t)(*pBuffer);
5213  d13a f6            	ld	a,(x)
5214  d13b 6b05          	ld	(OFST-2,sp),a
5216                     ; 1360             pSocket->nParseLeft--;
5218  d13d 1e0e          	ldw	x,(OFST+7,sp)
5219  d13f 6a06          	dec	(6,x)
5220                     ; 1361             pBuffer++;
5222  d141 1e08          	ldw	x,(OFST+1,sp)
5223  d143 5c            	incw	x
5224  d144 1f08          	ldw	(OFST+1,sp),x
5225                     ; 1362 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5227  d146 1e0c          	ldw	x,(OFST+5,sp)
5228  d148 5a            	decw	x
5229  d149 1f0c          	ldw	(OFST+5,sp),x
5230                     ; 1364 	    alpha_3 = (uint8_t)(*pBuffer);
5232  d14b 1e08          	ldw	x,(OFST+1,sp)
5233  d14d f6            	ld	a,(x)
5234  d14e 6b06          	ld	(OFST-1,sp),a
5236                     ; 1365             pSocket->nParseLeft--;
5238  d150 1e0e          	ldw	x,(OFST+7,sp)
5239  d152 6a06          	dec	(6,x)
5240                     ; 1366             pBuffer++;
5242  d154 1e08          	ldw	x,(OFST+1,sp)
5243  d156 5c            	incw	x
5244  d157 1f08          	ldw	(OFST+1,sp),x
5245                     ; 1367 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5247  d159 1e0c          	ldw	x,(OFST+5,sp)
5248  d15b 5a            	decw	x
5249  d15c 1f0c          	ldw	(OFST+5,sp),x
5250                     ; 1369 	    SetAddresses(pSocket->ParseNum, (uint8_t)alpha_1, (uint8_t)alpha_2, (uint8_t)alpha_3);
5252  d15e 88            	push	a
5253  d15f 7b06          	ld	a,(OFST-1,sp)
5254  d161 88            	push	a
5255  d162 7b09          	ld	a,(OFST+2,sp)
5256  d164 1610          	ldw	y,(OFST+9,sp)
5257  d166 97            	ld	xl,a
5258  d167 90e608        	ld	a,(8,y)
5259  d16a 95            	ld	xh,a
5260  d16b cdd80a        	call	_SetAddresses
5262  d16e 85            	popw	x
5264  d16f ccd23d        	jra	L7751
5265  d172               L1261:
5266                     ; 1372           else if (pSocket->ParseCmd == 'c') {
5268  d172 a163          	cp	a,#99
5269  d174 2672          	jrne	L5261
5270                     ; 1378 	    alpha_1 = '-';
5272                     ; 1379 	    alpha_2 = '-';
5274                     ; 1380 	    alpha_3 = '-';
5276                     ; 1381 	    alpha_4 = '-';
5278                     ; 1382 	    alpha_5 = '-';
5280                     ; 1385   	    alpha_1 = (uint8_t)(*pBuffer);
5282  d176 1e08          	ldw	x,(OFST+1,sp)
5283  d178 f6            	ld	a,(x)
5284  d179 6b07          	ld	(OFST+0,sp),a
5286                     ; 1386             pSocket->nParseLeft--;
5288  d17b 1e0e          	ldw	x,(OFST+7,sp)
5289  d17d 6a06          	dec	(6,x)
5290                     ; 1387             pBuffer++; // nBytes already decremented for first char
5292  d17f 1e08          	ldw	x,(OFST+1,sp)
5293  d181 5c            	incw	x
5294  d182 1f08          	ldw	(OFST+1,sp),x
5295                     ; 1389 	    alpha_2 = (uint8_t)(*pBuffer);
5297  d184 f6            	ld	a,(x)
5298  d185 6b05          	ld	(OFST-2,sp),a
5300                     ; 1390             pSocket->nParseLeft--;
5302  d187 1e0e          	ldw	x,(OFST+7,sp)
5303  d189 6a06          	dec	(6,x)
5304                     ; 1391             pBuffer++;
5306  d18b 1e08          	ldw	x,(OFST+1,sp)
5307  d18d 5c            	incw	x
5308  d18e 1f08          	ldw	(OFST+1,sp),x
5309                     ; 1392 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5311  d190 1e0c          	ldw	x,(OFST+5,sp)
5312  d192 5a            	decw	x
5313  d193 1f0c          	ldw	(OFST+5,sp),x
5314                     ; 1394 	    alpha_3 = (uint8_t)(*pBuffer);
5316  d195 1e08          	ldw	x,(OFST+1,sp)
5317  d197 f6            	ld	a,(x)
5318  d198 6b06          	ld	(OFST-1,sp),a
5320                     ; 1395             pSocket->nParseLeft--;
5322  d19a 1e0e          	ldw	x,(OFST+7,sp)
5323  d19c 6a06          	dec	(6,x)
5324                     ; 1396             pBuffer++;
5326  d19e 1e08          	ldw	x,(OFST+1,sp)
5327  d1a0 5c            	incw	x
5328  d1a1 1f08          	ldw	(OFST+1,sp),x
5329                     ; 1397 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5331  d1a3 1e0c          	ldw	x,(OFST+5,sp)
5332  d1a5 5a            	decw	x
5333  d1a6 1f0c          	ldw	(OFST+5,sp),x
5334                     ; 1399 	    alpha_4 = (uint8_t)(*pBuffer);
5336  d1a8 1e08          	ldw	x,(OFST+1,sp)
5337  d1aa f6            	ld	a,(x)
5338  d1ab 6b03          	ld	(OFST-4,sp),a
5340                     ; 1400             pSocket->nParseLeft--;
5342  d1ad 1e0e          	ldw	x,(OFST+7,sp)
5343  d1af 6a06          	dec	(6,x)
5344                     ; 1401             pBuffer++;
5346  d1b1 1e08          	ldw	x,(OFST+1,sp)
5347  d1b3 5c            	incw	x
5348  d1b4 1f08          	ldw	(OFST+1,sp),x
5349                     ; 1402 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5351  d1b6 1e0c          	ldw	x,(OFST+5,sp)
5352  d1b8 5a            	decw	x
5353  d1b9 1f0c          	ldw	(OFST+5,sp),x
5354                     ; 1404             alpha_5 = (uint8_t)(*pBuffer);
5356  d1bb 1e08          	ldw	x,(OFST+1,sp)
5357  d1bd f6            	ld	a,(x)
5358  d1be 6b04          	ld	(OFST-3,sp),a
5360                     ; 1405             pSocket->nParseLeft--;
5362  d1c0 1e0e          	ldw	x,(OFST+7,sp)
5363  d1c2 6a06          	dec	(6,x)
5364                     ; 1406             pBuffer++;
5366  d1c4 1e08          	ldw	x,(OFST+1,sp)
5367  d1c6 5c            	incw	x
5368  d1c7 1f08          	ldw	(OFST+1,sp),x
5369                     ; 1407 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5371  d1c9 1e0c          	ldw	x,(OFST+5,sp)
5372  d1cb 5a            	decw	x
5373  d1cc 1f0c          	ldw	(OFST+5,sp),x
5374                     ; 1409 	    SetPort(pSocket->ParseNum,
5374                     ; 1410 	            (uint8_t)alpha_1,
5374                     ; 1411 		    (uint8_t)alpha_2,
5374                     ; 1412 		    (uint8_t)alpha_3,
5374                     ; 1413 		    (uint8_t)alpha_4,
5374                     ; 1414 		    (uint8_t)alpha_5);
5376  d1ce 88            	push	a
5377  d1cf 7b04          	ld	a,(OFST-3,sp)
5378  d1d1 88            	push	a
5379  d1d2 7b08          	ld	a,(OFST+1,sp)
5380  d1d4 88            	push	a
5381  d1d5 7b08          	ld	a,(OFST+1,sp)
5382  d1d7 88            	push	a
5383  d1d8 7b0b          	ld	a,(OFST+4,sp)
5384  d1da 1612          	ldw	y,(OFST+11,sp)
5385  d1dc 97            	ld	xl,a
5386  d1dd 90e608        	ld	a,(8,y)
5387  d1e0 95            	ld	xh,a
5388  d1e1 cdd894        	call	_SetPort
5390  d1e4 5b04          	addw	sp,#4
5392  d1e6 2055          	jra	L7751
5393  d1e8               L5261:
5394                     ; 1417           else if (pSocket->ParseCmd == 'd') {
5396  d1e8 a164          	cp	a,#100
5397  d1ea 262f          	jrne	L1361
5398                     ; 1423 	    alpha_1 = (uint8_t)(*pBuffer);
5400  d1ec 1e08          	ldw	x,(OFST+1,sp)
5401  d1ee f6            	ld	a,(x)
5402  d1ef 6b07          	ld	(OFST+0,sp),a
5404                     ; 1424             pSocket->nParseLeft--;
5406  d1f1 1e0e          	ldw	x,(OFST+7,sp)
5407  d1f3 6a06          	dec	(6,x)
5408                     ; 1425             pBuffer++; // nBytes already decremented for first char
5410  d1f5 1e08          	ldw	x,(OFST+1,sp)
5411  d1f7 5c            	incw	x
5412  d1f8 1f08          	ldw	(OFST+1,sp),x
5413                     ; 1427 	    alpha_2 = (uint8_t)(*pBuffer);
5415  d1fa f6            	ld	a,(x)
5416  d1fb 6b05          	ld	(OFST-2,sp),a
5418                     ; 1428             pSocket->nParseLeft--;
5420  d1fd 1e0e          	ldw	x,(OFST+7,sp)
5421  d1ff 6a06          	dec	(6,x)
5422                     ; 1429             pBuffer++;
5424  d201 1e08          	ldw	x,(OFST+1,sp)
5425  d203 5c            	incw	x
5426  d204 1f08          	ldw	(OFST+1,sp),x
5427                     ; 1430 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5429  d206 1e0c          	ldw	x,(OFST+5,sp)
5430  d208 5a            	decw	x
5431  d209 1f0c          	ldw	(OFST+5,sp),x
5432                     ; 1432 	    SetMAC(pSocket->ParseNum, alpha_1, alpha_2);
5434  d20b 88            	push	a
5435  d20c 7b08          	ld	a,(OFST+1,sp)
5436  d20e 160f          	ldw	y,(OFST+8,sp)
5437  d210 97            	ld	xl,a
5438  d211 90e608        	ld	a,(8,y)
5439  d214 95            	ld	xh,a
5440  d215 cdd8cf        	call	_SetMAC
5442  d218 84            	pop	a
5444  d219 2022          	jra	L7751
5445  d21b               L1361:
5446                     ; 1435 	  else if (pSocket->ParseCmd == 'g') {
5448  d21b a167          	cp	a,#103
5449  d21d 261e          	jrne	L7751
5450                     ; 1438             if ((uint8_t)(*pBuffer) == '1') invert_output = 1;
5452  d21f 1e08          	ldw	x,(OFST+1,sp)
5453  d221 f6            	ld	a,(x)
5454  d222 a131          	cp	a,#49
5455  d224 2606          	jrne	L7361
5458  d226 3501005e      	mov	_invert_output,#1
5460  d22a 2004          	jra	L1461
5461  d22c               L7361:
5462                     ; 1439             else invert_output = 0;
5464  d22c 725f005e      	clr	_invert_output
5465  d230               L1461:
5466                     ; 1440 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--;
5468  d230 1e0e          	ldw	x,(OFST+7,sp)
5469  d232 e606          	ld	a,(6,x)
5470  d234 2702          	jreq	L5461
5473  d236               LC020:
5475  d236 6a06          	dec	(6,x)
5477  d238               L5461:
5478                     ; 1442             pBuffer++;
5481  d238 1e08          	ldw	x,(OFST+1,sp)
5482  d23a 5c            	incw	x
5483  d23b 1f08          	ldw	(OFST+1,sp),x
5484  d23d               L7751:
5485                     ; 1445           pSocket->ParseState = PARSE_DELIM;
5487  d23d 1e0e          	ldw	x,(OFST+7,sp)
5488  d23f               LC014:
5490  d23f a605          	ld	a,#5
5491  d241 e709          	ld	(9,x),a
5493  d243 2015          	jra	L3351
5494  d245               L5651:
5495                     ; 1448         else if (pSocket->ParseState == PARSE_DELIM) {
5497  d245 a105          	cp	a,#5
5498  d247 2611          	jrne	L3351
5499                     ; 1449           if(pSocket->nParseLeft > 0) {
5501  d249 e606          	ld	a,(6,x)
5502  d24b 270b          	jreq	L3561
5503                     ; 1450             pSocket->ParseState = PARSE_CMD;
5505  d24d 6f09          	clr	(9,x)
5506                     ; 1451             pSocket->nParseLeft--;
5508  d24f               LC021:
5512  d24f 6a06          	dec	(6,x)
5513                     ; 1452             pBuffer++;
5515  d251               LC013:
5519  d251 1e08          	ldw	x,(OFST+1,sp)
5520  d253 5c            	incw	x
5521  d254 1f08          	ldw	(OFST+1,sp),x
5523  d256 2002          	jra	L3351
5524  d258               L3561:
5525                     ; 1455             pSocket->nParseLeft = 0; // Something out of sync - end the parsing
5527  d258 e706          	ld	(6,x),a
5528  d25a               L3351:
5529                     ; 1459         if (pSocket->nParseLeft == 0) {
5531  d25a 1e0e          	ldw	x,(OFST+7,sp)
5532  d25c e606          	ld	a,(6,x)
5533  d25e 2608          	jrne	L3051
5534                     ; 1461           pSocket->nState = STATE_SENDHEADER;
5536  d260 a60b          	ld	a,#11
5537  d262 f7            	ld	(x),a
5538                     ; 1462           break;
5539  d263               L5051:
5540                     ; 1466       pSocket->nState = STATE_SENDHEADER;
5542  d263 1e0e          	ldw	x,(OFST+7,sp)
5543  d265 f7            	ld	(x),a
5544  d266 200f          	jra	L7741
5545  d268               L3051:
5546                     ; 1249       while (nBytes--) {
5548  d268 1e0c          	ldw	x,(OFST+5,sp)
5549  d26a 5a            	decw	x
5550  d26b 1f0c          	ldw	(OFST+5,sp),x
5551  d26d 5c            	incw	x
5552  d26e 2703ccd00f    	jrne	L1051
5553  d273 a60b          	ld	a,#11
5554  d275 20ec          	jra	L5051
5555  d277               L7741:
5556                     ; 1469     if (pSocket->nState == STATE_PARSEGET) {
5558  d277 a10d          	cp	a,#13
5559  d279 2703ccd52a    	jrne	L1661
5561  d27e ccd51f        	jra	L5661
5562  d281               L3661:
5563                     ; 1483         if (pSocket->ParseState == PARSE_SLASH1) {
5565  d281 1e0e          	ldw	x,(OFST+7,sp)
5566  d283 e609          	ld	a,(9,x)
5567  d285 a106          	cp	a,#6
5568  d287 263e          	jrne	L1761
5569                     ; 1486           pSocket->ParseCmd = *pBuffer;
5571  d289 1e08          	ldw	x,(OFST+1,sp)
5572  d28b f6            	ld	a,(x)
5573  d28c 1e0e          	ldw	x,(OFST+7,sp)
5574  d28e e707          	ld	(7,x),a
5575                     ; 1487           pSocket->nParseLeft--;
5577  d290 6a06          	dec	(6,x)
5578                     ; 1488           pBuffer++;
5580  d292 1e08          	ldw	x,(OFST+1,sp)
5581  d294 5c            	incw	x
5582  d295 1f08          	ldw	(OFST+1,sp),x
5583                     ; 1489 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
5585  d297 1e0e          	ldw	x,(OFST+7,sp)
5586  d299 e607          	ld	a,(7,x)
5587  d29b a12f          	cp	a,#47
5588  d29d 2604          	jrne	L3761
5589                     ; 1490 	    pSocket->ParseState = PARSE_NUM10;
5591  d29f a601          	ld	a,#1
5592  d2a1 e709          	ld	(9,x),a
5593  d2a3               L3761:
5594                     ; 1492 	  if (pSocket->nParseLeft == 0) {
5596  d2a3 e606          	ld	a,(6,x)
5597  d2a5 2703ccd4fd    	jrne	L7761
5598                     ; 1494 	    current_webpage = WEBPAGE_DEFAULT;
5600  d2aa c7001b        	ld	_current_webpage,a
5601                     ; 1495             pSocket->pData = g_HtmlPageDefault;
5603  d2ad 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5604  d2b1 ef01          	ldw	(1,x),y
5605                     ; 1496             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5607  d2b3 90ae15d5      	ldw	y,#5589
5608  d2b7 ef03          	ldw	(3,x),y
5609                     ; 1497             pSocket->nNewlines = 0;
5611  d2b9 e705          	ld	(5,x),a
5612                     ; 1498             pSocket->nState = STATE_SENDHEADER;
5614  d2bb a60b          	ld	a,#11
5615  d2bd f7            	ld	(x),a
5616                     ; 1499             pSocket->nPrevBytes = 0xFFFF;
5618  d2be 90aeffff      	ldw	y,#65535
5619  d2c2 ef0a          	ldw	(10,x),y
5620                     ; 1500             break;
5622  d2c4 ccd52a        	jra	L1661
5623  d2c7               L1761:
5624                     ; 1503         else if (pSocket->ParseState == PARSE_NUM10) {
5626  d2c7 a101          	cp	a,#1
5627  d2c9 264e          	jrne	L1071
5628                     ; 1508 	  if(*pBuffer == ' ') {
5630  d2cb 1e08          	ldw	x,(OFST+1,sp)
5631  d2cd f6            	ld	a,(x)
5632  d2ce a120          	cp	a,#32
5633  d2d0 2620          	jrne	L3071
5634                     ; 1509 	    current_webpage = WEBPAGE_DEFAULT;
5636  d2d2 725f001b      	clr	_current_webpage
5637                     ; 1510             pSocket->pData = g_HtmlPageDefault;
5639  d2d6 1e0e          	ldw	x,(OFST+7,sp)
5640  d2d8 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5641  d2dc ef01          	ldw	(1,x),y
5642                     ; 1511             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5644  d2de 90ae15d5      	ldw	y,#5589
5645  d2e2 ef03          	ldw	(3,x),y
5646                     ; 1512             pSocket->nNewlines = 0;
5648  d2e4 6f05          	clr	(5,x)
5649                     ; 1513             pSocket->nState = STATE_SENDHEADER;
5651  d2e6 a60b          	ld	a,#11
5652  d2e8 f7            	ld	(x),a
5653                     ; 1514             pSocket->nPrevBytes = 0xFFFF;
5655  d2e9 90aeffff      	ldw	y,#65535
5656  d2ed ef0a          	ldw	(10,x),y
5657                     ; 1515 	    break;
5659  d2ef ccd52a        	jra	L1661
5660  d2f2               L3071:
5661                     ; 1518 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5663  d2f2 a130          	cp	a,#48
5664  d2f4 2504          	jrult	L5071
5666  d2f6 a13a          	cp	a,#58
5667  d2f8 2506          	jrult	L7071
5669  d2fa               L5071:
5670                     ; 1519 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5672  d2fa 1e0e          	ldw	x,(OFST+7,sp)
5673  d2fc a605          	ld	a,#5
5674  d2fe e709          	ld	(9,x),a
5675  d300               L7071:
5676                     ; 1520           if (pSocket->ParseState == PARSE_NUM10) {      // Still good - parse number
5678  d300 1e0e          	ldw	x,(OFST+7,sp)
5679  d302 e609          	ld	a,(9,x)
5680  d304 4a            	dec	a
5681  d305 26a0          	jrne	L7761
5682                     ; 1521             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5684  d307 1e08          	ldw	x,(OFST+1,sp)
5685  d309 f6            	ld	a,(x)
5686  d30a 97            	ld	xl,a
5687  d30b a60a          	ld	a,#10
5688  d30d 42            	mul	x,a
5689  d30e 9f            	ld	a,xl
5690  d30f 1e0e          	ldw	x,(OFST+7,sp)
5691  d311 a0e0          	sub	a,#224
5692  d313 e708          	ld	(8,x),a
5693                     ; 1522 	    pSocket->ParseState = PARSE_NUM1;
5695  d315 a602          	ld	a,#2
5696                     ; 1523             pSocket->nParseLeft--;
5697                     ; 1524             pBuffer++;
5698  d317 202c          	jp	LC018
5699  d319               L1071:
5700                     ; 1528         else if (pSocket->ParseState == PARSE_NUM1) {
5702  d319 a102          	cp	a,#2
5703  d31b 2634          	jrne	L5171
5704                     ; 1529 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5706  d31d 1e08          	ldw	x,(OFST+1,sp)
5707  d31f f6            	ld	a,(x)
5708  d320 a130          	cp	a,#48
5709  d322 2504          	jrult	L7171
5711  d324 a13a          	cp	a,#58
5712  d326 2506          	jrult	L1271
5714  d328               L7171:
5715                     ; 1530 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5717  d328 1e0e          	ldw	x,(OFST+7,sp)
5718  d32a a605          	ld	a,#5
5719  d32c e709          	ld	(9,x),a
5720  d32e               L1271:
5721                     ; 1531           if (pSocket->ParseState == PARSE_NUM1) {       // Still good - parse number
5723  d32e 1e0e          	ldw	x,(OFST+7,sp)
5724  d330 e609          	ld	a,(9,x)
5725  d332 a102          	cp	a,#2
5726  d334 2703ccd4fd    	jrne	L7761
5727                     ; 1532             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5729  d339 1608          	ldw	y,(OFST+1,sp)
5730  d33b 90f6          	ld	a,(y)
5731  d33d a030          	sub	a,#48
5732  d33f eb08          	add	a,(8,x)
5733  d341 e708          	ld	(8,x),a
5734                     ; 1533             pSocket->ParseState = PARSE_VAL;
5736  d343 a604          	ld	a,#4
5737                     ; 1534             pSocket->nParseLeft--;
5739                     ; 1535             pBuffer++;
5741  d345               LC018:
5742  d345 e709          	ld	(9,x),a
5744  d347 6a06          	dec	(6,x)
5746  d349 1e08          	ldw	x,(OFST+1,sp)
5747  d34b 5c            	incw	x
5748  d34c 1f08          	ldw	(OFST+1,sp),x
5749  d34e ccd4fd        	jra	L7761
5750  d351               L5171:
5751                     ; 1538         else if (pSocket->ParseState == PARSE_VAL) {
5753  d351 a104          	cp	a,#4
5754  d353 2703ccd505    	jrne	L7271
5755                     ; 1589           switch(pSocket->ParseNum)
5757  d358 e608          	ld	a,(8,x)
5759                     ; 1713 	      break;
5760  d35a a143          	cp	a,#67
5761  d35c 2407          	jruge	L272
5762  d35e 5f            	clrw	x
5763  d35f 97            	ld	xl,a
5764  d360 58            	sllw	x
5765  d361 debe1d        	ldw	x,(L472,x)
5766  d364 fc            	jp	(x)
5767  d365               L272:
5768  d365 a05b          	sub	a,#91
5769  d367 2603ccd4c1    	jreq	L7121
5770  d36c a008          	sub	a,#8
5771  d36e 2603ccd4c7    	jreq	L1221
5772  d373 ccd4dc        	jra	L3221
5773  d376               L7701:
5774                     ; 1591 	    case 0:  Relays_8to1 &= (uint8_t)(~0x01);  break; // Relay-01 OFF
5776  d376 7211005f      	bres	_Relays_8to1,#0
5779  d37a ccd4f7        	jra	L3371
5780  d37d               L1011:
5781                     ; 1592 	    case 1:  Relays_8to1 |= (uint8_t)0x01;     break; // Relay-01 ON
5783  d37d 7210005f      	bset	_Relays_8to1,#0
5786  d381 ccd4f7        	jra	L3371
5787  d384               L3011:
5788                     ; 1593 	    case 2:  Relays_8to1 &= (uint8_t)(~0x02);  break; // Relay-02 OFF
5790  d384 7213005f      	bres	_Relays_8to1,#1
5793  d388 ccd4f7        	jra	L3371
5794  d38b               L5011:
5795                     ; 1594 	    case 3:  Relays_8to1 |= (uint8_t)0x02;     break; // Relay-02 ON
5797  d38b 7212005f      	bset	_Relays_8to1,#1
5800  d38f ccd4f7        	jra	L3371
5801  d392               L7011:
5802                     ; 1595 	    case 4:  Relays_8to1 &= (uint8_t)(~0x04);  break; // Relay-03 OFF
5804  d392 7215005f      	bres	_Relays_8to1,#2
5807  d396 ccd4f7        	jra	L3371
5808  d399               L1111:
5809                     ; 1596 	    case 5:  Relays_8to1 |= (uint8_t)0x04;     break; // Relay-03 ON
5811  d399 7214005f      	bset	_Relays_8to1,#2
5814  d39d ccd4f7        	jra	L3371
5815  d3a0               L3111:
5816                     ; 1597 	    case 6:  Relays_8to1 &= (uint8_t)(~0x08);  break; // Relay-04 OFF
5818  d3a0 7217005f      	bres	_Relays_8to1,#3
5821  d3a4 ccd4f7        	jra	L3371
5822  d3a7               L5111:
5823                     ; 1598 	    case 7:  Relays_8to1 |= (uint8_t)0x08;     break; // Relay-04 ON
5825  d3a7 7216005f      	bset	_Relays_8to1,#3
5828  d3ab ccd4f7        	jra	L3371
5829  d3ae               L7111:
5830                     ; 1599 	    case 8:  Relays_8to1 &= (uint8_t)(~0x10);  break; // Relay-05 OFF
5832  d3ae 7219005f      	bres	_Relays_8to1,#4
5835  d3b2 ccd4f7        	jra	L3371
5836  d3b5               L1211:
5837                     ; 1600 	    case 9:  Relays_8to1 |= (uint8_t)0x10;     break; // Relay-05 ON
5839  d3b5 7218005f      	bset	_Relays_8to1,#4
5842  d3b9 ccd4f7        	jra	L3371
5843  d3bc               L3211:
5844                     ; 1601 	    case 10: Relays_8to1 &= (uint8_t)(~0x20);  break; // Relay-06 OFF
5846  d3bc 721b005f      	bres	_Relays_8to1,#5
5849  d3c0 ccd4f7        	jra	L3371
5850  d3c3               L5211:
5851                     ; 1602 	    case 11: Relays_8to1 |= (uint8_t)0x20;     break; // Relay-06 ON
5853  d3c3 721a005f      	bset	_Relays_8to1,#5
5856  d3c7 ccd4f7        	jra	L3371
5857  d3ca               L7211:
5858                     ; 1603 	    case 12: Relays_8to1 &= (uint8_t)(~0x40);  break; // Relay-07 OFF
5860  d3ca 721d005f      	bres	_Relays_8to1,#6
5863  d3ce ccd4f7        	jra	L3371
5864  d3d1               L1311:
5865                     ; 1604 	    case 13: Relays_8to1 |= (uint8_t)0x40;     break; // Relay-07 ON
5867  d3d1 721c005f      	bset	_Relays_8to1,#6
5870  d3d5 ccd4f7        	jra	L3371
5871  d3d8               L3311:
5872                     ; 1605 	    case 14: Relays_8to1 &= (uint8_t)(~0x80);  break; // Relay-08 OFF
5874  d3d8 721f005f      	bres	_Relays_8to1,#7
5877  d3dc ccd4f7        	jra	L3371
5878  d3df               L5311:
5879                     ; 1606 	    case 15: Relays_8to1 |= (uint8_t)0x80;     break; // Relay-08 ON
5881  d3df 721e005f      	bset	_Relays_8to1,#7
5884  d3e3 ccd4f7        	jra	L3371
5885  d3e6               L7311:
5886                     ; 1607 	    case 16: Relays_16to9 &= (uint8_t)(~0x01); break; // Relay-09 OFF
5888  d3e6 72110060      	bres	_Relays_16to9,#0
5891  d3ea ccd4f7        	jra	L3371
5892  d3ed               L1411:
5893                     ; 1608 	    case 17: Relays_16to9 |= (uint8_t)0x01;    break; // Relay-09 ON
5895  d3ed 72100060      	bset	_Relays_16to9,#0
5898  d3f1 ccd4f7        	jra	L3371
5899  d3f4               L3411:
5900                     ; 1609 	    case 18: Relays_16to9 &= (uint8_t)(~0x02); break; // Relay-10 OFF
5902  d3f4 72130060      	bres	_Relays_16to9,#1
5905  d3f8 ccd4f7        	jra	L3371
5906  d3fb               L5411:
5907                     ; 1610 	    case 19: Relays_16to9 |= (uint8_t)0x02;    break; // Relay-10 ON
5909  d3fb 72120060      	bset	_Relays_16to9,#1
5912  d3ff ccd4f7        	jra	L3371
5913  d402               L7411:
5914                     ; 1611 	    case 20: Relays_16to9 &= (uint8_t)(~0x04); break; // Relay-11 OFF
5916  d402 72150060      	bres	_Relays_16to9,#2
5919  d406 ccd4f7        	jra	L3371
5920  d409               L1511:
5921                     ; 1612 	    case 21: Relays_16to9 |= (uint8_t)0x04;    break; // Relay-11 ON
5923  d409 72140060      	bset	_Relays_16to9,#2
5926  d40d ccd4f7        	jra	L3371
5927  d410               L3511:
5928                     ; 1613 	    case 22: Relays_16to9 &= (uint8_t)(~0x08); break; // Relay-12 OFF
5930  d410 72170060      	bres	_Relays_16to9,#3
5933  d414 ccd4f7        	jra	L3371
5934  d417               L5511:
5935                     ; 1614 	    case 23: Relays_16to9 |= (uint8_t)0x08;    break; // Relay-12 ON
5937  d417 72160060      	bset	_Relays_16to9,#3
5940  d41b ccd4f7        	jra	L3371
5941  d41e               L7511:
5942                     ; 1615 	    case 24: Relays_16to9 &= (uint8_t)(~0x10); break; // Relay-13 OFF
5944  d41e 72190060      	bres	_Relays_16to9,#4
5947  d422 ccd4f7        	jra	L3371
5948  d425               L1611:
5949                     ; 1616 	    case 25: Relays_16to9 |= (uint8_t)0x10;    break; // Relay-13 ON
5951  d425 72180060      	bset	_Relays_16to9,#4
5954  d429 ccd4f7        	jra	L3371
5955  d42c               L3611:
5956                     ; 1617 	    case 26: Relays_16to9 &= (uint8_t)(~0x20); break; // Relay-14 OFF
5958  d42c 721b0060      	bres	_Relays_16to9,#5
5961  d430 ccd4f7        	jra	L3371
5962  d433               L5611:
5963                     ; 1618 	    case 27: Relays_16to9 |= (uint8_t)0x20;    break; // Relay-14 ON
5965  d433 721a0060      	bset	_Relays_16to9,#5
5968  d437 ccd4f7        	jra	L3371
5969  d43a               L7611:
5970                     ; 1619 	    case 28: Relays_16to9 &= (uint8_t)(~0x40); break; // Relay-15 OFF
5972  d43a 721d0060      	bres	_Relays_16to9,#6
5975  d43e ccd4f7        	jra	L3371
5976  d441               L1711:
5977                     ; 1620 	    case 29: Relays_16to9 |= (uint8_t)0x40;    break; // Relay-15 ON
5979  d441 721c0060      	bset	_Relays_16to9,#6
5982  d445 ccd4f7        	jra	L3371
5983  d448               L3711:
5984                     ; 1621 	    case 30: Relays_16to9 &= (uint8_t)(~0x80); break; // Relay-16 OFF
5986  d448 721f0060      	bres	_Relays_16to9,#7
5989  d44c ccd4f7        	jra	L3371
5990  d44f               L5711:
5991                     ; 1622 	    case 31: Relays_16to9 |= (uint8_t)0x80;    break; // Relay-16 ON
5993  d44f 721e0060      	bset	_Relays_16to9,#7
5996  d453 ccd4f7        	jra	L3371
5997  d456               L7711:
5998                     ; 1623 	    case 55:
5998                     ; 1624   	      Relays_8to1 = (uint8_t)0xff; // Relays 1-8 ON
6000  d456 35ff005f      	mov	_Relays_8to1,#255
6001                     ; 1625   	      Relays_16to9 = (uint8_t)0xff; // Relays 9-16 ON
6003  d45a 35ff0060      	mov	_Relays_16to9,#255
6004                     ; 1626 	      break;
6006  d45e ccd4f7        	jra	L3371
6007  d461               L1021:
6008                     ; 1627 	    case 56:
6008                     ; 1628               Relays_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
6010  d461 725f005f      	clr	_Relays_8to1
6011                     ; 1629               Relays_16to9 = (uint8_t)0x00; // Relays 9-16 OFF
6013  d465 725f0060      	clr	_Relays_16to9
6014                     ; 1630 	      break;
6016  d469 ccd4f7        	jra	L3371
6017  d46c               L3021:
6018                     ; 1632 	    case 60: // Show relay states page
6018                     ; 1633 	      current_webpage = WEBPAGE_DEFAULT;
6019                     ; 1634               pSocket->pData = g_HtmlPageDefault;
6020                     ; 1635               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
6021                     ; 1636               pSocket->nNewlines = 0;
6022                     ; 1637               pSocket->nState = STATE_CONNECTED;
6023                     ; 1638               pSocket->nPrevBytes = 0xFFFF;
6024                     ; 1639 	      break;
6026  d46c 206e          	jp	L3221
6027  d46e               L5021:
6028                     ; 1641 	    case 61: // Show address settings page
6028                     ; 1642 	      current_webpage = WEBPAGE_ADDRESS;
6030  d46e 3501001b      	mov	_current_webpage,#1
6031                     ; 1643               pSocket->pData = g_HtmlPageAddress;
6033  d472 1e0e          	ldw	x,(OFST+7,sp)
6034  d474 90ae965e      	ldw	y,#L71_g_HtmlPageAddress
6035  d478 ef01          	ldw	(1,x),y
6036                     ; 1644               pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
6038  d47a 90ae1341      	ldw	y,#4929
6039                     ; 1645               pSocket->nNewlines = 0;
6040                     ; 1646               pSocket->nState = STATE_CONNECTED;
6041                     ; 1647               pSocket->nPrevBytes = 0xFFFF;
6042                     ; 1648 	      break;
6044  d47e 206c          	jp	LC016
6045  d480               L7021:
6046                     ; 1651 	    case 63: // Show help page 1
6046                     ; 1652 	      current_webpage = WEBPAGE_HELP;
6048  d480 3503001b      	mov	_current_webpage,#3
6049                     ; 1653               pSocket->pData = g_HtmlPageHelp;
6051  d484 1e0e          	ldw	x,(OFST+7,sp)
6052  d486 90aea9a0      	ldw	y,#L12_g_HtmlPageHelp
6053  d48a ef01          	ldw	(1,x),y
6054                     ; 1654               pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
6056  d48c 90ae075c      	ldw	y,#1884
6057                     ; 1655               pSocket->nNewlines = 0;
6058                     ; 1656               pSocket->nState = STATE_CONNECTED;
6059                     ; 1657               pSocket->nPrevBytes = 0xFFFF;
6060                     ; 1658 	      break;
6062  d490 205a          	jp	LC016
6063  d492               L1121:
6064                     ; 1660 	    case 64: // Show help page 2
6064                     ; 1661 	      current_webpage = WEBPAGE_HELP2;
6066  d492 3504001b      	mov	_current_webpage,#4
6067                     ; 1662               pSocket->pData = g_HtmlPageHelp2;
6069  d496 1e0e          	ldw	x,(OFST+7,sp)
6070  d498 90aeb0fd      	ldw	y,#L32_g_HtmlPageHelp2
6071  d49c ef01          	ldw	(1,x),y
6072                     ; 1663               pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
6074  d49e 90ae02bb      	ldw	y,#699
6075                     ; 1664               pSocket->nNewlines = 0;
6076                     ; 1665               pSocket->nState = STATE_CONNECTED;
6077                     ; 1666               pSocket->nPrevBytes = 0xFFFF;
6078                     ; 1667 	      break;
6080  d4a2 2048          	jp	LC016
6081  d4a4               L3121:
6082                     ; 1670 	    case 65: // Flash LED for diagnostics
6082                     ; 1671 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6082                     ; 1672 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6082                     ; 1673 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
6082                     ; 1674 	      debugflash();
6084  d4a4 cde227        	call	_debugflash
6086                     ; 1675 	      debugflash();
6088  d4a7 cde227        	call	_debugflash
6090                     ; 1676 	      debugflash();
6092  d4aa cde227        	call	_debugflash
6094                     ; 1680 	      break;
6096  d4ad 2048          	jra	L3371
6097  d4af               L5121:
6098                     ; 1683             case 66: // Show statistics page
6098                     ; 1684 	      current_webpage = WEBPAGE_STATS;
6100  d4af 3505001b      	mov	_current_webpage,#5
6101                     ; 1685               pSocket->pData = g_HtmlPageStats;
6103  d4b3 1e0e          	ldw	x,(OFST+7,sp)
6104  d4b5 90aeb3b9      	ldw	y,#L52_g_HtmlPageStats
6105  d4b9 ef01          	ldw	(1,x),y
6106                     ; 1686               pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
6108  d4bb 90ae097e      	ldw	y,#2430
6109                     ; 1687               pSocket->nNewlines = 0;
6110                     ; 1688               pSocket->nState = STATE_CONNECTED;
6111                     ; 1689               pSocket->nPrevBytes = 0xFFFF;
6112                     ; 1690 	      break;
6114  d4bf 202b          	jp	LC016
6115  d4c1               L7121:
6116                     ; 1693 	    case 91: // Reboot
6116                     ; 1694 	      submit_changes = 2;
6118  d4c1 3502001d      	mov	_submit_changes,#2
6119                     ; 1695 	      break;
6121  d4c5 2030          	jra	L3371
6122  d4c7               L1221:
6123                     ; 1697             case 99: // Show simplified relay state page
6123                     ; 1698 	      current_webpage = WEBPAGE_RSTATE;
6125  d4c7 3506001b      	mov	_current_webpage,#6
6126                     ; 1699               pSocket->pData = g_HtmlPageRstate;
6128  d4cb 90aebd38      	ldw	y,#L72_g_HtmlPageRstate
6129  d4cf ef01          	ldw	(1,x),y
6130                     ; 1700               pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
6132  d4d1 90ae00a0      	ldw	y,#160
6133  d4d5 ef03          	ldw	(3,x),y
6134                     ; 1701               pSocket->nNewlines = 0;
6136  d4d7 e705          	ld	(5,x),a
6137                     ; 1702               pSocket->nState = STATE_CONNECTED;
6139  d4d9 f7            	ld	(x),a
6140                     ; 1703               pSocket->nPrevBytes = 0xFFFF;
6141                     ; 1704 	      break;
6143  d4da 2015          	jp	LC015
6144  d4dc               L3221:
6145                     ; 1706 	    default: // Show relay state page
6145                     ; 1707 	      current_webpage = WEBPAGE_DEFAULT;
6147                     ; 1708               pSocket->pData = g_HtmlPageDefault;
6149                     ; 1709               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
6152  d4dc 725f001b      	clr	_current_webpage
6154  d4e0 1e0e          	ldw	x,(OFST+7,sp)
6155  d4e2 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
6156  d4e6 ef01          	ldw	(1,x),y
6158  d4e8 90ae15d5      	ldw	y,#5589
6159                     ; 1710               pSocket->nNewlines = 0;
6161                     ; 1711               pSocket->nState = STATE_CONNECTED;
6163  d4ec               LC016:
6164  d4ec ef03          	ldw	(3,x),y
6170  d4ee 6f05          	clr	(5,x)
6176  d4f0 7f            	clr	(x)
6177                     ; 1712               pSocket->nPrevBytes = 0xFFFF;
6179  d4f1               LC015:
6186  d4f1 90aeffff      	ldw	y,#65535
6187  d4f5 ef0a          	ldw	(10,x),y
6188                     ; 1713 	      break;
6190  d4f7               L3371:
6191                     ; 1715           pSocket->ParseState = PARSE_DELIM;
6193  d4f7 1e0e          	ldw	x,(OFST+7,sp)
6194  d4f9 a605          	ld	a,#5
6195  d4fb e709          	ld	(9,x),a
6197  d4fd               L7761:
6198                     ; 1729         if (pSocket->nParseLeft == 0) {
6200  d4fd 1e0e          	ldw	x,(OFST+7,sp)
6201  d4ff e606          	ld	a,(6,x)
6202  d501 261c          	jrne	L5661
6203                     ; 1731           pSocket->nState = STATE_SENDHEADER;
6204                     ; 1732           break;
6206  d503 2015          	jp	LC019
6207  d505               L7271:
6208                     ; 1718         else if (pSocket->ParseState == PARSE_DELIM) {
6210  d505 a105          	cp	a,#5
6211  d507 26f4          	jrne	L7761
6212                     ; 1720           pSocket->ParseState = PARSE_DELIM;
6214  d509 a605          	ld	a,#5
6215  d50b e709          	ld	(9,x),a
6216                     ; 1721           pSocket->nParseLeft--;
6218  d50d 6a06          	dec	(6,x)
6219                     ; 1722           pBuffer++;
6221  d50f 1e08          	ldw	x,(OFST+1,sp)
6222  d511 5c            	incw	x
6223  d512 1f08          	ldw	(OFST+1,sp),x
6224                     ; 1723 	  if (pSocket->nParseLeft == 0) {
6226  d514 1e0e          	ldw	x,(OFST+7,sp)
6227  d516 e606          	ld	a,(6,x)
6228  d518 26e3          	jrne	L7761
6229                     ; 1725             pSocket->nState = STATE_SENDHEADER;
6231  d51a               LC019:
6233  d51a a60b          	ld	a,#11
6234  d51c f7            	ld	(x),a
6235                     ; 1726             break;
6237  d51d 200b          	jra	L1661
6238  d51f               L5661:
6239                     ; 1482       while (nBytes--) {
6241  d51f 1e0c          	ldw	x,(OFST+5,sp)
6242  d521 5a            	decw	x
6243  d522 1f0c          	ldw	(OFST+5,sp),x
6244  d524 5c            	incw	x
6245  d525 2703ccd281    	jrne	L3661
6246  d52a               L1661:
6247                     ; 1737     if (pSocket->nState == STATE_SENDHEADER) {
6249  d52a 1e0e          	ldw	x,(OFST+7,sp)
6250  d52c f6            	ld	a,(x)
6251  d52d a10b          	cp	a,#11
6252  d52f 2623          	jrne	L5471
6253                     ; 1738       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
6255  d531 ee03          	ldw	x,(3,x)
6256  d533 cdf587        	call	c_uitolx
6258  d536 be02          	ldw	x,c_lreg+2
6259  d538 89            	pushw	x
6260  d539 be00          	ldw	x,c_lreg
6261  d53b 89            	pushw	x
6262  d53c ce01d9        	ldw	x,_uip_appdata
6263  d53f cdc5b5        	call	L7_CopyHttpHeader
6265  d542 5b04          	addw	sp,#4
6266  d544 89            	pushw	x
6267  d545 ce01d9        	ldw	x,_uip_appdata
6268  d548 cdef64        	call	_uip_send
6270  d54b 85            	popw	x
6271                     ; 1739       pSocket->nState = STATE_SENDDATA;
6273  d54c 1e0e          	ldw	x,(OFST+7,sp)
6274  d54e a60c          	ld	a,#12
6275  d550 f7            	ld	(x),a
6276                     ; 1740       return;
6278  d551 cccec0        	jra	L613
6279  d554               L5471:
6280                     ; 1743     if (pSocket->nState == STATE_SENDDATA) {
6282  d554 a10c          	cp	a,#12
6283  d556 26f9          	jrne	L613
6284                     ; 1747       pSocket->nPrevBytes = pSocket->nDataLeft;
6286  d558 9093          	ldw	y,x
6287  d55a 90ee03        	ldw	y,(3,y)
6288  d55d ef0a          	ldw	(10,x),y
6289                     ; 1748       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6291  d55f ce01d5        	ldw	x,_uip_conn
6292  d562 ee12          	ldw	x,(18,x)
6293  d564 89            	pushw	x
6294  d565 1e10          	ldw	x,(OFST+9,sp)
6295  d567 1c0003        	addw	x,#3
6296  d56a 89            	pushw	x
6297  d56b 1e12          	ldw	x,(OFST+11,sp)
6298  d56d 5c            	incw	x
6299  d56e 89            	pushw	x
6300  d56f ce01d9        	ldw	x,_uip_appdata
6301  d572 cdc64d        	call	L11_CopyHttpData
6303  d575 5b06          	addw	sp,#6
6304  d577 1f01          	ldw	(OFST-6,sp),x
6306                     ; 1749       pSocket->nPrevBytes -= pSocket->nDataLeft;
6308  d579 1e0e          	ldw	x,(OFST+7,sp)
6309  d57b e60b          	ld	a,(11,x)
6310  d57d e004          	sub	a,(4,x)
6311  d57f e70b          	ld	(11,x),a
6312  d581 e60a          	ld	a,(10,x)
6313  d583 e203          	sbc	a,(3,x)
6314  d585 e70a          	ld	(10,x),a
6315                     ; 1751       if (nBufSize == 0) {
6317  d587 1e01          	ldw	x,(OFST-6,sp)
6318  d589 262d          	jrne	LC010
6319                     ; 1753         uip_close();
6321  d58b               LC011:
6323  d58b 35100088      	mov	_uip_flags,#16
6325  d58f cccec0        	jra	L613
6326                     ; 1757         uip_send(uip_appdata, nBufSize);
6328                     ; 1759       return;
6330  d592               L5531:
6331                     ; 1763   else if (uip_rexmit()) {
6333  d592 7204008803cc  	btjf	_uip_flags,#2,L3531
6334                     ; 1764     if (pSocket->nPrevBytes == 0xFFFF) {
6336  d59a 160e          	ldw	y,(OFST+7,sp)
6337  d59c 90ee0a        	ldw	y,(10,y)
6338  d59f 905c          	incw	y
6339  d5a1 2620          	jrne	L1671
6340                     ; 1766       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
6342  d5a3 1e0e          	ldw	x,(OFST+7,sp)
6343  d5a5 ee03          	ldw	x,(3,x)
6344  d5a7 cdf587        	call	c_uitolx
6346  d5aa be02          	ldw	x,c_lreg+2
6347  d5ac 89            	pushw	x
6348  d5ad be00          	ldw	x,c_lreg
6349  d5af 89            	pushw	x
6350  d5b0 ce01d9        	ldw	x,_uip_appdata
6351  d5b3 cdc5b5        	call	L7_CopyHttpHeader
6353  d5b6 5b04          	addw	sp,#4
6355  d5b8               LC010:
6357  d5b8 89            	pushw	x
6358  d5b9 ce01d9        	ldw	x,_uip_appdata
6359  d5bc cdef64        	call	_uip_send
6360  d5bf 85            	popw	x
6362  d5c0 cccec0        	jra	L613
6363  d5c3               L1671:
6364                     ; 1769       pSocket->pData -= pSocket->nPrevBytes;
6366  d5c3 1e0e          	ldw	x,(OFST+7,sp)
6367  d5c5 e602          	ld	a,(2,x)
6368  d5c7 e00b          	sub	a,(11,x)
6369  d5c9 e702          	ld	(2,x),a
6370  d5cb e601          	ld	a,(1,x)
6371  d5cd e20a          	sbc	a,(10,x)
6372  d5cf e701          	ld	(1,x),a
6373                     ; 1770       pSocket->nDataLeft += pSocket->nPrevBytes;
6375  d5d1 e604          	ld	a,(4,x)
6376  d5d3 eb0b          	add	a,(11,x)
6377  d5d5 e704          	ld	(4,x),a
6378  d5d7 e603          	ld	a,(3,x)
6379  d5d9 e90a          	adc	a,(10,x)
6380                     ; 1771       pSocket->nPrevBytes = pSocket->nDataLeft;
6382  d5db 9093          	ldw	y,x
6383  d5dd e703          	ld	(3,x),a
6384  d5df 90ee03        	ldw	y,(3,y)
6385  d5e2 ef0a          	ldw	(10,x),y
6386                     ; 1772       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6388  d5e4 ce01d5        	ldw	x,_uip_conn
6389  d5e7 ee12          	ldw	x,(18,x)
6390  d5e9 89            	pushw	x
6391  d5ea 1e10          	ldw	x,(OFST+9,sp)
6392  d5ec 1c0003        	addw	x,#3
6393  d5ef 89            	pushw	x
6394  d5f0 1e12          	ldw	x,(OFST+11,sp)
6395  d5f2 5c            	incw	x
6396  d5f3 89            	pushw	x
6397  d5f4 ce01d9        	ldw	x,_uip_appdata
6398  d5f7 cdc64d        	call	L11_CopyHttpData
6400  d5fa 5b06          	addw	sp,#6
6401  d5fc 1f01          	ldw	(OFST-6,sp),x
6403                     ; 1773       pSocket->nPrevBytes -= pSocket->nDataLeft;
6405  d5fe 1e0e          	ldw	x,(OFST+7,sp)
6406  d600 e60b          	ld	a,(11,x)
6407  d602 e004          	sub	a,(4,x)
6408  d604 e70b          	ld	(11,x),a
6409  d606 e60a          	ld	a,(10,x)
6410  d608 e203          	sbc	a,(3,x)
6411  d60a e70a          	ld	(10,x),a
6412                     ; 1774       if (nBufSize == 0) {
6414  d60c 1e01          	ldw	x,(OFST-6,sp)
6415                     ; 1776         uip_close();
6417  d60e 2603ccd58b    	jreq	LC011
6418                     ; 1780         uip_send(uip_appdata, nBufSize);
6420  d613 89            	pushw	x
6421  d614 ce01d9        	ldw	x,_uip_appdata
6422  d617 cdef64        	call	_uip_send
6424  d61a 85            	popw	x
6425                     ; 1783     return;
6427  d61b               L3531:
6428                     ; 1785 }
6430  d61b cccec0        	jra	L613
6464                     ; 1788 uint8_t GpioGetPin(uint8_t nGpio)
6464                     ; 1789 {
6465                     	switch	.text
6466  d61e               _GpioGetPin:
6468       00000000      OFST:	set	0
6471                     ; 1791   if(nGpio == 0       && (Relays_8to1  & (uint8_t)(0x01))) return 1; // Relay-01 is ON
6473  d61e 4d            	tnz	a
6474  d61f 2607          	jrne	L5002
6476  d621 7201005f02    	btjf	_Relays_8to1,#0,L5002
6479  d626 4c            	inc	a
6482  d627 81            	ret	
6483  d628               L5002:
6484                     ; 1792   else if(nGpio == 1  && (Relays_8to1  & (uint8_t)(0x02))) return 1; // Relay-02 is ON
6486  d628 a101          	cp	a,#1
6487  d62a 2608          	jrne	L1102
6489  d62c 7203005f03    	btjf	_Relays_8to1,#1,L1102
6492  d631 a601          	ld	a,#1
6495  d633 81            	ret	
6496  d634               L1102:
6497                     ; 1793   else if(nGpio == 2  && (Relays_8to1  & (uint8_t)(0x04))) return 1; // Relay-03 is ON
6499  d634 a102          	cp	a,#2
6500  d636 2608          	jrne	L5102
6502  d638 7205005f03    	btjf	_Relays_8to1,#2,L5102
6505  d63d a601          	ld	a,#1
6508  d63f 81            	ret	
6509  d640               L5102:
6510                     ; 1794   else if(nGpio == 3  && (Relays_8to1  & (uint8_t)(0x08))) return 1; // Relay-04 is ON
6512  d640 a103          	cp	a,#3
6513  d642 2608          	jrne	L1202
6515  d644 7207005f03    	btjf	_Relays_8to1,#3,L1202
6518  d649 a601          	ld	a,#1
6521  d64b 81            	ret	
6522  d64c               L1202:
6523                     ; 1795   else if(nGpio == 4  && (Relays_8to1  & (uint8_t)(0x10))) return 1; // Relay-05 is ON
6525  d64c a104          	cp	a,#4
6526  d64e 2608          	jrne	L5202
6528  d650 7209005f03    	btjf	_Relays_8to1,#4,L5202
6531  d655 a601          	ld	a,#1
6534  d657 81            	ret	
6535  d658               L5202:
6536                     ; 1796   else if(nGpio == 5  && (Relays_8to1  & (uint8_t)(0x20))) return 1; // Relay-06 is ON
6538  d658 a105          	cp	a,#5
6539  d65a 2608          	jrne	L1302
6541  d65c 720b005f03    	btjf	_Relays_8to1,#5,L1302
6544  d661 a601          	ld	a,#1
6547  d663 81            	ret	
6548  d664               L1302:
6549                     ; 1797   else if(nGpio == 6  && (Relays_8to1  & (uint8_t)(0x40))) return 1; // Relay-07 is ON
6551  d664 a106          	cp	a,#6
6552  d666 2608          	jrne	L5302
6554  d668 720d005f03    	btjf	_Relays_8to1,#6,L5302
6557  d66d a601          	ld	a,#1
6560  d66f 81            	ret	
6561  d670               L5302:
6562                     ; 1798   else if(nGpio == 7  && (Relays_8to1  & (uint8_t)(0x80))) return 1; // Relay-08 is ON
6564  d670 a107          	cp	a,#7
6565  d672 2608          	jrne	L1402
6567  d674 720f005f03    	btjf	_Relays_8to1,#7,L1402
6570  d679 a601          	ld	a,#1
6573  d67b 81            	ret	
6574  d67c               L1402:
6575                     ; 1799   else if(nGpio == 8  && (Relays_16to9 & (uint8_t)(0x01))) return 1; // Relay-09 is ON
6577  d67c a108          	cp	a,#8
6578  d67e 2608          	jrne	L5402
6580  d680 7201006003    	btjf	_Relays_16to9,#0,L5402
6583  d685 a601          	ld	a,#1
6586  d687 81            	ret	
6587  d688               L5402:
6588                     ; 1800   else if(nGpio == 9  && (Relays_16to9 & (uint8_t)(0x02))) return 1; // Relay-10 is ON
6590  d688 a109          	cp	a,#9
6591  d68a 2608          	jrne	L1502
6593  d68c 7203006003    	btjf	_Relays_16to9,#1,L1502
6596  d691 a601          	ld	a,#1
6599  d693 81            	ret	
6600  d694               L1502:
6601                     ; 1801   else if(nGpio == 10 && (Relays_16to9 & (uint8_t)(0x04))) return 1; // Relay-11 is ON
6603  d694 a10a          	cp	a,#10
6604  d696 2608          	jrne	L5502
6606  d698 7205006003    	btjf	_Relays_16to9,#2,L5502
6609  d69d a601          	ld	a,#1
6612  d69f 81            	ret	
6613  d6a0               L5502:
6614                     ; 1802   else if(nGpio == 11 && (Relays_16to9 & (uint8_t)(0x08))) return 1; // Relay-12 is ON
6616  d6a0 a10b          	cp	a,#11
6617  d6a2 2608          	jrne	L1602
6619  d6a4 7207006003    	btjf	_Relays_16to9,#3,L1602
6622  d6a9 a601          	ld	a,#1
6625  d6ab 81            	ret	
6626  d6ac               L1602:
6627                     ; 1803   else if(nGpio == 12 && (Relays_16to9 & (uint8_t)(0x10))) return 1; // Relay-13 is ON
6629  d6ac a10c          	cp	a,#12
6630  d6ae 2608          	jrne	L5602
6632  d6b0 7209006003    	btjf	_Relays_16to9,#4,L5602
6635  d6b5 a601          	ld	a,#1
6638  d6b7 81            	ret	
6639  d6b8               L5602:
6640                     ; 1804   else if(nGpio == 13 && (Relays_16to9 & (uint8_t)(0x20))) return 1; // Relay-14 is ON
6642  d6b8 a10d          	cp	a,#13
6643  d6ba 2608          	jrne	L1702
6645  d6bc 720b006003    	btjf	_Relays_16to9,#5,L1702
6648  d6c1 a601          	ld	a,#1
6651  d6c3 81            	ret	
6652  d6c4               L1702:
6653                     ; 1805   else if(nGpio == 14 && (Relays_16to9 & (uint8_t)(0x40))) return 1; // Relay-15 is ON
6655  d6c4 a10e          	cp	a,#14
6656  d6c6 2608          	jrne	L5702
6658  d6c8 720d006003    	btjf	_Relays_16to9,#6,L5702
6661  d6cd a601          	ld	a,#1
6664  d6cf 81            	ret	
6665  d6d0               L5702:
6666                     ; 1806   else if(nGpio == 15 && (Relays_16to9 & (uint8_t)(0x80))) return 1; // Relay-16 is ON
6668  d6d0 a10f          	cp	a,#15
6669  d6d2 2608          	jrne	L7002
6671  d6d4 720f006003    	btjf	_Relays_16to9,#7,L7002
6674  d6d9 a601          	ld	a,#1
6677  d6db 81            	ret	
6678  d6dc               L7002:
6679                     ; 1807   return 0;
6681  d6dc 4f            	clr	a
6684  d6dd 81            	ret	
6725                     	switch	.const
6726  bea3               L623:
6727  bea3 d6fb          	dc.w	L3012
6728  bea5 d70d          	dc.w	L5012
6729  bea7 d71f          	dc.w	L7012
6730  bea9 d731          	dc.w	L1112
6731  beab d743          	dc.w	L3112
6732  bead d755          	dc.w	L5112
6733  beaf d767          	dc.w	L7112
6734  beb1 d779          	dc.w	L1212
6735  beb3 d78a          	dc.w	L3212
6736  beb5 d79a          	dc.w	L5212
6737  beb7 d7aa          	dc.w	L7212
6738  beb9 d7ba          	dc.w	L1312
6739  bebb d7ca          	dc.w	L3312
6740  bebd d7da          	dc.w	L5312
6741  bebf d7ea          	dc.w	L7312
6742  bec1 d7fa          	dc.w	L1412
6743                     ; 1811 void GpioSetPin(uint8_t nGpio, uint8_t nState)
6743                     ; 1812 {
6744                     	switch	.text
6745  d6de               _GpioSetPin:
6747  d6de 89            	pushw	x
6748       00000000      OFST:	set	0
6751                     ; 1816   if(nState != 0 && nState != 1) nState = 1;
6753  d6df 9f            	ld	a,xl
6754  d6e0 4d            	tnz	a
6755  d6e1 2708          	jreq	L3612
6757  d6e3 9f            	ld	a,xl
6758  d6e4 4a            	dec	a
6759  d6e5 2704          	jreq	L3612
6762  d6e7 a601          	ld	a,#1
6763  d6e9 6b02          	ld	(OFST+2,sp),a
6764  d6eb               L3612:
6765                     ; 1818   switch(nGpio)
6767  d6eb 7b01          	ld	a,(OFST+1,sp)
6769                     ; 1884   default: break;
6770  d6ed a110          	cp	a,#16
6771  d6ef 2503ccd808    	jruge	L7612
6772  d6f4 5f            	clrw	x
6773  d6f5 97            	ld	xl,a
6774  d6f6 58            	sllw	x
6775  d6f7 debea3        	ldw	x,(L623,x)
6776  d6fa fc            	jp	(x)
6777  d6fb               L3012:
6778                     ; 1820   case 0:
6778                     ; 1821     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x01); // Relay-01 OFF
6780  d6fb 7b02          	ld	a,(OFST+2,sp)
6781  d6fd 2607          	jrne	L1712
6784  d6ff 7211005f      	bres	_Relays_8to1,#0
6786  d703 ccd808        	jra	L7612
6787  d706               L1712:
6788                     ; 1822     else Relays_8to1 |= (uint8_t)0x01; // Relay-01 ON
6790  d706 7210005f      	bset	_Relays_8to1,#0
6791  d70a ccd808        	jra	L7612
6792  d70d               L5012:
6793                     ; 1824   case 1:
6793                     ; 1825     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x02); // Relay-02 OFF
6795  d70d 7b02          	ld	a,(OFST+2,sp)
6796  d70f 2607          	jrne	L5712
6799  d711 7213005f      	bres	_Relays_8to1,#1
6801  d715 ccd808        	jra	L7612
6802  d718               L5712:
6803                     ; 1826     else Relays_8to1 |= (uint8_t)0x02; // Relay-02 ON
6805  d718 7212005f      	bset	_Relays_8to1,#1
6806  d71c ccd808        	jra	L7612
6807  d71f               L7012:
6808                     ; 1828   case 2:
6808                     ; 1829     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x04); // Relay-03 OFF
6810  d71f 7b02          	ld	a,(OFST+2,sp)
6811  d721 2607          	jrne	L1022
6814  d723 7215005f      	bres	_Relays_8to1,#2
6816  d727 ccd808        	jra	L7612
6817  d72a               L1022:
6818                     ; 1830     else Relays_8to1 |= (uint8_t)0x04; // Relay-03 ON
6820  d72a 7214005f      	bset	_Relays_8to1,#2
6821  d72e ccd808        	jra	L7612
6822  d731               L1112:
6823                     ; 1832   case 3:
6823                     ; 1833     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x08); // Relay-04 OFF
6825  d731 7b02          	ld	a,(OFST+2,sp)
6826  d733 2607          	jrne	L5022
6829  d735 7217005f      	bres	_Relays_8to1,#3
6831  d739 ccd808        	jra	L7612
6832  d73c               L5022:
6833                     ; 1834     else Relays_8to1 |= (uint8_t)0x08; // Relay-04 ON
6835  d73c 7216005f      	bset	_Relays_8to1,#3
6836  d740 ccd808        	jra	L7612
6837  d743               L3112:
6838                     ; 1836   case 4:
6838                     ; 1837     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x10); // Relay-05 OFF
6840  d743 7b02          	ld	a,(OFST+2,sp)
6841  d745 2607          	jrne	L1122
6844  d747 7219005f      	bres	_Relays_8to1,#4
6846  d74b ccd808        	jra	L7612
6847  d74e               L1122:
6848                     ; 1838     else Relays_8to1 |= (uint8_t)0x10; // Relay-05 ON
6850  d74e 7218005f      	bset	_Relays_8to1,#4
6851  d752 ccd808        	jra	L7612
6852  d755               L5112:
6853                     ; 1840   case 5:
6853                     ; 1841     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x20); // Relay-06 OFF
6855  d755 7b02          	ld	a,(OFST+2,sp)
6856  d757 2607          	jrne	L5122
6859  d759 721b005f      	bres	_Relays_8to1,#5
6861  d75d ccd808        	jra	L7612
6862  d760               L5122:
6863                     ; 1842     else Relays_8to1 |= (uint8_t)0x20; // Relay-06 ON
6865  d760 721a005f      	bset	_Relays_8to1,#5
6866  d764 ccd808        	jra	L7612
6867  d767               L7112:
6868                     ; 1844   case 6:
6868                     ; 1845     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x40); // Relay-07 OFF
6870  d767 7b02          	ld	a,(OFST+2,sp)
6871  d769 2607          	jrne	L1222
6874  d76b 721d005f      	bres	_Relays_8to1,#6
6876  d76f ccd808        	jra	L7612
6877  d772               L1222:
6878                     ; 1846     else Relays_8to1 |= (uint8_t)0x40; // Relay-07 ON
6880  d772 721c005f      	bset	_Relays_8to1,#6
6881  d776 ccd808        	jra	L7612
6882  d779               L1212:
6883                     ; 1848   case 7:
6883                     ; 1849     if(nState == 0) Relays_8to1 &= (uint8_t)(~0x80); // Relay-08 OFF
6885  d779 7b02          	ld	a,(OFST+2,sp)
6886  d77b 2607          	jrne	L5222
6889  d77d 721f005f      	bres	_Relays_8to1,#7
6891  d781 ccd808        	jra	L7612
6892  d784               L5222:
6893                     ; 1850     else Relays_8to1 |= (uint8_t)0x80; // Relay-08 ON
6895  d784 721e005f      	bset	_Relays_8to1,#7
6896  d788 207e          	jra	L7612
6897  d78a               L3212:
6898                     ; 1852   case 8:
6898                     ; 1853     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x01); // Relay-09 OFF
6900  d78a 7b02          	ld	a,(OFST+2,sp)
6901  d78c 2606          	jrne	L1322
6904  d78e 72110060      	bres	_Relays_16to9,#0
6906  d792 2074          	jra	L7612
6907  d794               L1322:
6908                     ; 1854     else Relays_16to9 |= (uint8_t)0x01; // Relay-09 ON
6910  d794 72100060      	bset	_Relays_16to9,#0
6911  d798 206e          	jra	L7612
6912  d79a               L5212:
6913                     ; 1856   case 9:
6913                     ; 1857     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x02); // Relay-10 OFF
6915  d79a 7b02          	ld	a,(OFST+2,sp)
6916  d79c 2606          	jrne	L5322
6919  d79e 72130060      	bres	_Relays_16to9,#1
6921  d7a2 2064          	jra	L7612
6922  d7a4               L5322:
6923                     ; 1858     else Relays_16to9 |= (uint8_t)0x02; // Relay-10 ON
6925  d7a4 72120060      	bset	_Relays_16to9,#1
6926  d7a8 205e          	jra	L7612
6927  d7aa               L7212:
6928                     ; 1860   case 10:
6928                     ; 1861     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x04); // Relay-11 OFF
6930  d7aa 7b02          	ld	a,(OFST+2,sp)
6931  d7ac 2606          	jrne	L1422
6934  d7ae 72150060      	bres	_Relays_16to9,#2
6936  d7b2 2054          	jra	L7612
6937  d7b4               L1422:
6938                     ; 1862     else Relays_16to9 |= (uint8_t)0x04; // Relay-11 ON
6940  d7b4 72140060      	bset	_Relays_16to9,#2
6941  d7b8 204e          	jra	L7612
6942  d7ba               L1312:
6943                     ; 1864   case 11:
6943                     ; 1865     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x08); // Relay-12 OFF
6945  d7ba 7b02          	ld	a,(OFST+2,sp)
6946  d7bc 2606          	jrne	L5422
6949  d7be 72170060      	bres	_Relays_16to9,#3
6951  d7c2 2044          	jra	L7612
6952  d7c4               L5422:
6953                     ; 1866     else Relays_16to9 |= (uint8_t)0x08; // Relay-12 ON
6955  d7c4 72160060      	bset	_Relays_16to9,#3
6956  d7c8 203e          	jra	L7612
6957  d7ca               L3312:
6958                     ; 1868   case 12:
6958                     ; 1869     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x10); // Relay-13 OFF
6960  d7ca 7b02          	ld	a,(OFST+2,sp)
6961  d7cc 2606          	jrne	L1522
6964  d7ce 72190060      	bres	_Relays_16to9,#4
6966  d7d2 2034          	jra	L7612
6967  d7d4               L1522:
6968                     ; 1870     else Relays_16to9 |= (uint8_t)0x10; // Relay-13 ON
6970  d7d4 72180060      	bset	_Relays_16to9,#4
6971  d7d8 202e          	jra	L7612
6972  d7da               L5312:
6973                     ; 1872   case 13:
6973                     ; 1873     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x20); // Relay-14 OFF
6975  d7da 7b02          	ld	a,(OFST+2,sp)
6976  d7dc 2606          	jrne	L5522
6979  d7de 721b0060      	bres	_Relays_16to9,#5
6981  d7e2 2024          	jra	L7612
6982  d7e4               L5522:
6983                     ; 1874     else Relays_16to9 |= (uint8_t)0x20; // Relay-14 ON
6985  d7e4 721a0060      	bset	_Relays_16to9,#5
6986  d7e8 201e          	jra	L7612
6987  d7ea               L7312:
6988                     ; 1876   case 14:
6988                     ; 1877     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x40); // Relay-15 OFF
6990  d7ea 7b02          	ld	a,(OFST+2,sp)
6991  d7ec 2606          	jrne	L1622
6994  d7ee 721d0060      	bres	_Relays_16to9,#6
6996  d7f2 2014          	jra	L7612
6997  d7f4               L1622:
6998                     ; 1878     else Relays_16to9 |= (uint8_t)0x40; // Relay-15 ON
7000  d7f4 721c0060      	bset	_Relays_16to9,#6
7001  d7f8 200e          	jra	L7612
7002  d7fa               L1412:
7003                     ; 1880   case 15:
7003                     ; 1881     if(nState == 0) Relays_16to9 &= (uint8_t)(~0x80); // Relay-16 OFF
7005  d7fa 7b02          	ld	a,(OFST+2,sp)
7006  d7fc 2606          	jrne	L5622
7009  d7fe 721f0060      	bres	_Relays_16to9,#7
7011  d802 2004          	jra	L7612
7012  d804               L5622:
7013                     ; 1882     else Relays_16to9 |= (uint8_t)0x80; // Relay-16 ON
7015  d804 721e0060      	bset	_Relays_16to9,#7
7016                     ; 1884   default: break;
7018  d808               L7612:
7019                     ; 1886 }
7022  d808 85            	popw	x
7023  d809 81            	ret	
7113                     	switch	.const
7114  bec3               L633:
7115  bec3 d83f          	dc.w	L1722
7116  bec5 d846          	dc.w	L3722
7117  bec7 d84d          	dc.w	L5722
7118  bec9 d854          	dc.w	L7722
7119  becb d85b          	dc.w	L1032
7120  becd d862          	dc.w	L3032
7121  becf d869          	dc.w	L5032
7122  bed1 d870          	dc.w	L7032
7123  bed3 d877          	dc.w	L1132
7124  bed5 d87e          	dc.w	L3132
7125  bed7 d885          	dc.w	L5132
7126  bed9 d88c          	dc.w	L7132
7127                     ; 1889 void SetAddresses(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
7127                     ; 1890 {
7128                     	switch	.text
7129  d80a               _SetAddresses:
7131  d80a 89            	pushw	x
7132  d80b 5207          	subw	sp,#7
7133       00000007      OFST:	set	7
7136                     ; 1903   temp = 0;
7138                     ; 1904   invalid = 0;
7140  d80d 0f01          	clr	(OFST-6,sp)
7142                     ; 1907   str[0] = (uint8_t)alpha1;
7144  d80f 9f            	ld	a,xl
7145  d810 6b02          	ld	(OFST-5,sp),a
7147                     ; 1908   str[1] = (uint8_t)alpha2;
7149  d812 7b0c          	ld	a,(OFST+5,sp)
7150  d814 6b03          	ld	(OFST-4,sp),a
7152                     ; 1909   str[2] = (uint8_t)alpha3;
7154  d816 7b0d          	ld	a,(OFST+6,sp)
7155  d818 6b04          	ld	(OFST-3,sp),a
7157                     ; 1910   str[3] = 0;
7159  d81a 0f05          	clr	(OFST-2,sp)
7161                     ; 1911   temp = atoi(str);
7163  d81c 96            	ldw	x,sp
7164  d81d 1c0002        	addw	x,#OFST-5
7165  d820 cdf321        	call	_atoi
7167  d823 1f06          	ldw	(OFST-1,sp),x
7169                     ; 1912   if (temp > 255) invalid = 1; // If an invalid entry set indicator
7171  d825 a30100        	cpw	x,#256
7172  d828 2504          	jrult	L5532
7175  d82a a601          	ld	a,#1
7176  d82c 6b01          	ld	(OFST-6,sp),a
7178  d82e               L5532:
7179                     ; 1914   if(invalid == 0) { // Make change only if valid entry
7181  d82e 7b01          	ld	a,(OFST-6,sp)
7182  d830 265f          	jrne	L7532
7183                     ; 1915     switch(itemnum)
7185  d832 7b08          	ld	a,(OFST+1,sp)
7187                     ; 1929     default: break;
7188  d834 a10c          	cp	a,#12
7189  d836 2459          	jruge	L7532
7190  d838 5f            	clrw	x
7191  d839 97            	ld	xl,a
7192  d83a 58            	sllw	x
7193  d83b debec3        	ldw	x,(L633,x)
7194  d83e fc            	jp	(x)
7195  d83f               L1722:
7196                     ; 1917     case 0:  Pending_hostaddr4 = (uint8_t)temp; break;
7198  d83f 7b07          	ld	a,(OFST+0,sp)
7199  d841 c70037        	ld	_Pending_hostaddr4,a
7202  d844 204b          	jra	L7532
7203  d846               L3722:
7204                     ; 1918     case 1:  Pending_hostaddr3 = (uint8_t)temp; break;
7206  d846 7b07          	ld	a,(OFST+0,sp)
7207  d848 c70036        	ld	_Pending_hostaddr3,a
7210  d84b 2044          	jra	L7532
7211  d84d               L5722:
7212                     ; 1919     case 2:  Pending_hostaddr2 = (uint8_t)temp; break;
7214  d84d 7b07          	ld	a,(OFST+0,sp)
7215  d84f c70035        	ld	_Pending_hostaddr2,a
7218  d852 203d          	jra	L7532
7219  d854               L7722:
7220                     ; 1920     case 3:  Pending_hostaddr1 = (uint8_t)temp; break;
7222  d854 7b07          	ld	a,(OFST+0,sp)
7223  d856 c70034        	ld	_Pending_hostaddr1,a
7226  d859 2036          	jra	L7532
7227  d85b               L1032:
7228                     ; 1921     case 4:  Pending_draddr4 = (uint8_t)temp; break;
7230  d85b 7b07          	ld	a,(OFST+0,sp)
7231  d85d c70033        	ld	_Pending_draddr4,a
7234  d860 202f          	jra	L7532
7235  d862               L3032:
7236                     ; 1922     case 5:  Pending_draddr3 = (uint8_t)temp; break;
7238  d862 7b07          	ld	a,(OFST+0,sp)
7239  d864 c70032        	ld	_Pending_draddr3,a
7242  d867 2028          	jra	L7532
7243  d869               L5032:
7244                     ; 1923     case 6:  Pending_draddr2 = (uint8_t)temp; break;
7246  d869 7b07          	ld	a,(OFST+0,sp)
7247  d86b c70031        	ld	_Pending_draddr2,a
7250  d86e 2021          	jra	L7532
7251  d870               L7032:
7252                     ; 1924     case 7:  Pending_draddr1 = (uint8_t)temp; break;
7254  d870 7b07          	ld	a,(OFST+0,sp)
7255  d872 c70030        	ld	_Pending_draddr1,a
7258  d875 201a          	jra	L7532
7259  d877               L1132:
7260                     ; 1925     case 8:  Pending_netmask4 = (uint8_t)temp; break;
7262  d877 7b07          	ld	a,(OFST+0,sp)
7263  d879 c7002f        	ld	_Pending_netmask4,a
7266  d87c 2013          	jra	L7532
7267  d87e               L3132:
7268                     ; 1926     case 9:  Pending_netmask3 = (uint8_t)temp; break;
7270  d87e 7b07          	ld	a,(OFST+0,sp)
7271  d880 c7002e        	ld	_Pending_netmask3,a
7274  d883 200c          	jra	L7532
7275  d885               L5132:
7276                     ; 1927     case 10: Pending_netmask2 = (uint8_t)temp; break;
7278  d885 7b07          	ld	a,(OFST+0,sp)
7279  d887 c7002d        	ld	_Pending_netmask2,a
7282  d88a 2005          	jra	L7532
7283  d88c               L7132:
7284                     ; 1928     case 11: Pending_netmask1 = (uint8_t)temp; break;
7286  d88c 7b07          	ld	a,(OFST+0,sp)
7287  d88e c7002c        	ld	_Pending_netmask1,a
7290                     ; 1929     default: break;
7292  d891               L7532:
7293                     ; 1932 }
7296  d891 5b09          	addw	sp,#9
7297  d893 81            	ret	
7390                     ; 1935 void SetPort(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3, uint8_t alpha4, uint8_t alpha5)
7390                     ; 1936 {
7391                     	switch	.text
7392  d894               _SetPort:
7394  d894 89            	pushw	x
7395  d895 5209          	subw	sp,#9
7396       00000009      OFST:	set	9
7399                     ; 1949   temp = 0;
7401  d897 5f            	clrw	x
7402  d898 1f01          	ldw	(OFST-8,sp),x
7404                     ; 1950   invalid = 0;
7406  d89a 0f03          	clr	(OFST-6,sp)
7408                     ; 1953   if(alpha1 > '6') invalid = 1;
7410  d89c 7b0b          	ld	a,(OFST+2,sp)
7411  d89e a137          	cp	a,#55
7412  d8a0 2506          	jrult	L3242
7415  d8a2 a601          	ld	a,#1
7416  d8a4 6b03          	ld	(OFST-6,sp),a
7419  d8a6 201d          	jra	L5242
7420  d8a8               L3242:
7421                     ; 1955     str[0] = (uint8_t)alpha1;
7423  d8a8 6b04          	ld	(OFST-5,sp),a
7425                     ; 1956     str[1] = (uint8_t)alpha2;
7427  d8aa 7b0e          	ld	a,(OFST+5,sp)
7428  d8ac 6b05          	ld	(OFST-4,sp),a
7430                     ; 1957     str[2] = (uint8_t)alpha3;
7432  d8ae 7b0f          	ld	a,(OFST+6,sp)
7433  d8b0 6b06          	ld	(OFST-3,sp),a
7435                     ; 1958     str[3] = (uint8_t)alpha4;
7437  d8b2 7b10          	ld	a,(OFST+7,sp)
7438  d8b4 6b07          	ld	(OFST-2,sp),a
7440                     ; 1959     str[4] = (uint8_t)alpha5;
7442  d8b6 7b11          	ld	a,(OFST+8,sp)
7443  d8b8 6b08          	ld	(OFST-1,sp),a
7445                     ; 1960     str[5] = 0;
7447  d8ba 0f09          	clr	(OFST+0,sp)
7449                     ; 1961     temp = atoi(str);
7451  d8bc 96            	ldw	x,sp
7452  d8bd 1c0004        	addw	x,#OFST-5
7453  d8c0 cdf321        	call	_atoi
7455  d8c3 1f01          	ldw	(OFST-8,sp),x
7457  d8c5               L5242:
7458                     ; 1964   if(invalid == 0) { // Make change only if valid entry
7460  d8c5 7b03          	ld	a,(OFST-6,sp)
7461  d8c7 2603          	jrne	L7242
7462                     ; 1965     Pending_port = (uint16_t)temp;
7464  d8c9 cf002a        	ldw	_Pending_port,x
7465  d8cc               L7242:
7466                     ; 1967 }
7469  d8cc 5b0b          	addw	sp,#11
7470  d8ce 81            	ret	
7536                     ; 1970 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7536                     ; 1971 {
7537                     	switch	.text
7538  d8cf               _SetMAC:
7540  d8cf 89            	pushw	x
7541  d8d0 5203          	subw	sp,#3
7542       00000003      OFST:	set	3
7545                     ; 1983   temp = 0;
7547                     ; 1984   invalid = 0;
7549  d8d2 0f01          	clr	(OFST-2,sp)
7551                     ; 1987   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7553  d8d4 9f            	ld	a,xl
7554  d8d5 a130          	cp	a,#48
7555  d8d7 250b          	jrult	L3742
7557  d8d9 9f            	ld	a,xl
7558  d8da a13a          	cp	a,#58
7559  d8dc 2406          	jruge	L3742
7562  d8de 7b05          	ld	a,(OFST+2,sp)
7563  d8e0 a030          	sub	a,#48
7565  d8e2 200c          	jp	LC024
7566  d8e4               L3742:
7567                     ; 1988   else if(alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7569  d8e4 7b05          	ld	a,(OFST+2,sp)
7570  d8e6 a161          	cp	a,#97
7571  d8e8 250a          	jrult	L7742
7573  d8ea a167          	cp	a,#103
7574  d8ec 2406          	jruge	L7742
7577  d8ee a057          	sub	a,#87
7578  d8f0               LC024:
7579  d8f0 6b05          	ld	(OFST+2,sp),a
7581  d8f2 2004          	jra	L5742
7582  d8f4               L7742:
7583                     ; 1989   else invalid = 1; // If an invalid entry set indicator
7585  d8f4 a601          	ld	a,#1
7586  d8f6 6b01          	ld	(OFST-2,sp),a
7588  d8f8               L5742:
7589                     ; 1991   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7591  d8f8 7b08          	ld	a,(OFST+5,sp)
7592  d8fa a130          	cp	a,#48
7593  d8fc 2508          	jrult	L3052
7595  d8fe a13a          	cp	a,#58
7596  d900 2404          	jruge	L3052
7599  d902 a030          	sub	a,#48
7601  d904 200a          	jp	LC025
7602  d906               L3052:
7603                     ; 1992   else if(alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7605  d906 a161          	cp	a,#97
7606  d908 250a          	jrult	L7052
7608  d90a a167          	cp	a,#103
7609  d90c 2406          	jruge	L7052
7612  d90e a057          	sub	a,#87
7613  d910               LC025:
7614  d910 6b08          	ld	(OFST+5,sp),a
7616  d912 2004          	jra	L5052
7617  d914               L7052:
7618                     ; 1993   else invalid = 1; // If an invalid entry set indicator
7620  d914 a601          	ld	a,#1
7621  d916 6b01          	ld	(OFST-2,sp),a
7623  d918               L5052:
7624                     ; 1995   if (invalid == 0) { // Change value only if valid entry
7626  d918 7b01          	ld	a,(OFST-2,sp)
7627  d91a 264a          	jrne	L3152
7628                     ; 1996     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7630  d91c 7b05          	ld	a,(OFST+2,sp)
7631  d91e 97            	ld	xl,a
7632  d91f a610          	ld	a,#16
7633  d921 42            	mul	x,a
7634  d922 01            	rrwa	x,a
7635  d923 1b08          	add	a,(OFST+5,sp)
7636  d925 5f            	clrw	x
7637  d926 97            	ld	xl,a
7638  d927 1f02          	ldw	(OFST-1,sp),x
7640                     ; 1997     switch(itemnum)
7642  d929 7b04          	ld	a,(OFST+1,sp)
7644                     ; 2005     default: break;
7645  d92b 2711          	jreq	L1342
7646  d92d 4a            	dec	a
7647  d92e 2715          	jreq	L3342
7648  d930 4a            	dec	a
7649  d931 2719          	jreq	L5342
7650  d933 4a            	dec	a
7651  d934 271d          	jreq	L7342
7652  d936 4a            	dec	a
7653  d937 2721          	jreq	L1442
7654  d939 4a            	dec	a
7655  d93a 2725          	jreq	L3442
7656  d93c 2028          	jra	L3152
7657  d93e               L1342:
7658                     ; 1999     case 0: Pending_uip_ethaddr1 = (uint8_t)temp; break;
7660  d93e 7b03          	ld	a,(OFST+0,sp)
7661  d940 c70024        	ld	_Pending_uip_ethaddr1,a
7664  d943 2021          	jra	L3152
7665  d945               L3342:
7666                     ; 2000     case 1: Pending_uip_ethaddr2 = (uint8_t)temp; break;
7668  d945 7b03          	ld	a,(OFST+0,sp)
7669  d947 c70025        	ld	_Pending_uip_ethaddr2,a
7672  d94a 201a          	jra	L3152
7673  d94c               L5342:
7674                     ; 2001     case 2: Pending_uip_ethaddr3 = (uint8_t)temp; break;
7676  d94c 7b03          	ld	a,(OFST+0,sp)
7677  d94e c70026        	ld	_Pending_uip_ethaddr3,a
7680  d951 2013          	jra	L3152
7681  d953               L7342:
7682                     ; 2002     case 3: Pending_uip_ethaddr4 = (uint8_t)temp; break;
7684  d953 7b03          	ld	a,(OFST+0,sp)
7685  d955 c70027        	ld	_Pending_uip_ethaddr4,a
7688  d958 200c          	jra	L3152
7689  d95a               L1442:
7690                     ; 2003     case 4: Pending_uip_ethaddr5 = (uint8_t)temp; break;
7692  d95a 7b03          	ld	a,(OFST+0,sp)
7693  d95c c70028        	ld	_Pending_uip_ethaddr5,a
7696  d95f 2005          	jra	L3152
7697  d961               L3442:
7698                     ; 2004     case 5: Pending_uip_ethaddr6 = (uint8_t)temp; break;
7700  d961 7b03          	ld	a,(OFST+0,sp)
7701  d963 c70029        	ld	_Pending_uip_ethaddr6,a
7704                     ; 2005     default: break;
7706  d966               L3152:
7707                     ; 2008 }
7710  d966 5b05          	addw	sp,#5
7711  d968 81            	ret	
7813                     	switch	.bss
7814  0010               _OctetArray:
7815  0010 000000000000  	ds.b	11
7816                     	xdef	_OctetArray
7817                     	xref	_submit_changes
7818                     	xref	_ex_stored_devicename
7819                     	xref	_uip_ethaddr6
7820                     	xref	_uip_ethaddr5
7821                     	xref	_uip_ethaddr4
7822                     	xref	_uip_ethaddr3
7823                     	xref	_uip_ethaddr2
7824                     	xref	_uip_ethaddr1
7825                     	xref	_ex_stored_port
7826                     	xref	_ex_stored_netmask1
7827                     	xref	_ex_stored_netmask2
7828                     	xref	_ex_stored_netmask3
7829                     	xref	_ex_stored_netmask4
7830                     	xref	_ex_stored_draddr1
7831                     	xref	_ex_stored_draddr2
7832                     	xref	_ex_stored_draddr3
7833                     	xref	_ex_stored_draddr4
7834                     	xref	_ex_stored_hostaddr1
7835                     	xref	_ex_stored_hostaddr2
7836                     	xref	_ex_stored_hostaddr3
7837                     	xref	_ex_stored_hostaddr4
7838                     	xref	_Pending_uip_ethaddr6
7839                     	xref	_Pending_uip_ethaddr5
7840                     	xref	_Pending_uip_ethaddr4
7841                     	xref	_Pending_uip_ethaddr3
7842                     	xref	_Pending_uip_ethaddr2
7843                     	xref	_Pending_uip_ethaddr1
7844                     	xref	_Pending_port
7845                     	xref	_Pending_netmask1
7846                     	xref	_Pending_netmask2
7847                     	xref	_Pending_netmask3
7848                     	xref	_Pending_netmask4
7849                     	xref	_Pending_draddr1
7850                     	xref	_Pending_draddr2
7851                     	xref	_Pending_draddr3
7852                     	xref	_Pending_draddr4
7853                     	xref	_Pending_hostaddr1
7854                     	xref	_Pending_hostaddr2
7855                     	xref	_Pending_hostaddr3
7856                     	xref	_Pending_hostaddr4
7857                     	xref	_invert_output
7858                     	xref	_Relays_8to1
7859                     	xref	_Relays_16to9
7860                     	xref	_Port_Httpd
7861  001b               _current_webpage:
7862  001b 00            	ds.b	1
7863                     	xdef	_current_webpage
7864                     	xref	_atoi
7865                     	xref	_debugflash
7866                     	xref	_uip_flags
7867                     	xref	_uip_stat
7868                     	xref	_uip_conn
7869                     	xref	_uip_appdata
7870                     	xref	_htons
7871                     	xref	_uip_send
7872                     	xref	_uip_listen
7873                     	xdef	_SetMAC
7874                     	xdef	_SetPort
7875                     	xdef	_SetAddresses
7876                     	xdef	_GpioSetPin
7877                     	xdef	_GpioGetPin
7878                     	xdef	_HttpDCall
7879                     	xdef	_HttpDInit
7880                     	xdef	_reverse
7881                     	xdef	_emb_itoa
7882                     	xdef	_two_alpha_to_uint
7883                     	xdef	_three_alpha_to_uint
7884                     	switch	.const
7885  bedb               L714:
7886  bedb 436f6e6e6563  	dc.b	"Connection:close",13
7887  beec 0a00          	dc.b	10,0
7888  beee               L514:
7889  beee 436f6e74656e  	dc.b	"Content-Type:text/"
7890  bf00 68746d6c0d    	dc.b	"html",13
7891  bf05 0a00          	dc.b	10,0
7892  bf07               L314:
7893  bf07 436f6e74656e  	dc.b	"Content-Length:",0
7894  bf17               L114:
7895  bf17 0d0a00        	dc.b	13,10,0
7896  bf1a               L704:
7897  bf1a 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
7898                     	xref.b	c_lreg
7899                     	xref.b	c_x
7900                     	xref.b	c_y
7920                     	xref	c_uitolx
7921                     	xref	c_ludv
7922                     	xref	c_lumd
7923                     	xref	c_rtol
7924                     	xref	c_ltor
7925                     	xref	c_lzmp
7926                     	end
