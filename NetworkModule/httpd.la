   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     .const:	section	.text
  18  8080               L31_checked:
  19  8080 636865636b65  	dc.b	"checked",0
  20  8088               L51_g_HtmlPageDefault:
  21  8088 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
  22  809a 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
  23  80ac 6561643e3c74  	dc.b	"ead><title>IO Cont"
  24  80be 726f6c3c2f74  	dc.b	"rol</title><style>"
  25  80d0 2e7330207b20  	dc.b	".s0 { background-c"
  26  80e2 6f6c6f723a20  	dc.b	"olor: red; width: "
  27  80f4 333070783b20  	dc.b	"30px; }.s1 { backg"
  28  8106 726f756e642d  	dc.b	"round-color: green"
  29  8118 3b2077696474  	dc.b	"; width: 30px; }.t"
  30  812a 31207b207769  	dc.b	"1 { width: 100px; "
  31  813c 7d2e7432207b  	dc.b	"}.t2 { width: 148p"
  32  814e 783b207d2e74  	dc.b	"x; }.t3 { width: 3"
  33  8160 3070783b207d  	dc.b	"0px; }.t4 { width:"
  34  8172 203132307078  	dc.b	" 120px; }td { text"
  35  8184 2d616c        	dc.b	"-al"
  36  8187 69676e3a2063  	dc.b	"ign: center; borde"
  37  8199 723a20317078  	dc.b	"r: 1px black solid"
  38  81ab 3b207d3c2f73  	dc.b	"; }</style></head>"
  39  81bd 3c626f64793e  	dc.b	"<body><h1>IO Contr"
  40  81cf 6f6c3c2f6831  	dc.b	"ol</h1><form metho"
  41  81e1 643d27504f53  	dc.b	"d='POST' action='/"
  42  81f3 273e3c746162  	dc.b	"'><table><tr><td c"
  43  8205 6c6173733d27  	dc.b	"lass='t1'>Name:</t"
  44  8217 643e3c74643e  	dc.b	"d><td><input type="
  45  8229 277465787427  	dc.b	"'text' name='a00' "
  46  823b 636c6173733d  	dc.b	"class='t2' value='"
  47  824d 256130307878  	dc.b	"%a00xxxxxxxxxxxxxx"
  48  825f 787878787878  	dc.b	"xxxxxx' pattern='["
  49  8271 302d39612d7a  	dc.b	"0-9a-zA-Z-_*.]{1,2"
  50  8283 307d27        	dc.b	"0}'"
  51  8286 207469746c65  	dc.b	" title='1 to 20 le"
  52  8298 74746572732c  	dc.b	"tters, numbers, an"
  53  82aa 64202d5f2a2e  	dc.b	"d -_*. no spaces' "
  54  82bc 6d61786c656e  	dc.b	"maxlength='20'></t"
  55  82ce 643e3c2f7472  	dc.b	"d></tr></table><ta"
  56  82e0 626c653e3c74  	dc.b	"ble><tr><td class="
  57  82f2 277431273e49  	dc.b	"'t1'>Input01</td><"
  58  8304 746420636c61  	dc.b	"td class='s%i00'><"
  59  8316 2f74643e3c2f  	dc.b	"/td></tr><tr><td c"
  60  8328 6c6173733d27  	dc.b	"lass='t1'>Input02<"
  61  833a 2f74643e3c74  	dc.b	"/td><td class='s%i"
  62  834c 3031273e3c2f  	dc.b	"01'></td></tr><tr>"
  63  835e 3c746420636c  	dc.b	"<td class='t1'>Inp"
  64  8370 757430333c2f  	dc.b	"ut03</td><td class"
  65  8382 3d2773        	dc.b	"='s"
  66  8385 25693032273e  	dc.b	"%i02'></td></tr><t"
  67  8397 723e3c746420  	dc.b	"r><td class='t1'>I"
  68  83a9 6e7075743034  	dc.b	"nput04</td><td cla"
  69  83bb 73733d277325  	dc.b	"ss='s%i03'></td></"
  70  83cd 74723e3c7472  	dc.b	"tr><tr><td class='"
  71  83df 7431273e496e  	dc.b	"t1'>Input05</td><t"
  72  83f1 6420636c6173  	dc.b	"d class='s%i04'></"
  73  8403 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
  74  8415 6173733d2774  	dc.b	"ass='t1'>Input06</"
  75  8427 74643e3c7464  	dc.b	"td><td class='s%i0"
  76  8439 35273e3c2f74  	dc.b	"5'></td></tr><tr><"
  77  844b 746420636c61  	dc.b	"td class='t1'>Inpu"
  78  845d 7430373c2f74  	dc.b	"t07</td><td class="
  79  846f 277325693036  	dc.b	"'s%i06'></td></tr>"
  80  8481 3c7472        	dc.b	"<tr"
  81  8484 3e3c74642063  	dc.b	"><td class='t1'>In"
  82  8496 70757430383c  	dc.b	"put08</td><td clas"
  83  84a8 733d27732569  	dc.b	"s='s%i07'></td></t"
  84  84ba 723e3c74723e  	dc.b	"r><tr><td class='t"
  85  84cc 31273e496e70  	dc.b	"1'>Input09</td><td"
  86  84de 20636c617373  	dc.b	" class='s%i08'></t"
  87  84f0 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
  88  8502 73733d277431  	dc.b	"ss='t1'>Input10</t"
  89  8514 643e3c746420  	dc.b	"d><td class='s%i09"
  90  8526 273e3c2f7464  	dc.b	"'></td></tr><tr><t"
  91  8538 6420636c6173  	dc.b	"d class='t1'>Input"
  92  854a 31313c2f7464  	dc.b	"11</td><td class='"
  93  855c 732569313027  	dc.b	"s%i10'></td></tr><"
  94  856e 74723e3c7464  	dc.b	"tr><td class='t1'>"
  95  8580 496e70        	dc.b	"Inp"
  96  8583 757431323c2f  	dc.b	"ut12</td><td class"
  97  8595 3d2773256931  	dc.b	"='s%i11'></td></tr"
  98  85a7 3e3c74723e3c  	dc.b	"><tr><td class='t1"
  99  85b9 273e496e7075  	dc.b	"'>Input13</td><td "
 100  85cb 636c6173733d  	dc.b	"class='s%i12'></td"
 101  85dd 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 102  85ef 733d27743127  	dc.b	"s='t1'>Input14</td"
 103  8601 3e3c74642063  	dc.b	"><td class='s%i13'"
 104  8613 3e3c2f74643e  	dc.b	"></td></tr><tr><td"
 105  8625 20636c617373  	dc.b	" class='t1'>Input1"
 106  8637 353c2f74643e  	dc.b	"5</td><td class='s"
 107  8649 25693134273e  	dc.b	"%i14'></td></tr><t"
 108  865b 723e3c746420  	dc.b	"r><td class='t1'>I"
 109  866d 6e7075743136  	dc.b	"nput16</td><td cla"
 110  867f 73733d        	dc.b	"ss="
 111  8682 277325693135  	dc.b	"'s%i15'></td></tr>"
 112  8694 3c2f7461626c  	dc.b	"</table><input typ"
 113  86a6 653d27686964  	dc.b	"e='hidden' name='z"
 114  86b8 303027207661  	dc.b	"00' value='0'<br><"
 115  86ca 627574746f6e  	dc.b	"button type='submi"
 116  86dc 742720746974  	dc.b	"t' title='Saves yo"
 117  86ee 757220636861  	dc.b	"ur changes - does "
 118  8700 6e6f74207265  	dc.b	"not restart the Ne"
 119  8712 74776f726b20  	dc.b	"twork Module'>Save"
 120  8724 3c2f62757474  	dc.b	"</button><button t"
 121  8736 7970653d2772  	dc.b	"ype='reset' title="
 122  8748 27556e2d646f  	dc.b	"'Un-does any chang"
 123  875a 657320746861  	dc.b	"es that have not b"
 124  876c 65656e207361  	dc.b	"een saved'>Undo Al"
 125  877e 6c3c2f        	dc.b	"l</"
 126  8781 627574746f6e  	dc.b	"button></form><for"
 127  8793 6d207374796c  	dc.b	"m style='display: "
 128  87a5 696e6c696e65  	dc.b	"inline' action='%x"
 129  87b7 303068747470  	dc.b	"00http://192.168.0"
 130  87c9 30312e303034  	dc.b	"01.004:08080/60' m"
 131  87db 6574686f643d  	dc.b	"ethod='GET'><butto"
 132  87ed 6e207469746c  	dc.b	"n title='Save firs"
 133  87ff 742120546869  	dc.b	"t! This button wil"
 134  8811 6c206e6f7420  	dc.b	"l not save your ch"
 135  8823 616e67657327  	dc.b	"anges'>Refresh</bu"
 136  8835 74746f6e3e3c  	dc.b	"tton></form><form "
 137  8847 7374796c653d  	dc.b	"style='display: in"
 138  8859 6c696e652720  	dc.b	"line' action='%x00"
 139  886b 687474703a2f  	dc.b	"http://192.168.001"
 140  887d 2e3030        	dc.b	".00"
 141  8880 343a30383038  	dc.b	"4:08080/61' method"
 142  8892 3d2747455427  	dc.b	"='GET'><button tit"
 143  88a4 6c653d275361  	dc.b	"le='Save first! Th"
 144  88b6 697320627574  	dc.b	"is button will not"
 145  88c8 207361766520  	dc.b	" save your changes"
 146  88da 273e41646472  	dc.b	"'>Address Settings"
 147  88ec 3c2f62757474  	dc.b	"</button></form><f"
 148  88fe 6f726d207374  	dc.b	"orm style='display"
 149  8910 3a20696e6c69  	dc.b	": inline' action='"
 150  8922 257830306874  	dc.b	"%x00http://192.168"
 151  8934 2e3030312e30  	dc.b	".001.004:08080/66'"
 152  8946 206d6574686f  	dc.b	" method='GET'><but"
 153  8958 746f6e207469  	dc.b	"ton title='Save fi"
 154  896a 727374212054  	dc.b	"rst! This button w"
 155  897c 696c6c        	dc.b	"ill"
 156  897f 206e6f742073  	dc.b	" not save your cha"
 157  8991 6e676573273e  	dc.b	"nges'>Network Stat"
 158  89a3 697374696373  	dc.b	"istics</button></f"
 159  89b5 6f726d3e3c66  	dc.b	"orm><form style='d"
 160  89c7 6973706c6179  	dc.b	"isplay: inline' ac"
 161  89d9 74696f6e3d27  	dc.b	"tion='%x00http://1"
 162  89eb 39322e313638  	dc.b	"92.168.001.004:080"
 163  89fd 38302f363327  	dc.b	"80/63' method='GET"
 164  8a0f 273e3c627574  	dc.b	"'><button title='S"
 165  8a21 617665206669  	dc.b	"ave first! This bu"
 166  8a33 74746f6e2077  	dc.b	"tton will not save"
 167  8a45 20796f757220  	dc.b	" your changes'>Hel"
 168  8a57 703c2f627574  	dc.b	"p</button></form><"
 169  8a69 2f626f64793e  	dc.b	"/body></html>",0
 170  8a77               L71_g_HtmlPageAddress:
 171  8a77 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 172  8a89 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 173  8a9b 6561643e3c74  	dc.b	"ead><title>Address"
 174  8aad 205365747469  	dc.b	" Settings</title><"
 175  8abf 7374796c653e  	dc.b	"style>.t1 { width:"
 176  8ad1 203130307078  	dc.b	" 100px; }.t2 { wid"
 177  8ae3 74683a203235  	dc.b	"th: 25px; }.t3 { w"
 178  8af5 696474683a20  	dc.b	"idth: 18px; }.t4 {"
 179  8b07 207769647468  	dc.b	" width: 40px; }td "
 180  8b19 7b2074657874  	dc.b	"{ text-align: cent"
 181  8b2b 65723b20626f  	dc.b	"er; border: 1px bl"
 182  8b3d 61636b20736f  	dc.b	"ack solid; }</styl"
 183  8b4f 653e3c2f6865  	dc.b	"e></head><body><h1"
 184  8b61 3e4164647265  	dc.b	">Address Settings<"
 185  8b73 2f6831        	dc.b	"/h1"
 186  8b76 3e3c666f726d  	dc.b	"><form method='POS"
 187  8b88 542720616374  	dc.b	"T' action='/'><tab"
 188  8b9a 6c653e3c7472  	dc.b	"le><tr><td class='"
 189  8bac 7431273e4950  	dc.b	"t1'>IP Addr</td><t"
 190  8bbe 643e3c696e70  	dc.b	"d><input type='tex"
 191  8bd0 7427206e616d  	dc.b	"t' name='b00' clas"
 192  8be2 733d27743227  	dc.b	"s='t2' value='%b00"
 193  8bf4 272070617474  	dc.b	"' pattern='[0-9]{3"
 194  8c06 7d2720746974  	dc.b	"}' title='Enter 00"
 195  8c18 3020746f2032  	dc.b	"0 to 255' maxlengt"
 196  8c2a 683d2733273e  	dc.b	"h='3'></td><td><in"
 197  8c3c 707574207479  	dc.b	"put type='text' na"
 198  8c4e 6d653d276230  	dc.b	"me='b01' class='t2"
 199  8c60 272076616c75  	dc.b	"' value='%b01' pat"
 200  8c72 746572        	dc.b	"ter"
 201  8c75 6e3d275b302d  	dc.b	"n='[0-9]{3}' title"
 202  8c87 3d27456e7465  	dc.b	"='Enter 000 to 255"
 203  8c99 27206d61786c  	dc.b	"' maxlength='3'></"
 204  8cab 74643e3c7464  	dc.b	"td><td><input type"
 205  8cbd 3d2774657874  	dc.b	"='text' name='b02'"
 206  8ccf 20636c617373  	dc.b	" class='t2' value="
 207  8ce1 272562303227  	dc.b	"'%b02' pattern='[0"
 208  8cf3 2d395d7b337d  	dc.b	"-9]{3}' title='Ent"
 209  8d05 657220303030  	dc.b	"er 000 to 255' max"
 210  8d17 6c656e677468  	dc.b	"length='3'></td><t"
 211  8d29 643e3c696e70  	dc.b	"d><input type='tex"
 212  8d3b 7427206e616d  	dc.b	"t' name='b03' clas"
 213  8d4d 733d27743227  	dc.b	"s='t2' value='%b03"
 214  8d5f 272070617474  	dc.b	"' pattern='[0-9]{3"
 215  8d71 7d2720        	dc.b	"}' "
 216  8d74 7469746c653d  	dc.b	"title='Enter 000 t"
 217  8d86 6f2032353527  	dc.b	"o 255' maxlength='"
 218  8d98 33273e3c2f74  	dc.b	"3'></td></tr><tr><"
 219  8daa 746420636c61  	dc.b	"td class='t1'>Gate"
 220  8dbc 7761793c2f74  	dc.b	"way</td><td><input"
 221  8dce 20747970653d  	dc.b	" type='text' name="
 222  8de0 276230342720  	dc.b	"'b04' class='t2' v"
 223  8df2 616c75653d27  	dc.b	"alue='%b04' patter"
 224  8e04 6e3d275b302d  	dc.b	"n='[0-9]{3}' title"
 225  8e16 3d27456e7465  	dc.b	"='Enter 000 to 255"
 226  8e28 27206d61786c  	dc.b	"' maxlength='3'></"
 227  8e3a 74643e3c7464  	dc.b	"td><td><input type"
 228  8e4c 3d2774657874  	dc.b	"='text' name='b05'"
 229  8e5e 20636c617373  	dc.b	" class='t2' value="
 230  8e70 272562        	dc.b	"'%b"
 231  8e73 303527207061  	dc.b	"05' pattern='[0-9]"
 232  8e85 7b337d272074  	dc.b	"{3}' title='Enter "
 233  8e97 30303020746f  	dc.b	"000 to 255' maxlen"
 234  8ea9 6774683d2733  	dc.b	"gth='3'></td><td><"
 235  8ebb 696e70757420  	dc.b	"input type='text' "
 236  8ecd 6e616d653d27  	dc.b	"name='b06' class='"
 237  8edf 743227207661  	dc.b	"t2' value='%b06' p"
 238  8ef1 61747465726e  	dc.b	"attern='[0-9]{3}' "
 239  8f03 7469746c653d  	dc.b	"title='Enter 000 t"
 240  8f15 6f2032353527  	dc.b	"o 255' maxlength='"
 241  8f27 33273e3c2f74  	dc.b	"3'></td><td><input"
 242  8f39 20747970653d  	dc.b	" type='text' name="
 243  8f4b 276230372720  	dc.b	"'b07' class='t2' v"
 244  8f5d 616c75653d27  	dc.b	"alue='%b07' patter"
 245  8f6f 6e3d27        	dc.b	"n='"
 246  8f72 5b302d395d7b  	dc.b	"[0-9]{3}' title='E"
 247  8f84 6e7465722030  	dc.b	"nter 000 to 255' m"
 248  8f96 61786c656e67  	dc.b	"axlength='3'></td>"
 249  8fa8 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 250  8fba 3d277431273e  	dc.b	"='t1'>Netmask</td>"
 251  8fcc 3c74643e3c69  	dc.b	"<td><input type='t"
 252  8fde 65787427206e  	dc.b	"ext' name='b08' cl"
 253  8ff0 6173733d2774  	dc.b	"ass='t2' value='%b"
 254  9002 303827207061  	dc.b	"08' pattern='[0-9]"
 255  9014 7b337d272074  	dc.b	"{3}' title='Enter "
 256  9026 30303020746f  	dc.b	"000 to 255' maxlen"
 257  9038 6774683d2733  	dc.b	"gth='3'></td><td><"
 258  904a 696e70757420  	dc.b	"input type='text' "
 259  905c 6e616d653d27  	dc.b	"name='b09' class='"
 260  906e 743227        	dc.b	"t2'"
 261  9071 2076616c7565  	dc.b	" value='%b09' patt"
 262  9083 65726e3d275b  	dc.b	"ern='[0-9]{3}' tit"
 263  9095 6c653d27456e  	dc.b	"le='Enter 000 to 2"
 264  90a7 353527206d61  	dc.b	"55' maxlength='3'>"
 265  90b9 3c2f74643e3c  	dc.b	"</td><td><input ty"
 266  90cb 70653d277465  	dc.b	"pe='text' name='b1"
 267  90dd 302720636c61  	dc.b	"0' class='t2' valu"
 268  90ef 653d27256231  	dc.b	"e='%b10' pattern='"
 269  9101 5b302d395d7b  	dc.b	"[0-9]{3}' title='E"
 270  9113 6e7465722030  	dc.b	"nter 000 to 255' m"
 271  9125 61786c656e67  	dc.b	"axlength='3'></td>"
 272  9137 3c74643e3c69  	dc.b	"<td><input type='t"
 273  9149 65787427206e  	dc.b	"ext' name='b11' cl"
 274  915b 6173733d2774  	dc.b	"ass='t2' value='%b"
 275  916d 313127        	dc.b	"11'"
 276  9170 207061747465  	dc.b	" pattern='[0-9]{3}"
 277  9182 27207469746c  	dc.b	"' title='Enter 000"
 278  9194 20746f203235  	dc.b	" to 255' maxlength"
 279  91a6 3d2733273e3c  	dc.b	"='3'></td></tr></t"
 280  91b8 61626c653e3c  	dc.b	"able><table><tr><t"
 281  91ca 6420636c6173  	dc.b	"d class='t1'>Port "
 282  91dc 20203c2f7464  	dc.b	"  </td><td><input "
 283  91ee 747970653d27  	dc.b	"type='text' name='"
 284  9200 633030272063  	dc.b	"c00' class='t4' va"
 285  9212 6c75653d2725  	dc.b	"lue='%c00' pattern"
 286  9224 3d275b302d39  	dc.b	"='[0-9]{5}' title="
 287  9236 27456e746572  	dc.b	"'Enter 00010 to 65"
 288  9248 35333627206d  	dc.b	"536' maxlength='5'"
 289  925a 3e3c2f74643e  	dc.b	"></td></tr></table"
 290  926c 3e3c74        	dc.b	"><t"
 291  926f 61626c653e3c  	dc.b	"able><tr><td class"
 292  9281 3d277431273e  	dc.b	"='t1'>MAC Address<"
 293  9293 2f74643e3c74  	dc.b	"/td><td><input typ"
 294  92a5 653d27746578  	dc.b	"e='text' name='d00"
 295  92b7 2720636c6173  	dc.b	"' class='t3' value"
 296  92c9 3d2725643030  	dc.b	"='%d00' pattern='["
 297  92db 302d39612d66  	dc.b	"0-9a-f]{2}' title="
 298  92ed 27456e746572  	dc.b	"'Enter 00 to ff' m"
 299  92ff 61786c656e67  	dc.b	"axlength='2'></td>"
 300  9311 3c74643e3c69  	dc.b	"<td><input type='t"
 301  9323 65787427206e  	dc.b	"ext' name='d01' cl"
 302  9335 6173733d2774  	dc.b	"ass='t3' value='%d"
 303  9347 303127207061  	dc.b	"01' pattern='[0-9a"
 304  9359 2d665d7b327d  	dc.b	"-f]{2}' title='Ent"
 305  936b 657220        	dc.b	"er "
 306  936e 303020746f20  	dc.b	"00 to ff' maxlengt"
 307  9380 683d2732273e  	dc.b	"h='2'></td><td><in"
 308  9392 707574207479  	dc.b	"put type='text' na"
 309  93a4 6d653d276430  	dc.b	"me='d02' class='t3"
 310  93b6 272076616c75  	dc.b	"' value='%d02' pat"
 311  93c8 7465726e3d27  	dc.b	"tern='[0-9a-f]{2}'"
 312  93da 207469746c65  	dc.b	" title='Enter 00 t"
 313  93ec 6f2066662720  	dc.b	"o ff' maxlength='2"
 314  93fe 273e3c2f7464  	dc.b	"'></td><td><input "
 315  9410 747970653d27  	dc.b	"type='text' name='"
 316  9422 643033272063  	dc.b	"d03' class='t3' va"
 317  9434 6c75653d2725  	dc.b	"lue='%d03' pattern"
 318  9446 3d275b302d39  	dc.b	"='[0-9a-f]{2}' tit"
 319  9458 6c653d27456e  	dc.b	"le='Enter 00 to ff"
 320  946a 27206d        	dc.b	"' m"
 321  946d 61786c656e67  	dc.b	"axlength='2'></td>"
 322  947f 3c74643e3c69  	dc.b	"<td><input type='t"
 323  9491 65787427206e  	dc.b	"ext' name='d04' cl"
 324  94a3 6173733d2774  	dc.b	"ass='t3' value='%d"
 325  94b5 303427207061  	dc.b	"04' pattern='[0-9a"
 326  94c7 2d665d7b327d  	dc.b	"-f]{2}' title='Ent"
 327  94d9 657220303020  	dc.b	"er 00 to ff' maxle"
 328  94eb 6e6774683d27  	dc.b	"ngth='2'></td><td>"
 329  94fd 3c696e707574  	dc.b	"<input type='text'"
 330  950f 206e616d653d  	dc.b	" name='d05' class="
 331  9521 277433272076  	dc.b	"'t3' value='%d05' "
 332  9533 706174746572  	dc.b	"pattern='[0-9a-f]{"
 333  9545 327d27207469  	dc.b	"2}' title='Enter 0"
 334  9557 3020746f2066  	dc.b	"0 to ff' maxlength"
 335  9569 3d2732        	dc.b	"='2"
 336  956c 273e3c2f7464  	dc.b	"'></td></tr></tabl"
 337  957e 653e3c627574  	dc.b	"e><button type='su"
 338  9590 626d69742720  	dc.b	"bmit' title='Saves"
 339  95a2 20796f757220  	dc.b	" your changes then"
 340  95b4 207265737461  	dc.b	" restarts the Netw"
 341  95c6 6f726b204d6f  	dc.b	"ork Module'>Save</"
 342  95d8 627574746f6e  	dc.b	"button><button typ"
 343  95ea 653d27726573  	dc.b	"e='reset' title='U"
 344  95fc 6e2d646f6573  	dc.b	"n-does any changes"
 345  960e 207468617420  	dc.b	" that have not bee"
 346  9620 6e2073617665  	dc.b	"n saved'>Undo All<"
 347  9632 2f627574746f  	dc.b	"/button></form><p "
 348  9644 6c696e652d68  	dc.b	"line-height 20px>U"
 349  9656 736520636175  	dc.b	"se caution when ch"
 350  9668 616e67        	dc.b	"ang"
 351  966b 696e67207468  	dc.b	"ing the above. If "
 352  967d 796f75206d61  	dc.b	"you make a mistake"
 353  968f 20796f75206d  	dc.b	" you may have to<b"
 354  96a1 723e72657374  	dc.b	"r>restore factory "
 355  96b3 64656661756c  	dc.b	"defaults by holdin"
 356  96c5 6720646f776e  	dc.b	"g down the reset b"
 357  96d7 7574746f6e20  	dc.b	"utton for 10 secon"
 358  96e9 64732e3c6272  	dc.b	"ds.<br><br>Make su"
 359  96fb 726520746865  	dc.b	"re the MAC you ass"
 360  970d 69676e206973  	dc.b	"ign is unique to y"
 361  971f 6f7572206c6f  	dc.b	"our local network."
 362  9731 205265636f6d  	dc.b	" Recommended<br>is"
 363  9743 207468617420  	dc.b	" that you just inc"
 364  9755 72656d656e74  	dc.b	"rement the lowest "
 365  9767 6f6374        	dc.b	"oct"
 366  976a 657420616e64  	dc.b	"et and then label "
 367  977c 796f75722064  	dc.b	"your devices for<b"
 368  978e 723e66757475  	dc.b	"r>future reference"
 369  97a0 2e3c62723e3c  	dc.b	".<br><br>If you ch"
 370  97b2 616e67652074  	dc.b	"ange the highest o"
 371  97c4 63746574206f  	dc.b	"ctet of the MAC yo"
 372  97d6 75204d555354  	dc.b	"u MUST use an even"
 373  97e8 206e756d6265  	dc.b	" number to<br>form"
 374  97fa 206120756e69  	dc.b	" a unicast address"
 375  980c 2e2030302c20  	dc.b	". 00, 02, ... fc, "
 376  981e 666520657463  	dc.b	"fe etc work fine. "
 377  9830 30312c203033  	dc.b	"01, 03 ... fd, ff "
 378  9842 61726520666f  	dc.b	"are for<br>multica"
 379  9854 737420616e64  	dc.b	"st and will not wo"
 380  9866 726b2e        	dc.b	"rk."
 381  9869 3c2f703e3c66  	dc.b	"</p><form style='d"
 382  987b 6973706c6179  	dc.b	"isplay: inline' ac"
 383  988d 74696f6e3d27  	dc.b	"tion='%x00http://1"
 384  989f 39322e313638  	dc.b	"92.168.001.004:080"
 385  98b1 38302f393127  	dc.b	"80/91' method='GET"
 386  98c3 273e3c627574  	dc.b	"'><button title='S"
 387  98d5 617665206669  	dc.b	"ave first! This bu"
 388  98e7 74746f6e2077  	dc.b	"tton will not save"
 389  98f9 20796f757220  	dc.b	" your changes'>Reb"
 390  990b 6f6f743c2f62  	dc.b	"oot</button></form"
 391  991d 3e266e627370  	dc.b	">&nbsp&nbspNOTE: R"
 392  992f 65626f6f7420  	dc.b	"eboot may cause th"
 393  9941 652072656c61  	dc.b	"e relays to cycle."
 394  9953 3c62723e3c62  	dc.b	"<br><br><form styl"
 395  9965 653d27        	dc.b	"e='"
 396  9968 646973706c61  	dc.b	"display: inline' a"
 397  997a 6374696f6e3d  	dc.b	"ction='%x00http://"
 398  998c 3139322e3136  	dc.b	"192.168.001.004:08"
 399  999e 3038302f3630  	dc.b	"080/60' method='GE"
 400  99b0 54273e3c6275  	dc.b	"T'><button title='"
 401  99c2 536176652066  	dc.b	"Save first! This b"
 402  99d4 7574746f6e20  	dc.b	"utton will not sav"
 403  99e6 6520796f7572  	dc.b	"e your changes'>IO"
 404  99f8 20436f6e7472  	dc.b	" Control</button><"
 405  9a0a 2f666f726d3e  	dc.b	"/form><form style="
 406  9a1c 27646973706c  	dc.b	"'display: inline' "
 407  9a2e 616374696f6e  	dc.b	"action='%x00http:/"
 408  9a40 2f3139322e31  	dc.b	"/192.168.001.004:0"
 409  9a52 383038302f36  	dc.b	"8080/66' method='G"
 410  9a64 455427        	dc.b	"ET'"
 411  9a67 3e3c62757474  	dc.b	"><button title='Sa"
 412  9a79 766520666972  	dc.b	"ve first! This but"
 413  9a8b 746f6e207769  	dc.b	"ton will not save "
 414  9a9d 796f75722063  	dc.b	"your changes'>Netw"
 415  9aaf 6f726b205374  	dc.b	"ork Statistics</bu"
 416  9ac1 74746f6e3e3c  	dc.b	"tton></form><form "
 417  9ad3 7374796c653d  	dc.b	"style='display: in"
 418  9ae5 6c696e652720  	dc.b	"line' action='%x00"
 419  9af7 687474703a2f  	dc.b	"http://192.168.001"
 420  9b09 2e3030343a30  	dc.b	".004:08080/63' met"
 421  9b1b 686f643d2747  	dc.b	"hod='GET'><button "
 422  9b2d 7469746c653d  	dc.b	"title='Save first!"
 423  9b3f 205468697320  	dc.b	" This button will "
 424  9b51 6e6f74207361  	dc.b	"not save your chan"
 425  9b63 676573        	dc.b	"ges"
 426  9b66 273e48656c70  	dc.b	"'>Help</button></f"
 427  9b78 6f726d3e3c2f  	dc.b	"orm></body></html>",0
 428  9b8b               L12_g_HtmlPageHelp:
 429  9b8b 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 430  9b9d 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 431  9baf 6561643e3c74  	dc.b	"ead><title>Help Pa"
 432  9bc1 67653c2f7469  	dc.b	"ge</title><style>t"
 433  9bd3 64207b207769  	dc.b	"d { width: 140px; "
 434  9be5 70616464696e  	dc.b	"padding: 0px; }</s"
 435  9bf7 74796c653e3c  	dc.b	"tyle></head><body>"
 436  9c09 3c68313e4865  	dc.b	"<h1>Help Page 1</h"
 437  9c1b 313e3c70206c  	dc.b	"1><p line-height 2"
 438  9c2d 3070783e5245  	dc.b	"0px>REST commands<"
 439  9c3f 62723e456e74  	dc.b	"br>Enter http://IP"
 440  9c51 3a506f72742f  	dc.b	":Port/xx where<br>"
 441  9c63 2d204950203d  	dc.b	"- IP = the device "
 442  9c75 495020416464  	dc.b	"IP Address, for ex"
 443  9c87 616d70        	dc.b	"amp"
 444  9c8a 6c6520313932  	dc.b	"le 192.168.1.4<br>"
 445  9c9c 2d20506f7274  	dc.b	"- Port = the devic"
 446  9cae 6520506f7274  	dc.b	"e Port number, for"
 447  9cc0 206578616d70  	dc.b	" example 8080<br>-"
 448  9cd2 207878203d20  	dc.b	" xx = one of the c"
 449  9ce4 6f6465732062  	dc.b	"odes below:<br>60 "
 450  9cf6 3d2053686f77  	dc.b	"= Show IO Control "
 451  9d08 706167653c62  	dc.b	"page<br>61 = Show "
 452  9d1a 416464726573  	dc.b	"Address Settings p"
 453  9d2c 6167653c6272  	dc.b	"age<br>63 = Show H"
 454  9d3e 656c70205061  	dc.b	"elp Page 1<br>64 ="
 455  9d50 2053686f7720  	dc.b	" Show Help Page 2<"
 456  9d62 62723e363520  	dc.b	"br>65 = Flash LED<"
 457  9d74 62723e363620  	dc.b	"br>66 = Show Stati"
 458  9d86 737469        	dc.b	"sti"
 459  9d89 63733c62723e  	dc.b	"cs<br>67 = Clear S"
 460  9d9b 746174697374  	dc.b	"tatistics<br>91 = "
 461  9dad 5265626f6f74  	dc.b	"Reboot<br>99 = Sho"
 462  9dbf 772053686f72  	dc.b	"w Short Form IO St"
 463  9dd1 617475733c62  	dc.b	"atus<br></p><form "
 464  9de3 7374796c653d  	dc.b	"style='display: in"
 465  9df5 6c696e652720  	dc.b	"line' action='%x00"
 466  9e07 687474703a2f  	dc.b	"http://192.168.001"
 467  9e19 2e3030343a30  	dc.b	".004:08080/64' met"
 468  9e2b 686f643d2747  	dc.b	"hod='GET'><button "
 469  9e3d 7469746c653d  	dc.b	"title='Go to next "
 470  9e4f 48656c702070  	dc.b	"Help page'>Next He"
 471  9e61 6c7020506167  	dc.b	"lp Page</button></"
 472  9e73 666f726d3e3c  	dc.b	"form></body></html"
 473  9e85 3e00          	dc.b	">",0
 474  9e87               L32_g_HtmlPageHelp2:
 475  9e87 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 476  9e99 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 477  9eab 6561643e3c74  	dc.b	"ead><title>Help Pa"
 478  9ebd 676520323c2f  	dc.b	"ge 2</title></head"
 479  9ecf 3e3c626f6479  	dc.b	"><body><h1>Help Pa"
 480  9ee1 676520323c2f  	dc.b	"ge 2</h1><p line-h"
 481  9ef3 656967687420  	dc.b	"eight 20px>IP Addr"
 482  9f05 6573732c2047  	dc.b	"ess, Gateway Addre"
 483  9f17 73732c204e65  	dc.b	"ss, Netmask, Port,"
 484  9f29 20616e64204d  	dc.b	" and MAC Address c"
 485  9f3b 616e206f6e6c  	dc.b	"an only be<br>chan"
 486  9f4d 676564207669  	dc.b	"ged via the web in"
 487  9f5f 746572666163  	dc.b	"terface. If the de"
 488  9f71 766963652062  	dc.b	"vice becomes inacc"
 489  9f83 657373        	dc.b	"ess"
 490  9f86 69626c652079  	dc.b	"ible you can<br>re"
 491  9f98 73657420746f  	dc.b	"set to factory def"
 492  9faa 61756c747320  	dc.b	"aults by holding t"
 493  9fbc 686520726573  	dc.b	"he reset button do"
 494  9fce 776e20666f72  	dc.b	"wn for 10 seconds."
 495  9fe0 3c62723e4465  	dc.b	"<br>Defaults:<br> "
 496  9ff2 495020313932  	dc.b	"IP 192.168.1.4<br>"
 497  a004 204761746577  	dc.b	" Gateway 192.168.1"
 498  a016 2e313c62723e  	dc.b	".1<br> Netmask 255"
 499  a028 2e3235352e32  	dc.b	".255.255.0<br> Por"
 500  a03a 742030383038  	dc.b	"t 08080<br> MAC c2"
 501  a04c 2d34642d3639  	dc.b	"-4d-69-6b-65-00<br"
 502  a05e 3e3c62723e43  	dc.b	"><br>Code Revision"
 503  a070 203230323030  	dc.b	" 20200802 1800</p>"
 504  a082 3c666f        	dc.b	"<fo"
 505  a085 726d20737479  	dc.b	"rm style='display:"
 506  a097 20696e6c696e  	dc.b	" inline' action='%"
 507  a0a9 783030687474  	dc.b	"x00http://192.168."
 508  a0bb 3030312e3030  	dc.b	"001.004:08080/60' "
 509  a0cd 6d6574686f64  	dc.b	"method='GET'><butt"
 510  a0df 6f6e20746974  	dc.b	"on title='Go to IO"
 511  a0f1 20436f6e7472  	dc.b	" Control Page'>IO "
 512  a103 436f6e74726f  	dc.b	"Control</button></"
 513  a115 666f726d3e3c  	dc.b	"form></body></html"
 514  a127 3e00          	dc.b	">",0
 515  a129               L52_g_HtmlPageStats:
 516  a129 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 517  a13b 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 518  a14d 6561643e3c74  	dc.b	"ead><title>Network"
 519  a15f 205374617469  	dc.b	" Statistics</title"
 520  a171 3e3c7374796c  	dc.b	"><style>.t1 { widt"
 521  a183 683a20313030  	dc.b	"h: 100px; }.t2 { w"
 522  a195 696474683a20  	dc.b	"idth: 450px; }td {"
 523  a1a7 20626f726465  	dc.b	" border: 1px black"
 524  a1b9 20736f6c6964  	dc.b	" solid; }</style><"
 525  a1cb 2f686561643e  	dc.b	"/head><body><h1>Ne"
 526  a1dd 74776f726b20  	dc.b	"twork Statistics</"
 527  a1ef 68313e3c703e  	dc.b	"h1><p>Values shown"
 528  a201 206172652073  	dc.b	" are since last po"
 529  a213 776572206f6e  	dc.b	"wer on or reset</p"
 530  a225 3e3c74        	dc.b	"><t"
 531  a228 61626c653e3c  	dc.b	"able><tr><td class"
 532  a23a 3d277431273e  	dc.b	"='t1'>%e00xxxxxxxx"
 533  a24c 78783c2f7464  	dc.b	"xx</td><td class='"
 534  a25e 7432273e4472  	dc.b	"t2'>Dropped packet"
 535  a270 732061742074  	dc.b	"s at the IP layer<"
 536  a282 2f74643e3c2f  	dc.b	"/td></tr><tr><td c"
 537  a294 6c6173733d27  	dc.b	"lass='t1'>%e01xxxx"
 538  a2a6 787878787878  	dc.b	"xxxxxx</td><td cla"
 539  a2b8 73733d277432  	dc.b	"ss='t2'>Received p"
 540  a2ca 61636b657473  	dc.b	"ackets at the IP l"
 541  a2dc 617965723c2f  	dc.b	"ayer</td></tr><tr>"
 542  a2ee 3c746420636c  	dc.b	"<td class='t1'>%e0"
 543  a300 327878787878  	dc.b	"2xxxxxxxxxx</td><t"
 544  a312 6420636c6173  	dc.b	"d class='t2'>Sent "
 545  a324 706163        	dc.b	"pac"
 546  a327 6b6574732061  	dc.b	"kets at the IP lay"
 547  a339 65723c2f7464  	dc.b	"er</td></tr><tr><t"
 548  a34b 6420636c6173  	dc.b	"d class='t1'>%e03x"
 549  a35d 787878787878  	dc.b	"xxxxxxxxx</td><td "
 550  a36f 636c6173733d  	dc.b	"class='t2'>Packets"
 551  a381 2064726f7070  	dc.b	" dropped due to wr"
 552  a393 6f6e67204950  	dc.b	"ong IP version or "
 553  a3a5 686561646572  	dc.b	"header length</td>"
 554  a3b7 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 555  a3c9 3d277431273e  	dc.b	"='t1'>%e04xxxxxxxx"
 556  a3db 78783c2f7464  	dc.b	"xx</td><td class='"
 557  a3ed 7432273e5061  	dc.b	"t2'>Packets droppe"
 558  a3ff 642064756520  	dc.b	"d due to wrong IP "
 559  a411 6c656e677468  	dc.b	"length, high byte<"
 560  a423 2f7464        	dc.b	"/td"
 561  a426 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 562  a438 733d27743127  	dc.b	"s='t1'>%e05xxxxxxx"
 563  a44a 7878783c2f74  	dc.b	"xxx</td><td class="
 564  a45c 277432273e50  	dc.b	"'t2'>Packets dropp"
 565  a46e 656420647565  	dc.b	"ed due to wrong IP"
 566  a480 206c656e6774  	dc.b	" length, low byte<"
 567  a492 2f74643e3c2f  	dc.b	"/td></tr><tr><td c"
 568  a4a4 6c6173733d27  	dc.b	"lass='t1'>%e06xxxx"
 569  a4b6 787878787878  	dc.b	"xxxxxx</td><td cla"
 570  a4c8 73733d277432  	dc.b	"ss='t2'>Packets dr"
 571  a4da 6f7070656420  	dc.b	"opped since they w"
 572  a4ec 657265204950  	dc.b	"ere IP fragments</"
 573  a4fe 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 574  a510 6173733d2774  	dc.b	"ass='t1'>%e07xxxxx"
 575  a522 787878        	dc.b	"xxx"
 576  a525 78783c2f7464  	dc.b	"xx</td><td class='"
 577  a537 7432273e5061  	dc.b	"t2'>Packets droppe"
 578  a549 642064756520  	dc.b	"d due to IP checks"
 579  a55b 756d20657272  	dc.b	"um errors</td></tr"
 580  a56d 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 581  a57f 273e25653038  	dc.b	"'>%e08xxxxxxxxxx</"
 582  a591 74643e3c7464  	dc.b	"td><td class='t2'>"
 583  a5a3 5061636b6574  	dc.b	"Packets dropped si"
 584  a5b5 6e6365207468  	dc.b	"nce they were not "
 585  a5c7 49434d50206f  	dc.b	"ICMP or TCP</td></"
 586  a5d9 74723e3c7472  	dc.b	"tr><tr><td class='"
 587  a5eb 7431273e2565  	dc.b	"t1'>%e09xxxxxxxxxx"
 588  a5fd 3c2f74643e3c  	dc.b	"</td><td class='t2"
 589  a60f 273e44726f70  	dc.b	"'>Dropped ICMP pac"
 590  a621 6b6574        	dc.b	"ket"
 591  a624 733c2f74643e  	dc.b	"s</td></tr><tr><td"
 592  a636 20636c617373  	dc.b	" class='t1'>%e10xx"
 593  a648 787878787878  	dc.b	"xxxxxxxx</td><td c"
 594  a65a 6c6173733d27  	dc.b	"lass='t2'>Received"
 595  a66c 2049434d5020  	dc.b	" ICMP packets</td>"
 596  a67e 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 597  a690 3d277431273e  	dc.b	"='t1'>%e11xxxxxxxx"
 598  a6a2 78783c2f7464  	dc.b	"xx</td><td class='"
 599  a6b4 7432273e5365  	dc.b	"t2'>Sent ICMP pack"
 600  a6c6 6574733c2f74  	dc.b	"ets</td></tr><tr><"
 601  a6d8 746420636c61  	dc.b	"td class='t1'>%e12"
 602  a6ea 787878787878  	dc.b	"xxxxxxxxxx</td><td"
 603  a6fc 20636c617373  	dc.b	" class='t2'>ICMP p"
 604  a70e 61636b657473  	dc.b	"ackets with a wron"
 605  a720 672074        	dc.b	"g t"
 606  a723 7970653c2f74  	dc.b	"ype</td></tr><tr><"
 607  a735 746420636c61  	dc.b	"td class='t1'>%e13"
 608  a747 787878787878  	dc.b	"xxxxxxxxxx</td><td"
 609  a759 20636c617373  	dc.b	" class='t2'>Droppe"
 610  a76b 642054435020  	dc.b	"d TCP segments</td"
 611  a77d 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
 612  a78f 733d27743127  	dc.b	"s='t1'>%e14xxxxxxx"
 613  a7a1 7878783c2f74  	dc.b	"xxx</td><td class="
 614  a7b3 277432273e52  	dc.b	"'t2'>Received TCP "
 615  a7c5 7365676d656e  	dc.b	"segments</td></tr>"
 616  a7d7 3c74723e3c74  	dc.b	"<tr><td class='t1'"
 617  a7e9 3e2565313578  	dc.b	">%e15xxxxxxxxxx</t"
 618  a7fb 643e3c746420  	dc.b	"d><td class='t2'>S"
 619  a80d 656e74205443  	dc.b	"ent TCP segments</"
 620  a81f 74643e        	dc.b	"td>"
 621  a822 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 622  a834 3d277431273e  	dc.b	"='t1'>%e16xxxxxxxx"
 623  a846 78783c2f7464  	dc.b	"xx</td><td class='"
 624  a858 7432273e5443  	dc.b	"t2'>TCP segments w"
 625  a86a 697468206120  	dc.b	"ith a bad checksum"
 626  a87c 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
 627  a88e 636c6173733d  	dc.b	"class='t1'>%e17xxx"
 628  a8a0 787878787878  	dc.b	"xxxxxxx</td><td cl"
 629  a8b2 6173733d2774  	dc.b	"ass='t2'>TCP segme"
 630  a8c4 6e7473207769  	dc.b	"nts with a bad ACK"
 631  a8d6 206e756d6265  	dc.b	" number</td></tr><"
 632  a8e8 74723e3c7464  	dc.b	"tr><td class='t1'>"
 633  a8fa 256531387878  	dc.b	"%e18xxxxxxxxxx</td"
 634  a90c 3e3c74642063  	dc.b	"><td class='t2'>Re"
 635  a91e 636569        	dc.b	"cei"
 636  a921 766564205443  	dc.b	"ved TCP RST (reset"
 637  a933 29207365676d  	dc.b	") segments</td></t"
 638  a945 723e3c74723e  	dc.b	"r><tr><td class='t"
 639  a957 31273e256531  	dc.b	"1'>%e19xxxxxxxxxx<"
 640  a969 2f74643e3c74  	dc.b	"/td><td class='t2'"
 641  a97b 3e5265747261  	dc.b	">Retransmitted TCP"
 642  a98d 207365676d65  	dc.b	" segments</td></tr"
 643  a99f 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 644  a9b1 273e25653230  	dc.b	"'>%e20xxxxxxxxxx</"
 645  a9c3 74643e3c7464  	dc.b	"td><td class='t2'>"
 646  a9d5 44726f707065  	dc.b	"Dropped SYNs due t"
 647  a9e7 6f20746f6f20  	dc.b	"o too few connecti"
 648  a9f9 6f6e73206176  	dc.b	"ons avaliable</td>"
 649  aa0b 3c2f74723e3c  	dc.b	"</tr><tr><td class"
 650  aa1d 3d2774        	dc.b	"='t"
 651  aa20 31273e256532  	dc.b	"1'>%e21xxxxxxxxxx<"
 652  aa32 2f74643e3c74  	dc.b	"/td><td class='t2'"
 653  aa44 3e53594e7320  	dc.b	">SYNs for closed p"
 654  aa56 6f7274732c20  	dc.b	"orts, triggering a"
 655  aa68 205253543c2f  	dc.b	" RST</td></tr></ta"
 656  aa7a 626c653e3c66  	dc.b	"ble><form style='d"
 657  aa8c 6973706c6179  	dc.b	"isplay: inline' ac"
 658  aa9e 74696f6e3d27  	dc.b	"tion='%x00http://1"
 659  aab0 39322e313638  	dc.b	"92.168.001.004:080"
 660  aac2 38302f363027  	dc.b	"80/60' method='GET"
 661  aad4 273e3c627574  	dc.b	"'><button title='G"
 662  aae6 6f20746f2049  	dc.b	"o to IO Control Pa"
 663  aaf8 6765273e494f  	dc.b	"ge'>IO Control</bu"
 664  ab0a 74746f6e3e3c  	dc.b	"tton></form><form "
 665  ab1c 737479        	dc.b	"sty"
 666  ab1f 6c653d276469  	dc.b	"le='display: inlin"
 667  ab31 652720616374  	dc.b	"e' action='%x00htt"
 668  ab43 703a2f2f3139  	dc.b	"p://192.168.001.00"
 669  ab55 343a30383038  	dc.b	"4:08080/67' method"
 670  ab67 3d2747455427  	dc.b	"='GET'><button tit"
 671  ab79 6c653d27436c  	dc.b	"le='Clear Statisti"
 672  ab8b 6373273e436c  	dc.b	"cs'>Clear Statisti"
 673  ab9d 63733c2f6275  	dc.b	"cs</button></form>"
 674  abaf 3c2f626f6479  	dc.b	"</body></html>",0
 675  abbe               L72_g_HtmlPageRstate:
 676  abbe 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 677  abd0 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 678  abe2 6561643e3c74  	dc.b	"ead><title>Help Pa"
 679  abf4 676520323c2f  	dc.b	"ge 2</title></head"
 680  ac06 3e3c626f6479  	dc.b	"><body><p>%f00xxxx"
 681  ac18 787878787878  	dc.b	"xxxxxxxxxxxx</p></"
 682  ac2a 626f64793e3c  	dc.b	"body></html>",0
 748                     ; 778 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
 748                     ; 779 {
 750                     	switch	.text
 751  b069               L3_CopyStringP:
 753  b069 89            	pushw	x
 754  b06a 5203          	subw	sp,#3
 755       00000003      OFST:	set	3
 758                     ; 784   nBytes = 0;
 760  b06c 5f            	clrw	x
 762  b06d 2014          	jra	L17
 763  b06f               L56:
 764                     ; 786     **ppBuffer = Character;
 766  b06f 1e04          	ldw	x,(OFST+1,sp)
 767  b071 fe            	ldw	x,(x)
 768  b072 f7            	ld	(x),a
 769                     ; 787     *ppBuffer = *ppBuffer + 1;
 771  b073 1e04          	ldw	x,(OFST+1,sp)
 772  b075 9093          	ldw	y,x
 773  b077 fe            	ldw	x,(x)
 774  b078 5c            	incw	x
 775  b079 90ff          	ldw	(y),x
 776                     ; 788     pString = pString + 1;
 778  b07b 1e08          	ldw	x,(OFST+5,sp)
 779  b07d 5c            	incw	x
 780  b07e 1f08          	ldw	(OFST+5,sp),x
 781                     ; 789     nBytes++;
 783  b080 1e01          	ldw	x,(OFST-2,sp)
 784  b082 5c            	incw	x
 785  b083               L17:
 786  b083 1f01          	ldw	(OFST-2,sp),x
 788                     ; 785   while ((Character = pString[0]) != '\0') {
 788                     ; 786     **ppBuffer = Character;
 788                     ; 787     *ppBuffer = *ppBuffer + 1;
 788                     ; 788     pString = pString + 1;
 788                     ; 789     nBytes++;
 790  b085 1e08          	ldw	x,(OFST+5,sp)
 791  b087 f6            	ld	a,(x)
 792  b088 6b03          	ld	(OFST+0,sp),a
 794  b08a 26e3          	jrne	L56
 795                     ; 791   return nBytes;
 797  b08c 1e01          	ldw	x,(OFST-2,sp)
 800  b08e 5b05          	addw	sp,#5
 801  b090 81            	ret	
 846                     ; 795 static uint16_t CopyValue(uint8_t** ppBuffer, uint32_t nValue)
 846                     ; 796 {
 847                     	switch	.text
 848  b091               L5_CopyValue:
 850  b091 89            	pushw	x
 851       00000000      OFST:	set	0
 854                     ; 804   emb_itoa(nValue, OctetArray, 10, 5);
 856  b092 4b05          	push	#5
 857  b094 4b0a          	push	#10
 858  b096 ae0010        	ldw	x,#_OctetArray
 859  b099 89            	pushw	x
 860  b09a 1e0b          	ldw	x,(OFST+11,sp)
 861  b09c 89            	pushw	x
 862  b09d 1e0b          	ldw	x,(OFST+11,sp)
 863  b09f 89            	pushw	x
 864  b0a0 ad53          	call	_emb_itoa
 866  b0a2 5b08          	addw	sp,#8
 867                     ; 806   **ppBuffer = OctetArray[0];
 869  b0a4 1e01          	ldw	x,(OFST+1,sp)
 870  b0a6 fe            	ldw	x,(x)
 871  b0a7 c60010        	ld	a,_OctetArray
 872  b0aa f7            	ld	(x),a
 873                     ; 807   *ppBuffer = *ppBuffer + 1;
 875  b0ab 1e01          	ldw	x,(OFST+1,sp)
 876  b0ad 9093          	ldw	y,x
 877  b0af fe            	ldw	x,(x)
 878  b0b0 5c            	incw	x
 879  b0b1 90ff          	ldw	(y),x
 880                     ; 809   **ppBuffer = OctetArray[1];
 882  b0b3 1e01          	ldw	x,(OFST+1,sp)
 883  b0b5 fe            	ldw	x,(x)
 884  b0b6 c60011        	ld	a,_OctetArray+1
 885  b0b9 f7            	ld	(x),a
 886                     ; 810   *ppBuffer = *ppBuffer + 1;
 888  b0ba 1e01          	ldw	x,(OFST+1,sp)
 889  b0bc 9093          	ldw	y,x
 890  b0be fe            	ldw	x,(x)
 891  b0bf 5c            	incw	x
 892  b0c0 90ff          	ldw	(y),x
 893                     ; 812   **ppBuffer = OctetArray[2];
 895  b0c2 1e01          	ldw	x,(OFST+1,sp)
 896  b0c4 fe            	ldw	x,(x)
 897  b0c5 c60012        	ld	a,_OctetArray+2
 898  b0c8 f7            	ld	(x),a
 899                     ; 813   *ppBuffer = *ppBuffer + 1;
 901  b0c9 1e01          	ldw	x,(OFST+1,sp)
 902  b0cb 9093          	ldw	y,x
 903  b0cd fe            	ldw	x,(x)
 904  b0ce 5c            	incw	x
 905  b0cf 90ff          	ldw	(y),x
 906                     ; 815   **ppBuffer = OctetArray[3];
 908  b0d1 1e01          	ldw	x,(OFST+1,sp)
 909  b0d3 fe            	ldw	x,(x)
 910  b0d4 c60013        	ld	a,_OctetArray+3
 911  b0d7 f7            	ld	(x),a
 912                     ; 816   *ppBuffer = *ppBuffer + 1;
 914  b0d8 1e01          	ldw	x,(OFST+1,sp)
 915  b0da 9093          	ldw	y,x
 916  b0dc fe            	ldw	x,(x)
 917  b0dd 5c            	incw	x
 918  b0de 90ff          	ldw	(y),x
 919                     ; 818   **ppBuffer = OctetArray[4];
 921  b0e0 1e01          	ldw	x,(OFST+1,sp)
 922  b0e2 fe            	ldw	x,(x)
 923  b0e3 c60014        	ld	a,_OctetArray+4
 924  b0e6 f7            	ld	(x),a
 925                     ; 819   *ppBuffer = *ppBuffer + 1;
 927  b0e7 1e01          	ldw	x,(OFST+1,sp)
 928  b0e9 9093          	ldw	y,x
 929  b0eb fe            	ldw	x,(x)
 930  b0ec 5c            	incw	x
 931  b0ed 90ff          	ldw	(y),x
 932                     ; 821   return 5;
 934  b0ef ae0005        	ldw	x,#5
 937  b0f2 5b02          	addw	sp,#2
 938  b0f4 81            	ret	
1010                     ; 825 char* emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
1010                     ; 826 {
1011                     	switch	.text
1012  b0f5               _emb_itoa:
1014  b0f5 5206          	subw	sp,#6
1015       00000006      OFST:	set	6
1018                     ; 841   for (i=0; i < 10; i++) str[i] = '0';
1020  b0f7 4f            	clr	a
1021  b0f8 6b06          	ld	(OFST+0,sp),a
1023  b0fa               L541:
1026  b0fa 5f            	clrw	x
1027  b0fb 97            	ld	xl,a
1028  b0fc 72fb0d        	addw	x,(OFST+7,sp)
1029  b0ff a630          	ld	a,#48
1030  b101 f7            	ld	(x),a
1033  b102 0c06          	inc	(OFST+0,sp)
1037  b104 7b06          	ld	a,(OFST+0,sp)
1038  b106 a10a          	cp	a,#10
1039  b108 25f0          	jrult	L541
1040                     ; 842   str[pad] = '\0';
1042  b10a 7b10          	ld	a,(OFST+10,sp)
1043  b10c 5f            	clrw	x
1044  b10d 97            	ld	xl,a
1045  b10e 72fb0d        	addw	x,(OFST+7,sp)
1046  b111 7f            	clr	(x)
1047                     ; 843   if (num == 0) return str;
1049  b112 96            	ldw	x,sp
1050  b113 1c0009        	addw	x,#OFST+3
1051  b116 cde0cd        	call	c_lzmp
1055  b119 2775          	jreq	L61
1056                     ; 846   i = 0;
1058  b11b 0f06          	clr	(OFST+0,sp)
1061  b11d 2060          	jra	L161
1062  b11f               L551:
1063                     ; 848     rem = (uint8_t)(num % base);
1065  b11f 7b0f          	ld	a,(OFST+9,sp)
1066  b121 b703          	ld	c_lreg+3,a
1067  b123 3f02          	clr	c_lreg+2
1068  b125 3f01          	clr	c_lreg+1
1069  b127 3f00          	clr	c_lreg
1070  b129 96            	ldw	x,sp
1071  b12a 5c            	incw	x
1072  b12b cde0e0        	call	c_rtol
1075  b12e 96            	ldw	x,sp
1076  b12f 1c0009        	addw	x,#OFST+3
1077  b132 cddf7a        	call	c_ltor
1079  b135 96            	ldw	x,sp
1080  b136 5c            	incw	x
1081  b137 cde0b3        	call	c_lumd
1083  b13a b603          	ld	a,c_lreg+3
1084  b13c 6b05          	ld	(OFST-1,sp),a
1086                     ; 849     if (rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
1088  b13e a10a          	cp	a,#10
1089  b140 7b06          	ld	a,(OFST+0,sp)
1090  b142 250d          	jrult	L561
1093  b144 0c06          	inc	(OFST+0,sp)
1095  b146 5f            	clrw	x
1096  b147 97            	ld	xl,a
1097  b148 72fb0d        	addw	x,(OFST+7,sp)
1098  b14b 7b05          	ld	a,(OFST-1,sp)
1099  b14d ab57          	add	a,#87
1101  b14f 200b          	jra	L761
1102  b151               L561:
1103                     ; 850     else str[i++] = (uint8_t)(rem + '0');
1105  b151 0c06          	inc	(OFST+0,sp)
1107  b153 5f            	clrw	x
1108  b154 97            	ld	xl,a
1109  b155 72fb0d        	addw	x,(OFST+7,sp)
1110  b158 7b05          	ld	a,(OFST-1,sp)
1111  b15a ab30          	add	a,#48
1112  b15c               L761:
1113  b15c f7            	ld	(x),a
1114                     ; 851     num = num/base;
1116  b15d 7b0f          	ld	a,(OFST+9,sp)
1117  b15f b703          	ld	c_lreg+3,a
1118  b161 3f02          	clr	c_lreg+2
1119  b163 3f01          	clr	c_lreg+1
1120  b165 3f00          	clr	c_lreg
1121  b167 96            	ldw	x,sp
1122  b168 5c            	incw	x
1123  b169 cde0e0        	call	c_rtol
1126  b16c 96            	ldw	x,sp
1127  b16d 1c0009        	addw	x,#OFST+3
1128  b170 cddf7a        	call	c_ltor
1130  b173 96            	ldw	x,sp
1131  b174 5c            	incw	x
1132  b175 cddf8c        	call	c_ludv
1134  b178 96            	ldw	x,sp
1135  b179 1c0009        	addw	x,#OFST+3
1136  b17c cde0e0        	call	c_rtol
1138  b17f               L161:
1139                     ; 847   while (num != 0) {
1141  b17f 96            	ldw	x,sp
1142  b180 1c0009        	addw	x,#OFST+3
1143  b183 cde0cd        	call	c_lzmp
1145  b186 2697          	jrne	L551
1146                     ; 855   reverse(str, pad);
1148  b188 7b10          	ld	a,(OFST+10,sp)
1149  b18a 88            	push	a
1150  b18b 1e0e          	ldw	x,(OFST+8,sp)
1151  b18d ad06          	call	_reverse
1153  b18f 84            	pop	a
1154                     ; 857   return str;
1157  b190               L61:
1159  b190 1e0d          	ldw	x,(OFST+7,sp)
1161  b192 5b06          	addw	sp,#6
1162  b194 81            	ret	
1225                     ; 862 void reverse(char str[], uint8_t length)
1225                     ; 863 {
1226                     	switch	.text
1227  b195               _reverse:
1229  b195 89            	pushw	x
1230  b196 5203          	subw	sp,#3
1231       00000003      OFST:	set	3
1234                     ; 868   start = 0;
1236  b198 0f02          	clr	(OFST-1,sp)
1238                     ; 869   end = (uint8_t)(length - 1);
1240  b19a 7b08          	ld	a,(OFST+5,sp)
1241  b19c 4a            	dec	a
1242  b19d 6b03          	ld	(OFST+0,sp),a
1245  b19f 2029          	jra	L322
1246  b1a1               L712:
1247                     ; 872     temp = str[start];
1249  b1a1 5f            	clrw	x
1250  b1a2 97            	ld	xl,a
1251  b1a3 72fb04        	addw	x,(OFST+1,sp)
1252  b1a6 f6            	ld	a,(x)
1253  b1a7 6b01          	ld	(OFST-2,sp),a
1255                     ; 873     str[start] = str[end];
1257  b1a9 5f            	clrw	x
1258  b1aa 7b02          	ld	a,(OFST-1,sp)
1259  b1ac 97            	ld	xl,a
1260  b1ad 72fb04        	addw	x,(OFST+1,sp)
1261  b1b0 7b03          	ld	a,(OFST+0,sp)
1262  b1b2 905f          	clrw	y
1263  b1b4 9097          	ld	yl,a
1264  b1b6 72f904        	addw	y,(OFST+1,sp)
1265  b1b9 90f6          	ld	a,(y)
1266  b1bb f7            	ld	(x),a
1267                     ; 874     str[end] = temp;
1269  b1bc 5f            	clrw	x
1270  b1bd 7b03          	ld	a,(OFST+0,sp)
1271  b1bf 97            	ld	xl,a
1272  b1c0 72fb04        	addw	x,(OFST+1,sp)
1273  b1c3 7b01          	ld	a,(OFST-2,sp)
1274  b1c5 f7            	ld	(x),a
1275                     ; 875     start++;
1277  b1c6 0c02          	inc	(OFST-1,sp)
1279                     ; 876     end--;
1281  b1c8 0a03          	dec	(OFST+0,sp)
1283  b1ca               L322:
1284                     ; 871   while (start < end) {
1284                     ; 872     temp = str[start];
1284                     ; 873     str[start] = str[end];
1284                     ; 874     str[end] = temp;
1284                     ; 875     start++;
1284                     ; 876     end--;
1286  b1ca 7b02          	ld	a,(OFST-1,sp)
1287  b1cc 1103          	cp	a,(OFST+0,sp)
1288  b1ce 25d1          	jrult	L712
1289                     ; 878 }
1292  b1d0 5b05          	addw	sp,#5
1293  b1d2 81            	ret	
1354                     ; 881 uint8_t three_alpha_to_uint(uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
1354                     ; 882 {
1355                     	switch	.text
1356  b1d3               _three_alpha_to_uint:
1358  b1d3 89            	pushw	x
1359  b1d4 89            	pushw	x
1360       00000002      OFST:	set	2
1363                     ; 890   value = (uint8_t)((alpha1 - '0') *100);
1365  b1d5 9e            	ld	a,xh
1366  b1d6 97            	ld	xl,a
1367  b1d7 a664          	ld	a,#100
1368  b1d9 42            	mul	x,a
1369  b1da 9f            	ld	a,xl
1370  b1db a0c0          	sub	a,#192
1371  b1dd 6b02          	ld	(OFST+0,sp),a
1373                     ; 891   digit = (uint8_t)((alpha2 - '0') * 10);
1375  b1df 7b04          	ld	a,(OFST+2,sp)
1376  b1e1 97            	ld	xl,a
1377  b1e2 a60a          	ld	a,#10
1378  b1e4 42            	mul	x,a
1379  b1e5 9f            	ld	a,xl
1380  b1e6 a0e0          	sub	a,#224
1382                     ; 892   value = (uint8_t)(value + digit);
1384  b1e8 1b02          	add	a,(OFST+0,sp)
1385  b1ea 6b02          	ld	(OFST+0,sp),a
1387                     ; 893   digit = (uint8_t)(alpha3 - '0');
1389  b1ec 7b07          	ld	a,(OFST+5,sp)
1390  b1ee a030          	sub	a,#48
1391  b1f0 6b01          	ld	(OFST-1,sp),a
1393                     ; 894   value = (uint8_t)(value + digit);
1395  b1f2 1b02          	add	a,(OFST+0,sp)
1397                     ; 896   if (value >= 255) value = 0;
1399  b1f4 a1ff          	cp	a,#255
1400  b1f6 2501          	jrult	L352
1403  b1f8 4f            	clr	a
1405  b1f9               L352:
1406                     ; 898   return value;
1410  b1f9 5b04          	addw	sp,#4
1411  b1fb 81            	ret	
1457                     ; 902 uint8_t two_alpha_to_uint(uint8_t alpha1, uint8_t alpha2)
1457                     ; 903 {
1458                     	switch	.text
1459  b1fc               _two_alpha_to_uint:
1461  b1fc 89            	pushw	x
1462  b1fd 88            	push	a
1463       00000001      OFST:	set	1
1466                     ; 910   if (alpha1 >= '0' && alpha1 <= '9') value = (uint8_t)((alpha1 - '0') << 4);
1468  b1fe 9e            	ld	a,xh
1469  b1ff a130          	cp	a,#48
1470  b201 250f          	jrult	L572
1472  b203 9e            	ld	a,xh
1473  b204 a13a          	cp	a,#58
1474  b206 240a          	jruge	L572
1477  b208 9e            	ld	a,xh
1478  b209 97            	ld	xl,a
1479  b20a a610          	ld	a,#16
1480  b20c 42            	mul	x,a
1481  b20d 9f            	ld	a,xl
1482  b20e a000          	sub	a,#0
1484  b210 2030          	jp	LC001
1485  b212               L572:
1486                     ; 911   else if (alpha1 == 'a') value = 0xa0;
1488  b212 7b02          	ld	a,(OFST+1,sp)
1489  b214 a161          	cp	a,#97
1490  b216 2604          	jrne	L103
1493  b218 a6a0          	ld	a,#160
1495  b21a 2026          	jp	LC001
1496  b21c               L103:
1497                     ; 912   else if (alpha1 == 'b') value = 0xb0;
1499  b21c a162          	cp	a,#98
1500  b21e 2604          	jrne	L503
1503  b220 a6b0          	ld	a,#176
1505  b222 201e          	jp	LC001
1506  b224               L503:
1507                     ; 913   else if (alpha1 == 'c') value = 0xc0;
1509  b224 a163          	cp	a,#99
1510  b226 2604          	jrne	L113
1513  b228 a6c0          	ld	a,#192
1515  b22a 2016          	jp	LC001
1516  b22c               L113:
1517                     ; 914   else if (alpha1 == 'd') value = 0xd0;
1519  b22c a164          	cp	a,#100
1520  b22e 2604          	jrne	L513
1523  b230 a6d0          	ld	a,#208
1525  b232 200e          	jp	LC001
1526  b234               L513:
1527                     ; 915   else if (alpha1 == 'e') value = 0xe0;
1529  b234 a165          	cp	a,#101
1530  b236 2604          	jrne	L123
1533  b238 a6e0          	ld	a,#224
1535  b23a 2006          	jp	LC001
1536  b23c               L123:
1537                     ; 916   else if (alpha1 == 'f') value = 0xf0;
1539  b23c a166          	cp	a,#102
1540  b23e 2606          	jrne	L523
1543  b240 a6f0          	ld	a,#240
1544  b242               LC001:
1545  b242 6b01          	ld	(OFST+0,sp),a
1548  b244 2002          	jra	L772
1549  b246               L523:
1550                     ; 917   else value = 0; // If an invalid entry is made convert it to 0
1552  b246 0f01          	clr	(OFST+0,sp)
1554  b248               L772:
1555                     ; 919   if (alpha2 >= '0' && alpha2 <= '9') value = (uint8_t)(value + alpha2 - '0');
1557  b248 7b03          	ld	a,(OFST+2,sp)
1558  b24a a130          	cp	a,#48
1559  b24c 250c          	jrult	L133
1561  b24e a13a          	cp	a,#58
1562  b250 2408          	jruge	L133
1565  b252 7b01          	ld	a,(OFST+0,sp)
1566  b254 1b03          	add	a,(OFST+2,sp)
1567  b256 a030          	sub	a,#48
1569  b258 203d          	jp	L333
1570  b25a               L133:
1571                     ; 920   else if (alpha2 == 'a') value = (uint8_t)(value + 0x0a);
1573  b25a a161          	cp	a,#97
1574  b25c 2606          	jrne	L533
1577  b25e 7b01          	ld	a,(OFST+0,sp)
1578  b260 ab0a          	add	a,#10
1580  b262 2033          	jp	L333
1581  b264               L533:
1582                     ; 921   else if (alpha2 == 'b') value = (uint8_t)(value + 0x0b);
1584  b264 a162          	cp	a,#98
1585  b266 2606          	jrne	L143
1588  b268 7b01          	ld	a,(OFST+0,sp)
1589  b26a ab0b          	add	a,#11
1591  b26c 2029          	jp	L333
1592  b26e               L143:
1593                     ; 922   else if (alpha2 == 'c') value = (uint8_t)(value + 0x0c);
1595  b26e a163          	cp	a,#99
1596  b270 2606          	jrne	L543
1599  b272 7b01          	ld	a,(OFST+0,sp)
1600  b274 ab0c          	add	a,#12
1602  b276 201f          	jp	L333
1603  b278               L543:
1604                     ; 923   else if (alpha2 == 'd') value = (uint8_t)(value + 0x0d);
1606  b278 a164          	cp	a,#100
1607  b27a 2606          	jrne	L153
1610  b27c 7b01          	ld	a,(OFST+0,sp)
1611  b27e ab0d          	add	a,#13
1613  b280 2015          	jp	L333
1614  b282               L153:
1615                     ; 924   else if (alpha2 == 'e') value = (uint8_t)(value + 0x0e);
1617  b282 a165          	cp	a,#101
1618  b284 2606          	jrne	L553
1621  b286 7b01          	ld	a,(OFST+0,sp)
1622  b288 ab0e          	add	a,#14
1624  b28a 200b          	jp	L333
1625  b28c               L553:
1626                     ; 925   else if (alpha2 == 'f') value = (uint8_t)(value + 0x0f);
1628  b28c a166          	cp	a,#102
1629  b28e 2606          	jrne	L163
1632  b290 7b01          	ld	a,(OFST+0,sp)
1633  b292 ab0f          	add	a,#15
1636  b294 2001          	jra	L333
1637  b296               L163:
1638                     ; 926   else value = 0; // If an invalid entry is made convert it to 0
1640  b296 4f            	clr	a
1642  b297               L333:
1643                     ; 928   return value;
1647  b297 5b03          	addw	sp,#3
1648  b299 81            	ret	
1699                     ; 932 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint32_t nDataLen)
1699                     ; 933 {
1700                     	switch	.text
1701  b29a               L7_CopyHttpHeader:
1703  b29a 89            	pushw	x
1704  b29b 89            	pushw	x
1705       00000002      OFST:	set	2
1708                     ; 936   nBytes = 0;
1710  b29c 5f            	clrw	x
1711  b29d 1f01          	ldw	(OFST-1,sp),x
1713                     ; 938   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
1715  b29f aeacd2        	ldw	x,#L704
1716  b2a2 89            	pushw	x
1717  b2a3 96            	ldw	x,sp
1718  b2a4 1c0005        	addw	x,#OFST+3
1719  b2a7 cdb069        	call	L3_CopyStringP
1721  b2aa 5b02          	addw	sp,#2
1722  b2ac 72fb01        	addw	x,(OFST-1,sp)
1723  b2af 1f01          	ldw	(OFST-1,sp),x
1725                     ; 939   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1727  b2b1 aeaccf        	ldw	x,#L114
1728  b2b4 89            	pushw	x
1729  b2b5 96            	ldw	x,sp
1730  b2b6 1c0005        	addw	x,#OFST+3
1731  b2b9 cdb069        	call	L3_CopyStringP
1733  b2bc 5b02          	addw	sp,#2
1734  b2be 72fb01        	addw	x,(OFST-1,sp)
1735  b2c1 1f01          	ldw	(OFST-1,sp),x
1737                     ; 941   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
1739  b2c3 aeacbf        	ldw	x,#L314
1740  b2c6 89            	pushw	x
1741  b2c7 96            	ldw	x,sp
1742  b2c8 1c0005        	addw	x,#OFST+3
1743  b2cb cdb069        	call	L3_CopyStringP
1745  b2ce 5b02          	addw	sp,#2
1746  b2d0 72fb01        	addw	x,(OFST-1,sp)
1747  b2d3 1f01          	ldw	(OFST-1,sp),x
1749                     ; 942   nBytes += CopyValue(&pBuffer, nDataLen);
1751  b2d5 1e09          	ldw	x,(OFST+7,sp)
1752  b2d7 89            	pushw	x
1753  b2d8 1e09          	ldw	x,(OFST+7,sp)
1754  b2da 89            	pushw	x
1755  b2db 96            	ldw	x,sp
1756  b2dc 1c0007        	addw	x,#OFST+5
1757  b2df cdb091        	call	L5_CopyValue
1759  b2e2 5b04          	addw	sp,#4
1760  b2e4 72fb01        	addw	x,(OFST-1,sp)
1761  b2e7 1f01          	ldw	(OFST-1,sp),x
1763                     ; 943   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1765  b2e9 aeaccf        	ldw	x,#L114
1766  b2ec 89            	pushw	x
1767  b2ed 96            	ldw	x,sp
1768  b2ee 1c0005        	addw	x,#OFST+3
1769  b2f1 cdb069        	call	L3_CopyStringP
1771  b2f4 5b02          	addw	sp,#2
1772  b2f6 72fb01        	addw	x,(OFST-1,sp)
1773  b2f9 1f01          	ldw	(OFST-1,sp),x
1775                     ; 945   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type:text/html\r\n"));
1777  b2fb aeaca6        	ldw	x,#L514
1778  b2fe 89            	pushw	x
1779  b2ff 96            	ldw	x,sp
1780  b300 1c0005        	addw	x,#OFST+3
1781  b303 cdb069        	call	L3_CopyStringP
1783  b306 5b02          	addw	sp,#2
1784  b308 72fb01        	addw	x,(OFST-1,sp)
1785  b30b 1f01          	ldw	(OFST-1,sp),x
1787                     ; 946   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
1789  b30d aeac93        	ldw	x,#L714
1790  b310 89            	pushw	x
1791  b311 96            	ldw	x,sp
1792  b312 1c0005        	addw	x,#OFST+3
1793  b315 cdb069        	call	L3_CopyStringP
1795  b318 5b02          	addw	sp,#2
1796  b31a 72fb01        	addw	x,(OFST-1,sp)
1797  b31d 1f01          	ldw	(OFST-1,sp),x
1799                     ; 947   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1801  b31f aeaccf        	ldw	x,#L114
1802  b322 89            	pushw	x
1803  b323 96            	ldw	x,sp
1804  b324 1c0005        	addw	x,#OFST+3
1805  b327 cdb069        	call	L3_CopyStringP
1807  b32a 5b02          	addw	sp,#2
1808  b32c 72fb01        	addw	x,(OFST-1,sp)
1810                     ; 949   return nBytes;
1814  b32f 5b04          	addw	sp,#4
1815  b331 81            	ret	
1954                     	switch	.const
1955  ac37               L421:
1956  ac37 b4d6          	dc.w	L124
1957  ac39 b4e4          	dc.w	L324
1958  ac3b b4f2          	dc.w	L524
1959  ac3d b4ff          	dc.w	L724
1960  ac3f b50c          	dc.w	L134
1961  ac41 b519          	dc.w	L334
1962  ac43 b526          	dc.w	L534
1963  ac45 b533          	dc.w	L734
1964  ac47 b540          	dc.w	L144
1965  ac49 b54d          	dc.w	L344
1966  ac4b b55a          	dc.w	L544
1967  ac4d b567          	dc.w	L744
1968  ac4f               L422:
1969  ac4f b6a6          	dc.w	L354
1970  ac51 b6b8          	dc.w	L554
1971  ac53 b6ca          	dc.w	L754
1972  ac55 b6dc          	dc.w	L164
1973  ac57 b6ee          	dc.w	L364
1974  ac59 b700          	dc.w	L564
1975  ac5b b712          	dc.w	L764
1976  ac5d b724          	dc.w	L174
1977  ac5f b736          	dc.w	L374
1978  ac61 b748          	dc.w	L574
1979  ac63 b75a          	dc.w	L774
1980  ac65 b76c          	dc.w	L105
1981  ac67 b77e          	dc.w	L305
1982  ac69 b790          	dc.w	L505
1983  ac6b b7a2          	dc.w	L705
1984  ac6d b7b4          	dc.w	L115
1985  ac6f b7c5          	dc.w	L315
1986  ac71 b7d6          	dc.w	L515
1987  ac73 b7e7          	dc.w	L715
1988  ac75 b7f8          	dc.w	L125
1989  ac77 b809          	dc.w	L325
1990  ac79 b81a          	dc.w	L525
1991                     ; 953 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
1991                     ; 954 {
1992                     	switch	.text
1993  b332               L11_CopyHttpData:
1995  b332 89            	pushw	x
1996  b333 5207          	subw	sp,#7
1997       00000007      OFST:	set	7
2000                     ; 970   nBytes = 0;
2002  b335 5f            	clrw	x
2003  b336 1f05          	ldw	(OFST-2,sp),x
2005                     ; 1006   if (nMaxBytes > 400) nMaxBytes = 400; // limit just in case
2007  b338 1e10          	ldw	x,(OFST+9,sp)
2008  b33a a30191        	cpw	x,#401
2009  b33d 2403ccbb61    	jrult	L306
2012  b342 ae0190        	ldw	x,#400
2013  b345 1f10          	ldw	(OFST+9,sp),x
2014  b347 ccbb61        	jra	L306
2015  b34a               L106:
2016                     ; 1029     if (*pDataLeft > 0) {
2018  b34a 1e0e          	ldw	x,(OFST+7,sp)
2019  b34c e601          	ld	a,(1,x)
2020  b34e fa            	or	a,(x)
2021  b34f 2603ccbb6a    	jreq	L506
2022                     ; 1033       memcpy(&nByte, *ppData, 1);
2024  b354 96            	ldw	x,sp
2025  b355 5c            	incw	x
2026  b356 bf04          	ldw	c_x,x
2027  b358 160c          	ldw	y,(OFST+5,sp)
2028  b35a 90fe          	ldw	y,(y)
2029  b35c 90bf07        	ldw	c_y,y
2030  b35f ae0001        	ldw	x,#1
2031  b362               L25:
2032  b362 5a            	decw	x
2033  b363 92d607        	ld	a,([c_y.w],x)
2034  b366 92d704        	ld	([c_x.w],x),a
2035  b369 5d            	tnzw	x
2036  b36a 26f6          	jrne	L25
2037                     ; 1063       if (nByte == '%') {
2039  b36c 7b01          	ld	a,(OFST-6,sp)
2040  b36e a125          	cp	a,#37
2041  b370 2703ccbb44    	jrne	L116
2042                     ; 1064         *ppData = *ppData + 1;
2044  b375 1e0c          	ldw	x,(OFST+5,sp)
2045  b377 9093          	ldw	y,x
2046  b379 fe            	ldw	x,(x)
2047  b37a 5c            	incw	x
2048  b37b 90ff          	ldw	(y),x
2049                     ; 1065         *pDataLeft = *pDataLeft - 1;
2051  b37d 1e0e          	ldw	x,(OFST+7,sp)
2052  b37f 9093          	ldw	y,x
2053  b381 fe            	ldw	x,(x)
2054  b382 5a            	decw	x
2055  b383 90ff          	ldw	(y),x
2056                     ; 1070         memcpy(&nParsedMode, *ppData, 1);
2058  b385 96            	ldw	x,sp
2059  b386 1c0003        	addw	x,#OFST-4
2060  b389 bf04          	ldw	c_x,x
2061  b38b 160c          	ldw	y,(OFST+5,sp)
2062  b38d 90fe          	ldw	y,(y)
2063  b38f 90bf07        	ldw	c_y,y
2064  b392 ae0001        	ldw	x,#1
2065  b395               L45:
2066  b395 5a            	decw	x
2067  b396 92d607        	ld	a,([c_y.w],x)
2068  b399 92d704        	ld	([c_x.w],x),a
2069  b39c 5d            	tnzw	x
2070  b39d 26f6          	jrne	L45
2071                     ; 1071         *ppData = *ppData + 1;
2073  b39f 1e0c          	ldw	x,(OFST+5,sp)
2074  b3a1 9093          	ldw	y,x
2075  b3a3 fe            	ldw	x,(x)
2076  b3a4 5c            	incw	x
2077  b3a5 90ff          	ldw	(y),x
2078                     ; 1072         *pDataLeft = *pDataLeft - 1;
2080  b3a7 1e0e          	ldw	x,(OFST+7,sp)
2081  b3a9 9093          	ldw	y,x
2082  b3ab fe            	ldw	x,(x)
2083  b3ac 5a            	decw	x
2084  b3ad 90ff          	ldw	(y),x
2085                     ; 1076         memcpy(&temp, *ppData, 1);
2087  b3af 96            	ldw	x,sp
2088  b3b0 1c0002        	addw	x,#OFST-5
2089  b3b3 bf04          	ldw	c_x,x
2090  b3b5 160c          	ldw	y,(OFST+5,sp)
2091  b3b7 90fe          	ldw	y,(y)
2092  b3b9 90bf07        	ldw	c_y,y
2093  b3bc ae0001        	ldw	x,#1
2094  b3bf               L65:
2095  b3bf 5a            	decw	x
2096  b3c0 92d607        	ld	a,([c_y.w],x)
2097  b3c3 92d704        	ld	([c_x.w],x),a
2098  b3c6 5d            	tnzw	x
2099  b3c7 26f6          	jrne	L65
2100                     ; 1077 	nParsedNum = (uint8_t)((temp - '0') * 10);
2102  b3c9 7b02          	ld	a,(OFST-5,sp)
2103  b3cb 97            	ld	xl,a
2104  b3cc a60a          	ld	a,#10
2105  b3ce 42            	mul	x,a
2106  b3cf 9f            	ld	a,xl
2107  b3d0 a0e0          	sub	a,#224
2108  b3d2 6b04          	ld	(OFST-3,sp),a
2110                     ; 1078         *ppData = *ppData + 1;
2112  b3d4 1e0c          	ldw	x,(OFST+5,sp)
2113  b3d6 9093          	ldw	y,x
2114  b3d8 fe            	ldw	x,(x)
2115  b3d9 5c            	incw	x
2116  b3da 90ff          	ldw	(y),x
2117                     ; 1079         *pDataLeft = *pDataLeft - 1;
2119  b3dc 1e0e          	ldw	x,(OFST+7,sp)
2120  b3de 9093          	ldw	y,x
2121  b3e0 fe            	ldw	x,(x)
2122  b3e1 5a            	decw	x
2123  b3e2 90ff          	ldw	(y),x
2124                     ; 1083         memcpy(&temp, *ppData, 1);
2126  b3e4 96            	ldw	x,sp
2127  b3e5 1c0002        	addw	x,#OFST-5
2128  b3e8 bf04          	ldw	c_x,x
2129  b3ea 160c          	ldw	y,(OFST+5,sp)
2130  b3ec 90fe          	ldw	y,(y)
2131  b3ee 90bf07        	ldw	c_y,y
2132  b3f1 ae0001        	ldw	x,#1
2133  b3f4               L06:
2134  b3f4 5a            	decw	x
2135  b3f5 92d607        	ld	a,([c_y.w],x)
2136  b3f8 92d704        	ld	([c_x.w],x),a
2137  b3fb 5d            	tnzw	x
2138  b3fc 26f6          	jrne	L06
2139                     ; 1084 	nParsedNum = (uint8_t)(nParsedNum + temp - '0');
2141  b3fe 7b04          	ld	a,(OFST-3,sp)
2142  b400 1b02          	add	a,(OFST-5,sp)
2143  b402 a030          	sub	a,#48
2144  b404 6b04          	ld	(OFST-3,sp),a
2146                     ; 1085         *ppData = *ppData + 1;
2148  b406 1e0c          	ldw	x,(OFST+5,sp)
2149  b408 9093          	ldw	y,x
2150  b40a fe            	ldw	x,(x)
2151  b40b 5c            	incw	x
2152  b40c 90ff          	ldw	(y),x
2153                     ; 1086         *pDataLeft = *pDataLeft - 1;
2155  b40e 1e0e          	ldw	x,(OFST+7,sp)
2156  b410 9093          	ldw	y,x
2157  b412 fe            	ldw	x,(x)
2158  b413 5a            	decw	x
2159  b414 90ff          	ldw	(y),x
2160                     ; 1096         if (nParsedMode == 'i') {
2162  b416 7b03          	ld	a,(OFST-4,sp)
2163  b418 a169          	cp	a,#105
2164  b41a 2614          	jrne	L316
2165                     ; 1100 	  *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
2167  b41c 7b04          	ld	a,(OFST-3,sp)
2168  b41e cdc2c4        	call	_GpioGetPin
2170  b421 1e08          	ldw	x,(OFST+1,sp)
2171  b423 ab30          	add	a,#48
2172  b425 f7            	ld	(x),a
2173                     ; 1101           pBuffer++;
2175  b426 5c            	incw	x
2176  b427 1f08          	ldw	(OFST+1,sp),x
2177                     ; 1102           nBytes++;
2179  b429 1e05          	ldw	x,(OFST-2,sp)
2180  b42b 5c            	incw	x
2181  b42c 1f05          	ldw	(OFST-2,sp),x
2184  b42e 204e          	jra	L516
2185  b430               L316:
2186                     ; 1126         else if (nParsedMode == 'o') {
2188  b430 a16f          	cp	a,#111
2189  b432 2624          	jrne	L716
2190                     ; 1129           if ((uint8_t)(GpioGetPin(nParsedNum) == 1)) { // Insert 'checked'
2192  b434 7b04          	ld	a,(OFST-3,sp)
2193  b436 cdc2c4        	call	_GpioGetPin
2195  b439 4a            	dec	a
2196  b43a 2642          	jrne	L516
2197                     ; 1130             for(i=0; i<7; i++) {
2199  b43c 6b07          	ld	(OFST+0,sp),a
2201  b43e               L326:
2202                     ; 1131               *pBuffer = checked[i];
2204  b43e 5f            	clrw	x
2205  b43f 97            	ld	xl,a
2206  b440 d68080        	ld	a,(L31_checked,x)
2207  b443 1e08          	ldw	x,(OFST+1,sp)
2208  b445 f7            	ld	(x),a
2209                     ; 1132               pBuffer++;
2211  b446 5c            	incw	x
2212  b447 1f08          	ldw	(OFST+1,sp),x
2213                     ; 1133               nBytes++;
2215  b449 1e05          	ldw	x,(OFST-2,sp)
2216  b44b 5c            	incw	x
2217  b44c 1f05          	ldw	(OFST-2,sp),x
2219                     ; 1130             for(i=0; i<7; i++) {
2221  b44e 0c07          	inc	(OFST+0,sp)
2225  b450 7b07          	ld	a,(OFST+0,sp)
2226  b452 a107          	cp	a,#7
2227  b454 25e8          	jrult	L326
2229  b456 2026          	jra	L516
2230  b458               L716:
2231                     ; 1140         else if (nParsedMode == 'p') {
2233  b458 a170          	cp	a,#112
2234  b45a 2622          	jrne	L516
2235                     ; 1143           if ((uint8_t)(GpioGetPin(nParsedNum) == 0)) { // Insert 'checked'
2237  b45c 7b04          	ld	a,(OFST-3,sp)
2238  b45e cdc2c4        	call	_GpioGetPin
2240  b461 4d            	tnz	a
2241  b462 261a          	jrne	L516
2242                     ; 1144             for(i=0; i<7; i++) {
2244  b464 6b07          	ld	(OFST+0,sp),a
2246  b466               L146:
2247                     ; 1145               *pBuffer = checked[i];
2249  b466 5f            	clrw	x
2250  b467 97            	ld	xl,a
2251  b468 d68080        	ld	a,(L31_checked,x)
2252  b46b 1e08          	ldw	x,(OFST+1,sp)
2253  b46d f7            	ld	(x),a
2254                     ; 1146               pBuffer++;
2256  b46e 5c            	incw	x
2257  b46f 1f08          	ldw	(OFST+1,sp),x
2258                     ; 1147               nBytes++;
2260  b471 1e05          	ldw	x,(OFST-2,sp)
2261  b473 5c            	incw	x
2262  b474 1f05          	ldw	(OFST-2,sp),x
2264                     ; 1144             for(i=0; i<7; i++) {
2266  b476 0c07          	inc	(OFST+0,sp)
2270  b478 7b07          	ld	a,(OFST+0,sp)
2271  b47a a107          	cp	a,#7
2272  b47c 25e8          	jrult	L146
2274  b47e               L516:
2275                     ; 1154         if (nParsedMode == 'a') {
2277  b47e 7b03          	ld	a,(OFST-4,sp)
2278  b480 a161          	cp	a,#97
2279  b482 263b          	jrne	L156
2280                     ; 1156 	  for(i=0; i<20; i++) {
2282  b484 4f            	clr	a
2283  b485 6b07          	ld	(OFST+0,sp),a
2285  b487               L356:
2286                     ; 1157 	    if (ex_stored_devicename[i] != ' ') { // Don't write spaces out - confuses the
2288  b487 5f            	clrw	x
2289  b488 97            	ld	xl,a
2290  b489 d6003e        	ld	a,(_ex_stored_devicename,x)
2291  b48c a120          	cp	a,#32
2292  b48e 2712          	jreq	L166
2293                     ; 1159               *pBuffer = (uint8_t)(ex_stored_devicename[i]);
2295  b490 7b07          	ld	a,(OFST+0,sp)
2296  b492 5f            	clrw	x
2297  b493 97            	ld	xl,a
2298  b494 d6003e        	ld	a,(_ex_stored_devicename,x)
2299  b497 1e08          	ldw	x,(OFST+1,sp)
2300  b499 f7            	ld	(x),a
2301                     ; 1160               pBuffer++;
2303  b49a 5c            	incw	x
2304  b49b 1f08          	ldw	(OFST+1,sp),x
2305                     ; 1161               nBytes++;
2307  b49d 1e05          	ldw	x,(OFST-2,sp)
2308  b49f 5c            	incw	x
2309  b4a0 1f05          	ldw	(OFST-2,sp),x
2311  b4a2               L166:
2312                     ; 1156 	  for(i=0; i<20; i++) {
2314  b4a2 0c07          	inc	(OFST+0,sp)
2318  b4a4 7b07          	ld	a,(OFST+0,sp)
2319  b4a6 a114          	cp	a,#20
2320  b4a8 25dd          	jrult	L356
2321                     ; 1176           *ppData = *ppData + 20;
2323  b4aa 1e0c          	ldw	x,(OFST+5,sp)
2324  b4ac 9093          	ldw	y,x
2325  b4ae fe            	ldw	x,(x)
2326  b4af 1c0014        	addw	x,#20
2327  b4b2 90ff          	ldw	(y),x
2328                     ; 1177           *pDataLeft = *pDataLeft - 20;
2330  b4b4 1e0e          	ldw	x,(OFST+7,sp)
2331  b4b6 9093          	ldw	y,x
2332  b4b8 fe            	ldw	x,(x)
2333  b4b9 1d0014        	subw	x,#20
2335  b4bc ccb89b        	jp	LC011
2336  b4bf               L156:
2337                     ; 1180         else if (nParsedMode == 'b') {
2339  b4bf a162          	cp	a,#98
2340  b4c1 2703ccb5bf    	jrne	L566
2341                     ; 1185 	  advanceptrs = 0;
2343                     ; 1187           switch (nParsedNum)
2345  b4c6 7b04          	ld	a,(OFST-3,sp)
2347                     ; 1202 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2348  b4c8 a10c          	cp	a,#12
2349  b4ca 2503ccb581    	jruge	L154
2350  b4cf 5f            	clrw	x
2351  b4d0 97            	ld	xl,a
2352  b4d1 58            	sllw	x
2353  b4d2 deac37        	ldw	x,(L421,x)
2354  b4d5 fc            	jp	(x)
2355  b4d6               L124:
2356                     ; 1190 	    case 0:  emb_itoa(ex_stored_hostaddr4, OctetArray, 10, 3); advanceptrs = 1; break;
2358  b4d6 4b03          	push	#3
2359  b4d8 4b0a          	push	#10
2360  b4da ae0010        	ldw	x,#_OctetArray
2361  b4dd 89            	pushw	x
2362  b4de c60062        	ld	a,_ex_stored_hostaddr4
2367  b4e1 ccb572        	jp	LC003
2368  b4e4               L324:
2369                     ; 1191 	    case 1:  emb_itoa(ex_stored_hostaddr3, OctetArray, 10, 3); advanceptrs = 1; break;
2371  b4e4 4b03          	push	#3
2372  b4e6 4b0a          	push	#10
2373  b4e8 ae0010        	ldw	x,#_OctetArray
2374  b4eb 89            	pushw	x
2375  b4ec c60061        	ld	a,_ex_stored_hostaddr3
2380  b4ef ccb572        	jp	LC003
2381  b4f2               L524:
2382                     ; 1192 	    case 2:  emb_itoa(ex_stored_hostaddr2, OctetArray, 10, 3); advanceptrs = 1; break;
2384  b4f2 4b03          	push	#3
2385  b4f4 4b0a          	push	#10
2386  b4f6 ae0010        	ldw	x,#_OctetArray
2387  b4f9 89            	pushw	x
2388  b4fa c60060        	ld	a,_ex_stored_hostaddr2
2393  b4fd 2073          	jp	LC003
2394  b4ff               L724:
2395                     ; 1193 	    case 3:  emb_itoa(ex_stored_hostaddr1, OctetArray, 10, 3); advanceptrs = 1; break;
2397  b4ff 4b03          	push	#3
2398  b501 4b0a          	push	#10
2399  b503 ae0010        	ldw	x,#_OctetArray
2400  b506 89            	pushw	x
2401  b507 c6005f        	ld	a,_ex_stored_hostaddr1
2406  b50a 2066          	jp	LC003
2407  b50c               L134:
2408                     ; 1194 	    case 4:  emb_itoa(ex_stored_draddr4,   OctetArray, 10, 3); advanceptrs = 1; break;
2410  b50c 4b03          	push	#3
2411  b50e 4b0a          	push	#10
2412  b510 ae0010        	ldw	x,#_OctetArray
2413  b513 89            	pushw	x
2414  b514 c6005e        	ld	a,_ex_stored_draddr4
2419  b517 2059          	jp	LC003
2420  b519               L334:
2421                     ; 1195 	    case 5:  emb_itoa(ex_stored_draddr3,   OctetArray, 10, 3); advanceptrs = 1; break;
2423  b519 4b03          	push	#3
2424  b51b 4b0a          	push	#10
2425  b51d ae0010        	ldw	x,#_OctetArray
2426  b520 89            	pushw	x
2427  b521 c6005d        	ld	a,_ex_stored_draddr3
2432  b524 204c          	jp	LC003
2433  b526               L534:
2434                     ; 1196 	    case 6:  emb_itoa(ex_stored_draddr2,   OctetArray, 10, 3); advanceptrs = 1; break;
2436  b526 4b03          	push	#3
2437  b528 4b0a          	push	#10
2438  b52a ae0010        	ldw	x,#_OctetArray
2439  b52d 89            	pushw	x
2440  b52e c6005c        	ld	a,_ex_stored_draddr2
2445  b531 203f          	jp	LC003
2446  b533               L734:
2447                     ; 1197 	    case 7:  emb_itoa(ex_stored_draddr1,   OctetArray, 10, 3); advanceptrs = 1; break;
2449  b533 4b03          	push	#3
2450  b535 4b0a          	push	#10
2451  b537 ae0010        	ldw	x,#_OctetArray
2452  b53a 89            	pushw	x
2453  b53b c6005b        	ld	a,_ex_stored_draddr1
2458  b53e 2032          	jp	LC003
2459  b540               L144:
2460                     ; 1198 	    case 8:  emb_itoa(ex_stored_netmask4,  OctetArray, 10, 3); advanceptrs = 1; break;
2462  b540 4b03          	push	#3
2463  b542 4b0a          	push	#10
2464  b544 ae0010        	ldw	x,#_OctetArray
2465  b547 89            	pushw	x
2466  b548 c6005a        	ld	a,_ex_stored_netmask4
2471  b54b 2025          	jp	LC003
2472  b54d               L344:
2473                     ; 1199 	    case 9:  emb_itoa(ex_stored_netmask3,  OctetArray, 10, 3); advanceptrs = 1; break;
2475  b54d 4b03          	push	#3
2476  b54f 4b0a          	push	#10
2477  b551 ae0010        	ldw	x,#_OctetArray
2478  b554 89            	pushw	x
2479  b555 c60059        	ld	a,_ex_stored_netmask3
2484  b558 2018          	jp	LC003
2485  b55a               L544:
2486                     ; 1200 	    case 10: emb_itoa(ex_stored_netmask2,  OctetArray, 10, 3); advanceptrs = 1; break;
2488  b55a 4b03          	push	#3
2489  b55c 4b0a          	push	#10
2490  b55e ae0010        	ldw	x,#_OctetArray
2491  b561 89            	pushw	x
2492  b562 c60058        	ld	a,_ex_stored_netmask2
2497  b565 200b          	jp	LC003
2498  b567               L744:
2499                     ; 1201 	    case 11: emb_itoa(ex_stored_netmask1,  OctetArray, 10, 3); advanceptrs = 1; break;
2501  b567 4b03          	push	#3
2502  b569 4b0a          	push	#10
2503  b56b ae0010        	ldw	x,#_OctetArray
2504  b56e 89            	pushw	x
2505  b56f c60057        	ld	a,_ex_stored_netmask1
2506  b572               LC003:
2507  b572 b703          	ld	c_lreg+3,a
2508  b574 3f02          	clr	c_lreg+2
2509  b576 3f01          	clr	c_lreg+1
2510  b578 3f00          	clr	c_lreg
2511  b57a be02          	ldw	x,c_lreg+2
2512  b57c 89            	pushw	x
2513  b57d be00          	ldw	x,c_lreg
2518  b57f 200a          	jra	L176
2519  b581               L154:
2520                     ; 1202 	    default: emb_itoa(0,                   OctetArray, 10, 3); advanceptrs = 1; break;
2522  b581 4b03          	push	#3
2523  b583 4b0a          	push	#10
2524  b585 ae0010        	ldw	x,#_OctetArray
2525  b588 89            	pushw	x
2526  b589 5f            	clrw	x
2527  b58a 89            	pushw	x
2533  b58b               L176:
2534  b58b 89            	pushw	x
2535  b58c cdb0f5        	call	_emb_itoa
2536  b58f 5b08          	addw	sp,#8
2549  b591 a601          	ld	a,#1
2550  b593 6b07          	ld	(OFST+0,sp),a
2552                     ; 1205 	  if (advanceptrs == 1) { // Copy OctetArray and advance pointers if one of the above
2554  b595 4a            	dec	a
2555  b596 2703ccbb61    	jrne	L306
2556                     ; 1207             *pBuffer = (uint8_t)OctetArray[0];
2558  b59b 1e08          	ldw	x,(OFST+1,sp)
2559  b59d c60010        	ld	a,_OctetArray
2560  b5a0 f7            	ld	(x),a
2561                     ; 1208             pBuffer++;
2563  b5a1 5c            	incw	x
2564  b5a2 1f08          	ldw	(OFST+1,sp),x
2565                     ; 1209             nBytes++;
2567  b5a4 1e05          	ldw	x,(OFST-2,sp)
2568  b5a6 5c            	incw	x
2569  b5a7 1f05          	ldw	(OFST-2,sp),x
2571                     ; 1211             *pBuffer = (uint8_t)OctetArray[1];
2573  b5a9 1e08          	ldw	x,(OFST+1,sp)
2574  b5ab c60011        	ld	a,_OctetArray+1
2575  b5ae f7            	ld	(x),a
2576                     ; 1212             pBuffer++;
2578  b5af 5c            	incw	x
2579  b5b0 1f08          	ldw	(OFST+1,sp),x
2580                     ; 1213             nBytes++;
2582  b5b2 1e05          	ldw	x,(OFST-2,sp)
2583  b5b4 5c            	incw	x
2584  b5b5 1f05          	ldw	(OFST-2,sp),x
2586                     ; 1215             *pBuffer = (uint8_t)OctetArray[2];
2588  b5b7 c60012        	ld	a,_OctetArray+2
2589  b5ba 1e08          	ldw	x,(OFST+1,sp)
2590                     ; 1216             pBuffer++;
2591                     ; 1217             nBytes++;
2592  b5bc ccb68b        	jp	LC010
2593  b5bf               L566:
2594                     ; 1221         else if (nParsedMode == 'c') {
2596  b5bf a163          	cp	a,#99
2597  b5c1 2637          	jrne	L776
2598                     ; 1227           emb_itoa(ex_stored_port, OctetArray, 10, 5);
2600  b5c3 4b05          	push	#5
2601  b5c5 4b0a          	push	#10
2602  b5c7 ae0010        	ldw	x,#_OctetArray
2603  b5ca 89            	pushw	x
2604  b5cb ce0055        	ldw	x,_ex_stored_port
2605  b5ce cde0f2        	call	c_uitolx
2607  b5d1 be02          	ldw	x,c_lreg+2
2608  b5d3 89            	pushw	x
2609  b5d4 be00          	ldw	x,c_lreg
2610  b5d6 89            	pushw	x
2611  b5d7 cdb0f5        	call	_emb_itoa
2613  b5da 5b08          	addw	sp,#8
2614                     ; 1229 	  for(i=0; i<5; i++) {
2616  b5dc 4f            	clr	a
2617  b5dd 6b07          	ld	(OFST+0,sp),a
2619  b5df               L107:
2620                     ; 1230             *pBuffer = (uint8_t)OctetArray[i];
2622  b5df 5f            	clrw	x
2623  b5e0 97            	ld	xl,a
2624  b5e1 d60010        	ld	a,(_OctetArray,x)
2625  b5e4 1e08          	ldw	x,(OFST+1,sp)
2626  b5e6 f7            	ld	(x),a
2627                     ; 1231             pBuffer++;
2629  b5e7 5c            	incw	x
2630  b5e8 1f08          	ldw	(OFST+1,sp),x
2631                     ; 1232             nBytes++;
2633  b5ea 1e05          	ldw	x,(OFST-2,sp)
2634  b5ec 5c            	incw	x
2635  b5ed 1f05          	ldw	(OFST-2,sp),x
2637                     ; 1229 	  for(i=0; i<5; i++) {
2639  b5ef 0c07          	inc	(OFST+0,sp)
2643  b5f1 7b07          	ld	a,(OFST+0,sp)
2644  b5f3 a105          	cp	a,#5
2645  b5f5 25e8          	jrult	L107
2647  b5f7 ccbb61        	jra	L306
2648  b5fa               L776:
2649                     ; 1236         else if (nParsedMode == 'd') {
2651  b5fa a164          	cp	a,#100
2652  b5fc 2703ccb68f    	jrne	L117
2653                     ; 1241 	  if (nParsedNum == 0)      emb_itoa(uip_ethaddr1, OctetArray, 16, 2);
2655  b601 7b04          	ld	a,(OFST-3,sp)
2656  b603 260d          	jrne	L317
2659  b605 4b02          	push	#2
2660  b607 4b10          	push	#16
2661  b609 ae0010        	ldw	x,#_OctetArray
2662  b60c 89            	pushw	x
2663  b60d c60024        	ld	a,_uip_ethaddr1
2666  b610 2053          	jp	LC004
2667  b612               L317:
2668                     ; 1242 	  else if (nParsedNum == 1) emb_itoa(uip_ethaddr2, OctetArray, 16, 2);
2670  b612 a101          	cp	a,#1
2671  b614 260d          	jrne	L717
2674  b616 4b02          	push	#2
2675  b618 4b10          	push	#16
2676  b61a ae0010        	ldw	x,#_OctetArray
2677  b61d 89            	pushw	x
2678  b61e c60025        	ld	a,_uip_ethaddr2
2681  b621 2042          	jp	LC004
2682  b623               L717:
2683                     ; 1243 	  else if (nParsedNum == 2) emb_itoa(uip_ethaddr3, OctetArray, 16, 2);
2685  b623 a102          	cp	a,#2
2686  b625 260d          	jrne	L327
2689  b627 4b02          	push	#2
2690  b629 4b10          	push	#16
2691  b62b ae0010        	ldw	x,#_OctetArray
2692  b62e 89            	pushw	x
2693  b62f c60026        	ld	a,_uip_ethaddr3
2696  b632 2031          	jp	LC004
2697  b634               L327:
2698                     ; 1244 	  else if (nParsedNum == 3) emb_itoa(uip_ethaddr4, OctetArray, 16, 2);
2700  b634 a103          	cp	a,#3
2701  b636 260d          	jrne	L727
2704  b638 4b02          	push	#2
2705  b63a 4b10          	push	#16
2706  b63c ae0010        	ldw	x,#_OctetArray
2707  b63f 89            	pushw	x
2708  b640 c60027        	ld	a,_uip_ethaddr4
2711  b643 2020          	jp	LC004
2712  b645               L727:
2713                     ; 1245 	  else if (nParsedNum == 4) emb_itoa(uip_ethaddr5, OctetArray, 16, 2);
2715  b645 a104          	cp	a,#4
2716  b647 260d          	jrne	L337
2719  b649 4b02          	push	#2
2720  b64b 4b10          	push	#16
2721  b64d ae0010        	ldw	x,#_OctetArray
2722  b650 89            	pushw	x
2723  b651 c60028        	ld	a,_uip_ethaddr5
2726  b654 200f          	jp	LC004
2727  b656               L337:
2728                     ; 1246 	  else if (nParsedNum == 5) emb_itoa(uip_ethaddr6, OctetArray, 16, 2);
2730  b656 a105          	cp	a,#5
2731  b658 261e          	jrne	L517
2734  b65a 4b02          	push	#2
2735  b65c 4b10          	push	#16
2736  b65e ae0010        	ldw	x,#_OctetArray
2737  b661 89            	pushw	x
2738  b662 c60029        	ld	a,_uip_ethaddr6
2740  b665               LC004:
2741  b665 b703          	ld	c_lreg+3,a
2742  b667 3f02          	clr	c_lreg+2
2743  b669 3f01          	clr	c_lreg+1
2744  b66b 3f00          	clr	c_lreg
2745  b66d be02          	ldw	x,c_lreg+2
2746  b66f 89            	pushw	x
2747  b670 be00          	ldw	x,c_lreg
2748  b672 89            	pushw	x
2749  b673 cdb0f5        	call	_emb_itoa
2750  b676 5b08          	addw	sp,#8
2751  b678               L517:
2752                     ; 1248           *pBuffer = OctetArray[0];
2754  b678 1e08          	ldw	x,(OFST+1,sp)
2755  b67a c60010        	ld	a,_OctetArray
2756  b67d f7            	ld	(x),a
2757                     ; 1249           pBuffer++;
2759  b67e 5c            	incw	x
2760  b67f 1f08          	ldw	(OFST+1,sp),x
2761                     ; 1250           nBytes++;
2763  b681 1e05          	ldw	x,(OFST-2,sp)
2764  b683 5c            	incw	x
2765  b684 1f05          	ldw	(OFST-2,sp),x
2767                     ; 1252           *pBuffer = OctetArray[1];
2769  b686 c60011        	ld	a,_OctetArray+1
2770  b689 1e08          	ldw	x,(OFST+1,sp)
2771  b68b               LC010:
2772  b68b f7            	ld	(x),a
2773                     ; 1253           pBuffer++;
2774                     ; 1254           nBytes++;
2776  b68c ccbb59        	jp	LC009
2777  b68f               L117:
2778                     ; 1259         else if (nParsedMode == 'e') {
2780  b68f a165          	cp	a,#101
2781  b691 2703ccb86a    	jrne	L347
2782                     ; 1286           switch (nParsedNum)
2784  b696 7b04          	ld	a,(OFST-3,sp)
2786                     ; 1311 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
2787  b698 a116          	cp	a,#22
2788  b69a 2503ccb82b    	jruge	L725
2789  b69f 5f            	clrw	x
2790  b6a0 97            	ld	xl,a
2791  b6a1 58            	sllw	x
2792  b6a2 deac4f        	ldw	x,(L422,x)
2793  b6a5 fc            	jp	(x)
2794  b6a6               L354:
2795                     ; 1289 	    case 0:  emb_itoa(uip_stat.ip.drop,      OctetArray, 10, 10); break;
2797  b6a6 4b0a          	push	#10
2798  b6a8 4b0a          	push	#10
2799  b6aa ae0010        	ldw	x,#_OctetArray
2800  b6ad 89            	pushw	x
2801  b6ae ce008b        	ldw	x,_uip_stat+2
2802  b6b1 89            	pushw	x
2803  b6b2 ce0089        	ldw	x,_uip_stat
2807  b6b5 ccb835        	jra	L747
2808  b6b8               L554:
2809                     ; 1290 	    case 1:  emb_itoa(uip_stat.ip.recv,      OctetArray, 10, 10); break;
2811  b6b8 4b0a          	push	#10
2812  b6ba 4b0a          	push	#10
2813  b6bc ae0010        	ldw	x,#_OctetArray
2814  b6bf 89            	pushw	x
2815  b6c0 ce008f        	ldw	x,_uip_stat+6
2816  b6c3 89            	pushw	x
2817  b6c4 ce008d        	ldw	x,_uip_stat+4
2821  b6c7 ccb835        	jra	L747
2822  b6ca               L754:
2823                     ; 1291 	    case 2:  emb_itoa(uip_stat.ip.sent,      OctetArray, 10, 10); break;
2825  b6ca 4b0a          	push	#10
2826  b6cc 4b0a          	push	#10
2827  b6ce ae0010        	ldw	x,#_OctetArray
2828  b6d1 89            	pushw	x
2829  b6d2 ce0093        	ldw	x,_uip_stat+10
2830  b6d5 89            	pushw	x
2831  b6d6 ce0091        	ldw	x,_uip_stat+8
2835  b6d9 ccb835        	jra	L747
2836  b6dc               L164:
2837                     ; 1292 	    case 3:  emb_itoa(uip_stat.ip.vhlerr,    OctetArray, 10, 10); break;
2839  b6dc 4b0a          	push	#10
2840  b6de 4b0a          	push	#10
2841  b6e0 ae0010        	ldw	x,#_OctetArray
2842  b6e3 89            	pushw	x
2843  b6e4 ce0097        	ldw	x,_uip_stat+14
2844  b6e7 89            	pushw	x
2845  b6e8 ce0095        	ldw	x,_uip_stat+12
2849  b6eb ccb835        	jra	L747
2850  b6ee               L364:
2851                     ; 1293 	    case 4:  emb_itoa(uip_stat.ip.hblenerr,  OctetArray, 10, 10); break;
2853  b6ee 4b0a          	push	#10
2854  b6f0 4b0a          	push	#10
2855  b6f2 ae0010        	ldw	x,#_OctetArray
2856  b6f5 89            	pushw	x
2857  b6f6 ce009b        	ldw	x,_uip_stat+18
2858  b6f9 89            	pushw	x
2859  b6fa ce0099        	ldw	x,_uip_stat+16
2863  b6fd ccb835        	jra	L747
2864  b700               L564:
2865                     ; 1294 	    case 5:  emb_itoa(uip_stat.ip.lblenerr,  OctetArray, 10, 10); break;
2867  b700 4b0a          	push	#10
2868  b702 4b0a          	push	#10
2869  b704 ae0010        	ldw	x,#_OctetArray
2870  b707 89            	pushw	x
2871  b708 ce009f        	ldw	x,_uip_stat+22
2872  b70b 89            	pushw	x
2873  b70c ce009d        	ldw	x,_uip_stat+20
2877  b70f ccb835        	jra	L747
2878  b712               L764:
2879                     ; 1295 	    case 6:  emb_itoa(uip_stat.ip.fragerr,   OctetArray, 10, 10); break;
2881  b712 4b0a          	push	#10
2882  b714 4b0a          	push	#10
2883  b716 ae0010        	ldw	x,#_OctetArray
2884  b719 89            	pushw	x
2885  b71a ce00a3        	ldw	x,_uip_stat+26
2886  b71d 89            	pushw	x
2887  b71e ce00a1        	ldw	x,_uip_stat+24
2891  b721 ccb835        	jra	L747
2892  b724               L174:
2893                     ; 1296 	    case 7:  emb_itoa(uip_stat.ip.chkerr,    OctetArray, 10, 10); break;
2895  b724 4b0a          	push	#10
2896  b726 4b0a          	push	#10
2897  b728 ae0010        	ldw	x,#_OctetArray
2898  b72b 89            	pushw	x
2899  b72c ce00a7        	ldw	x,_uip_stat+30
2900  b72f 89            	pushw	x
2901  b730 ce00a5        	ldw	x,_uip_stat+28
2905  b733 ccb835        	jra	L747
2906  b736               L374:
2907                     ; 1297 	    case 8:  emb_itoa(uip_stat.ip.protoerr,  OctetArray, 10, 10); break;
2909  b736 4b0a          	push	#10
2910  b738 4b0a          	push	#10
2911  b73a ae0010        	ldw	x,#_OctetArray
2912  b73d 89            	pushw	x
2913  b73e ce00ab        	ldw	x,_uip_stat+34
2914  b741 89            	pushw	x
2915  b742 ce00a9        	ldw	x,_uip_stat+32
2919  b745 ccb835        	jra	L747
2920  b748               L574:
2921                     ; 1298 	    case 9:  emb_itoa(uip_stat.icmp.drop,    OctetArray, 10, 10); break;
2923  b748 4b0a          	push	#10
2924  b74a 4b0a          	push	#10
2925  b74c ae0010        	ldw	x,#_OctetArray
2926  b74f 89            	pushw	x
2927  b750 ce00af        	ldw	x,_uip_stat+38
2928  b753 89            	pushw	x
2929  b754 ce00ad        	ldw	x,_uip_stat+36
2933  b757 ccb835        	jra	L747
2934  b75a               L774:
2935                     ; 1299 	    case 10: emb_itoa(uip_stat.icmp.recv,    OctetArray, 10, 10); break;
2937  b75a 4b0a          	push	#10
2938  b75c 4b0a          	push	#10
2939  b75e ae0010        	ldw	x,#_OctetArray
2940  b761 89            	pushw	x
2941  b762 ce00b3        	ldw	x,_uip_stat+42
2942  b765 89            	pushw	x
2943  b766 ce00b1        	ldw	x,_uip_stat+40
2947  b769 ccb835        	jra	L747
2948  b76c               L105:
2949                     ; 1300 	    case 11: emb_itoa(uip_stat.icmp.sent,    OctetArray, 10, 10); break;
2951  b76c 4b0a          	push	#10
2952  b76e 4b0a          	push	#10
2953  b770 ae0010        	ldw	x,#_OctetArray
2954  b773 89            	pushw	x
2955  b774 ce00b7        	ldw	x,_uip_stat+46
2956  b777 89            	pushw	x
2957  b778 ce00b5        	ldw	x,_uip_stat+44
2961  b77b ccb835        	jra	L747
2962  b77e               L305:
2963                     ; 1301 	    case 12: emb_itoa(uip_stat.icmp.typeerr, OctetArray, 10, 10); break;
2965  b77e 4b0a          	push	#10
2966  b780 4b0a          	push	#10
2967  b782 ae0010        	ldw	x,#_OctetArray
2968  b785 89            	pushw	x
2969  b786 ce00bb        	ldw	x,_uip_stat+50
2970  b789 89            	pushw	x
2971  b78a ce00b9        	ldw	x,_uip_stat+48
2975  b78d ccb835        	jra	L747
2976  b790               L505:
2977                     ; 1302 	    case 13: emb_itoa(uip_stat.tcp.drop,     OctetArray, 10, 10); break;
2979  b790 4b0a          	push	#10
2980  b792 4b0a          	push	#10
2981  b794 ae0010        	ldw	x,#_OctetArray
2982  b797 89            	pushw	x
2983  b798 ce00bf        	ldw	x,_uip_stat+54
2984  b79b 89            	pushw	x
2985  b79c ce00bd        	ldw	x,_uip_stat+52
2989  b79f ccb835        	jra	L747
2990  b7a2               L705:
2991                     ; 1303 	    case 14: emb_itoa(uip_stat.tcp.recv,     OctetArray, 10, 10); break;
2993  b7a2 4b0a          	push	#10
2994  b7a4 4b0a          	push	#10
2995  b7a6 ae0010        	ldw	x,#_OctetArray
2996  b7a9 89            	pushw	x
2997  b7aa ce00c3        	ldw	x,_uip_stat+58
2998  b7ad 89            	pushw	x
2999  b7ae ce00c1        	ldw	x,_uip_stat+56
3003  b7b1 ccb835        	jra	L747
3004  b7b4               L115:
3005                     ; 1304 	    case 15: emb_itoa(uip_stat.tcp.sent,     OctetArray, 10, 10); break;
3007  b7b4 4b0a          	push	#10
3008  b7b6 4b0a          	push	#10
3009  b7b8 ae0010        	ldw	x,#_OctetArray
3010  b7bb 89            	pushw	x
3011  b7bc ce00c7        	ldw	x,_uip_stat+62
3012  b7bf 89            	pushw	x
3013  b7c0 ce00c5        	ldw	x,_uip_stat+60
3017  b7c3 2070          	jra	L747
3018  b7c5               L315:
3019                     ; 1305 	    case 16: emb_itoa(uip_stat.tcp.chkerr,   OctetArray, 10, 10); break;
3021  b7c5 4b0a          	push	#10
3022  b7c7 4b0a          	push	#10
3023  b7c9 ae0010        	ldw	x,#_OctetArray
3024  b7cc 89            	pushw	x
3025  b7cd ce00cb        	ldw	x,_uip_stat+66
3026  b7d0 89            	pushw	x
3027  b7d1 ce00c9        	ldw	x,_uip_stat+64
3031  b7d4 205f          	jra	L747
3032  b7d6               L515:
3033                     ; 1306 	    case 17: emb_itoa(uip_stat.tcp.ackerr,   OctetArray, 10, 10); break;
3035  b7d6 4b0a          	push	#10
3036  b7d8 4b0a          	push	#10
3037  b7da ae0010        	ldw	x,#_OctetArray
3038  b7dd 89            	pushw	x
3039  b7de ce00cf        	ldw	x,_uip_stat+70
3040  b7e1 89            	pushw	x
3041  b7e2 ce00cd        	ldw	x,_uip_stat+68
3045  b7e5 204e          	jra	L747
3046  b7e7               L715:
3047                     ; 1307 	    case 18: emb_itoa(uip_stat.tcp.rst,      OctetArray, 10, 10); break;
3049  b7e7 4b0a          	push	#10
3050  b7e9 4b0a          	push	#10
3051  b7eb ae0010        	ldw	x,#_OctetArray
3052  b7ee 89            	pushw	x
3053  b7ef ce00d3        	ldw	x,_uip_stat+74
3054  b7f2 89            	pushw	x
3055  b7f3 ce00d1        	ldw	x,_uip_stat+72
3059  b7f6 203d          	jra	L747
3060  b7f8               L125:
3061                     ; 1308 	    case 19: emb_itoa(uip_stat.tcp.rexmit,   OctetArray, 10, 10); break;
3063  b7f8 4b0a          	push	#10
3064  b7fa 4b0a          	push	#10
3065  b7fc ae0010        	ldw	x,#_OctetArray
3066  b7ff 89            	pushw	x
3067  b800 ce00d7        	ldw	x,_uip_stat+78
3068  b803 89            	pushw	x
3069  b804 ce00d5        	ldw	x,_uip_stat+76
3073  b807 202c          	jra	L747
3074  b809               L325:
3075                     ; 1309 	    case 20: emb_itoa(uip_stat.tcp.syndrop,  OctetArray, 10, 10); break;
3077  b809 4b0a          	push	#10
3078  b80b 4b0a          	push	#10
3079  b80d ae0010        	ldw	x,#_OctetArray
3080  b810 89            	pushw	x
3081  b811 ce00db        	ldw	x,_uip_stat+82
3082  b814 89            	pushw	x
3083  b815 ce00d9        	ldw	x,_uip_stat+80
3087  b818 201b          	jra	L747
3088  b81a               L525:
3089                     ; 1310 	    case 21: emb_itoa(uip_stat.tcp.synrst,   OctetArray, 10, 10); break;
3091  b81a 4b0a          	push	#10
3092  b81c 4b0a          	push	#10
3093  b81e ae0010        	ldw	x,#_OctetArray
3094  b821 89            	pushw	x
3095  b822 ce00df        	ldw	x,_uip_stat+86
3096  b825 89            	pushw	x
3097  b826 ce00dd        	ldw	x,_uip_stat+84
3101  b829 200a          	jra	L747
3102  b82b               L725:
3103                     ; 1311 	    default: emb_itoa(0,                     OctetArray, 10, 10); break;
3105  b82b 4b0a          	push	#10
3106  b82d 4b0a          	push	#10
3107  b82f ae0010        	ldw	x,#_OctetArray
3108  b832 89            	pushw	x
3109  b833 5f            	clrw	x
3110  b834 89            	pushw	x
3114  b835               L747:
3115  b835 89            	pushw	x
3116  b836 cdb0f5        	call	_emb_itoa
3117  b839 5b08          	addw	sp,#8
3118                     ; 1314 	  for (i=0; i<10; i++) {
3120  b83b 4f            	clr	a
3121  b83c 6b07          	ld	(OFST+0,sp),a
3123  b83e               L157:
3124                     ; 1315             *pBuffer = OctetArray[i];
3126  b83e 5f            	clrw	x
3127  b83f 97            	ld	xl,a
3128  b840 d60010        	ld	a,(_OctetArray,x)
3129  b843 1e08          	ldw	x,(OFST+1,sp)
3130  b845 f7            	ld	(x),a
3131                     ; 1316             pBuffer++;
3133  b846 5c            	incw	x
3134  b847 1f08          	ldw	(OFST+1,sp),x
3135                     ; 1317             nBytes++;
3137  b849 1e05          	ldw	x,(OFST-2,sp)
3138  b84b 5c            	incw	x
3139  b84c 1f05          	ldw	(OFST-2,sp),x
3141                     ; 1314 	  for (i=0; i<10; i++) {
3143  b84e 0c07          	inc	(OFST+0,sp)
3147  b850 7b07          	ld	a,(OFST+0,sp)
3148  b852 a10a          	cp	a,#10
3149  b854 25e8          	jrult	L157
3150                     ; 1322           *ppData = *ppData + 10;
3152  b856 1e0c          	ldw	x,(OFST+5,sp)
3153  b858 9093          	ldw	y,x
3154  b85a fe            	ldw	x,(x)
3155  b85b 1c000a        	addw	x,#10
3156  b85e 90ff          	ldw	(y),x
3157                     ; 1323           *pDataLeft = *pDataLeft - 10;
3159  b860 1e0e          	ldw	x,(OFST+7,sp)
3160  b862 9093          	ldw	y,x
3161  b864 fe            	ldw	x,(x)
3162  b865 1d000a        	subw	x,#10
3164  b868 2031          	jp	LC011
3165  b86a               L347:
3166                     ; 1328         else if (nParsedMode == 'f') {
3168  b86a a166          	cp	a,#102
3169  b86c 2632          	jrne	L167
3170                     ; 1331 	  for(i=0; i<16; i++) {
3172  b86e 4f            	clr	a
3173  b86f 6b07          	ld	(OFST+0,sp),a
3175  b871               L367:
3176                     ; 1332 	    *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
3178  b871 cdc2c4        	call	_GpioGetPin
3180  b874 1e08          	ldw	x,(OFST+1,sp)
3181  b876 ab30          	add	a,#48
3182  b878 f7            	ld	(x),a
3183                     ; 1333             pBuffer++;
3185  b879 5c            	incw	x
3186  b87a 1f08          	ldw	(OFST+1,sp),x
3187                     ; 1334             nBytes++;
3189  b87c 1e05          	ldw	x,(OFST-2,sp)
3190  b87e 5c            	incw	x
3191  b87f 1f05          	ldw	(OFST-2,sp),x
3193                     ; 1331 	  for(i=0; i<16; i++) {
3195  b881 0c07          	inc	(OFST+0,sp)
3199  b883 7b07          	ld	a,(OFST+0,sp)
3200  b885 a110          	cp	a,#16
3201  b887 25e8          	jrult	L367
3202                     ; 1338           *ppData = *ppData + 16;
3204  b889 1e0c          	ldw	x,(OFST+5,sp)
3205  b88b 9093          	ldw	y,x
3206  b88d fe            	ldw	x,(x)
3207  b88e 1c0010        	addw	x,#16
3208  b891 90ff          	ldw	(y),x
3209                     ; 1339           *pDataLeft = *pDataLeft - 16;
3211  b893 1e0e          	ldw	x,(OFST+7,sp)
3212  b895 9093          	ldw	y,x
3213  b897 fe            	ldw	x,(x)
3214  b898 1d0010        	subw	x,#16
3215  b89b               LC011:
3216  b89b 90ff          	ldw	(y),x
3218  b89d ccbb61        	jra	L306
3219  b8a0               L167:
3220                     ; 1342         else if (nParsedMode == 'g') {
3222  b8a0 a167          	cp	a,#103
3223  b8a2 2623          	jrne	L377
3224                     ; 1346 	  if (invert_output == 1) {  // Insert 'checked'
3226  b8a4 c60052        	ld	a,_invert_output
3227  b8a7 4a            	dec	a
3228  b8a8 26f3          	jrne	L306
3229                     ; 1347             for(i=0; i<7; i++) {
3231  b8aa 6b07          	ld	(OFST+0,sp),a
3233  b8ac               L777:
3234                     ; 1348               *pBuffer = checked[i];
3236  b8ac 5f            	clrw	x
3237  b8ad 97            	ld	xl,a
3238  b8ae d68080        	ld	a,(L31_checked,x)
3239  b8b1 1e08          	ldw	x,(OFST+1,sp)
3240  b8b3 f7            	ld	(x),a
3241                     ; 1349               pBuffer++;
3243  b8b4 5c            	incw	x
3244  b8b5 1f08          	ldw	(OFST+1,sp),x
3245                     ; 1350               nBytes++;
3247  b8b7 1e05          	ldw	x,(OFST-2,sp)
3248  b8b9 5c            	incw	x
3249  b8ba 1f05          	ldw	(OFST-2,sp),x
3251                     ; 1347             for(i=0; i<7; i++) {
3253  b8bc 0c07          	inc	(OFST+0,sp)
3257  b8be 7b07          	ld	a,(OFST+0,sp)
3258  b8c0 a107          	cp	a,#7
3259  b8c2 25e8          	jrult	L777
3260  b8c4 ccbb61        	jra	L306
3261  b8c7               L377:
3262                     ; 1355         else if (nParsedMode == 'h') {
3264  b8c7 a168          	cp	a,#104
3265  b8c9 2622          	jrne	L7001
3266                     ; 1360 	  if (invert_output == 0) {  // Insert 'checked'
3268  b8cb c60052        	ld	a,_invert_output
3269  b8ce 26f4          	jrne	L306
3270                     ; 1361             for(i=0; i<7; i++) {
3272  b8d0 6b07          	ld	(OFST+0,sp),a
3274  b8d2               L3101:
3275                     ; 1362               *pBuffer = checked[i];
3277  b8d2 5f            	clrw	x
3278  b8d3 97            	ld	xl,a
3279  b8d4 d68080        	ld	a,(L31_checked,x)
3280  b8d7 1e08          	ldw	x,(OFST+1,sp)
3281  b8d9 f7            	ld	(x),a
3282                     ; 1363               pBuffer++;
3284  b8da 5c            	incw	x
3285  b8db 1f08          	ldw	(OFST+1,sp),x
3286                     ; 1364               nBytes++;
3288  b8dd 1e05          	ldw	x,(OFST-2,sp)
3289  b8df 5c            	incw	x
3290  b8e0 1f05          	ldw	(OFST-2,sp),x
3292                     ; 1361             for(i=0; i<7; i++) {
3294  b8e2 0c07          	inc	(OFST+0,sp)
3298  b8e4 7b07          	ld	a,(OFST+0,sp)
3299  b8e6 a107          	cp	a,#7
3300  b8e8 25e8          	jrult	L3101
3301  b8ea ccbb61        	jra	L306
3302  b8ed               L7001:
3303                     ; 1369         else if (nParsedMode == 'x') {
3305  b8ed a178          	cp	a,#120
3306  b8ef 26f9          	jrne	L306
3307                     ; 1379           *pBuffer = 'h'; pBuffer++; nBytes++;
3309  b8f1 1e08          	ldw	x,(OFST+1,sp)
3310  b8f3 a668          	ld	a,#104
3311  b8f5 f7            	ld	(x),a
3314  b8f6 5c            	incw	x
3315  b8f7 1f08          	ldw	(OFST+1,sp),x
3318  b8f9 1e05          	ldw	x,(OFST-2,sp)
3319  b8fb 5c            	incw	x
3320  b8fc 1f05          	ldw	(OFST-2,sp),x
3322                     ; 1380           *pBuffer = 't'; pBuffer++; nBytes++;
3324  b8fe 1e08          	ldw	x,(OFST+1,sp)
3325  b900 a674          	ld	a,#116
3326  b902 f7            	ld	(x),a
3329  b903 5c            	incw	x
3330  b904 1f08          	ldw	(OFST+1,sp),x
3333  b906 1e05          	ldw	x,(OFST-2,sp)
3334  b908 5c            	incw	x
3335  b909 1f05          	ldw	(OFST-2,sp),x
3337                     ; 1381           *pBuffer = 't'; pBuffer++; nBytes++;
3339  b90b 1e08          	ldw	x,(OFST+1,sp)
3340  b90d f7            	ld	(x),a
3343  b90e 5c            	incw	x
3344  b90f 1f08          	ldw	(OFST+1,sp),x
3347  b911 1e05          	ldw	x,(OFST-2,sp)
3348  b913 5c            	incw	x
3349  b914 1f05          	ldw	(OFST-2,sp),x
3351                     ; 1382           *pBuffer = 'p'; pBuffer++; nBytes++;
3353  b916 1e08          	ldw	x,(OFST+1,sp)
3354  b918 a670          	ld	a,#112
3355  b91a f7            	ld	(x),a
3358  b91b 5c            	incw	x
3359  b91c 1f08          	ldw	(OFST+1,sp),x
3362  b91e 1e05          	ldw	x,(OFST-2,sp)
3363  b920 5c            	incw	x
3364  b921 1f05          	ldw	(OFST-2,sp),x
3366                     ; 1383           *pBuffer = ':'; pBuffer++; nBytes++;
3368  b923 1e08          	ldw	x,(OFST+1,sp)
3369  b925 a63a          	ld	a,#58
3370  b927 f7            	ld	(x),a
3373  b928 5c            	incw	x
3374  b929 1f08          	ldw	(OFST+1,sp),x
3377  b92b 1e05          	ldw	x,(OFST-2,sp)
3378  b92d 5c            	incw	x
3379  b92e 1f05          	ldw	(OFST-2,sp),x
3381                     ; 1384           *pBuffer = '/'; pBuffer++; nBytes++;
3383  b930 1e08          	ldw	x,(OFST+1,sp)
3384  b932 a62f          	ld	a,#47
3385  b934 f7            	ld	(x),a
3388  b935 5c            	incw	x
3389  b936 1f08          	ldw	(OFST+1,sp),x
3392  b938 1e05          	ldw	x,(OFST-2,sp)
3393  b93a 5c            	incw	x
3394  b93b 1f05          	ldw	(OFST-2,sp),x
3396                     ; 1385           *pBuffer = '/'; pBuffer++; nBytes++;
3398  b93d 1e08          	ldw	x,(OFST+1,sp)
3399  b93f f7            	ld	(x),a
3402  b940 5c            	incw	x
3403  b941 1f08          	ldw	(OFST+1,sp),x
3406  b943 1e05          	ldw	x,(OFST-2,sp)
3407  b945 5c            	incw	x
3408  b946 1f05          	ldw	(OFST-2,sp),x
3410                     ; 1389           emb_itoa(ex_stored_hostaddr4,  OctetArray, 10, 3);
3412  b948 4b03          	push	#3
3413  b94a 4b0a          	push	#10
3414  b94c ae0010        	ldw	x,#_OctetArray
3415  b94f 89            	pushw	x
3416  b950 5500620003    	mov	c_lreg+3,_ex_stored_hostaddr4
3417  b955 3f02          	clr	c_lreg+2
3418  b957 3f01          	clr	c_lreg+1
3419  b959 3f00          	clr	c_lreg
3420  b95b be02          	ldw	x,c_lreg+2
3421  b95d 89            	pushw	x
3422  b95e be00          	ldw	x,c_lreg
3423  b960 89            	pushw	x
3424  b961 cdb0f5        	call	_emb_itoa
3426  b964 5b08          	addw	sp,#8
3427                     ; 1391 	  if (OctetArray[0] != '0') {
3429  b966 c60010        	ld	a,_OctetArray
3430  b969 a130          	cp	a,#48
3431  b96b 270b          	jreq	L5201
3432                     ; 1392 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3434  b96d 1e08          	ldw	x,(OFST+1,sp)
3435  b96f f7            	ld	(x),a
3438  b970 5c            	incw	x
3439  b971 1f08          	ldw	(OFST+1,sp),x
3442  b973 1e05          	ldw	x,(OFST-2,sp)
3443  b975 5c            	incw	x
3444  b976 1f05          	ldw	(OFST-2,sp),x
3446  b978               L5201:
3447                     ; 1394 	  if (OctetArray[0] != '0') {
3449  b978 a130          	cp	a,#48
3450  b97a 2707          	jreq	L7201
3451                     ; 1395             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3453  b97c 1e08          	ldw	x,(OFST+1,sp)
3454  b97e c60011        	ld	a,_OctetArray+1
3458  b981 2009          	jp	LC005
3459  b983               L7201:
3460                     ; 1397 	  else if (OctetArray[1] != '0') {
3462  b983 c60011        	ld	a,_OctetArray+1
3463  b986 a130          	cp	a,#48
3464  b988 270b          	jreq	L1301
3465                     ; 1398             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3467  b98a 1e08          	ldw	x,(OFST+1,sp)
3472  b98c               LC005:
3473  b98c f7            	ld	(x),a
3475  b98d 5c            	incw	x
3476  b98e 1f08          	ldw	(OFST+1,sp),x
3478  b990 1e05          	ldw	x,(OFST-2,sp)
3479  b992 5c            	incw	x
3480  b993 1f05          	ldw	(OFST-2,sp),x
3482  b995               L1301:
3483                     ; 1400           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3485  b995 1e08          	ldw	x,(OFST+1,sp)
3486  b997 c60012        	ld	a,_OctetArray+2
3487  b99a f7            	ld	(x),a
3490  b99b 5c            	incw	x
3491  b99c 1f08          	ldw	(OFST+1,sp),x
3494  b99e 1e05          	ldw	x,(OFST-2,sp)
3495  b9a0 5c            	incw	x
3496  b9a1 1f05          	ldw	(OFST-2,sp),x
3498                     ; 1402           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3500  b9a3 1e08          	ldw	x,(OFST+1,sp)
3501  b9a5 a62e          	ld	a,#46
3502  b9a7 f7            	ld	(x),a
3505  b9a8 5c            	incw	x
3506  b9a9 1f08          	ldw	(OFST+1,sp),x
3509  b9ab 1e05          	ldw	x,(OFST-2,sp)
3510  b9ad 5c            	incw	x
3511  b9ae 1f05          	ldw	(OFST-2,sp),x
3513                     ; 1405           emb_itoa(ex_stored_hostaddr3,  OctetArray, 10, 3);
3515  b9b0 4b03          	push	#3
3516  b9b2 4b0a          	push	#10
3517  b9b4 ae0010        	ldw	x,#_OctetArray
3518  b9b7 89            	pushw	x
3519  b9b8 5500610003    	mov	c_lreg+3,_ex_stored_hostaddr3
3520  b9bd 3f02          	clr	c_lreg+2
3521  b9bf 3f01          	clr	c_lreg+1
3522  b9c1 3f00          	clr	c_lreg
3523  b9c3 be02          	ldw	x,c_lreg+2
3524  b9c5 89            	pushw	x
3525  b9c6 be00          	ldw	x,c_lreg
3526  b9c8 89            	pushw	x
3527  b9c9 cdb0f5        	call	_emb_itoa
3529  b9cc 5b08          	addw	sp,#8
3530                     ; 1407 	  if (OctetArray[0] != '0') {
3532  b9ce c60010        	ld	a,_OctetArray
3533  b9d1 a130          	cp	a,#48
3534  b9d3 270b          	jreq	L5301
3535                     ; 1408 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3537  b9d5 1e08          	ldw	x,(OFST+1,sp)
3538  b9d7 f7            	ld	(x),a
3541  b9d8 5c            	incw	x
3542  b9d9 1f08          	ldw	(OFST+1,sp),x
3545  b9db 1e05          	ldw	x,(OFST-2,sp)
3546  b9dd 5c            	incw	x
3547  b9de 1f05          	ldw	(OFST-2,sp),x
3549  b9e0               L5301:
3550                     ; 1410 	  if (OctetArray[0] != '0') {
3552  b9e0 a130          	cp	a,#48
3553  b9e2 2707          	jreq	L7301
3554                     ; 1411             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3556  b9e4 1e08          	ldw	x,(OFST+1,sp)
3557  b9e6 c60011        	ld	a,_OctetArray+1
3561  b9e9 2009          	jp	LC006
3562  b9eb               L7301:
3563                     ; 1413 	  else if (OctetArray[1] != '0') {
3565  b9eb c60011        	ld	a,_OctetArray+1
3566  b9ee a130          	cp	a,#48
3567  b9f0 270b          	jreq	L1401
3568                     ; 1414             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3570  b9f2 1e08          	ldw	x,(OFST+1,sp)
3575  b9f4               LC006:
3576  b9f4 f7            	ld	(x),a
3578  b9f5 5c            	incw	x
3579  b9f6 1f08          	ldw	(OFST+1,sp),x
3581  b9f8 1e05          	ldw	x,(OFST-2,sp)
3582  b9fa 5c            	incw	x
3583  b9fb 1f05          	ldw	(OFST-2,sp),x
3585  b9fd               L1401:
3586                     ; 1416           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3588  b9fd 1e08          	ldw	x,(OFST+1,sp)
3589  b9ff c60012        	ld	a,_OctetArray+2
3590  ba02 f7            	ld	(x),a
3593  ba03 5c            	incw	x
3594  ba04 1f08          	ldw	(OFST+1,sp),x
3597  ba06 1e05          	ldw	x,(OFST-2,sp)
3598  ba08 5c            	incw	x
3599  ba09 1f05          	ldw	(OFST-2,sp),x
3601                     ; 1418           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3603  ba0b 1e08          	ldw	x,(OFST+1,sp)
3604  ba0d a62e          	ld	a,#46
3605  ba0f f7            	ld	(x),a
3608  ba10 5c            	incw	x
3609  ba11 1f08          	ldw	(OFST+1,sp),x
3612  ba13 1e05          	ldw	x,(OFST-2,sp)
3613  ba15 5c            	incw	x
3614  ba16 1f05          	ldw	(OFST-2,sp),x
3616                     ; 1421           emb_itoa(ex_stored_hostaddr2,  OctetArray, 10, 3);
3618  ba18 4b03          	push	#3
3619  ba1a 4b0a          	push	#10
3620  ba1c ae0010        	ldw	x,#_OctetArray
3621  ba1f 89            	pushw	x
3622  ba20 5500600003    	mov	c_lreg+3,_ex_stored_hostaddr2
3623  ba25 3f02          	clr	c_lreg+2
3624  ba27 3f01          	clr	c_lreg+1
3625  ba29 3f00          	clr	c_lreg
3626  ba2b be02          	ldw	x,c_lreg+2
3627  ba2d 89            	pushw	x
3628  ba2e be00          	ldw	x,c_lreg
3629  ba30 89            	pushw	x
3630  ba31 cdb0f5        	call	_emb_itoa
3632  ba34 5b08          	addw	sp,#8
3633                     ; 1423 	  if (OctetArray[0] != '0') {
3635  ba36 c60010        	ld	a,_OctetArray
3636  ba39 a130          	cp	a,#48
3637  ba3b 270b          	jreq	L5401
3638                     ; 1424 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3640  ba3d 1e08          	ldw	x,(OFST+1,sp)
3641  ba3f f7            	ld	(x),a
3644  ba40 5c            	incw	x
3645  ba41 1f08          	ldw	(OFST+1,sp),x
3648  ba43 1e05          	ldw	x,(OFST-2,sp)
3649  ba45 5c            	incw	x
3650  ba46 1f05          	ldw	(OFST-2,sp),x
3652  ba48               L5401:
3653                     ; 1426 	  if (OctetArray[0] != '0') {
3655  ba48 a130          	cp	a,#48
3656  ba4a 2707          	jreq	L7401
3657                     ; 1427             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3659  ba4c 1e08          	ldw	x,(OFST+1,sp)
3660  ba4e c60011        	ld	a,_OctetArray+1
3664  ba51 2009          	jp	LC007
3665  ba53               L7401:
3666                     ; 1429 	  else if (OctetArray[1] != '0') {
3668  ba53 c60011        	ld	a,_OctetArray+1
3669  ba56 a130          	cp	a,#48
3670  ba58 270b          	jreq	L1501
3671                     ; 1430             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3673  ba5a 1e08          	ldw	x,(OFST+1,sp)
3678  ba5c               LC007:
3679  ba5c f7            	ld	(x),a
3681  ba5d 5c            	incw	x
3682  ba5e 1f08          	ldw	(OFST+1,sp),x
3684  ba60 1e05          	ldw	x,(OFST-2,sp)
3685  ba62 5c            	incw	x
3686  ba63 1f05          	ldw	(OFST-2,sp),x
3688  ba65               L1501:
3689                     ; 1432           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3691  ba65 1e08          	ldw	x,(OFST+1,sp)
3692  ba67 c60012        	ld	a,_OctetArray+2
3693  ba6a f7            	ld	(x),a
3696  ba6b 5c            	incw	x
3697  ba6c 1f08          	ldw	(OFST+1,sp),x
3700  ba6e 1e05          	ldw	x,(OFST-2,sp)
3701  ba70 5c            	incw	x
3702  ba71 1f05          	ldw	(OFST-2,sp),x
3704                     ; 1434           *pBuffer = '.'; pBuffer++; nBytes++; // Output '.'
3706  ba73 1e08          	ldw	x,(OFST+1,sp)
3707  ba75 a62e          	ld	a,#46
3708  ba77 f7            	ld	(x),a
3711  ba78 5c            	incw	x
3712  ba79 1f08          	ldw	(OFST+1,sp),x
3715  ba7b 1e05          	ldw	x,(OFST-2,sp)
3716  ba7d 5c            	incw	x
3717  ba7e 1f05          	ldw	(OFST-2,sp),x
3719                     ; 1437           emb_itoa(ex_stored_hostaddr1,  OctetArray, 10, 3);
3721  ba80 4b03          	push	#3
3722  ba82 4b0a          	push	#10
3723  ba84 ae0010        	ldw	x,#_OctetArray
3724  ba87 89            	pushw	x
3725  ba88 55005f0003    	mov	c_lreg+3,_ex_stored_hostaddr1
3726  ba8d 3f02          	clr	c_lreg+2
3727  ba8f 3f01          	clr	c_lreg+1
3728  ba91 3f00          	clr	c_lreg
3729  ba93 be02          	ldw	x,c_lreg+2
3730  ba95 89            	pushw	x
3731  ba96 be00          	ldw	x,c_lreg
3732  ba98 89            	pushw	x
3733  ba99 cdb0f5        	call	_emb_itoa
3735  ba9c 5b08          	addw	sp,#8
3736                     ; 1439 	  if (OctetArray[0] != '0') {
3738  ba9e c60010        	ld	a,_OctetArray
3739  baa1 a130          	cp	a,#48
3740  baa3 270b          	jreq	L5501
3741                     ; 1440 	    *pBuffer = OctetArray[0]; pBuffer++; nBytes++;
3743  baa5 1e08          	ldw	x,(OFST+1,sp)
3744  baa7 f7            	ld	(x),a
3747  baa8 5c            	incw	x
3748  baa9 1f08          	ldw	(OFST+1,sp),x
3751  baab 1e05          	ldw	x,(OFST-2,sp)
3752  baad 5c            	incw	x
3753  baae 1f05          	ldw	(OFST-2,sp),x
3755  bab0               L5501:
3756                     ; 1442 	  if (OctetArray[0] != '0') {
3758  bab0 a130          	cp	a,#48
3759  bab2 2707          	jreq	L7501
3760                     ; 1443             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3762  bab4 1e08          	ldw	x,(OFST+1,sp)
3763  bab6 c60011        	ld	a,_OctetArray+1
3767  bab9 2009          	jp	LC008
3768  babb               L7501:
3769                     ; 1445 	  else if (OctetArray[1] != '0') {
3771  babb c60011        	ld	a,_OctetArray+1
3772  babe a130          	cp	a,#48
3773  bac0 270b          	jreq	L1601
3774                     ; 1446             *pBuffer = OctetArray[1]; pBuffer++; nBytes++;
3776  bac2 1e08          	ldw	x,(OFST+1,sp)
3781  bac4               LC008:
3782  bac4 f7            	ld	(x),a
3784  bac5 5c            	incw	x
3785  bac6 1f08          	ldw	(OFST+1,sp),x
3787  bac8 1e05          	ldw	x,(OFST-2,sp)
3788  baca 5c            	incw	x
3789  bacb 1f05          	ldw	(OFST-2,sp),x
3791  bacd               L1601:
3792                     ; 1448           *pBuffer = OctetArray[2]; pBuffer++; nBytes++;
3794  bacd 1e08          	ldw	x,(OFST+1,sp)
3795  bacf c60012        	ld	a,_OctetArray+2
3796  bad2 f7            	ld	(x),a
3799  bad3 5c            	incw	x
3800  bad4 1f08          	ldw	(OFST+1,sp),x
3803  bad6 1e05          	ldw	x,(OFST-2,sp)
3804  bad8 5c            	incw	x
3805  bad9 1f05          	ldw	(OFST-2,sp),x
3807                     ; 1450           *pBuffer = ':'; pBuffer++; nBytes++; // Output ':'
3809  badb 1e08          	ldw	x,(OFST+1,sp)
3810  badd a63a          	ld	a,#58
3811  badf f7            	ld	(x),a
3814  bae0 5c            	incw	x
3815  bae1 1f08          	ldw	(OFST+1,sp),x
3818  bae3 1e05          	ldw	x,(OFST-2,sp)
3819  bae5 5c            	incw	x
3820  bae6 1f05          	ldw	(OFST-2,sp),x
3822                     ; 1453   	  emb_itoa(ex_stored_port, OctetArray, 10, 5);
3824  bae8 4b05          	push	#5
3825  baea 4b0a          	push	#10
3826  baec ae0010        	ldw	x,#_OctetArray
3827  baef 89            	pushw	x
3828  baf0 ce0055        	ldw	x,_ex_stored_port
3829  baf3 cde0f2        	call	c_uitolx
3831  baf6 be02          	ldw	x,c_lreg+2
3832  baf8 89            	pushw	x
3833  baf9 be00          	ldw	x,c_lreg
3834  bafb 89            	pushw	x
3835  bafc cdb0f5        	call	_emb_itoa
3837  baff 5b08          	addw	sp,#8
3838                     ; 1455 	  for(i=0; i<5; i++) {
3840  bb01 4f            	clr	a
3841  bb02 6b07          	ld	(OFST+0,sp),a
3843  bb04               L5601:
3844                     ; 1456 	    if (OctetArray[i] != '0') break;
3846  bb04 5f            	clrw	x
3847  bb05 97            	ld	xl,a
3848  bb06 d60010        	ld	a,(_OctetArray,x)
3849  bb09 a130          	cp	a,#48
3850  bb0b 261c          	jrne	L7701
3853                     ; 1455 	  for(i=0; i<5; i++) {
3855  bb0d 0c07          	inc	(OFST+0,sp)
3859  bb0f 7b07          	ld	a,(OFST+0,sp)
3860  bb11 a105          	cp	a,#5
3861  bb13 25ef          	jrult	L5601
3862  bb15 2012          	jra	L7701
3863  bb17               L5701:
3864                     ; 1459 	    *pBuffer = OctetArray[i]; pBuffer++; nBytes++;
3866  bb17 5f            	clrw	x
3867  bb18 97            	ld	xl,a
3868  bb19 d60010        	ld	a,(_OctetArray,x)
3869  bb1c 1e08          	ldw	x,(OFST+1,sp)
3870  bb1e f7            	ld	(x),a
3873  bb1f 5c            	incw	x
3874  bb20 1f08          	ldw	(OFST+1,sp),x
3877  bb22 1e05          	ldw	x,(OFST-2,sp)
3878  bb24 5c            	incw	x
3879  bb25 1f05          	ldw	(OFST-2,sp),x
3881                     ; 1460 	    i++;
3883  bb27 0c07          	inc	(OFST+0,sp)
3885  bb29               L7701:
3886                     ; 1458 	  while(i<5) {
3888  bb29 7b07          	ld	a,(OFST+0,sp)
3889  bb2b a105          	cp	a,#5
3890  bb2d 25e8          	jrult	L5701
3891                     ; 1465           *ppData = *ppData + 28;
3893  bb2f 1e0c          	ldw	x,(OFST+5,sp)
3894  bb31 9093          	ldw	y,x
3895  bb33 fe            	ldw	x,(x)
3896  bb34 1c001c        	addw	x,#28
3897  bb37 90ff          	ldw	(y),x
3898                     ; 1466           *pDataLeft = *pDataLeft - 28;
3900  bb39 1e0e          	ldw	x,(OFST+7,sp)
3901  bb3b 9093          	ldw	y,x
3902  bb3d fe            	ldw	x,(x)
3903  bb3e 1d001c        	subw	x,#28
3904  bb41 ccb89b        	jp	LC011
3905  bb44               L116:
3906                     ; 1470         *pBuffer = nByte;
3908  bb44 1e08          	ldw	x,(OFST+1,sp)
3909  bb46 f7            	ld	(x),a
3910                     ; 1471         *ppData = *ppData + 1;
3912  bb47 1e0c          	ldw	x,(OFST+5,sp)
3913  bb49 9093          	ldw	y,x
3914  bb4b fe            	ldw	x,(x)
3915  bb4c 5c            	incw	x
3916  bb4d 90ff          	ldw	(y),x
3917                     ; 1472         *pDataLeft = *pDataLeft - 1;
3919  bb4f 1e0e          	ldw	x,(OFST+7,sp)
3920  bb51 9093          	ldw	y,x
3921  bb53 fe            	ldw	x,(x)
3922  bb54 5a            	decw	x
3923  bb55 90ff          	ldw	(y),x
3924                     ; 1473         pBuffer++;
3926  bb57 1e08          	ldw	x,(OFST+1,sp)
3927                     ; 1474         nBytes++;
3929  bb59               LC009:
3932  bb59 5c            	incw	x
3933  bb5a 1f08          	ldw	(OFST+1,sp),x
3936  bb5c 1e05          	ldw	x,(OFST-2,sp)
3937  bb5e 5c            	incw	x
3938  bb5f 1f05          	ldw	(OFST-2,sp),x
3940  bb61               L306:
3941                     ; 1008   while (nBytes < nMaxBytes) {
3943  bb61 1e05          	ldw	x,(OFST-2,sp)
3944  bb63 1310          	cpw	x,(OFST+9,sp)
3945  bb65 2403ccb34a    	jrult	L106
3946  bb6a               L506:
3947                     ; 1479   return nBytes;
3949  bb6a 1e05          	ldw	x,(OFST-2,sp)
3952  bb6c 5b09          	addw	sp,#9
3953  bb6e 81            	ret	
3980                     ; 1483 void HttpDInit()
3980                     ; 1484 {
3981                     	switch	.text
3982  bb6f               _HttpDInit:
3986                     ; 1486   uip_listen(htons(Port_Httpd));
3988  bb6f ce0020        	ldw	x,_Port_Httpd
3989  bb72 cddace        	call	_htons
3991  bb75 cdd18e        	call	_uip_listen
3993                     ; 1487   current_webpage = WEBPAGE_DEFAULT;
3995  bb78 725f001b      	clr	_current_webpage
3996                     ; 1488 }
3999  bb7c 81            	ret	
4204                     ; 1491 void HttpDCall(	uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
4204                     ; 1492 {
4205                     	switch	.text
4206  bb7d               _HttpDCall:
4208  bb7d 89            	pushw	x
4209  bb7e 5207          	subw	sp,#7
4210       00000007      OFST:	set	7
4213                     ; 1502   alpha_1 = '0';
4215                     ; 1503   alpha_2 = '0';
4217                     ; 1504   alpha_3 = '0';
4219                     ; 1505   alpha_4 = '0';
4221                     ; 1506   alpha_5 = '0';
4223                     ; 1508   if (uip_connected()) {
4225  bb80 720d00887a    	btjf	_uip_flags,#6,L1421
4226                     ; 1510     if (current_webpage == WEBPAGE_DEFAULT) {
4228  bb85 c6001b        	ld	a,_current_webpage
4229  bb88 260e          	jrne	L3421
4230                     ; 1511       pSocket->pData = g_HtmlPageDefault;
4232  bb8a 1e0e          	ldw	x,(OFST+7,sp)
4233  bb8c 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
4234  bb90 ef01          	ldw	(1,x),y
4235                     ; 1512       pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
4237  bb92 90ae09ee      	ldw	y,#2542
4239  bb96 2058          	jp	LC012
4240  bb98               L3421:
4241                     ; 1516     else if (current_webpage == WEBPAGE_ADDRESS) {
4243  bb98 a101          	cp	a,#1
4244  bb9a 260e          	jrne	L7421
4245                     ; 1517       pSocket->pData = g_HtmlPageAddress;
4247  bb9c 1e0e          	ldw	x,(OFST+7,sp)
4248  bb9e 90ae8a77      	ldw	y,#L71_g_HtmlPageAddress
4249  bba2 ef01          	ldw	(1,x),y
4250                     ; 1518       pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
4252  bba4 90ae1113      	ldw	y,#4371
4254  bba8 2046          	jp	LC012
4255  bbaa               L7421:
4256                     ; 1522     else if (current_webpage == WEBPAGE_HELP) {
4258  bbaa a103          	cp	a,#3
4259  bbac 260e          	jrne	L3521
4260                     ; 1523       pSocket->pData = g_HtmlPageHelp;
4262  bbae 1e0e          	ldw	x,(OFST+7,sp)
4263  bbb0 90ae9b8b      	ldw	y,#L12_g_HtmlPageHelp
4264  bbb4 ef01          	ldw	(1,x),y
4265                     ; 1524       pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
4267  bbb6 90ae02fb      	ldw	y,#763
4269  bbba 2034          	jp	LC012
4270  bbbc               L3521:
4271                     ; 1526     else if (current_webpage == WEBPAGE_HELP2) {
4273  bbbc a104          	cp	a,#4
4274  bbbe 260e          	jrne	L7521
4275                     ; 1527       pSocket->pData = g_HtmlPageHelp2;
4277  bbc0 1e0e          	ldw	x,(OFST+7,sp)
4278  bbc2 90ae9e87      	ldw	y,#L32_g_HtmlPageHelp2
4279  bbc6 ef01          	ldw	(1,x),y
4280                     ; 1528       pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
4282  bbc8 90ae02a1      	ldw	y,#673
4284  bbcc 2022          	jp	LC012
4285  bbce               L7521:
4286                     ; 1533     else if (current_webpage == WEBPAGE_STATS) {
4288  bbce a105          	cp	a,#5
4289  bbd0 260e          	jrne	L3621
4290                     ; 1534       pSocket->pData = g_HtmlPageStats;
4292  bbd2 1e0e          	ldw	x,(OFST+7,sp)
4293  bbd4 90aea129      	ldw	y,#L52_g_HtmlPageStats
4294  bbd8 ef01          	ldw	(1,x),y
4295                     ; 1535       pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
4297  bbda 90ae0a94      	ldw	y,#2708
4299  bbde 2010          	jp	LC012
4300  bbe0               L3621:
4301                     ; 1538     else if (current_webpage == WEBPAGE_RSTATE) {
4303  bbe0 a106          	cp	a,#6
4304  bbe2 260e          	jrne	L5421
4305                     ; 1539       pSocket->pData = g_HtmlPageRstate;
4307  bbe4 1e0e          	ldw	x,(OFST+7,sp)
4308  bbe6 90aeabbe      	ldw	y,#L72_g_HtmlPageRstate
4309  bbea ef01          	ldw	(1,x),y
4310                     ; 1540       pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
4312  bbec 90ae0078      	ldw	y,#120
4313  bbf0               LC012:
4314  bbf0 ef03          	ldw	(3,x),y
4315  bbf2               L5421:
4316                     ; 1542     pSocket->nNewlines = 0;
4318  bbf2 1e0e          	ldw	x,(OFST+7,sp)
4319                     ; 1543     pSocket->nState = STATE_CONNECTED;
4321  bbf4 7f            	clr	(x)
4322  bbf5 6f05          	clr	(5,x)
4323                     ; 1544     pSocket->nPrevBytes = 0xFFFF;
4325  bbf7 90aeffff      	ldw	y,#65535
4326  bbfb ef0a          	ldw	(10,x),y
4328  bbfd 2041          	jra	L413
4329  bbff               L1421:
4330                     ; 1546   else if (uip_newdata() || uip_acked()) {
4332  bbff 7202008808    	btjt	_uip_flags,#1,L5721
4334  bc04 7200008803cc  	btjf	_uip_flags,#0,L3721
4335  bc0c               L5721:
4336                     ; 1547     if (pSocket->nState == STATE_CONNECTED) {
4338  bc0c 1e0e          	ldw	x,(OFST+7,sp)
4339  bc0e f6            	ld	a,(x)
4340  bc0f 2627          	jrne	L7721
4341                     ; 1548       if (nBytes == 0) return;
4343  bc11 1e0c          	ldw	x,(OFST+5,sp)
4344  bc13 272b          	jreq	L413
4347                     ; 1549       if (*pBuffer == 'G') pSocket->nState = STATE_GET_G;
4349  bc15 1e08          	ldw	x,(OFST+1,sp)
4350  bc17 f6            	ld	a,(x)
4351  bc18 a147          	cp	a,#71
4352  bc1a 2606          	jrne	L3031
4355  bc1c 1e0e          	ldw	x,(OFST+7,sp)
4356  bc1e a601          	ld	a,#1
4358  bc20 2008          	jp	LC013
4359  bc22               L3031:
4360                     ; 1550       else if (*pBuffer == 'P') pSocket->nState = STATE_POST_P;
4362  bc22 a150          	cp	a,#80
4363  bc24 2605          	jrne	L5031
4366  bc26 1e0e          	ldw	x,(OFST+7,sp)
4367  bc28 a604          	ld	a,#4
4368  bc2a               LC013:
4369  bc2a f7            	ld	(x),a
4370  bc2b               L5031:
4371                     ; 1551       nBytes--;
4373  bc2b 1e0c          	ldw	x,(OFST+5,sp)
4374  bc2d 5a            	decw	x
4375  bc2e 1f0c          	ldw	(OFST+5,sp),x
4376                     ; 1552       pBuffer++;
4378  bc30 1e08          	ldw	x,(OFST+1,sp)
4379  bc32 5c            	incw	x
4380  bc33 1f08          	ldw	(OFST+1,sp),x
4381  bc35 1e0e          	ldw	x,(OFST+7,sp)
4382  bc37 f6            	ld	a,(x)
4383  bc38               L7721:
4384                     ; 1555     if (pSocket->nState == STATE_GET_G) {
4386  bc38 a101          	cp	a,#1
4387  bc3a 2620          	jrne	L1131
4388                     ; 1556       if (nBytes == 0) return;
4390  bc3c 1e0c          	ldw	x,(OFST+5,sp)
4391  bc3e 2603          	jrne	L3131
4393  bc40               L413:
4396  bc40 5b09          	addw	sp,#9
4397  bc42 81            	ret	
4398  bc43               L3131:
4399                     ; 1557       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
4401  bc43 1e08          	ldw	x,(OFST+1,sp)
4402  bc45 f6            	ld	a,(x)
4403  bc46 a145          	cp	a,#69
4404  bc48 2605          	jrne	L5131
4407  bc4a 1e0e          	ldw	x,(OFST+7,sp)
4408  bc4c a602          	ld	a,#2
4409  bc4e f7            	ld	(x),a
4410  bc4f               L5131:
4411                     ; 1558       nBytes--;
4413  bc4f 1e0c          	ldw	x,(OFST+5,sp)
4414  bc51 5a            	decw	x
4415  bc52 1f0c          	ldw	(OFST+5,sp),x
4416                     ; 1559       pBuffer++;
4418  bc54 1e08          	ldw	x,(OFST+1,sp)
4419  bc56 5c            	incw	x
4420  bc57 1f08          	ldw	(OFST+1,sp),x
4421  bc59 1e0e          	ldw	x,(OFST+7,sp)
4422  bc5b f6            	ld	a,(x)
4423  bc5c               L1131:
4424                     ; 1562     if (pSocket->nState == STATE_GET_GE) {
4426  bc5c a102          	cp	a,#2
4427  bc5e 261d          	jrne	L7131
4428                     ; 1563       if (nBytes == 0) return;
4430  bc60 1e0c          	ldw	x,(OFST+5,sp)
4431  bc62 27dc          	jreq	L413
4434                     ; 1564       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
4436  bc64 1e08          	ldw	x,(OFST+1,sp)
4437  bc66 f6            	ld	a,(x)
4438  bc67 a154          	cp	a,#84
4439  bc69 2605          	jrne	L3231
4442  bc6b 1e0e          	ldw	x,(OFST+7,sp)
4443  bc6d a603          	ld	a,#3
4444  bc6f f7            	ld	(x),a
4445  bc70               L3231:
4446                     ; 1565       nBytes--;
4448  bc70 1e0c          	ldw	x,(OFST+5,sp)
4449  bc72 5a            	decw	x
4450  bc73 1f0c          	ldw	(OFST+5,sp),x
4451                     ; 1566       pBuffer++;
4453  bc75 1e08          	ldw	x,(OFST+1,sp)
4454  bc77 5c            	incw	x
4455  bc78 1f08          	ldw	(OFST+1,sp),x
4456  bc7a 1e0e          	ldw	x,(OFST+7,sp)
4457  bc7c f6            	ld	a,(x)
4458  bc7d               L7131:
4459                     ; 1569     if (pSocket->nState == STATE_GET_GET) {
4461  bc7d a103          	cp	a,#3
4462  bc7f 261d          	jrne	L5231
4463                     ; 1570       if (nBytes == 0) return;
4465  bc81 1e0c          	ldw	x,(OFST+5,sp)
4466  bc83 27bb          	jreq	L413
4469                     ; 1571       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
4471  bc85 1e08          	ldw	x,(OFST+1,sp)
4472  bc87 f6            	ld	a,(x)
4473  bc88 a120          	cp	a,#32
4474  bc8a 2605          	jrne	L1331
4477  bc8c 1e0e          	ldw	x,(OFST+7,sp)
4478  bc8e a608          	ld	a,#8
4479  bc90 f7            	ld	(x),a
4480  bc91               L1331:
4481                     ; 1572       nBytes--;
4483  bc91 1e0c          	ldw	x,(OFST+5,sp)
4484  bc93 5a            	decw	x
4485  bc94 1f0c          	ldw	(OFST+5,sp),x
4486                     ; 1573       pBuffer++;
4488  bc96 1e08          	ldw	x,(OFST+1,sp)
4489  bc98 5c            	incw	x
4490  bc99 1f08          	ldw	(OFST+1,sp),x
4491  bc9b 1e0e          	ldw	x,(OFST+7,sp)
4492  bc9d f6            	ld	a,(x)
4493  bc9e               L5231:
4494                     ; 1576     if (pSocket->nState == STATE_POST_P) {
4496  bc9e a104          	cp	a,#4
4497  bca0 261d          	jrne	L3331
4498                     ; 1577       if (nBytes == 0) return;
4500  bca2 1e0c          	ldw	x,(OFST+5,sp)
4501  bca4 279a          	jreq	L413
4504                     ; 1578       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
4506  bca6 1e08          	ldw	x,(OFST+1,sp)
4507  bca8 f6            	ld	a,(x)
4508  bca9 a14f          	cp	a,#79
4509  bcab 2605          	jrne	L7331
4512  bcad 1e0e          	ldw	x,(OFST+7,sp)
4513  bcaf a605          	ld	a,#5
4514  bcb1 f7            	ld	(x),a
4515  bcb2               L7331:
4516                     ; 1579       nBytes--;
4518  bcb2 1e0c          	ldw	x,(OFST+5,sp)
4519  bcb4 5a            	decw	x
4520  bcb5 1f0c          	ldw	(OFST+5,sp),x
4521                     ; 1580       pBuffer++;
4523  bcb7 1e08          	ldw	x,(OFST+1,sp)
4524  bcb9 5c            	incw	x
4525  bcba 1f08          	ldw	(OFST+1,sp),x
4526  bcbc 1e0e          	ldw	x,(OFST+7,sp)
4527  bcbe f6            	ld	a,(x)
4528  bcbf               L3331:
4529                     ; 1583     if (pSocket->nState == STATE_POST_PO) {
4531  bcbf a105          	cp	a,#5
4532  bcc1 2620          	jrne	L1431
4533                     ; 1584       if (nBytes == 0) return;
4535  bcc3 1e0c          	ldw	x,(OFST+5,sp)
4536  bcc5 2603ccbc40    	jreq	L413
4539                     ; 1585       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
4541  bcca 1e08          	ldw	x,(OFST+1,sp)
4542  bccc f6            	ld	a,(x)
4543  bccd a153          	cp	a,#83
4544  bccf 2605          	jrne	L5431
4547  bcd1 1e0e          	ldw	x,(OFST+7,sp)
4548  bcd3 a606          	ld	a,#6
4549  bcd5 f7            	ld	(x),a
4550  bcd6               L5431:
4551                     ; 1586       nBytes--;
4553  bcd6 1e0c          	ldw	x,(OFST+5,sp)
4554  bcd8 5a            	decw	x
4555  bcd9 1f0c          	ldw	(OFST+5,sp),x
4556                     ; 1587       pBuffer++;
4558  bcdb 1e08          	ldw	x,(OFST+1,sp)
4559  bcdd 5c            	incw	x
4560  bcde 1f08          	ldw	(OFST+1,sp),x
4561  bce0 1e0e          	ldw	x,(OFST+7,sp)
4562  bce2 f6            	ld	a,(x)
4563  bce3               L1431:
4564                     ; 1590     if (pSocket->nState == STATE_POST_POS) {
4566  bce3 a106          	cp	a,#6
4567  bce5 261d          	jrne	L7431
4568                     ; 1591       if (nBytes == 0) return;
4570  bce7 1e0c          	ldw	x,(OFST+5,sp)
4571  bce9 27dc          	jreq	L413
4574                     ; 1592       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
4576  bceb 1e08          	ldw	x,(OFST+1,sp)
4577  bced f6            	ld	a,(x)
4578  bcee a154          	cp	a,#84
4579  bcf0 2605          	jrne	L3531
4582  bcf2 1e0e          	ldw	x,(OFST+7,sp)
4583  bcf4 a607          	ld	a,#7
4584  bcf6 f7            	ld	(x),a
4585  bcf7               L3531:
4586                     ; 1593       nBytes--;
4588  bcf7 1e0c          	ldw	x,(OFST+5,sp)
4589  bcf9 5a            	decw	x
4590  bcfa 1f0c          	ldw	(OFST+5,sp),x
4591                     ; 1594       pBuffer++;
4593  bcfc 1e08          	ldw	x,(OFST+1,sp)
4594  bcfe 5c            	incw	x
4595  bcff 1f08          	ldw	(OFST+1,sp),x
4596  bd01 1e0e          	ldw	x,(OFST+7,sp)
4597  bd03 f6            	ld	a,(x)
4598  bd04               L7431:
4599                     ; 1597     if (pSocket->nState == STATE_POST_POST) {
4601  bd04 a107          	cp	a,#7
4602  bd06 261d          	jrne	L5531
4603                     ; 1598       if (nBytes == 0) return;
4605  bd08 1e0c          	ldw	x,(OFST+5,sp)
4606  bd0a 27bb          	jreq	L413
4609                     ; 1599       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
4611  bd0c 1e08          	ldw	x,(OFST+1,sp)
4612  bd0e f6            	ld	a,(x)
4613  bd0f a120          	cp	a,#32
4614  bd11 2605          	jrne	L1631
4617  bd13 1e0e          	ldw	x,(OFST+7,sp)
4618  bd15 a609          	ld	a,#9
4619  bd17 f7            	ld	(x),a
4620  bd18               L1631:
4621                     ; 1600       nBytes--;
4623  bd18 1e0c          	ldw	x,(OFST+5,sp)
4624  bd1a 5a            	decw	x
4625  bd1b 1f0c          	ldw	(OFST+5,sp),x
4626                     ; 1601       pBuffer++;
4628  bd1d 1e08          	ldw	x,(OFST+1,sp)
4629  bd1f 5c            	incw	x
4630  bd20 1f08          	ldw	(OFST+1,sp),x
4631  bd22 1e0e          	ldw	x,(OFST+7,sp)
4632  bd24 f6            	ld	a,(x)
4633  bd25               L5531:
4634                     ; 1604     if (pSocket->nState == STATE_GOTPOST) {
4636  bd25 a109          	cp	a,#9
4637  bd27 2647          	jrne	L3631
4639  bd29 2041          	jra	L7631
4640  bd2b               L5631:
4641                     ; 1607         if (*pBuffer == '\n') pSocket->nNewlines++;
4643  bd2b 1e08          	ldw	x,(OFST+1,sp)
4644  bd2d f6            	ld	a,(x)
4645  bd2e a10a          	cp	a,#10
4646  bd30 2606          	jrne	L3731
4649  bd32 1e0e          	ldw	x,(OFST+7,sp)
4650  bd34 6c05          	inc	(5,x)
4652  bd36 2008          	jra	L5731
4653  bd38               L3731:
4654                     ; 1608         else if (*pBuffer == '\r') { }
4656  bd38 a10d          	cp	a,#13
4657  bd3a 2704          	jreq	L5731
4659                     ; 1609         else pSocket->nNewlines = 0;
4661  bd3c 1e0e          	ldw	x,(OFST+7,sp)
4662  bd3e 6f05          	clr	(5,x)
4663  bd40               L5731:
4664                     ; 1610         pBuffer++;
4666  bd40 1e08          	ldw	x,(OFST+1,sp)
4667  bd42 5c            	incw	x
4668  bd43 1f08          	ldw	(OFST+1,sp),x
4669                     ; 1611         nBytes--;
4671  bd45 1e0c          	ldw	x,(OFST+5,sp)
4672  bd47 5a            	decw	x
4673  bd48 1f0c          	ldw	(OFST+5,sp),x
4674                     ; 1612         if (pSocket->nNewlines == 2) {
4676  bd4a 1e0e          	ldw	x,(OFST+7,sp)
4677  bd4c e605          	ld	a,(5,x)
4678  bd4e a102          	cp	a,#2
4679  bd50 261a          	jrne	L7631
4680                     ; 1615           if (current_webpage == WEBPAGE_DEFAULT) pSocket->nParseLeft = PARSEBYTES_DEFAULT;
4682  bd52 c6001b        	ld	a,_current_webpage
4683  bd55 2607          	jrne	L5041
4686  bd57 a618          	ld	a,#24
4687  bd59 e706          	ld	(6,x),a
4688  bd5b c6001b        	ld	a,_current_webpage
4689  bd5e               L5041:
4690                     ; 1616           if (current_webpage == WEBPAGE_ADDRESS) pSocket->nParseLeft = PARSEBYTES_ADDRESS;
4692  bd5e 4a            	dec	a
4693  bd5f 2604          	jrne	L7041
4696  bd61 a693          	ld	a,#147
4697  bd63 e706          	ld	(6,x),a
4698  bd65               L7041:
4699                     ; 1617           pSocket->ParseState = PARSE_CMD;
4701  bd65 6f09          	clr	(9,x)
4702                     ; 1619           pSocket->nState = STATE_PARSEPOST;
4704  bd67 a60a          	ld	a,#10
4705  bd69 f7            	ld	(x),a
4706                     ; 1620           break;
4708  bd6a 2004          	jra	L3631
4709  bd6c               L7631:
4710                     ; 1606       while (nBytes != 0) {
4712  bd6c 1e0c          	ldw	x,(OFST+5,sp)
4713  bd6e 26bb          	jrne	L5631
4714  bd70               L3631:
4715                     ; 1625     if (pSocket->nState == STATE_GOTGET) {
4717  bd70 1e0e          	ldw	x,(OFST+7,sp)
4718  bd72 f6            	ld	a,(x)
4719  bd73 a108          	cp	a,#8
4720  bd75 2609          	jrne	L1141
4721                     ; 1629       pSocket->nParseLeft = 6;
4723  bd77 a606          	ld	a,#6
4724  bd79 e706          	ld	(6,x),a
4725                     ; 1630       pSocket->ParseState = PARSE_SLASH1;
4727  bd7b e709          	ld	(9,x),a
4728                     ; 1632       pSocket->nState = STATE_PARSEGET;
4730  bd7d a60d          	ld	a,#13
4731  bd7f f7            	ld	(x),a
4732  bd80               L1141:
4733                     ; 1635     if (pSocket->nState == STATE_PARSEPOST) {
4735  bd80 a10a          	cp	a,#10
4736  bd82 2703ccbff2    	jrne	L3141
4738  bd87 ccbfe3        	jra	L7141
4739  bd8a               L5141:
4740                     ; 1645         if (pSocket->ParseState == PARSE_CMD) {
4742  bd8a 1e0e          	ldw	x,(OFST+7,sp)
4743  bd8c e609          	ld	a,(9,x)
4744  bd8e 263e          	jrne	L3241
4745                     ; 1646           pSocket->ParseCmd = *pBuffer;
4747  bd90 1e08          	ldw	x,(OFST+1,sp)
4748  bd92 f6            	ld	a,(x)
4749  bd93 1e0e          	ldw	x,(OFST+7,sp)
4750  bd95 e707          	ld	(7,x),a
4751                     ; 1647           pSocket->ParseState = PARSE_NUM10;
4753  bd97 a601          	ld	a,#1
4754  bd99 e709          	ld	(9,x),a
4755                     ; 1648 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
4757  bd9b e606          	ld	a,(6,x)
4758  bd9d 2704          	jreq	L5241
4761  bd9f 6a06          	dec	(6,x)
4763  bda1 2004          	jra	L7241
4764  bda3               L5241:
4765                     ; 1649 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
4767  bda3 a605          	ld	a,#5
4768  bda5 e709          	ld	(9,x),a
4769  bda7               L7241:
4770                     ; 1650           pBuffer++;
4772  bda7 1e08          	ldw	x,(OFST+1,sp)
4773  bda9 5c            	incw	x
4774  bdaa 1f08          	ldw	(OFST+1,sp),x
4775                     ; 1652 	  if (pSocket->ParseCmd == 'o' ||
4775                     ; 1653 	      pSocket->ParseCmd == 'a' ||
4775                     ; 1654 	      pSocket->ParseCmd == 'b' ||
4775                     ; 1655 	      pSocket->ParseCmd == 'c' ||
4775                     ; 1656 	      pSocket->ParseCmd == 'd' ||
4775                     ; 1657 	      pSocket->ParseCmd == 'g') { }
4777  bdac 1e0e          	ldw	x,(OFST+7,sp)
4778  bdae e607          	ld	a,(7,x)
4779  bdb0 a16f          	cp	a,#111
4780  bdb2 2603ccbfd5    	jreq	L7441
4782  bdb7 a161          	cp	a,#97
4783  bdb9 27f9          	jreq	L7441
4785  bdbb a162          	cp	a,#98
4786  bdbd 27f5          	jreq	L7441
4788  bdbf a163          	cp	a,#99
4789  bdc1 27f1          	jreq	L7441
4791  bdc3 a164          	cp	a,#100
4792  bdc5 27ed          	jreq	L7441
4794  bdc7 a167          	cp	a,#103
4795  bdc9 27e9          	jreq	L7441
4796                     ; 1658 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
4797  bdcb ccbfba        	jp	LC018
4798  bdce               L3241:
4799                     ; 1660         else if (pSocket->ParseState == PARSE_NUM10) {
4801  bdce a101          	cp	a,#1
4802  bdd0 2619          	jrne	L1541
4803                     ; 1661           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
4805  bdd2 1e08          	ldw	x,(OFST+1,sp)
4806  bdd4 f6            	ld	a,(x)
4807  bdd5 97            	ld	xl,a
4808  bdd6 a60a          	ld	a,#10
4809  bdd8 42            	mul	x,a
4810  bdd9 9f            	ld	a,xl
4811  bdda 1e0e          	ldw	x,(OFST+7,sp)
4812  bddc a0e0          	sub	a,#224
4813  bdde e708          	ld	(8,x),a
4814                     ; 1662           pSocket->ParseState = PARSE_NUM1;
4816  bde0 a602          	ld	a,#2
4817  bde2 e709          	ld	(9,x),a
4818                     ; 1663 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
4820  bde4 e606          	ld	a,(6,x)
4821  bde6 2719          	jreq	L3641
4824  bde8 ccbfca        	jp	LC025
4825                     ; 1664 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
4826                     ; 1665           pBuffer++;
4828  bdeb               L1541:
4829                     ; 1667         else if (pSocket->ParseState == PARSE_NUM1) {
4831  bdeb a102          	cp	a,#2
4832  bded 2616          	jrne	L1641
4833                     ; 1668           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
4835  bdef 1608          	ldw	y,(OFST+1,sp)
4836  bdf1 90f6          	ld	a,(y)
4837  bdf3 a030          	sub	a,#48
4838  bdf5 eb08          	add	a,(8,x)
4839  bdf7 e708          	ld	(8,x),a
4840                     ; 1669           pSocket->ParseState = PARSE_EQUAL;
4842  bdf9 a603          	ld	a,#3
4843  bdfb e709          	ld	(9,x),a
4844                     ; 1670 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
4846  bdfd e606          	ld	a,(6,x)
4849  bdff 26e7          	jrne	LC025
4850  be01               L3641:
4851                     ; 1671 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
4854  be01 a605          	ld	a,#5
4855                     ; 1672           pBuffer++;
4857  be03 200d          	jp	LC026
4858  be05               L1641:
4859                     ; 1674         else if (pSocket->ParseState == PARSE_EQUAL) {
4861  be05 a103          	cp	a,#3
4862  be07 260e          	jrne	L1741
4863                     ; 1675           pSocket->ParseState = PARSE_VAL;
4865  be09 a604          	ld	a,#4
4866  be0b e709          	ld	(9,x),a
4867                     ; 1676 	  if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
4869  be0d 6d06          	tnz	(6,x)
4872  be0f 26d7          	jrne	LC025
4873                     ; 1677 	  else { pSocket->ParseState = PARSE_DELIM; } // Something out of sync - escape
4875  be11 4c            	inc	a
4876  be12               LC026:
4877  be12 e709          	ld	(9,x),a
4878                     ; 1678           pBuffer++;
4880  be14 ccbfcc        	jp	LC017
4881  be17               L1741:
4882                     ; 1680         else if (pSocket->ParseState == PARSE_VAL) {
4884  be17 a104          	cp	a,#4
4885  be19 2703ccbfc0    	jrne	L1051
4886                     ; 1688           if (pSocket->ParseCmd == 'o') {
4888  be1e e607          	ld	a,(7,x)
4889  be20 a16f          	cp	a,#111
4890  be22 2625          	jrne	L3051
4891                     ; 1691             if ((uint8_t)(*pBuffer) == '1') GpioSetPin(pSocket->ParseNum, (uint8_t)1);
4893  be24 1e08          	ldw	x,(OFST+1,sp)
4894  be26 f6            	ld	a,(x)
4895  be27 a131          	cp	a,#49
4896  be29 2609          	jrne	L5051
4899  be2b 1e0e          	ldw	x,(OFST+7,sp)
4900  be2d e608          	ld	a,(8,x)
4901  be2f ae0001        	ldw	x,#1
4904  be32 2005          	jra	L7051
4905  be34               L5051:
4906                     ; 1692             else GpioSetPin(pSocket->ParseNum, (uint8_t)0);
4908  be34 1e0e          	ldw	x,(OFST+7,sp)
4909  be36 e608          	ld	a,(8,x)
4910  be38 5f            	clrw	x
4912  be39               L7051:
4913  be39 95            	ld	xh,a
4914  be3a cdc384        	call	_GpioSetPin
4915                     ; 1693 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent underflow
4917  be3d 1e0e          	ldw	x,(OFST+7,sp)
4918  be3f e606          	ld	a,(6,x)
4919  be41 2603ccbfb3    	jreq	L1651
4921                     ; 1694             pBuffer++;
4923  be46 ccbfb1        	jp	LC024
4924  be49               L3051:
4925                     ; 1697           else if (pSocket->ParseCmd == 'a') {
4927  be49 a161          	cp	a,#97
4928  be4b 2656          	jrne	L5151
4929                     ; 1707             ex_stored_devicename[0] = (uint8_t)(*pBuffer);
4931  be4d 1e08          	ldw	x,(OFST+1,sp)
4932  be4f f6            	ld	a,(x)
4933  be50 c7003e        	ld	_ex_stored_devicename,a
4934                     ; 1708             pSocket->nParseLeft--;
4936  be53 1e0e          	ldw	x,(OFST+7,sp)
4937  be55 6a06          	dec	(6,x)
4938                     ; 1709             pBuffer++; // nBytes already decremented for first char
4940  be57 1e08          	ldw	x,(OFST+1,sp)
4941  be59 5c            	incw	x
4942  be5a 1f08          	ldw	(OFST+1,sp),x
4943                     ; 1713 	    amp_found = 0;
4945  be5c 0f06          	clr	(OFST-1,sp)
4947                     ; 1714 	    for(i=1; i<20; i++) {
4949  be5e a601          	ld	a,#1
4950  be60 6b07          	ld	(OFST+0,sp),a
4952  be62               L7151:
4953                     ; 1715 	      if ((uint8_t)(*pBuffer) == 38) amp_found = 1;
4955  be62 1e08          	ldw	x,(OFST+1,sp)
4956  be64 f6            	ld	a,(x)
4957  be65 a126          	cp	a,#38
4958  be67 2604          	jrne	L5251
4961  be69 a601          	ld	a,#1
4962  be6b 6b06          	ld	(OFST-1,sp),a
4964  be6d               L5251:
4965                     ; 1716 	      if (amp_found == 0) {
4967  be6d 7b06          	ld	a,(OFST-1,sp)
4968  be6f 261a          	jrne	L7251
4969                     ; 1718                 ex_stored_devicename[i] = (uint8_t)(*pBuffer);
4971  be71 7b07          	ld	a,(OFST+0,sp)
4972  be73 5f            	clrw	x
4973  be74 1608          	ldw	y,(OFST+1,sp)
4974  be76 97            	ld	xl,a
4975  be77 90f6          	ld	a,(y)
4976  be79 d7003e        	ld	(_ex_stored_devicename,x),a
4977                     ; 1719                 pSocket->nParseLeft--;
4979  be7c 1e0e          	ldw	x,(OFST+7,sp)
4980  be7e 6a06          	dec	(6,x)
4981                     ; 1720                 pBuffer++;
4983  be80 93            	ldw	x,y
4984  be81 5c            	incw	x
4985  be82 1f08          	ldw	(OFST+1,sp),x
4986                     ; 1721                 nBytes--; // Must subtract 1 from nBytes for extra byte read
4988  be84 1e0c          	ldw	x,(OFST+5,sp)
4989  be86 5a            	decw	x
4990  be87 1f0c          	ldw	(OFST+5,sp),x
4992  be89 200d          	jra	L1351
4993  be8b               L7251:
4994                     ; 1725 	        ex_stored_devicename[i] = ' ';
4996  be8b 7b07          	ld	a,(OFST+0,sp)
4997  be8d 5f            	clrw	x
4998  be8e 97            	ld	xl,a
4999  be8f a620          	ld	a,#32
5000  be91 d7003e        	ld	(_ex_stored_devicename,x),a
5001                     ; 1734                 pSocket->nParseLeft--;
5003  be94 1e0e          	ldw	x,(OFST+7,sp)
5004  be96 6a06          	dec	(6,x)
5005  be98               L1351:
5006                     ; 1714 	    for(i=1; i<20; i++) {
5008  be98 0c07          	inc	(OFST+0,sp)
5012  be9a 7b07          	ld	a,(OFST+0,sp)
5013  be9c a114          	cp	a,#20
5014  be9e 25c2          	jrult	L7151
5016  bea0 ccbfb8        	jra	L3151
5017  bea3               L5151:
5018                     ; 1739           else if (pSocket->ParseCmd == 'b') {
5020  bea3 a162          	cp	a,#98
5021  bea5 2646          	jrne	L5351
5022                     ; 1746 	    alpha_1 = '-';
5024                     ; 1747 	    alpha_2 = '-';
5026                     ; 1748 	    alpha_3 = '-';
5028                     ; 1750             alpha_1 = (uint8_t)(*pBuffer);
5030  bea7 1e08          	ldw	x,(OFST+1,sp)
5031  bea9 f6            	ld	a,(x)
5032  beaa 6b07          	ld	(OFST+0,sp),a
5034                     ; 1751             pSocket->nParseLeft--;
5036  beac 1e0e          	ldw	x,(OFST+7,sp)
5037  beae 6a06          	dec	(6,x)
5038                     ; 1752             pBuffer++; // nBytes already decremented for first char
5040  beb0 1e08          	ldw	x,(OFST+1,sp)
5041  beb2 5c            	incw	x
5042  beb3 1f08          	ldw	(OFST+1,sp),x
5043                     ; 1754 	    alpha_2 = (uint8_t)(*pBuffer);
5045  beb5 f6            	ld	a,(x)
5046  beb6 6b05          	ld	(OFST-2,sp),a
5048                     ; 1755             pSocket->nParseLeft--;
5050  beb8 1e0e          	ldw	x,(OFST+7,sp)
5051  beba 6a06          	dec	(6,x)
5052                     ; 1756             pBuffer++;
5054  bebc 1e08          	ldw	x,(OFST+1,sp)
5055  bebe 5c            	incw	x
5056  bebf 1f08          	ldw	(OFST+1,sp),x
5057                     ; 1757 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5059  bec1 1e0c          	ldw	x,(OFST+5,sp)
5060  bec3 5a            	decw	x
5061  bec4 1f0c          	ldw	(OFST+5,sp),x
5062                     ; 1759 	    alpha_3 = (uint8_t)(*pBuffer);
5064  bec6 1e08          	ldw	x,(OFST+1,sp)
5065  bec8 f6            	ld	a,(x)
5066  bec9 6b06          	ld	(OFST-1,sp),a
5068                     ; 1760             pSocket->nParseLeft--;
5070  becb 1e0e          	ldw	x,(OFST+7,sp)
5071  becd 6a06          	dec	(6,x)
5072                     ; 1761             pBuffer++;
5074  becf 1e08          	ldw	x,(OFST+1,sp)
5075  bed1 5c            	incw	x
5076  bed2 1f08          	ldw	(OFST+1,sp),x
5077                     ; 1762 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5079  bed4 1e0c          	ldw	x,(OFST+5,sp)
5080  bed6 5a            	decw	x
5081  bed7 1f0c          	ldw	(OFST+5,sp),x
5082                     ; 1764 	    SetAddresses(pSocket->ParseNum, (uint8_t)alpha_1, (uint8_t)alpha_2, (uint8_t)alpha_3);
5084  bed9 88            	push	a
5085  beda 7b06          	ld	a,(OFST-1,sp)
5086  bedc 88            	push	a
5087  bedd 7b09          	ld	a,(OFST+2,sp)
5088  bedf 1610          	ldw	y,(OFST+9,sp)
5089  bee1 97            	ld	xl,a
5090  bee2 90e608        	ld	a,(8,y)
5091  bee5 95            	ld	xh,a
5092  bee6 cdc385        	call	_SetAddresses
5094  bee9 85            	popw	x
5096  beea ccbfb8        	jra	L3151
5097  beed               L5351:
5098                     ; 1767           else if (pSocket->ParseCmd == 'c') {
5100  beed a163          	cp	a,#99
5101  beef 2672          	jrne	L1451
5102                     ; 1773 	    alpha_1 = '-';
5104                     ; 1774 	    alpha_2 = '-';
5106                     ; 1775 	    alpha_3 = '-';
5108                     ; 1776 	    alpha_4 = '-';
5110                     ; 1777 	    alpha_5 = '-';
5112                     ; 1780   	    alpha_1 = (uint8_t)(*pBuffer);
5114  bef1 1e08          	ldw	x,(OFST+1,sp)
5115  bef3 f6            	ld	a,(x)
5116  bef4 6b07          	ld	(OFST+0,sp),a
5118                     ; 1781             pSocket->nParseLeft--;
5120  bef6 1e0e          	ldw	x,(OFST+7,sp)
5121  bef8 6a06          	dec	(6,x)
5122                     ; 1782             pBuffer++; // nBytes already decremented for first char
5124  befa 1e08          	ldw	x,(OFST+1,sp)
5125  befc 5c            	incw	x
5126  befd 1f08          	ldw	(OFST+1,sp),x
5127                     ; 1784 	    alpha_2 = (uint8_t)(*pBuffer);
5129  beff f6            	ld	a,(x)
5130  bf00 6b05          	ld	(OFST-2,sp),a
5132                     ; 1785             pSocket->nParseLeft--;
5134  bf02 1e0e          	ldw	x,(OFST+7,sp)
5135  bf04 6a06          	dec	(6,x)
5136                     ; 1786             pBuffer++;
5138  bf06 1e08          	ldw	x,(OFST+1,sp)
5139  bf08 5c            	incw	x
5140  bf09 1f08          	ldw	(OFST+1,sp),x
5141                     ; 1787 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5143  bf0b 1e0c          	ldw	x,(OFST+5,sp)
5144  bf0d 5a            	decw	x
5145  bf0e 1f0c          	ldw	(OFST+5,sp),x
5146                     ; 1789 	    alpha_3 = (uint8_t)(*pBuffer);
5148  bf10 1e08          	ldw	x,(OFST+1,sp)
5149  bf12 f6            	ld	a,(x)
5150  bf13 6b06          	ld	(OFST-1,sp),a
5152                     ; 1790             pSocket->nParseLeft--;
5154  bf15 1e0e          	ldw	x,(OFST+7,sp)
5155  bf17 6a06          	dec	(6,x)
5156                     ; 1791             pBuffer++;
5158  bf19 1e08          	ldw	x,(OFST+1,sp)
5159  bf1b 5c            	incw	x
5160  bf1c 1f08          	ldw	(OFST+1,sp),x
5161                     ; 1792 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5163  bf1e 1e0c          	ldw	x,(OFST+5,sp)
5164  bf20 5a            	decw	x
5165  bf21 1f0c          	ldw	(OFST+5,sp),x
5166                     ; 1794 	    alpha_4 = (uint8_t)(*pBuffer);
5168  bf23 1e08          	ldw	x,(OFST+1,sp)
5169  bf25 f6            	ld	a,(x)
5170  bf26 6b03          	ld	(OFST-4,sp),a
5172                     ; 1795             pSocket->nParseLeft--;
5174  bf28 1e0e          	ldw	x,(OFST+7,sp)
5175  bf2a 6a06          	dec	(6,x)
5176                     ; 1796             pBuffer++;
5178  bf2c 1e08          	ldw	x,(OFST+1,sp)
5179  bf2e 5c            	incw	x
5180  bf2f 1f08          	ldw	(OFST+1,sp),x
5181                     ; 1797 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5183  bf31 1e0c          	ldw	x,(OFST+5,sp)
5184  bf33 5a            	decw	x
5185  bf34 1f0c          	ldw	(OFST+5,sp),x
5186                     ; 1799             alpha_5 = (uint8_t)(*pBuffer);
5188  bf36 1e08          	ldw	x,(OFST+1,sp)
5189  bf38 f6            	ld	a,(x)
5190  bf39 6b04          	ld	(OFST-3,sp),a
5192                     ; 1800             pSocket->nParseLeft--;
5194  bf3b 1e0e          	ldw	x,(OFST+7,sp)
5195  bf3d 6a06          	dec	(6,x)
5196                     ; 1801             pBuffer++;
5198  bf3f 1e08          	ldw	x,(OFST+1,sp)
5199  bf41 5c            	incw	x
5200  bf42 1f08          	ldw	(OFST+1,sp),x
5201                     ; 1802 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5203  bf44 1e0c          	ldw	x,(OFST+5,sp)
5204  bf46 5a            	decw	x
5205  bf47 1f0c          	ldw	(OFST+5,sp),x
5206                     ; 1804 	    SetPort(pSocket->ParseNum,
5206                     ; 1805 	            (uint8_t)alpha_1,
5206                     ; 1806 		    (uint8_t)alpha_2,
5206                     ; 1807 		    (uint8_t)alpha_3,
5206                     ; 1808 		    (uint8_t)alpha_4,
5206                     ; 1809 		    (uint8_t)alpha_5);
5208  bf49 88            	push	a
5209  bf4a 7b04          	ld	a,(OFST-3,sp)
5210  bf4c 88            	push	a
5211  bf4d 7b08          	ld	a,(OFST+1,sp)
5212  bf4f 88            	push	a
5213  bf50 7b08          	ld	a,(OFST+1,sp)
5214  bf52 88            	push	a
5215  bf53 7b0b          	ld	a,(OFST+4,sp)
5216  bf55 1612          	ldw	y,(OFST+11,sp)
5217  bf57 97            	ld	xl,a
5218  bf58 90e608        	ld	a,(8,y)
5219  bf5b 95            	ld	xh,a
5220  bf5c cdc40f        	call	_SetPort
5222  bf5f 5b04          	addw	sp,#4
5224  bf61 2055          	jra	L3151
5225  bf63               L1451:
5226                     ; 1812           else if (pSocket->ParseCmd == 'd') {
5228  bf63 a164          	cp	a,#100
5229  bf65 262f          	jrne	L5451
5230                     ; 1818 	    alpha_1 = (uint8_t)(*pBuffer);
5232  bf67 1e08          	ldw	x,(OFST+1,sp)
5233  bf69 f6            	ld	a,(x)
5234  bf6a 6b07          	ld	(OFST+0,sp),a
5236                     ; 1819             pSocket->nParseLeft--;
5238  bf6c 1e0e          	ldw	x,(OFST+7,sp)
5239  bf6e 6a06          	dec	(6,x)
5240                     ; 1820             pBuffer++; // nBytes already decremented for first char
5242  bf70 1e08          	ldw	x,(OFST+1,sp)
5243  bf72 5c            	incw	x
5244  bf73 1f08          	ldw	(OFST+1,sp),x
5245                     ; 1822 	    alpha_2 = (uint8_t)(*pBuffer);
5247  bf75 f6            	ld	a,(x)
5248  bf76 6b05          	ld	(OFST-2,sp),a
5250                     ; 1823             pSocket->nParseLeft--;
5252  bf78 1e0e          	ldw	x,(OFST+7,sp)
5253  bf7a 6a06          	dec	(6,x)
5254                     ; 1824             pBuffer++;
5256  bf7c 1e08          	ldw	x,(OFST+1,sp)
5257  bf7e 5c            	incw	x
5258  bf7f 1f08          	ldw	(OFST+1,sp),x
5259                     ; 1825 	    nBytes--; // Must subtract 1 from nBytes for extra byte read
5261  bf81 1e0c          	ldw	x,(OFST+5,sp)
5262  bf83 5a            	decw	x
5263  bf84 1f0c          	ldw	(OFST+5,sp),x
5264                     ; 1827 	    SetMAC(pSocket->ParseNum, alpha_1, alpha_2);
5266  bf86 88            	push	a
5267  bf87 7b08          	ld	a,(OFST+1,sp)
5268  bf89 160f          	ldw	y,(OFST+8,sp)
5269  bf8b 97            	ld	xl,a
5270  bf8c 90e608        	ld	a,(8,y)
5271  bf8f 95            	ld	xh,a
5272  bf90 cdc453        	call	_SetMAC
5274  bf93 84            	pop	a
5276  bf94 2022          	jra	L3151
5277  bf96               L5451:
5278                     ; 1830 	  else if (pSocket->ParseCmd == 'g') {
5280  bf96 a167          	cp	a,#103
5281  bf98 261e          	jrne	L3151
5282                     ; 1833             if ((uint8_t)(*pBuffer) == '1') invert_output = 1;
5284  bf9a 1e08          	ldw	x,(OFST+1,sp)
5285  bf9c f6            	ld	a,(x)
5286  bf9d a131          	cp	a,#49
5287  bf9f 2606          	jrne	L3551
5290  bfa1 35010052      	mov	_invert_output,#1
5292  bfa5 2004          	jra	L5551
5293  bfa7               L3551:
5294                     ; 1834             else invert_output = 0;
5296  bfa7 725f0052      	clr	_invert_output
5297  bfab               L5551:
5298                     ; 1835 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--;
5300  bfab 1e0e          	ldw	x,(OFST+7,sp)
5301  bfad e606          	ld	a,(6,x)
5302  bfaf 2702          	jreq	L1651
5305  bfb1               LC024:
5307  bfb1 6a06          	dec	(6,x)
5309  bfb3               L1651:
5310                     ; 1837             pBuffer++;
5313  bfb3 1e08          	ldw	x,(OFST+1,sp)
5314  bfb5 5c            	incw	x
5315  bfb6 1f08          	ldw	(OFST+1,sp),x
5316  bfb8               L3151:
5317                     ; 1840           pSocket->ParseState = PARSE_DELIM;
5319  bfb8 1e0e          	ldw	x,(OFST+7,sp)
5320  bfba               LC018:
5322  bfba a605          	ld	a,#5
5323  bfbc e709          	ld	(9,x),a
5325  bfbe 2015          	jra	L7441
5326  bfc0               L1051:
5327                     ; 1843         else if (pSocket->ParseState == PARSE_DELIM) {
5329  bfc0 a105          	cp	a,#5
5330  bfc2 2611          	jrne	L7441
5331                     ; 1844           if (pSocket->nParseLeft > 0) {
5333  bfc4 e606          	ld	a,(6,x)
5334  bfc6 270b          	jreq	L7651
5335                     ; 1845             pSocket->ParseState = PARSE_CMD;
5337  bfc8 6f09          	clr	(9,x)
5338                     ; 1846             pSocket->nParseLeft--;
5340  bfca               LC025:
5344  bfca 6a06          	dec	(6,x)
5345                     ; 1847             pBuffer++;
5347  bfcc               LC017:
5351  bfcc 1e08          	ldw	x,(OFST+1,sp)
5352  bfce 5c            	incw	x
5353  bfcf 1f08          	ldw	(OFST+1,sp),x
5355  bfd1 2002          	jra	L7441
5356  bfd3               L7651:
5357                     ; 1850             pSocket->nParseLeft = 0; // Something out of sync - end the parsing
5359  bfd3 e706          	ld	(6,x),a
5360  bfd5               L7441:
5361                     ; 1854         if (pSocket->nParseLeft == 0) {
5363  bfd5 1e0e          	ldw	x,(OFST+7,sp)
5364  bfd7 e606          	ld	a,(6,x)
5365  bfd9 2608          	jrne	L7141
5366                     ; 1856           pSocket->nState = STATE_SENDHEADER;
5368  bfdb a60b          	ld	a,#11
5369  bfdd f7            	ld	(x),a
5370                     ; 1857           break;
5371  bfde               L1241:
5372                     ; 1861       pSocket->nState = STATE_SENDHEADER;
5374  bfde 1e0e          	ldw	x,(OFST+7,sp)
5375  bfe0 f7            	ld	(x),a
5376  bfe1 200f          	jra	L3141
5377  bfe3               L7141:
5378                     ; 1644       while (nBytes--) {
5380  bfe3 1e0c          	ldw	x,(OFST+5,sp)
5381  bfe5 5a            	decw	x
5382  bfe6 1f0c          	ldw	(OFST+5,sp),x
5383  bfe8 5c            	incw	x
5384  bfe9 2703ccbd8a    	jrne	L5141
5385  bfee a60b          	ld	a,#11
5386  bff0 20ec          	jra	L1241
5387  bff2               L3141:
5388                     ; 1864     if (pSocket->nState == STATE_PARSEGET) {
5390  bff2 a10d          	cp	a,#13
5391  bff4 2703ccc1d0    	jrne	L5751
5393  bff9 ccc1c5        	jra	L1061
5394  bffc               L7751:
5395                     ; 1878         if (pSocket->ParseState == PARSE_SLASH1) {
5397  bffc 1e0e          	ldw	x,(OFST+7,sp)
5398  bffe e609          	ld	a,(9,x)
5399  c000 a106          	cp	a,#6
5400  c002 263e          	jrne	L5061
5401                     ; 1881           pSocket->ParseCmd = *pBuffer;
5403  c004 1e08          	ldw	x,(OFST+1,sp)
5404  c006 f6            	ld	a,(x)
5405  c007 1e0e          	ldw	x,(OFST+7,sp)
5406  c009 e707          	ld	(7,x),a
5407                     ; 1882           pSocket->nParseLeft--;
5409  c00b 6a06          	dec	(6,x)
5410                     ; 1883           pBuffer++;
5412  c00d 1e08          	ldw	x,(OFST+1,sp)
5413  c00f 5c            	incw	x
5414  c010 1f08          	ldw	(OFST+1,sp),x
5415                     ; 1884 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
5417  c012 1e0e          	ldw	x,(OFST+7,sp)
5418  c014 e607          	ld	a,(7,x)
5419  c016 a12f          	cp	a,#47
5420  c018 2604          	jrne	L7061
5421                     ; 1885 	    pSocket->ParseState = PARSE_NUM10;
5423  c01a a601          	ld	a,#1
5424  c01c e709          	ld	(9,x),a
5425  c01e               L7061:
5426                     ; 1887 	  if (pSocket->nParseLeft == 0) {
5428  c01e e606          	ld	a,(6,x)
5429  c020 2703ccc1a3    	jrne	L3161
5430                     ; 1889 	    current_webpage = WEBPAGE_DEFAULT;
5432  c025 c7001b        	ld	_current_webpage,a
5433                     ; 1890             pSocket->pData = g_HtmlPageDefault;
5435  c028 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5436  c02c ef01          	ldw	(1,x),y
5437                     ; 1891             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5439  c02e 90ae09ee      	ldw	y,#2542
5440  c032 ef03          	ldw	(3,x),y
5441                     ; 1892             pSocket->nNewlines = 0;
5443  c034 e705          	ld	(5,x),a
5444                     ; 1893             pSocket->nState = STATE_SENDHEADER;
5446  c036 a60b          	ld	a,#11
5447  c038 f7            	ld	(x),a
5448                     ; 1894             pSocket->nPrevBytes = 0xFFFF;
5450  c039 90aeffff      	ldw	y,#65535
5451  c03d ef0a          	ldw	(10,x),y
5452                     ; 1895             break;
5454  c03f ccc1d0        	jra	L5751
5455  c042               L5061:
5456                     ; 1898         else if (pSocket->ParseState == PARSE_NUM10) {
5458  c042 a101          	cp	a,#1
5459  c044 264e          	jrne	L5161
5460                     ; 1903 	  if (*pBuffer == ' ') {
5462  c046 1e08          	ldw	x,(OFST+1,sp)
5463  c048 f6            	ld	a,(x)
5464  c049 a120          	cp	a,#32
5465  c04b 2620          	jrne	L7161
5466                     ; 1904 	    current_webpage = WEBPAGE_DEFAULT;
5468  c04d 725f001b      	clr	_current_webpage
5469                     ; 1905             pSocket->pData = g_HtmlPageDefault;
5471  c051 1e0e          	ldw	x,(OFST+7,sp)
5472  c053 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5473  c057 ef01          	ldw	(1,x),y
5474                     ; 1906             pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5476  c059 90ae09ee      	ldw	y,#2542
5477  c05d ef03          	ldw	(3,x),y
5478                     ; 1907             pSocket->nNewlines = 0;
5480  c05f 6f05          	clr	(5,x)
5481                     ; 1908             pSocket->nState = STATE_SENDHEADER;
5483  c061 a60b          	ld	a,#11
5484  c063 f7            	ld	(x),a
5485                     ; 1909             pSocket->nPrevBytes = 0xFFFF;
5487  c064 90aeffff      	ldw	y,#65535
5488  c068 ef0a          	ldw	(10,x),y
5489                     ; 1910 	    break;
5491  c06a ccc1d0        	jra	L5751
5492  c06d               L7161:
5493                     ; 1913 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5495  c06d a130          	cp	a,#48
5496  c06f 2504          	jrult	L1261
5498  c071 a13a          	cp	a,#58
5499  c073 2506          	jrult	L3261
5501  c075               L1261:
5502                     ; 1914 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5504  c075 1e0e          	ldw	x,(OFST+7,sp)
5505  c077 a605          	ld	a,#5
5506  c079 e709          	ld	(9,x),a
5507  c07b               L3261:
5508                     ; 1915           if (pSocket->ParseState == PARSE_NUM10) {      // Still good - parse number
5510  c07b 1e0e          	ldw	x,(OFST+7,sp)
5511  c07d e609          	ld	a,(9,x)
5512  c07f 4a            	dec	a
5513  c080 26a0          	jrne	L3161
5514                     ; 1916             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5516  c082 1e08          	ldw	x,(OFST+1,sp)
5517  c084 f6            	ld	a,(x)
5518  c085 97            	ld	xl,a
5519  c086 a60a          	ld	a,#10
5520  c088 42            	mul	x,a
5521  c089 9f            	ld	a,xl
5522  c08a 1e0e          	ldw	x,(OFST+7,sp)
5523  c08c a0e0          	sub	a,#224
5524  c08e e708          	ld	(8,x),a
5525                     ; 1917 	    pSocket->ParseState = PARSE_NUM1;
5527  c090 a602          	ld	a,#2
5528                     ; 1918             pSocket->nParseLeft--;
5529                     ; 1919             pBuffer++;
5530  c092 202c          	jp	LC022
5531  c094               L5161:
5532                     ; 1923         else if (pSocket->ParseState == PARSE_NUM1) {
5534  c094 a102          	cp	a,#2
5535  c096 2634          	jrne	L1361
5536                     ; 1924 	  if (*pBuffer >= '0' && *pBuffer <= '9') { }    // Check for errors - if a digit we're good
5538  c098 1e08          	ldw	x,(OFST+1,sp)
5539  c09a f6            	ld	a,(x)
5540  c09b a130          	cp	a,#48
5541  c09d 2504          	jrult	L3361
5543  c09f a13a          	cp	a,#58
5544  c0a1 2506          	jrult	L5361
5546  c0a3               L3361:
5547                     ; 1925 	  else { pSocket->ParseState = PARSE_DELIM; }    // Something out of sync - escape
5549  c0a3 1e0e          	ldw	x,(OFST+7,sp)
5550  c0a5 a605          	ld	a,#5
5551  c0a7 e709          	ld	(9,x),a
5552  c0a9               L5361:
5553                     ; 1926           if (pSocket->ParseState == PARSE_NUM1) {       // Still good - parse number
5555  c0a9 1e0e          	ldw	x,(OFST+7,sp)
5556  c0ab e609          	ld	a,(9,x)
5557  c0ad a102          	cp	a,#2
5558  c0af 2703ccc1a3    	jrne	L3161
5559                     ; 1927             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5561  c0b4 1608          	ldw	y,(OFST+1,sp)
5562  c0b6 90f6          	ld	a,(y)
5563  c0b8 a030          	sub	a,#48
5564  c0ba eb08          	add	a,(8,x)
5565  c0bc e708          	ld	(8,x),a
5566                     ; 1928             pSocket->ParseState = PARSE_VAL;
5568  c0be a604          	ld	a,#4
5569                     ; 1929             pSocket->nParseLeft--;
5571                     ; 1930             pBuffer++;
5573  c0c0               LC022:
5574  c0c0 e709          	ld	(9,x),a
5576  c0c2 6a06          	dec	(6,x)
5578  c0c4 1e08          	ldw	x,(OFST+1,sp)
5579  c0c6 5c            	incw	x
5580  c0c7 1f08          	ldw	(OFST+1,sp),x
5581  c0c9 ccc1a3        	jra	L3161
5582  c0cc               L1361:
5583                     ; 1933         else if (pSocket->ParseState == PARSE_VAL) {
5585  c0cc a104          	cp	a,#4
5586  c0ce 2703ccc1ab    	jrne	L3461
5587                     ; 1989           switch(pSocket->ParseNum)
5589  c0d3 e608          	ld	a,(8,x)
5591                     ; 2154 	      break;
5592  c0d5 a03c          	sub	a,#60
5593  c0d7 2731          	jreq	L7111
5594  c0d9 4a            	dec	a
5595  c0da 273d          	jreq	L1211
5596  c0dc a002          	sub	a,#2
5597  c0de 2749          	jreq	L3211
5598  c0e0 4a            	dec	a
5599  c0e1 2756          	jreq	L5211
5600  c0e3 4a            	dec	a
5601  c0e4 2763          	jreq	L7211
5602  c0e6 4a            	dec	a
5603  c0e7 276b          	jreq	L1311
5604  c0e9 4a            	dec	a
5605  c0ea 2778          	jreq	L3311
5606  c0ec a018          	sub	a,#24
5607  c0ee 2603ccc17e    	jreq	L5311
5608  c0f3 a008          	sub	a,#8
5609  c0f5 2603ccc184    	jreq	L7311
5610                     ; 2147 	    default: // Show IO state page
5610                     ; 2148 	      current_webpage = WEBPAGE_DEFAULT;
5612  c0fa 725f001b      	clr	_current_webpage
5613                     ; 2149               pSocket->pData = g_HtmlPageDefault;
5615  c0fe 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5616  c102 ef01          	ldw	(1,x),y
5617                     ; 2150               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5619  c104 90ae09ee      	ldw	y,#2542
5620                     ; 2151               pSocket->nNewlines = 0;
5621                     ; 2152               pSocket->nState = STATE_CONNECTED;
5622                     ; 2153               pSocket->nPrevBytes = 0xFFFF;
5623                     ; 2154 	      break;
5625  c108 206d          	jp	LC021
5626  c10a               L7111:
5627                     ; 2063 	    case 60: // Show IO states page
5627                     ; 2064 	      current_webpage = WEBPAGE_DEFAULT;
5629  c10a c7001b        	ld	_current_webpage,a
5630                     ; 2065               pSocket->pData = g_HtmlPageDefault;
5632  c10d 90ae8088      	ldw	y,#L51_g_HtmlPageDefault
5633  c111 ef01          	ldw	(1,x),y
5634                     ; 2066               pSocket->nDataLeft = sizeof(g_HtmlPageDefault)-1;
5636  c113 90ae09ee      	ldw	y,#2542
5637                     ; 2067               pSocket->nNewlines = 0;
5638                     ; 2068               pSocket->nState = STATE_CONNECTED;
5639                     ; 2069               pSocket->nPrevBytes = 0xFFFF;
5640                     ; 2070 	      break;
5642  c117 2079          	jp	LC020
5643  c119               L1211:
5644                     ; 2072 	    case 61: // Show address settings page
5644                     ; 2073 	      current_webpage = WEBPAGE_ADDRESS;
5646  c119 3501001b      	mov	_current_webpage,#1
5647                     ; 2074               pSocket->pData = g_HtmlPageAddress;
5649  c11d 90ae8a77      	ldw	y,#L71_g_HtmlPageAddress
5650  c121 ef01          	ldw	(1,x),y
5651                     ; 2075               pSocket->nDataLeft = sizeof(g_HtmlPageAddress)-1;
5653  c123 90ae1113      	ldw	y,#4371
5654                     ; 2076               pSocket->nNewlines = 0;
5655                     ; 2077               pSocket->nState = STATE_CONNECTED;
5656                     ; 2078               pSocket->nPrevBytes = 0xFFFF;
5657                     ; 2079 	      break;
5659  c127 2069          	jp	LC020
5660  c129               L3211:
5661                     ; 2082 	    case 63: // Show help page 1
5661                     ; 2083 	      current_webpage = WEBPAGE_HELP;
5663  c129 3503001b      	mov	_current_webpage,#3
5664                     ; 2084               pSocket->pData = g_HtmlPageHelp;
5666  c12d 90ae9b8b      	ldw	y,#L12_g_HtmlPageHelp
5667  c131 ef01          	ldw	(1,x),y
5668                     ; 2085               pSocket->nDataLeft = sizeof(g_HtmlPageHelp)-1;
5670  c133 90ae02fb      	ldw	y,#763
5671                     ; 2086               pSocket->nNewlines = 0;
5672                     ; 2087               pSocket->nState = STATE_CONNECTED;
5673                     ; 2088               pSocket->nPrevBytes = 0xFFFF;
5674                     ; 2089 	      break;
5676  c137 2059          	jp	LC020
5677  c139               L5211:
5678                     ; 2091 	    case 64: // Show help page 2
5678                     ; 2092 	      current_webpage = WEBPAGE_HELP2;
5680  c139 3504001b      	mov	_current_webpage,#4
5681                     ; 2093               pSocket->pData = g_HtmlPageHelp2;
5683  c13d 90ae9e87      	ldw	y,#L32_g_HtmlPageHelp2
5684  c141 ef01          	ldw	(1,x),y
5685                     ; 2094               pSocket->nDataLeft = sizeof(g_HtmlPageHelp2)-1;
5687  c143 90ae02a1      	ldw	y,#673
5688                     ; 2095               pSocket->nNewlines = 0;
5689                     ; 2096               pSocket->nState = STATE_CONNECTED;
5690                     ; 2097               pSocket->nPrevBytes = 0xFFFF;
5691                     ; 2098 	      break;
5693  c147 2049          	jp	LC020
5694  c149               L7211:
5695                     ; 2101 	    case 65: // Flash LED for diagnostics
5695                     ; 2102 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
5695                     ; 2103 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
5695                     ; 2104 	      // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
5695                     ; 2105 	      debugflash();
5697  c149 cdcd90        	call	_debugflash
5699                     ; 2106 	      debugflash();
5701  c14c cdcd90        	call	_debugflash
5703                     ; 2107 	      debugflash();
5705  c14f cdcd90        	call	_debugflash
5707                     ; 2111 	      break;
5709  c152 2049          	jra	L7461
5710  c154               L1311:
5711                     ; 2114             case 66: // Show statistics page
5711                     ; 2115 	      current_webpage = WEBPAGE_STATS;
5713  c154 3505001b      	mov	_current_webpage,#5
5714                     ; 2116               pSocket->pData = g_HtmlPageStats;
5716  c158 90aea129      	ldw	y,#L52_g_HtmlPageStats
5717  c15c ef01          	ldw	(1,x),y
5718                     ; 2117               pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
5720  c15e 90ae0a94      	ldw	y,#2708
5721                     ; 2118               pSocket->nNewlines = 0;
5722                     ; 2119               pSocket->nState = STATE_CONNECTED;
5723                     ; 2120               pSocket->nPrevBytes = 0xFFFF;
5724                     ; 2121 	      break;
5726  c162 202e          	jp	LC020
5727  c164               L3311:
5728                     ; 2123             case 67: // Clear statistics
5728                     ; 2124 	      uip_init_stats();
5730  c164 cdd0e2        	call	_uip_init_stats
5732                     ; 2125 	      current_webpage = WEBPAGE_STATS;
5734  c167 3505001b      	mov	_current_webpage,#5
5735                     ; 2126               pSocket->pData = g_HtmlPageStats;
5737  c16b 1e0e          	ldw	x,(OFST+7,sp)
5738  c16d 90aea129      	ldw	y,#L52_g_HtmlPageStats
5739  c171 ef01          	ldw	(1,x),y
5740                     ; 2127               pSocket->nDataLeft = sizeof(g_HtmlPageStats)-1;
5742  c173 90ae0a94      	ldw	y,#2708
5743                     ; 2128               pSocket->nNewlines = 0;
5745                     ; 2129               pSocket->nState = STATE_CONNECTED;
5747  c177               LC021:
5748  c177 ef03          	ldw	(3,x),y
5750  c179 6f05          	clr	(5,x)
5752  c17b 7f            	clr	(x)
5753                     ; 2130               pSocket->nPrevBytes = 0xFFFF;
5754                     ; 2131 	      break;
5756  c17c 2019          	jp	LC019
5757  c17e               L5311:
5758                     ; 2134 	    case 91: // Reboot
5758                     ; 2135 	      submit_changes = 2;
5760  c17e 35020023      	mov	_submit_changes,#2
5761                     ; 2136 	      break;
5763  c182 2019          	jra	L7461
5764  c184               L7311:
5765                     ; 2138             case 99: // Show simplified IO state page
5765                     ; 2139 	      current_webpage = WEBPAGE_RSTATE;
5767  c184 3506001b      	mov	_current_webpage,#6
5768                     ; 2140               pSocket->pData = g_HtmlPageRstate;
5770  c188 90aeabbe      	ldw	y,#L72_g_HtmlPageRstate
5771  c18c ef01          	ldw	(1,x),y
5772                     ; 2141               pSocket->nDataLeft = sizeof(g_HtmlPageRstate)-1;
5774  c18e 90ae0078      	ldw	y,#120
5775                     ; 2142               pSocket->nNewlines = 0;
5777                     ; 2143               pSocket->nState = STATE_CONNECTED;
5779  c192               LC020:
5780  c192 ef03          	ldw	(3,x),y
5786  c194 e705          	ld	(5,x),a
5792  c196 f7            	ld	(x),a
5793                     ; 2144               pSocket->nPrevBytes = 0xFFFF;
5795  c197               LC019:
5803  c197 90aeffff      	ldw	y,#65535
5804  c19b ef0a          	ldw	(10,x),y
5805                     ; 2145 	      break;
5807  c19d               L7461:
5808                     ; 2156           pSocket->ParseState = PARSE_DELIM;
5810  c19d 1e0e          	ldw	x,(OFST+7,sp)
5811  c19f a605          	ld	a,#5
5812  c1a1 e709          	ld	(9,x),a
5814  c1a3               L3161:
5815                     ; 2170         if (pSocket->nParseLeft == 0) {
5817  c1a3 1e0e          	ldw	x,(OFST+7,sp)
5818  c1a5 e606          	ld	a,(6,x)
5819  c1a7 261c          	jrne	L1061
5820                     ; 2172           pSocket->nState = STATE_SENDHEADER;
5821                     ; 2173           break;
5823  c1a9 2015          	jp	LC023
5824  c1ab               L3461:
5825                     ; 2159         else if (pSocket->ParseState == PARSE_DELIM) {
5827  c1ab a105          	cp	a,#5
5828  c1ad 26f4          	jrne	L3161
5829                     ; 2161           pSocket->ParseState = PARSE_DELIM;
5831  c1af a605          	ld	a,#5
5832  c1b1 e709          	ld	(9,x),a
5833                     ; 2162           pSocket->nParseLeft--;
5835  c1b3 6a06          	dec	(6,x)
5836                     ; 2163           pBuffer++;
5838  c1b5 1e08          	ldw	x,(OFST+1,sp)
5839  c1b7 5c            	incw	x
5840  c1b8 1f08          	ldw	(OFST+1,sp),x
5841                     ; 2164 	  if (pSocket->nParseLeft == 0) {
5843  c1ba 1e0e          	ldw	x,(OFST+7,sp)
5844  c1bc e606          	ld	a,(6,x)
5845  c1be 26e3          	jrne	L3161
5846                     ; 2166             pSocket->nState = STATE_SENDHEADER;
5848  c1c0               LC023:
5850  c1c0 a60b          	ld	a,#11
5851  c1c2 f7            	ld	(x),a
5852                     ; 2167             break;
5854  c1c3 200b          	jra	L5751
5855  c1c5               L1061:
5856                     ; 1877       while (nBytes--) {
5858  c1c5 1e0c          	ldw	x,(OFST+5,sp)
5859  c1c7 5a            	decw	x
5860  c1c8 1f0c          	ldw	(OFST+5,sp),x
5861  c1ca 5c            	incw	x
5862  c1cb 2703ccbffc    	jrne	L7751
5863  c1d0               L5751:
5864                     ; 2178     if (pSocket->nState == STATE_SENDHEADER) {
5866  c1d0 1e0e          	ldw	x,(OFST+7,sp)
5867  c1d2 f6            	ld	a,(x)
5868  c1d3 a10b          	cp	a,#11
5869  c1d5 2623          	jrne	L1661
5870                     ; 2179       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
5872  c1d7 ee03          	ldw	x,(3,x)
5873  c1d9 cde0f2        	call	c_uitolx
5875  c1dc be02          	ldw	x,c_lreg+2
5876  c1de 89            	pushw	x
5877  c1df be00          	ldw	x,c_lreg
5878  c1e1 89            	pushw	x
5879  c1e2 ce01d9        	ldw	x,_uip_appdata
5880  c1e5 cdb29a        	call	L7_CopyHttpHeader
5882  c1e8 5b04          	addw	sp,#4
5883  c1ea 89            	pushw	x
5884  c1eb ce01d9        	ldw	x,_uip_appdata
5885  c1ee cddacf        	call	_uip_send
5887  c1f1 85            	popw	x
5888                     ; 2180       pSocket->nState = STATE_SENDDATA;
5890  c1f2 1e0e          	ldw	x,(OFST+7,sp)
5891  c1f4 a60c          	ld	a,#12
5892  c1f6 f7            	ld	(x),a
5893                     ; 2181       return;
5895  c1f7 ccbc40        	jra	L413
5896  c1fa               L1661:
5897                     ; 2184     if (pSocket->nState == STATE_SENDDATA) {
5899  c1fa a10c          	cp	a,#12
5900  c1fc 26f9          	jrne	L413
5901                     ; 2188       pSocket->nPrevBytes = pSocket->nDataLeft;
5903  c1fe 9093          	ldw	y,x
5904  c200 90ee03        	ldw	y,(3,y)
5905  c203 ef0a          	ldw	(10,x),y
5906                     ; 2189       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5908  c205 ce01d5        	ldw	x,_uip_conn
5909  c208 ee12          	ldw	x,(18,x)
5910  c20a 89            	pushw	x
5911  c20b 1e10          	ldw	x,(OFST+9,sp)
5912  c20d 1c0003        	addw	x,#3
5913  c210 89            	pushw	x
5914  c211 1e12          	ldw	x,(OFST+11,sp)
5915  c213 5c            	incw	x
5916  c214 89            	pushw	x
5917  c215 ce01d9        	ldw	x,_uip_appdata
5918  c218 cdb332        	call	L11_CopyHttpData
5920  c21b 5b06          	addw	sp,#6
5921  c21d 1f01          	ldw	(OFST-6,sp),x
5923                     ; 2190       pSocket->nPrevBytes -= pSocket->nDataLeft;
5925  c21f 1e0e          	ldw	x,(OFST+7,sp)
5926  c221 e60b          	ld	a,(11,x)
5927  c223 e004          	sub	a,(4,x)
5928  c225 e70b          	ld	(11,x),a
5929  c227 e60a          	ld	a,(10,x)
5930  c229 e203          	sbc	a,(3,x)
5931  c22b e70a          	ld	(10,x),a
5932                     ; 2192       if (nBufSize == 0) {
5934  c22d 1e01          	ldw	x,(OFST-6,sp)
5935  c22f 262d          	jrne	LC014
5936                     ; 2194         uip_close();
5938  c231               LC015:
5940  c231 35100088      	mov	_uip_flags,#16
5942  c235 ccbc40        	jra	L413
5943                     ; 2198         uip_send(uip_appdata, nBufSize);
5945                     ; 2200       return;
5947  c238               L3721:
5948                     ; 2204   else if (uip_rexmit()) {
5950  c238 7204008803cc  	btjf	_uip_flags,#2,L1721
5951                     ; 2205     if (pSocket->nPrevBytes == 0xFFFF) {
5953  c240 160e          	ldw	y,(OFST+7,sp)
5954  c242 90ee0a        	ldw	y,(10,y)
5955  c245 905c          	incw	y
5956  c247 2620          	jrne	L5761
5957                     ; 2207       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, pSocket->nDataLeft));
5959  c249 1e0e          	ldw	x,(OFST+7,sp)
5960  c24b ee03          	ldw	x,(3,x)
5961  c24d cde0f2        	call	c_uitolx
5963  c250 be02          	ldw	x,c_lreg+2
5964  c252 89            	pushw	x
5965  c253 be00          	ldw	x,c_lreg
5966  c255 89            	pushw	x
5967  c256 ce01d9        	ldw	x,_uip_appdata
5968  c259 cdb29a        	call	L7_CopyHttpHeader
5970  c25c 5b04          	addw	sp,#4
5972  c25e               LC014:
5974  c25e 89            	pushw	x
5975  c25f ce01d9        	ldw	x,_uip_appdata
5976  c262 cddacf        	call	_uip_send
5977  c265 85            	popw	x
5979  c266 ccbc40        	jra	L413
5980  c269               L5761:
5981                     ; 2210       pSocket->pData -= pSocket->nPrevBytes;
5983  c269 1e0e          	ldw	x,(OFST+7,sp)
5984  c26b e602          	ld	a,(2,x)
5985  c26d e00b          	sub	a,(11,x)
5986  c26f e702          	ld	(2,x),a
5987  c271 e601          	ld	a,(1,x)
5988  c273 e20a          	sbc	a,(10,x)
5989  c275 e701          	ld	(1,x),a
5990                     ; 2211       pSocket->nDataLeft += pSocket->nPrevBytes;
5992  c277 e604          	ld	a,(4,x)
5993  c279 eb0b          	add	a,(11,x)
5994  c27b e704          	ld	(4,x),a
5995  c27d e603          	ld	a,(3,x)
5996  c27f e90a          	adc	a,(10,x)
5997                     ; 2212       pSocket->nPrevBytes = pSocket->nDataLeft;
5999  c281 9093          	ldw	y,x
6000  c283 e703          	ld	(3,x),a
6001  c285 90ee03        	ldw	y,(3,y)
6002  c288 ef0a          	ldw	(10,x),y
6003                     ; 2213       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
6005  c28a ce01d5        	ldw	x,_uip_conn
6006  c28d ee12          	ldw	x,(18,x)
6007  c28f 89            	pushw	x
6008  c290 1e10          	ldw	x,(OFST+9,sp)
6009  c292 1c0003        	addw	x,#3
6010  c295 89            	pushw	x
6011  c296 1e12          	ldw	x,(OFST+11,sp)
6012  c298 5c            	incw	x
6013  c299 89            	pushw	x
6014  c29a ce01d9        	ldw	x,_uip_appdata
6015  c29d cdb332        	call	L11_CopyHttpData
6017  c2a0 5b06          	addw	sp,#6
6018  c2a2 1f01          	ldw	(OFST-6,sp),x
6020                     ; 2214       pSocket->nPrevBytes -= pSocket->nDataLeft;
6022  c2a4 1e0e          	ldw	x,(OFST+7,sp)
6023  c2a6 e60b          	ld	a,(11,x)
6024  c2a8 e004          	sub	a,(4,x)
6025  c2aa e70b          	ld	(11,x),a
6026  c2ac e60a          	ld	a,(10,x)
6027  c2ae e203          	sbc	a,(3,x)
6028  c2b0 e70a          	ld	(10,x),a
6029                     ; 2215       if (nBufSize == 0) {
6031  c2b2 1e01          	ldw	x,(OFST-6,sp)
6032                     ; 2217         uip_close();
6034  c2b4 2603ccc231    	jreq	LC015
6035                     ; 2221         uip_send(uip_appdata, nBufSize);
6037  c2b9 89            	pushw	x
6038  c2ba ce01d9        	ldw	x,_uip_appdata
6039  c2bd cddacf        	call	_uip_send
6041  c2c0 85            	popw	x
6042                     ; 2224     return;
6044  c2c1               L1721:
6045                     ; 2226 }
6047  c2c1 ccbc40        	jra	L413
6081                     ; 2229 uint8_t GpioGetPin(uint8_t nGpio)
6081                     ; 2230 {
6082                     	switch	.text
6083  c2c4               _GpioGetPin:
6085       00000000      OFST:	set	0
6088                     ; 2233   if (nGpio == 0       && (IO_8to1  & (uint8_t)(0x01))) return 1;
6090  c2c4 4d            	tnz	a
6091  c2c5 2607          	jrne	L1271
6093  c2c7 7201005302    	btjf	_IO_8to1,#0,L1271
6096  c2cc 4c            	inc	a
6099  c2cd 81            	ret	
6100  c2ce               L1271:
6101                     ; 2234   else if (nGpio == 1  && (IO_8to1  & (uint8_t)(0x02))) return 1;
6103  c2ce a101          	cp	a,#1
6104  c2d0 2608          	jrne	L5271
6106  c2d2 7203005303    	btjf	_IO_8to1,#1,L5271
6109  c2d7 a601          	ld	a,#1
6112  c2d9 81            	ret	
6113  c2da               L5271:
6114                     ; 2235   else if (nGpio == 2  && (IO_8to1  & (uint8_t)(0x04))) return 1;
6116  c2da a102          	cp	a,#2
6117  c2dc 2608          	jrne	L1371
6119  c2de 7205005303    	btjf	_IO_8to1,#2,L1371
6122  c2e3 a601          	ld	a,#1
6125  c2e5 81            	ret	
6126  c2e6               L1371:
6127                     ; 2236   else if (nGpio == 3  && (IO_8to1  & (uint8_t)(0x08))) return 1;
6129  c2e6 a103          	cp	a,#3
6130  c2e8 2608          	jrne	L5371
6132  c2ea 7207005303    	btjf	_IO_8to1,#3,L5371
6135  c2ef a601          	ld	a,#1
6138  c2f1 81            	ret	
6139  c2f2               L5371:
6140                     ; 2237   else if (nGpio == 4  && (IO_8to1  & (uint8_t)(0x10))) return 1;
6142  c2f2 a104          	cp	a,#4
6143  c2f4 2608          	jrne	L1471
6145  c2f6 7209005303    	btjf	_IO_8to1,#4,L1471
6148  c2fb a601          	ld	a,#1
6151  c2fd 81            	ret	
6152  c2fe               L1471:
6153                     ; 2238   else if (nGpio == 5  && (IO_8to1  & (uint8_t)(0x20))) return 1;
6155  c2fe a105          	cp	a,#5
6156  c300 2608          	jrne	L5471
6158  c302 720b005303    	btjf	_IO_8to1,#5,L5471
6161  c307 a601          	ld	a,#1
6164  c309 81            	ret	
6165  c30a               L5471:
6166                     ; 2239   else if (nGpio == 6  && (IO_8to1  & (uint8_t)(0x40))) return 1;
6168  c30a a106          	cp	a,#6
6169  c30c 2608          	jrne	L1571
6171  c30e 720d005303    	btjf	_IO_8to1,#6,L1571
6174  c313 a601          	ld	a,#1
6177  c315 81            	ret	
6178  c316               L1571:
6179                     ; 2240   else if (nGpio == 7  && (IO_8to1  & (uint8_t)(0x80))) return 1;
6181  c316 a107          	cp	a,#7
6182  c318 2608          	jrne	L5571
6184  c31a 720f005303    	btjf	_IO_8to1,#7,L5571
6187  c31f a601          	ld	a,#1
6190  c321 81            	ret	
6191  c322               L5571:
6192                     ; 2241   else if (nGpio == 8  && (IO_16to9 & (uint8_t)(0x01))) return 1;
6194  c322 a108          	cp	a,#8
6195  c324 2608          	jrne	L1671
6197  c326 7201005403    	btjf	_IO_16to9,#0,L1671
6200  c32b a601          	ld	a,#1
6203  c32d 81            	ret	
6204  c32e               L1671:
6205                     ; 2242   else if (nGpio == 9  && (IO_16to9 & (uint8_t)(0x02))) return 1;
6207  c32e a109          	cp	a,#9
6208  c330 2608          	jrne	L5671
6210  c332 7203005403    	btjf	_IO_16to9,#1,L5671
6213  c337 a601          	ld	a,#1
6216  c339 81            	ret	
6217  c33a               L5671:
6218                     ; 2243   else if (nGpio == 10 && (IO_16to9 & (uint8_t)(0x04))) return 1;
6220  c33a a10a          	cp	a,#10
6221  c33c 2608          	jrne	L1771
6223  c33e 7205005403    	btjf	_IO_16to9,#2,L1771
6226  c343 a601          	ld	a,#1
6229  c345 81            	ret	
6230  c346               L1771:
6231                     ; 2244   else if (nGpio == 11 && (IO_16to9 & (uint8_t)(0x08))) return 1;
6233  c346 a10b          	cp	a,#11
6234  c348 2608          	jrne	L5771
6236  c34a 7207005403    	btjf	_IO_16to9,#3,L5771
6239  c34f a601          	ld	a,#1
6242  c351 81            	ret	
6243  c352               L5771:
6244                     ; 2245   else if (nGpio == 12 && (IO_16to9 & (uint8_t)(0x10))) return 1;
6246  c352 a10c          	cp	a,#12
6247  c354 2608          	jrne	L1002
6249  c356 7209005403    	btjf	_IO_16to9,#4,L1002
6252  c35b a601          	ld	a,#1
6255  c35d 81            	ret	
6256  c35e               L1002:
6257                     ; 2246   else if (nGpio == 13 && (IO_16to9 & (uint8_t)(0x20))) return 1;
6259  c35e a10d          	cp	a,#13
6260  c360 2608          	jrne	L5002
6262  c362 720b005403    	btjf	_IO_16to9,#5,L5002
6265  c367 a601          	ld	a,#1
6268  c369 81            	ret	
6269  c36a               L5002:
6270                     ; 2247   else if (nGpio == 14 && (IO_16to9 & (uint8_t)(0x40))) return 1;
6272  c36a a10e          	cp	a,#14
6273  c36c 2608          	jrne	L1102
6275  c36e 720d005403    	btjf	_IO_16to9,#6,L1102
6278  c373 a601          	ld	a,#1
6281  c375 81            	ret	
6282  c376               L1102:
6283                     ; 2248   else if (nGpio == 15 && (IO_16to9 & (uint8_t)(0x80))) return 1;
6285  c376 a10f          	cp	a,#15
6286  c378 2608          	jrne	L3271
6288  c37a 720f005403    	btjf	_IO_16to9,#7,L3271
6291  c37f a601          	ld	a,#1
6294  c381 81            	ret	
6295  c382               L3271:
6296                     ; 2249   return 0;
6298  c382 4f            	clr	a
6301  c383 81            	ret	
6333                     ; 2382 void GpioSetPin(uint8_t nGpio, uint8_t nState)
6333                     ; 2383 {
6334                     	switch	.text
6335  c384               _GpioSetPin:
6339                     ; 2385 }
6342  c384 81            	ret	
6432                     	switch	.const
6433  ac7b               L033:
6434  ac7b c3ba          	dc.w	L3302
6435  ac7d c3c1          	dc.w	L5302
6436  ac7f c3c8          	dc.w	L7302
6437  ac81 c3cf          	dc.w	L1402
6438  ac83 c3d6          	dc.w	L3402
6439  ac85 c3dd          	dc.w	L5402
6440  ac87 c3e4          	dc.w	L7402
6441  ac89 c3eb          	dc.w	L1502
6442  ac8b c3f2          	dc.w	L3502
6443  ac8d c3f9          	dc.w	L5502
6444  ac8f c400          	dc.w	L7502
6445  ac91 c407          	dc.w	L1602
6446                     ; 2389 void SetAddresses(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3)
6446                     ; 2390 {
6447                     	switch	.text
6448  c385               _SetAddresses:
6450  c385 89            	pushw	x
6451  c386 5207          	subw	sp,#7
6452       00000007      OFST:	set	7
6455                     ; 2403   temp = 0;
6457                     ; 2404   invalid = 0;
6459  c388 0f01          	clr	(OFST-6,sp)
6461                     ; 2407   str[0] = (uint8_t)alpha1;
6463  c38a 9f            	ld	a,xl
6464  c38b 6b02          	ld	(OFST-5,sp),a
6466                     ; 2408   str[1] = (uint8_t)alpha2;
6468  c38d 7b0c          	ld	a,(OFST+5,sp)
6469  c38f 6b03          	ld	(OFST-4,sp),a
6471                     ; 2409   str[2] = (uint8_t)alpha3;
6473  c391 7b0d          	ld	a,(OFST+6,sp)
6474  c393 6b04          	ld	(OFST-3,sp),a
6476                     ; 2410   str[3] = 0;
6478  c395 0f05          	clr	(OFST-2,sp)
6480                     ; 2411   temp = atoi(str);
6482  c397 96            	ldw	x,sp
6483  c398 1c0002        	addw	x,#OFST-5
6484  c39b cdde8c        	call	_atoi
6486  c39e 1f06          	ldw	(OFST-1,sp),x
6488                     ; 2412   if (temp > 255) invalid = 1; // If an invalid entry set indicator
6490  c3a0 a30100        	cpw	x,#256
6491  c3a3 2504          	jrult	L7112
6494  c3a5 a601          	ld	a,#1
6495  c3a7 6b01          	ld	(OFST-6,sp),a
6497  c3a9               L7112:
6498                     ; 2414   if (invalid == 0) { // Make change only if valid entry
6500  c3a9 7b01          	ld	a,(OFST-6,sp)
6501  c3ab 265f          	jrne	L1212
6502                     ; 2415     switch(itemnum)
6504  c3ad 7b08          	ld	a,(OFST+1,sp)
6506                     ; 2429     default: break;
6507  c3af a10c          	cp	a,#12
6508  c3b1 2459          	jruge	L1212
6509  c3b3 5f            	clrw	x
6510  c3b4 97            	ld	xl,a
6511  c3b5 58            	sllw	x
6512  c3b6 deac7b        	ldw	x,(L033,x)
6513  c3b9 fc            	jp	(x)
6514  c3ba               L3302:
6515                     ; 2417     case 0:  Pending_hostaddr4 = (uint8_t)temp; break;
6517  c3ba 7b07          	ld	a,(OFST+0,sp)
6518  c3bc c7003d        	ld	_Pending_hostaddr4,a
6521  c3bf 204b          	jra	L1212
6522  c3c1               L5302:
6523                     ; 2418     case 1:  Pending_hostaddr3 = (uint8_t)temp; break;
6525  c3c1 7b07          	ld	a,(OFST+0,sp)
6526  c3c3 c7003c        	ld	_Pending_hostaddr3,a
6529  c3c6 2044          	jra	L1212
6530  c3c8               L7302:
6531                     ; 2419     case 2:  Pending_hostaddr2 = (uint8_t)temp; break;
6533  c3c8 7b07          	ld	a,(OFST+0,sp)
6534  c3ca c7003b        	ld	_Pending_hostaddr2,a
6537  c3cd 203d          	jra	L1212
6538  c3cf               L1402:
6539                     ; 2420     case 3:  Pending_hostaddr1 = (uint8_t)temp; break;
6541  c3cf 7b07          	ld	a,(OFST+0,sp)
6542  c3d1 c7003a        	ld	_Pending_hostaddr1,a
6545  c3d4 2036          	jra	L1212
6546  c3d6               L3402:
6547                     ; 2421     case 4:  Pending_draddr4 = (uint8_t)temp; break;
6549  c3d6 7b07          	ld	a,(OFST+0,sp)
6550  c3d8 c70039        	ld	_Pending_draddr4,a
6553  c3db 202f          	jra	L1212
6554  c3dd               L5402:
6555                     ; 2422     case 5:  Pending_draddr3 = (uint8_t)temp; break;
6557  c3dd 7b07          	ld	a,(OFST+0,sp)
6558  c3df c70038        	ld	_Pending_draddr3,a
6561  c3e2 2028          	jra	L1212
6562  c3e4               L7402:
6563                     ; 2423     case 6:  Pending_draddr2 = (uint8_t)temp; break;
6565  c3e4 7b07          	ld	a,(OFST+0,sp)
6566  c3e6 c70037        	ld	_Pending_draddr2,a
6569  c3e9 2021          	jra	L1212
6570  c3eb               L1502:
6571                     ; 2424     case 7:  Pending_draddr1 = (uint8_t)temp; break;
6573  c3eb 7b07          	ld	a,(OFST+0,sp)
6574  c3ed c70036        	ld	_Pending_draddr1,a
6577  c3f0 201a          	jra	L1212
6578  c3f2               L3502:
6579                     ; 2425     case 8:  Pending_netmask4 = (uint8_t)temp; break;
6581  c3f2 7b07          	ld	a,(OFST+0,sp)
6582  c3f4 c70035        	ld	_Pending_netmask4,a
6585  c3f7 2013          	jra	L1212
6586  c3f9               L5502:
6587                     ; 2426     case 9:  Pending_netmask3 = (uint8_t)temp; break;
6589  c3f9 7b07          	ld	a,(OFST+0,sp)
6590  c3fb c70034        	ld	_Pending_netmask3,a
6593  c3fe 200c          	jra	L1212
6594  c400               L7502:
6595                     ; 2427     case 10: Pending_netmask2 = (uint8_t)temp; break;
6597  c400 7b07          	ld	a,(OFST+0,sp)
6598  c402 c70033        	ld	_Pending_netmask2,a
6601  c405 2005          	jra	L1212
6602  c407               L1602:
6603                     ; 2428     case 11: Pending_netmask1 = (uint8_t)temp; break;
6605  c407 7b07          	ld	a,(OFST+0,sp)
6606  c409 c70032        	ld	_Pending_netmask1,a
6609                     ; 2429     default: break;
6611  c40c               L1212:
6612                     ; 2432 }
6615  c40c 5b09          	addw	sp,#9
6616  c40e 81            	ret	
6709                     ; 2435 void SetPort(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2, uint8_t alpha3, uint8_t alpha4, uint8_t alpha5)
6709                     ; 2436 {
6710                     	switch	.text
6711  c40f               _SetPort:
6713  c40f 89            	pushw	x
6714  c410 5209          	subw	sp,#9
6715       00000009      OFST:	set	9
6718                     ; 2449   temp = 0;
6720  c412 5f            	clrw	x
6721  c413 1f01          	ldw	(OFST-8,sp),x
6723                     ; 2450   invalid = 0;
6725  c415 0f03          	clr	(OFST-6,sp)
6727                     ; 2453   if (alpha1 > '6') invalid = 1;
6729  c417 7b0b          	ld	a,(OFST+2,sp)
6730  c419 a137          	cp	a,#55
6731  c41b 2506          	jrult	L5612
6734  c41d a601          	ld	a,#1
6735  c41f 6b03          	ld	(OFST-6,sp),a
6738  c421 201d          	jra	L7612
6739  c423               L5612:
6740                     ; 2455     str[0] = (uint8_t)alpha1;
6742  c423 6b04          	ld	(OFST-5,sp),a
6744                     ; 2456     str[1] = (uint8_t)alpha2;
6746  c425 7b0e          	ld	a,(OFST+5,sp)
6747  c427 6b05          	ld	(OFST-4,sp),a
6749                     ; 2457     str[2] = (uint8_t)alpha3;
6751  c429 7b0f          	ld	a,(OFST+6,sp)
6752  c42b 6b06          	ld	(OFST-3,sp),a
6754                     ; 2458     str[3] = (uint8_t)alpha4;
6756  c42d 7b10          	ld	a,(OFST+7,sp)
6757  c42f 6b07          	ld	(OFST-2,sp),a
6759                     ; 2459     str[4] = (uint8_t)alpha5;
6761  c431 7b11          	ld	a,(OFST+8,sp)
6762  c433 6b08          	ld	(OFST-1,sp),a
6764                     ; 2460     str[5] = 0;
6766  c435 0f09          	clr	(OFST+0,sp)
6768                     ; 2461     temp = atoi(str);
6770  c437 96            	ldw	x,sp
6771  c438 1c0004        	addw	x,#OFST-5
6772  c43b cdde8c        	call	_atoi
6774  c43e 1f01          	ldw	(OFST-8,sp),x
6776  c440               L7612:
6777                     ; 2464   if (temp < 10) invalid = 1;
6779  c440 a3000a        	cpw	x,#10
6780  c443 2404          	jruge	L1712
6783  c445 a601          	ld	a,#1
6784  c447 6b03          	ld	(OFST-6,sp),a
6786  c449               L1712:
6787                     ; 2466   if (invalid == 0) { // Make change only if valid entry
6789  c449 7b03          	ld	a,(OFST-6,sp)
6790  c44b 2603          	jrne	L3712
6791                     ; 2467     Pending_port = (uint16_t)temp;
6793  c44d cf0030        	ldw	_Pending_port,x
6794  c450               L3712:
6795                     ; 2469 }
6798  c450 5b0b          	addw	sp,#11
6799  c452 81            	ret	
6865                     ; 2472 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
6865                     ; 2473 {
6866                     	switch	.text
6867  c453               _SetMAC:
6869  c453 89            	pushw	x
6870  c454 5203          	subw	sp,#3
6871       00000003      OFST:	set	3
6874                     ; 2485   temp = 0;
6876                     ; 2486   invalid = 0;
6878  c456 0f01          	clr	(OFST-2,sp)
6880                     ; 2489   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
6882  c458 9f            	ld	a,xl
6883  c459 a130          	cp	a,#48
6884  c45b 250b          	jrult	L7322
6886  c45d 9f            	ld	a,xl
6887  c45e a13a          	cp	a,#58
6888  c460 2406          	jruge	L7322
6891  c462 7b05          	ld	a,(OFST+2,sp)
6892  c464 a030          	sub	a,#48
6894  c466 200c          	jp	LC028
6895  c468               L7322:
6896                     ; 2490   else if (alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
6898  c468 7b05          	ld	a,(OFST+2,sp)
6899  c46a a161          	cp	a,#97
6900  c46c 250a          	jrult	L3422
6902  c46e a167          	cp	a,#103
6903  c470 2406          	jruge	L3422
6906  c472 a057          	sub	a,#87
6907  c474               LC028:
6908  c474 6b05          	ld	(OFST+2,sp),a
6910  c476 2004          	jra	L1422
6911  c478               L3422:
6912                     ; 2491   else invalid = 1; // If an invalid entry set indicator
6914  c478 a601          	ld	a,#1
6915  c47a 6b01          	ld	(OFST-2,sp),a
6917  c47c               L1422:
6918                     ; 2493   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
6920  c47c 7b08          	ld	a,(OFST+5,sp)
6921  c47e a130          	cp	a,#48
6922  c480 2508          	jrult	L7422
6924  c482 a13a          	cp	a,#58
6925  c484 2404          	jruge	L7422
6928  c486 a030          	sub	a,#48
6930  c488 200a          	jp	LC029
6931  c48a               L7422:
6932                     ; 2494   else if (alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
6934  c48a a161          	cp	a,#97
6935  c48c 250a          	jrult	L3522
6937  c48e a167          	cp	a,#103
6938  c490 2406          	jruge	L3522
6941  c492 a057          	sub	a,#87
6942  c494               LC029:
6943  c494 6b08          	ld	(OFST+5,sp),a
6945  c496 2004          	jra	L1522
6946  c498               L3522:
6947                     ; 2495   else invalid = 1; // If an invalid entry set indicator
6949  c498 a601          	ld	a,#1
6950  c49a 6b01          	ld	(OFST-2,sp),a
6952  c49c               L1522:
6953                     ; 2497   if (invalid == 0) { // Change value only if valid entry
6955  c49c 7b01          	ld	a,(OFST-2,sp)
6956  c49e 264a          	jrne	L7522
6957                     ; 2498     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
6959  c4a0 7b05          	ld	a,(OFST+2,sp)
6960  c4a2 97            	ld	xl,a
6961  c4a3 a610          	ld	a,#16
6962  c4a5 42            	mul	x,a
6963  c4a6 01            	rrwa	x,a
6964  c4a7 1b08          	add	a,(OFST+5,sp)
6965  c4a9 5f            	clrw	x
6966  c4aa 97            	ld	xl,a
6967  c4ab 1f02          	ldw	(OFST-1,sp),x
6969                     ; 2499     switch(itemnum)
6971  c4ad 7b04          	ld	a,(OFST+1,sp)
6973                     ; 2507     default: break;
6974  c4af 2711          	jreq	L5712
6975  c4b1 4a            	dec	a
6976  c4b2 2715          	jreq	L7712
6977  c4b4 4a            	dec	a
6978  c4b5 2719          	jreq	L1022
6979  c4b7 4a            	dec	a
6980  c4b8 271d          	jreq	L3022
6981  c4ba 4a            	dec	a
6982  c4bb 2721          	jreq	L5022
6983  c4bd 4a            	dec	a
6984  c4be 2725          	jreq	L7022
6985  c4c0 2028          	jra	L7522
6986  c4c2               L5712:
6987                     ; 2501     case 0: Pending_uip_ethaddr1 = (uint8_t)temp; break;
6989  c4c2 7b03          	ld	a,(OFST+0,sp)
6990  c4c4 c7002a        	ld	_Pending_uip_ethaddr1,a
6993  c4c7 2021          	jra	L7522
6994  c4c9               L7712:
6995                     ; 2502     case 1: Pending_uip_ethaddr2 = (uint8_t)temp; break;
6997  c4c9 7b03          	ld	a,(OFST+0,sp)
6998  c4cb c7002b        	ld	_Pending_uip_ethaddr2,a
7001  c4ce 201a          	jra	L7522
7002  c4d0               L1022:
7003                     ; 2503     case 2: Pending_uip_ethaddr3 = (uint8_t)temp; break;
7005  c4d0 7b03          	ld	a,(OFST+0,sp)
7006  c4d2 c7002c        	ld	_Pending_uip_ethaddr3,a
7009  c4d5 2013          	jra	L7522
7010  c4d7               L3022:
7011                     ; 2504     case 3: Pending_uip_ethaddr4 = (uint8_t)temp; break;
7013  c4d7 7b03          	ld	a,(OFST+0,sp)
7014  c4d9 c7002d        	ld	_Pending_uip_ethaddr4,a
7017  c4dc 200c          	jra	L7522
7018  c4de               L5022:
7019                     ; 2505     case 4: Pending_uip_ethaddr5 = (uint8_t)temp; break;
7021  c4de 7b03          	ld	a,(OFST+0,sp)
7022  c4e0 c7002e        	ld	_Pending_uip_ethaddr5,a
7025  c4e3 2005          	jra	L7522
7026  c4e5               L7022:
7027                     ; 2506     case 5: Pending_uip_ethaddr6 = (uint8_t)temp; break;
7029  c4e5 7b03          	ld	a,(OFST+0,sp)
7030  c4e7 c7002f        	ld	_Pending_uip_ethaddr6,a
7033                     ; 2507     default: break;
7035  c4ea               L7522:
7036                     ; 2510 }
7039  c4ea 5b05          	addw	sp,#5
7040  c4ec 81            	ret	
7142                     	switch	.bss
7143  0010               _OctetArray:
7144  0010 000000000000  	ds.b	11
7145                     	xdef	_OctetArray
7146                     	xref	_submit_changes
7147                     	xref	_ex_stored_devicename
7148                     	xref	_uip_ethaddr6
7149                     	xref	_uip_ethaddr5
7150                     	xref	_uip_ethaddr4
7151                     	xref	_uip_ethaddr3
7152                     	xref	_uip_ethaddr2
7153                     	xref	_uip_ethaddr1
7154                     	xref	_ex_stored_port
7155                     	xref	_ex_stored_netmask1
7156                     	xref	_ex_stored_netmask2
7157                     	xref	_ex_stored_netmask3
7158                     	xref	_ex_stored_netmask4
7159                     	xref	_ex_stored_draddr1
7160                     	xref	_ex_stored_draddr2
7161                     	xref	_ex_stored_draddr3
7162                     	xref	_ex_stored_draddr4
7163                     	xref	_ex_stored_hostaddr1
7164                     	xref	_ex_stored_hostaddr2
7165                     	xref	_ex_stored_hostaddr3
7166                     	xref	_ex_stored_hostaddr4
7167                     	xref	_Pending_uip_ethaddr6
7168                     	xref	_Pending_uip_ethaddr5
7169                     	xref	_Pending_uip_ethaddr4
7170                     	xref	_Pending_uip_ethaddr3
7171                     	xref	_Pending_uip_ethaddr2
7172                     	xref	_Pending_uip_ethaddr1
7173                     	xref	_Pending_port
7174                     	xref	_Pending_netmask1
7175                     	xref	_Pending_netmask2
7176                     	xref	_Pending_netmask3
7177                     	xref	_Pending_netmask4
7178                     	xref	_Pending_draddr1
7179                     	xref	_Pending_draddr2
7180                     	xref	_Pending_draddr3
7181                     	xref	_Pending_draddr4
7182                     	xref	_Pending_hostaddr1
7183                     	xref	_Pending_hostaddr2
7184                     	xref	_Pending_hostaddr3
7185                     	xref	_Pending_hostaddr4
7186                     	xref	_invert_output
7187                     	xref	_IO_8to1
7188                     	xref	_IO_16to9
7189                     	xref	_Port_Httpd
7190  001b               _current_webpage:
7191  001b 00            	ds.b	1
7192                     	xdef	_current_webpage
7193                     	xref	_atoi
7194                     	xref	_debugflash
7195                     	xref	_uip_flags
7196                     	xref	_uip_stat
7197                     	xref	_uip_conn
7198                     	xref	_uip_appdata
7199                     	xref	_htons
7200                     	xref	_uip_send
7201                     	xref	_uip_listen
7202                     	xref	_uip_init_stats
7203                     	xdef	_SetMAC
7204                     	xdef	_SetPort
7205                     	xdef	_SetAddresses
7206                     	xdef	_GpioSetPin
7207                     	xdef	_GpioGetPin
7208                     	xdef	_HttpDCall
7209                     	xdef	_HttpDInit
7210                     	xdef	_reverse
7211                     	xdef	_emb_itoa
7212                     	xdef	_two_alpha_to_uint
7213                     	xdef	_three_alpha_to_uint
7214                     	switch	.const
7215  ac93               L714:
7216  ac93 436f6e6e6563  	dc.b	"Connection:close",13
7217  aca4 0a00          	dc.b	10,0
7218  aca6               L514:
7219  aca6 436f6e74656e  	dc.b	"Content-Type:text/"
7220  acb8 68746d6c0d    	dc.b	"html",13
7221  acbd 0a00          	dc.b	10,0
7222  acbf               L314:
7223  acbf 436f6e74656e  	dc.b	"Content-Length:",0
7224  accf               L114:
7225  accf 0d0a00        	dc.b	13,10,0
7226  acd2               L704:
7227  acd2 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
7228                     	xref.b	c_lreg
7229                     	xref.b	c_x
7230                     	xref.b	c_y
7250                     	xref	c_uitolx
7251                     	xref	c_ludv
7252                     	xref	c_lumd
7253                     	xref	c_rtol
7254                     	xref	c_ltor
7255                     	xref	c_lzmp
7256                     	end
