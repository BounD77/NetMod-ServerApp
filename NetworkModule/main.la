   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2581                     ; 164 main(void)
2581                     ; 165 {
2583                     	switch	.text
2584  c4ed               _main:
2586  c4ed 89            	pushw	x
2587       00000002      OFST:	set	2
2590                     ; 169   devicename_changed = 0;
2592  c4ee 725f0022      	clr	_devicename_changed
2593                     ; 170   submit_changes = 0;
2595  c4f2 725f0023      	clr	_submit_changes
2596                     ; 172   clock_init();            // Initialize and enable clocks and timers
2598  c4f6 cdceb4        	call	_clock_init
2600                     ; 174   gpio_init();             // Initialize and enable gpio pins
2602  c4f9 cdb013        	call	_gpio_init
2604                     ; 176   spi_init();              // Initialize the SPI bit bang interface to the
2606  c4fc cdcdbc        	call	_spi_init
2608                     ; 179   LEDcontrol(1);           // turn LED on
2610  c4ff a601          	ld	a,#1
2611  c501 cdb05c        	call	_LEDcontrol
2613                     ; 181   unlock_eeprom();         // unlock the EEPROM so writes can be performed
2615  c504 cdc5a7        	call	_unlock_eeprom
2617                     ; 183   check_eeprom_settings(); // Check the EEPROM for previously stored Address
2619  c507 cdc5b7        	call	_check_eeprom_settings
2621                     ; 187   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
2623  c50a cdade7        	call	_Enc28j60Init
2625                     ; 189   uip_arp_init();          // Initialize the ARP module
2627  c50d cddaf3        	call	_uip_arp_init
2629                     ; 191   uip_init();              // Initialize uIP Web Server
2631  c510 cdd0b2        	call	_uip_init
2633                     ; 193   HttpDInit();             // Initialize listening ports
2635  c513 cdbb6f        	call	_HttpDInit
2637  c516               L1561:
2638                     ; 196     uip_len = Enc28j60Receive(uip_buf); // Check for incoming packets
2640  c516 ae01db        	ldw	x,#_uip_buf
2641  c519 cdaf00        	call	_Enc28j60Receive
2643  c51c cf01d7        	ldw	_uip_len,x
2644                     ; 198     if (uip_len> 0) {
2646  c51f 273b          	jreq	L5561
2647                     ; 199       if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_IP)) {
2649  c521 ae0800        	ldw	x,#2048
2650  c524 cddace        	call	_htons
2652  c527 c301e7        	cpw	x,_uip_buf+12
2653  c52a 2612          	jrne	L7561
2654                     ; 201 	uip_input(); // Calls uip_process(UIP_DATA) to process incoming packet
2656  c52c a601          	ld	a,#1
2657  c52e cdd1d5        	call	_uip_process
2659                     ; 204         if (uip_len> 0) {
2661  c531 ce01d7        	ldw	x,_uip_len
2662  c534 2726          	jreq	L5561
2663                     ; 205           uip_arp_out();
2665  c536 cddd1c        	call	_uip_arp_out
2667                     ; 209           Enc28j60CopyPacket(uip_buf, uip_len);
2669  c539 ce01d7        	ldw	x,_uip_len
2671                     ; 210           Enc28j60Send();
2673  c53c 2013          	jp	LC001
2674  c53e               L7561:
2675                     ; 213       else if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_ARP)) {
2677  c53e ae0806        	ldw	x,#2054
2678  c541 cddace        	call	_htons
2680  c544 c301e7        	cpw	x,_uip_buf+12
2681  c547 2613          	jrne	L5561
2682                     ; 214         uip_arp_arpin();
2684  c549 cddc6d        	call	_uip_arp_arpin
2686                     ; 217         if (uip_len> 0) {
2688  c54c ce01d7        	ldw	x,_uip_len
2689  c54f 270b          	jreq	L5561
2690                     ; 221           Enc28j60CopyPacket(uip_buf, uip_len);
2693                     ; 222           Enc28j60Send();
2695  c551               LC001:
2696  c551 89            	pushw	x
2697  c552 ae01db        	ldw	x,#_uip_buf
2698  c555 cdaf9c        	call	_Enc28j60CopyPacket
2699  c558 85            	popw	x
2701  c559 cdb001        	call	_Enc28j60Send
2703  c55c               L5561:
2704                     ; 227     if (periodic_timer_expired()) {
2706  c55c cdcf3b        	call	_periodic_timer_expired
2708  c55f 4d            	tnz	a
2709  c560 2733          	jreq	L1761
2710                     ; 228       for(i = 0; i < UIP_CONNS; i++) {
2712  c562 5f            	clrw	x
2713  c563 1f01          	ldw	(OFST-1,sp),x
2715  c565               L1071:
2716                     ; 229 	uip_periodic(i);
2718  c565 a628          	ld	a,#40
2719  c567 cddef6        	call	c_bmulx
2721  c56a 1c00e5        	addw	x,#_uip_conns
2722  c56d cf01d5        	ldw	_uip_conn,x
2725  c570 a602          	ld	a,#2
2726  c572 cdd1d5        	call	_uip_process
2728                     ; 232 	if (uip_len > 0) {
2730  c575 ce01d7        	ldw	x,_uip_len
2731  c578 2711          	jreq	L5071
2732                     ; 233 	  uip_arp_out();
2734  c57a cddd1c        	call	_uip_arp_out
2736                     ; 237           Enc28j60CopyPacket(uip_buf, uip_len);
2738  c57d ce01d7        	ldw	x,_uip_len
2739  c580 89            	pushw	x
2740  c581 ae01db        	ldw	x,#_uip_buf
2741  c584 cdaf9c        	call	_Enc28j60CopyPacket
2743  c587 85            	popw	x
2744                     ; 238           Enc28j60Send();
2746  c588 cdb001        	call	_Enc28j60Send
2748  c58b               L5071:
2749                     ; 228       for(i = 0; i < UIP_CONNS; i++) {
2751  c58b 1e01          	ldw	x,(OFST-1,sp)
2752  c58d 5c            	incw	x
2753  c58e 1f01          	ldw	(OFST-1,sp),x
2757  c590 a30006        	cpw	x,#6
2758  c593 2fd0          	jrslt	L1071
2759  c595               L1761:
2760                     ; 244     if (arp_timer_expired()) uip_arp_timer();
2762  c595 cdcf5b        	call	_arp_timer_expired
2764  c598 4d            	tnz	a
2765  c599 2703          	jreq	L7071
2768  c59b cddb16        	call	_uip_arp_timer
2770  c59e               L7071:
2771                     ; 248     check_runtime_changes();
2773  c59e cdc936        	call	_check_runtime_changes
2775                     ; 251     check_reset_button();
2777  c5a1 cdcc00        	call	_check_reset_button
2780  c5a4 ccc516        	jra	L1561
2805                     ; 276 void unlock_eeprom(void)
2805                     ; 277 {
2806                     	switch	.text
2807  c5a7               _unlock_eeprom:
2811  c5a7 2008          	jra	L3271
2812  c5a9               L1271:
2813                     ; 286     FLASH_DUKR = 0xAE; // MASS key 1
2815  c5a9 35ae5064      	mov	_FLASH_DUKR,#174
2816                     ; 287     FLASH_DUKR = 0x56; // MASS key 2
2818  c5ad 35565064      	mov	_FLASH_DUKR,#86
2819  c5b1               L3271:
2820                     ; 285   while (!(FLASH_IAPSR & 0x08)) {  // Check DUL bit, 0=Protected
2822  c5b1 7207505ff3    	btjf	_FLASH_IAPSR,#3,L1271
2823                     ; 289 }
2826  c5b6 81            	ret	
2931                     ; 292 void check_eeprom_settings(void)
2931                     ; 293 {
2932                     	switch	.text
2933  c5b7               _check_eeprom_settings:
2935  c5b7 88            	push	a
2936       00000001      OFST:	set	1
2939                     ; 305   if ((magic4 == 0x55) && 
2939                     ; 306       (magic3 == 0xee) && 
2939                     ; 307       (magic2 == 0x0f) && 
2939                     ; 308       (magic1 == 0xf0) == 1) {
2941  c5b8 c6402e        	ld	a,_magic4
2942  c5bb a155          	cp	a,#85
2943  c5bd 2703ccc69d    	jrne	L5002
2945  c5c2 c6402d        	ld	a,_magic3
2946  c5c5 a1ee          	cp	a,#238
2947  c5c7 26f6          	jrne	L5002
2949  c5c9 c6402c        	ld	a,_magic2
2950  c5cc a10f          	cp	a,#15
2951  c5ce 26ef          	jrne	L5002
2953  c5d0 c6402b        	ld	a,_magic1
2954  c5d3 a1f0          	cp	a,#240
2955  c5d5 26e8          	jrne	L5002
2956                     ; 313     uip_ipaddr(IpAddr, stored_hostaddr4, stored_hostaddr3, stored_hostaddr2, stored_hostaddr1);
2958  c5d7 c6402a        	ld	a,_stored_hostaddr4
2959  c5da 97            	ld	xl,a
2960  c5db c64029        	ld	a,_stored_hostaddr3
2961  c5de 02            	rlwa	x,a
2962  c5df cf001c        	ldw	_IpAddr,x
2965  c5e2 c64028        	ld	a,_stored_hostaddr2
2966  c5e5 97            	ld	xl,a
2967  c5e6 c64027        	ld	a,_stored_hostaddr1
2968  c5e9 02            	rlwa	x,a
2969  c5ea cf001e        	ldw	_IpAddr+2,x
2970                     ; 314     uip_sethostaddr(IpAddr);
2972  c5ed ce001c        	ldw	x,_IpAddr
2973  c5f0 cf0084        	ldw	_uip_hostaddr,x
2976  c5f3 ce001e        	ldw	x,_IpAddr+2
2977  c5f6 cf0086        	ldw	_uip_hostaddr+2,x
2978                     ; 317     uip_ipaddr(IpAddr, stored_draddr4, stored_draddr3, stored_draddr2, stored_draddr1);
2980  c5f9 c64026        	ld	a,_stored_draddr4
2981  c5fc 97            	ld	xl,a
2982  c5fd c64025        	ld	a,_stored_draddr3
2983  c600 02            	rlwa	x,a
2984  c601 cf001c        	ldw	_IpAddr,x
2987  c604 c64024        	ld	a,_stored_draddr2
2988  c607 97            	ld	xl,a
2989  c608 c64023        	ld	a,_stored_draddr1
2990  c60b 02            	rlwa	x,a
2991  c60c cf001e        	ldw	_IpAddr+2,x
2992                     ; 318     uip_setdraddr(IpAddr);
2994  c60f ce001c        	ldw	x,_IpAddr
2995  c612 cf007c        	ldw	_uip_draddr,x
2998  c615 ce001e        	ldw	x,_IpAddr+2
2999  c618 cf007e        	ldw	_uip_draddr+2,x
3000                     ; 321     uip_ipaddr(IpAddr, stored_netmask4, stored_netmask3, stored_netmask2, stored_netmask1);
3002  c61b c64022        	ld	a,_stored_netmask4
3003  c61e 97            	ld	xl,a
3004  c61f c64021        	ld	a,_stored_netmask3
3005  c622 02            	rlwa	x,a
3006  c623 cf001c        	ldw	_IpAddr,x
3009  c626 c64020        	ld	a,_stored_netmask2
3010  c629 97            	ld	xl,a
3011  c62a c6401f        	ld	a,_stored_netmask1
3012  c62d 02            	rlwa	x,a
3013  c62e cf001e        	ldw	_IpAddr+2,x
3014                     ; 322     uip_setnetmask(IpAddr);
3016  c631 ce001c        	ldw	x,_IpAddr
3017  c634 cf0080        	ldw	_uip_netmask,x
3020  c637 ce001e        	ldw	x,_IpAddr+2
3021  c63a cf0082        	ldw	_uip_netmask+2,x
3022                     ; 325     Port_Httpd = stored_port;
3024  c63d ce401d        	ldw	x,_stored_port
3025  c640 cf0020        	ldw	_Port_Httpd,x
3026                     ; 328     uip_ethaddr6 = stored_uip_ethaddr6;
3028  c643 5540170029    	mov	_uip_ethaddr6,_stored_uip_ethaddr6
3029                     ; 329     uip_ethaddr5 = stored_uip_ethaddr5;
3031  c648 5540180028    	mov	_uip_ethaddr5,_stored_uip_ethaddr5
3032                     ; 330     uip_ethaddr4 = stored_uip_ethaddr4;
3034  c64d 5540190027    	mov	_uip_ethaddr4,_stored_uip_ethaddr4
3035                     ; 331     uip_ethaddr3 = stored_uip_ethaddr3;
3037  c652 55401a0026    	mov	_uip_ethaddr3,_stored_uip_ethaddr3
3038                     ; 332     uip_ethaddr2 = stored_uip_ethaddr2;
3040  c657 55401b0025    	mov	_uip_ethaddr2,_stored_uip_ethaddr2
3041                     ; 333     uip_ethaddr1 = stored_uip_ethaddr1;
3043  c65c 55401c0024    	mov	_uip_ethaddr1,_stored_uip_ethaddr1
3044                     ; 335     uip_ethaddr.addr[0] = uip_ethaddr1;
3046  c661 550024000a    	mov	_uip_ethaddr,_uip_ethaddr1
3047                     ; 336     uip_ethaddr.addr[1] = uip_ethaddr2;
3049  c666 550025000b    	mov	_uip_ethaddr+1,_uip_ethaddr2
3050                     ; 337     uip_ethaddr.addr[2] = uip_ethaddr3;
3052  c66b 550026000c    	mov	_uip_ethaddr+2,_uip_ethaddr3
3053                     ; 338     uip_ethaddr.addr[3] = uip_ethaddr4;
3055  c670 550027000d    	mov	_uip_ethaddr+3,_uip_ethaddr4
3056                     ; 339     uip_ethaddr.addr[4] = uip_ethaddr5;
3058  c675 550028000e    	mov	_uip_ethaddr+4,_uip_ethaddr5
3059                     ; 340     uip_ethaddr.addr[5] = uip_ethaddr6;
3061                     ; 343     for(i=0; i<20; i++) { ex_stored_devicename[i] = stored_devicename[i]; }
3063  c67a 4f            	clr	a
3064  c67b 550029000f    	mov	_uip_ethaddr+5,_uip_ethaddr6
3065  c680 6b01          	ld	(OFST+0,sp),a
3067  c682               L5771:
3070  c682 5f            	clrw	x
3071  c683 97            	ld	xl,a
3072  c684 d64000        	ld	a,(_stored_devicename,x)
3073  c687 d7003e        	ld	(_ex_stored_devicename,x),a
3076  c68a 0c01          	inc	(OFST+0,sp)
3080  c68c 7b01          	ld	a,(OFST+0,sp)
3081  c68e a114          	cp	a,#20
3082  c690 25f0          	jrult	L5771
3083                     ; 346     invert_output = stored_invert_output;
3085  c692 5540140052    	mov	_invert_output,_stored_invert_output
3086                     ; 358     write_output_registers();
3088  c697 cdcbff        	call	_write_output_registers
3091  c69a ccc882        	jra	L3002
3092  c69d               L5002:
3093                     ; 367     uip_ipaddr(IpAddr, 192,168,1,4);
3095  c69d aec0a8        	ldw	x,#49320
3096  c6a0 cf001c        	ldw	_IpAddr,x
3099  c6a3 ae0104        	ldw	x,#260
3100  c6a6 cf001e        	ldw	_IpAddr+2,x
3101                     ; 368     uip_sethostaddr(IpAddr);
3103  c6a9 ce001c        	ldw	x,_IpAddr
3104  c6ac cf0084        	ldw	_uip_hostaddr,x
3107  c6af ce001e        	ldw	x,_IpAddr+2
3108  c6b2 cf0086        	ldw	_uip_hostaddr+2,x
3109                     ; 370     stored_hostaddr4 = 192;	// MSB
3111  c6b5 a6c0          	ld	a,#192
3112  c6b7 ae402a        	ldw	x,#_stored_hostaddr4
3113  c6ba cddf1a        	call	c_eewrc
3115                     ; 371     stored_hostaddr3 = 168;	//
3117  c6bd a6a8          	ld	a,#168
3118  c6bf ae4029        	ldw	x,#_stored_hostaddr3
3119  c6c2 cddf1a        	call	c_eewrc
3121                     ; 372     stored_hostaddr2 = 1;	//
3123  c6c5 a601          	ld	a,#1
3124  c6c7 ae4028        	ldw	x,#_stored_hostaddr2
3125  c6ca cddf1a        	call	c_eewrc
3127                     ; 373     stored_hostaddr1 = 4;	// LSB
3129  c6cd a604          	ld	a,#4
3130  c6cf ae4027        	ldw	x,#_stored_hostaddr1
3131  c6d2 cddf1a        	call	c_eewrc
3133                     ; 376     uip_ipaddr(IpAddr, 192,168,1,1);
3135  c6d5 aec0a8        	ldw	x,#49320
3136  c6d8 cf001c        	ldw	_IpAddr,x
3139  c6db ae0101        	ldw	x,#257
3140  c6de cf001e        	ldw	_IpAddr+2,x
3141                     ; 377     uip_setdraddr(IpAddr);
3143  c6e1 ce001c        	ldw	x,_IpAddr
3144  c6e4 cf007c        	ldw	_uip_draddr,x
3147  c6e7 ce001e        	ldw	x,_IpAddr+2
3148  c6ea cf007e        	ldw	_uip_draddr+2,x
3149                     ; 379     stored_draddr4 = 192;	// MSB
3151  c6ed a6c0          	ld	a,#192
3152  c6ef ae4026        	ldw	x,#_stored_draddr4
3153  c6f2 cddf1a        	call	c_eewrc
3155                     ; 380     stored_draddr3 = 168;	//
3157  c6f5 a6a8          	ld	a,#168
3158  c6f7 ae4025        	ldw	x,#_stored_draddr3
3159  c6fa cddf1a        	call	c_eewrc
3161                     ; 381     stored_draddr2 = 1;		//
3163  c6fd a601          	ld	a,#1
3164  c6ff ae4024        	ldw	x,#_stored_draddr2
3165  c702 cddf1a        	call	c_eewrc
3167                     ; 382     stored_draddr1 = 1;		// LSB
3169  c705 a601          	ld	a,#1
3170  c707 ae4023        	ldw	x,#_stored_draddr1
3171  c70a cddf1a        	call	c_eewrc
3173                     ; 385     uip_ipaddr(IpAddr, 255,255,255,0);
3175  c70d aeffff        	ldw	x,#65535
3176  c710 cf001c        	ldw	_IpAddr,x
3179  c713 aeff00        	ldw	x,#65280
3180  c716 cf001e        	ldw	_IpAddr+2,x
3181                     ; 386     uip_setnetmask(IpAddr);
3183  c719 ce001c        	ldw	x,_IpAddr
3184  c71c cf0080        	ldw	_uip_netmask,x
3187  c71f ce001e        	ldw	x,_IpAddr+2
3188  c722 cf0082        	ldw	_uip_netmask+2,x
3189                     ; 388     stored_netmask4 = 255;	// MSB
3191  c725 a6ff          	ld	a,#255
3192  c727 ae4022        	ldw	x,#_stored_netmask4
3193  c72a cddf1a        	call	c_eewrc
3195                     ; 389     stored_netmask3 = 255;	//
3197  c72d a6ff          	ld	a,#255
3198  c72f ae4021        	ldw	x,#_stored_netmask3
3199  c732 cddf1a        	call	c_eewrc
3201                     ; 390     stored_netmask2 = 255;	//
3203  c735 a6ff          	ld	a,#255
3204  c737 ae4020        	ldw	x,#_stored_netmask2
3205  c73a cddf1a        	call	c_eewrc
3207                     ; 391     stored_netmask1 = 0;	// LSB
3209  c73d 4f            	clr	a
3210  c73e ae401f        	ldw	x,#_stored_netmask1
3211  c741 cddf1a        	call	c_eewrc
3213                     ; 394     stored_port = 8080;		// Port
3215  c744 ae1f90        	ldw	x,#8080
3216  c747 89            	pushw	x
3217  c748 ae401d        	ldw	x,#_stored_port
3218  c74b cddf04        	call	c_eewrw
3220  c74e 85            	popw	x
3221                     ; 396     Port_Httpd = 8080;
3223  c74f ae1f90        	ldw	x,#8080
3224  c752 cf0020        	ldw	_Port_Httpd,x
3225                     ; 409     stored_uip_ethaddr1 = 0xc2;	//MAC MSB
3227  c755 a6c2          	ld	a,#194
3228  c757 ae401c        	ldw	x,#_stored_uip_ethaddr1
3229  c75a cddf1a        	call	c_eewrc
3231                     ; 410     stored_uip_ethaddr2 = 0x4d;
3233  c75d a64d          	ld	a,#77
3234  c75f ae401b        	ldw	x,#_stored_uip_ethaddr2
3235  c762 cddf1a        	call	c_eewrc
3237                     ; 411     stored_uip_ethaddr3 = 0x69;
3239  c765 a669          	ld	a,#105
3240  c767 ae401a        	ldw	x,#_stored_uip_ethaddr3
3241  c76a cddf1a        	call	c_eewrc
3243                     ; 412     stored_uip_ethaddr4 = 0x6b;
3245  c76d a66b          	ld	a,#107
3246  c76f ae4019        	ldw	x,#_stored_uip_ethaddr4
3247  c772 cddf1a        	call	c_eewrc
3249                     ; 413     stored_uip_ethaddr5 = 0x65;
3251  c775 a665          	ld	a,#101
3252  c777 ae4018        	ldw	x,#_stored_uip_ethaddr5
3253  c77a cddf1a        	call	c_eewrc
3255                     ; 414     stored_uip_ethaddr6 = 0x00;	//MAC LSB
3257  c77d 4f            	clr	a
3258  c77e ae4017        	ldw	x,#_stored_uip_ethaddr6
3259  c781 cddf1a        	call	c_eewrc
3261                     ; 416     uip_ethaddr1 = stored_uip_ethaddr1;	//MAC MSB
3263  c784 35c20024      	mov	_uip_ethaddr1,#194
3264                     ; 417     uip_ethaddr2 = stored_uip_ethaddr2;
3266  c788 354d0025      	mov	_uip_ethaddr2,#77
3267                     ; 418     uip_ethaddr3 = stored_uip_ethaddr3;
3269  c78c 35690026      	mov	_uip_ethaddr3,#105
3270                     ; 419     uip_ethaddr4 = stored_uip_ethaddr4;
3272  c790 356b0027      	mov	_uip_ethaddr4,#107
3273                     ; 420     uip_ethaddr5 = stored_uip_ethaddr5;
3275  c794 35650028      	mov	_uip_ethaddr5,#101
3276                     ; 421     uip_ethaddr6 = stored_uip_ethaddr6;	//MAC LSB
3278  c798 725f0029      	clr	_uip_ethaddr6
3279                     ; 423     uip_ethaddr.addr[0] = uip_ethaddr1;
3281  c79c 35c2000a      	mov	_uip_ethaddr,#194
3282                     ; 424     uip_ethaddr.addr[1] = uip_ethaddr2;
3284  c7a0 354d000b      	mov	_uip_ethaddr+1,#77
3285                     ; 425     uip_ethaddr.addr[2] = uip_ethaddr3;
3287  c7a4 3569000c      	mov	_uip_ethaddr+2,#105
3288                     ; 426     uip_ethaddr.addr[3] = uip_ethaddr4;
3290  c7a8 356b000d      	mov	_uip_ethaddr+3,#107
3291                     ; 427     uip_ethaddr.addr[4] = uip_ethaddr5;
3293  c7ac 3565000e      	mov	_uip_ethaddr+4,#101
3294                     ; 428     uip_ethaddr.addr[5] = uip_ethaddr6;
3296  c7b0 725f000f      	clr	_uip_ethaddr+5
3297                     ; 430     stored_devicename[0] = 'N' ; // Device name first character
3299  c7b4 a64e          	ld	a,#78
3300  c7b6 ae4000        	ldw	x,#_stored_devicename
3301  c7b9 cddf1a        	call	c_eewrc
3303                     ; 431     stored_devicename[1] = 'e' ; //
3305  c7bc a665          	ld	a,#101
3306  c7be ae4001        	ldw	x,#_stored_devicename+1
3307  c7c1 cddf1a        	call	c_eewrc
3309                     ; 432     stored_devicename[2] = 'w' ; //
3311  c7c4 a677          	ld	a,#119
3312  c7c6 ae4002        	ldw	x,#_stored_devicename+2
3313  c7c9 cddf1a        	call	c_eewrc
3315                     ; 433     stored_devicename[3] = 'D' ; //
3317  c7cc a644          	ld	a,#68
3318  c7ce ae4003        	ldw	x,#_stored_devicename+3
3319  c7d1 cddf1a        	call	c_eewrc
3321                     ; 434     stored_devicename[4] = 'e' ; //
3323  c7d4 a665          	ld	a,#101
3324  c7d6 ae4004        	ldw	x,#_stored_devicename+4
3325  c7d9 cddf1a        	call	c_eewrc
3327                     ; 435     stored_devicename[5] = 'v' ; //
3329  c7dc a676          	ld	a,#118
3330  c7de ae4005        	ldw	x,#_stored_devicename+5
3331  c7e1 cddf1a        	call	c_eewrc
3333                     ; 436     stored_devicename[6] = 'i' ; //
3335  c7e4 a669          	ld	a,#105
3336  c7e6 ae4006        	ldw	x,#_stored_devicename+6
3337  c7e9 cddf1a        	call	c_eewrc
3339                     ; 437     stored_devicename[7] = 'c' ; //
3341  c7ec a663          	ld	a,#99
3342  c7ee ae4007        	ldw	x,#_stored_devicename+7
3343  c7f1 cddf1a        	call	c_eewrc
3345                     ; 438     stored_devicename[8] = 'e' ; //
3347  c7f4 a665          	ld	a,#101
3348  c7f6 ae4008        	ldw	x,#_stored_devicename+8
3349  c7f9 cddf1a        	call	c_eewrc
3351                     ; 439     stored_devicename[9] = '0' ; //
3353  c7fc a630          	ld	a,#48
3354  c7fe ae4009        	ldw	x,#_stored_devicename+9
3355  c801 cddf1a        	call	c_eewrc
3357                     ; 440     stored_devicename[10] = '0' ; //
3359  c804 a630          	ld	a,#48
3360  c806 ae400a        	ldw	x,#_stored_devicename+10
3361  c809 cddf1a        	call	c_eewrc
3363                     ; 441     stored_devicename[11] = '0' ; //
3365  c80c a630          	ld	a,#48
3366  c80e ae400b        	ldw	x,#_stored_devicename+11
3367  c811 cddf1a        	call	c_eewrc
3369                     ; 442     stored_devicename[12] = ' ' ; //
3371  c814 a620          	ld	a,#32
3372  c816 ae400c        	ldw	x,#_stored_devicename+12
3373  c819 cddf1a        	call	c_eewrc
3375                     ; 443     stored_devicename[13] = ' ' ; //
3377  c81c a620          	ld	a,#32
3378  c81e ae400d        	ldw	x,#_stored_devicename+13
3379  c821 cddf1a        	call	c_eewrc
3381                     ; 444     stored_devicename[14] = ' ' ; //
3383  c824 a620          	ld	a,#32
3384  c826 ae400e        	ldw	x,#_stored_devicename+14
3385  c829 cddf1a        	call	c_eewrc
3387                     ; 445     stored_devicename[15] = ' ' ; //
3389  c82c a620          	ld	a,#32
3390  c82e ae400f        	ldw	x,#_stored_devicename+15
3391  c831 cddf1a        	call	c_eewrc
3393                     ; 446     stored_devicename[16] = ' ' ; //
3395  c834 a620          	ld	a,#32
3396  c836 ae4010        	ldw	x,#_stored_devicename+16
3397  c839 cddf1a        	call	c_eewrc
3399                     ; 447     stored_devicename[17] = ' ' ; //
3401  c83c a620          	ld	a,#32
3402  c83e ae4011        	ldw	x,#_stored_devicename+17
3403  c841 cddf1a        	call	c_eewrc
3405                     ; 448     stored_devicename[18] = ' ' ; //
3407  c844 a620          	ld	a,#32
3408  c846 ae4012        	ldw	x,#_stored_devicename+18
3409  c849 cddf1a        	call	c_eewrc
3411                     ; 449     stored_devicename[19] = ' ' ; // Device name last character
3413  c84c a620          	ld	a,#32
3414  c84e ae4013        	ldw	x,#_stored_devicename+19
3415  c851 cddf1a        	call	c_eewrc
3417                     ; 452     invert_output = 0;                  // Turn off output invert bit
3419  c854 725f0052      	clr	_invert_output
3420                     ; 453     stored_invert_output = 0;           // Store in EEPROM
3422  c858 4f            	clr	a
3423  c859 ae4014        	ldw	x,#_stored_invert_output
3424  c85c cddf1a        	call	c_eewrc
3426                     ; 467     write_output_registers();          // Set Relay Control outputs
3428  c85f cdcbff        	call	_write_output_registers
3430                     ; 470     magic4 = 0x55;		// MSB
3432  c862 a655          	ld	a,#85
3433  c864 ae402e        	ldw	x,#_magic4
3434  c867 cddf1a        	call	c_eewrc
3436                     ; 471     magic3 = 0xee;		//
3438  c86a a6ee          	ld	a,#238
3439  c86c ae402d        	ldw	x,#_magic3
3440  c86f cddf1a        	call	c_eewrc
3442                     ; 472     magic2 = 0x0f;		//
3444  c872 a60f          	ld	a,#15
3445  c874 ae402c        	ldw	x,#_magic2
3446  c877 cddf1a        	call	c_eewrc
3448                     ; 473     magic1 = 0xf0;		// LSB
3450  c87a a6f0          	ld	a,#240
3451  c87c ae402b        	ldw	x,#_magic1
3452  c87f cddf1a        	call	c_eewrc
3454  c882               L3002:
3455                     ; 478   Pending_hostaddr4 = stored_hostaddr4;
3457  c882 55402a003d    	mov	_Pending_hostaddr4,_stored_hostaddr4
3458                     ; 479   Pending_hostaddr3 = stored_hostaddr3;
3460  c887 554029003c    	mov	_Pending_hostaddr3,_stored_hostaddr3
3461                     ; 480   Pending_hostaddr2 = stored_hostaddr2;
3463  c88c 554028003b    	mov	_Pending_hostaddr2,_stored_hostaddr2
3464                     ; 481   Pending_hostaddr1 = stored_hostaddr1;
3466  c891 554027003a    	mov	_Pending_hostaddr1,_stored_hostaddr1
3467                     ; 483   Pending_draddr4 = stored_draddr4;
3469  c896 5540260039    	mov	_Pending_draddr4,_stored_draddr4
3470                     ; 484   Pending_draddr3 = stored_draddr3;
3472  c89b 5540250038    	mov	_Pending_draddr3,_stored_draddr3
3473                     ; 485   Pending_draddr2 = stored_draddr2;
3475  c8a0 5540240037    	mov	_Pending_draddr2,_stored_draddr2
3476                     ; 486   Pending_draddr1 = stored_draddr1;
3478  c8a5 5540230036    	mov	_Pending_draddr1,_stored_draddr1
3479                     ; 488   Pending_netmask4 = stored_netmask4;
3481  c8aa 5540220035    	mov	_Pending_netmask4,_stored_netmask4
3482                     ; 489   Pending_netmask3 = stored_netmask3;
3484  c8af 5540210034    	mov	_Pending_netmask3,_stored_netmask3
3485                     ; 490   Pending_netmask2 = stored_netmask2;
3487  c8b4 5540200033    	mov	_Pending_netmask2,_stored_netmask2
3488                     ; 491   Pending_netmask1 = stored_netmask1;
3490  c8b9 55401f0032    	mov	_Pending_netmask1,_stored_netmask1
3491                     ; 493   Pending_port = stored_port;
3493  c8be ce401d        	ldw	x,_stored_port
3494  c8c1 cf0030        	ldw	_Pending_port,x
3495                     ; 495   Pending_uip_ethaddr6 = stored_uip_ethaddr6;
3497  c8c4 554017002f    	mov	_Pending_uip_ethaddr6,_stored_uip_ethaddr6
3498                     ; 496   Pending_uip_ethaddr5 = stored_uip_ethaddr5;
3500  c8c9 554018002e    	mov	_Pending_uip_ethaddr5,_stored_uip_ethaddr5
3501                     ; 497   Pending_uip_ethaddr4 = stored_uip_ethaddr4;
3503  c8ce 554019002d    	mov	_Pending_uip_ethaddr4,_stored_uip_ethaddr4
3504                     ; 498   Pending_uip_ethaddr3 = stored_uip_ethaddr3;
3506  c8d3 55401a002c    	mov	_Pending_uip_ethaddr3,_stored_uip_ethaddr3
3507                     ; 499   Pending_uip_ethaddr2 = stored_uip_ethaddr2;
3509  c8d8 55401b002b    	mov	_Pending_uip_ethaddr2,_stored_uip_ethaddr2
3510                     ; 500   Pending_uip_ethaddr1 = stored_uip_ethaddr1;
3512  c8dd 55401c002a    	mov	_Pending_uip_ethaddr1,_stored_uip_ethaddr1
3513                     ; 503   ex_stored_hostaddr4 = stored_hostaddr4;
3515  c8e2 55402a0062    	mov	_ex_stored_hostaddr4,_stored_hostaddr4
3516                     ; 504   ex_stored_hostaddr3 = stored_hostaddr3;
3518  c8e7 5540290061    	mov	_ex_stored_hostaddr3,_stored_hostaddr3
3519                     ; 505   ex_stored_hostaddr2 = stored_hostaddr2;
3521  c8ec 5540280060    	mov	_ex_stored_hostaddr2,_stored_hostaddr2
3522                     ; 506   ex_stored_hostaddr1 = stored_hostaddr1;
3524  c8f1 554027005f    	mov	_ex_stored_hostaddr1,_stored_hostaddr1
3525                     ; 508   ex_stored_draddr4 = stored_draddr4;
3527  c8f6 554026005e    	mov	_ex_stored_draddr4,_stored_draddr4
3528                     ; 509   ex_stored_draddr3 = stored_draddr3;
3530  c8fb 554025005d    	mov	_ex_stored_draddr3,_stored_draddr3
3531                     ; 510   ex_stored_draddr2 = stored_draddr2;
3533  c900 554024005c    	mov	_ex_stored_draddr2,_stored_draddr2
3534                     ; 511   ex_stored_draddr1 = stored_draddr1;
3536  c905 554023005b    	mov	_ex_stored_draddr1,_stored_draddr1
3537                     ; 513   ex_stored_netmask4 = stored_netmask4;
3539  c90a 554022005a    	mov	_ex_stored_netmask4,_stored_netmask4
3540                     ; 514   ex_stored_netmask3 = stored_netmask3;
3542  c90f 5540210059    	mov	_ex_stored_netmask3,_stored_netmask3
3543                     ; 515   ex_stored_netmask2 = stored_netmask2;
3545  c914 5540200058    	mov	_ex_stored_netmask2,_stored_netmask2
3546                     ; 516   ex_stored_netmask1 = stored_netmask1;
3548  c919 55401f0057    	mov	_ex_stored_netmask1,_stored_netmask1
3549                     ; 518   ex_stored_port = stored_port;
3551  c91e cf0055        	ldw	_ex_stored_port,x
3552                     ; 520   for(i=0; i<20; i++) { ex_stored_devicename[i] = stored_devicename[i]; }
3554  c921 4f            	clr	a
3555  c922 6b01          	ld	(OFST+0,sp),a
3557  c924               L5302:
3560  c924 5f            	clrw	x
3561  c925 97            	ld	xl,a
3562  c926 d64000        	ld	a,(_stored_devicename,x)
3563  c929 d7003e        	ld	(_ex_stored_devicename,x),a
3566  c92c 0c01          	inc	(OFST+0,sp)
3570  c92e 7b01          	ld	a,(OFST+0,sp)
3571  c930 a114          	cp	a,#20
3572  c932 25f0          	jrult	L5302
3573                     ; 522 }
3576  c934 84            	pop	a
3577  c935 81            	ret	
3662                     ; 525 void check_runtime_changes(void)
3662                     ; 526 {
3663                     	switch	.text
3664  c936               _check_runtime_changes:
3666  c936 88            	push	a
3667       00000001      OFST:	set	1
3670                     ; 534   read_input_registers();
3672  c937 cdcb0f        	call	_read_input_registers
3674                     ; 567   if (stored_hostaddr4 != Pending_hostaddr4 ||
3674                     ; 568       stored_hostaddr3 != Pending_hostaddr3 ||
3674                     ; 569       stored_hostaddr2 != Pending_hostaddr2 ||
3674                     ; 570       stored_hostaddr1 != Pending_hostaddr1) {
3676  c93a c6402a        	ld	a,_stored_hostaddr4
3677  c93d c1003d        	cp	a,_Pending_hostaddr4
3678  c940 2618          	jrne	L1602
3680  c942 c64029        	ld	a,_stored_hostaddr3
3681  c945 c1003c        	cp	a,_Pending_hostaddr3
3682  c948 2610          	jrne	L1602
3684  c94a c64028        	ld	a,_stored_hostaddr2
3685  c94d c1003b        	cp	a,_Pending_hostaddr2
3686  c950 2608          	jrne	L1602
3688  c952 c64027        	ld	a,_stored_hostaddr1
3689  c955 c1003a        	cp	a,_Pending_hostaddr1
3690  c958 2728          	jreq	L7502
3691  c95a               L1602:
3692                     ; 572     stored_hostaddr4 = Pending_hostaddr4;
3694  c95a c6003d        	ld	a,_Pending_hostaddr4
3695  c95d ae402a        	ldw	x,#_stored_hostaddr4
3696  c960 cddf1a        	call	c_eewrc
3698                     ; 573     stored_hostaddr3 = Pending_hostaddr3;
3700  c963 c6003c        	ld	a,_Pending_hostaddr3
3701  c966 ae4029        	ldw	x,#_stored_hostaddr3
3702  c969 cddf1a        	call	c_eewrc
3704                     ; 574     stored_hostaddr2 = Pending_hostaddr2;
3706  c96c c6003b        	ld	a,_Pending_hostaddr2
3707  c96f ae4028        	ldw	x,#_stored_hostaddr2
3708  c972 cddf1a        	call	c_eewrc
3710                     ; 575     stored_hostaddr1 = Pending_hostaddr1;
3712  c975 c6003a        	ld	a,_Pending_hostaddr1
3713  c978 ae4027        	ldw	x,#_stored_hostaddr1
3714  c97b cddf1a        	call	c_eewrc
3716                     ; 577     submit_changes = 1;
3718  c97e 35010023      	mov	_submit_changes,#1
3719  c982               L7502:
3720                     ; 581   if (stored_draddr4 != Pending_draddr4 ||
3720                     ; 582       stored_draddr3 != Pending_draddr3 ||
3720                     ; 583       stored_draddr2 != Pending_draddr2 ||
3720                     ; 584       stored_draddr1 != Pending_draddr1) {
3722  c982 c64026        	ld	a,_stored_draddr4
3723  c985 c10039        	cp	a,_Pending_draddr4
3724  c988 2618          	jrne	L1702
3726  c98a c64025        	ld	a,_stored_draddr3
3727  c98d c10038        	cp	a,_Pending_draddr3
3728  c990 2610          	jrne	L1702
3730  c992 c64024        	ld	a,_stored_draddr2
3731  c995 c10037        	cp	a,_Pending_draddr2
3732  c998 2608          	jrne	L1702
3734  c99a c64023        	ld	a,_stored_draddr1
3735  c99d c10036        	cp	a,_Pending_draddr1
3736  c9a0 2728          	jreq	L7602
3737  c9a2               L1702:
3738                     ; 586     stored_draddr4 = Pending_draddr4;
3740  c9a2 c60039        	ld	a,_Pending_draddr4
3741  c9a5 ae4026        	ldw	x,#_stored_draddr4
3742  c9a8 cddf1a        	call	c_eewrc
3744                     ; 587     stored_draddr3 = Pending_draddr3;
3746  c9ab c60038        	ld	a,_Pending_draddr3
3747  c9ae ae4025        	ldw	x,#_stored_draddr3
3748  c9b1 cddf1a        	call	c_eewrc
3750                     ; 588     stored_draddr2 = Pending_draddr2;
3752  c9b4 c60037        	ld	a,_Pending_draddr2
3753  c9b7 ae4024        	ldw	x,#_stored_draddr2
3754  c9ba cddf1a        	call	c_eewrc
3756                     ; 589     stored_draddr1 = Pending_draddr1;
3758  c9bd c60036        	ld	a,_Pending_draddr1
3759  c9c0 ae4023        	ldw	x,#_stored_draddr1
3760  c9c3 cddf1a        	call	c_eewrc
3762                     ; 591     submit_changes = 1;
3764  c9c6 35010023      	mov	_submit_changes,#1
3765  c9ca               L7602:
3766                     ; 595   if (stored_netmask4 != Pending_netmask4 ||
3766                     ; 596       stored_netmask3 != Pending_netmask3 ||
3766                     ; 597       stored_netmask2 != Pending_netmask2 ||
3766                     ; 598       stored_netmask1 != Pending_netmask1) {
3768  c9ca c64022        	ld	a,_stored_netmask4
3769  c9cd c10035        	cp	a,_Pending_netmask4
3770  c9d0 2618          	jrne	L1012
3772  c9d2 c64021        	ld	a,_stored_netmask3
3773  c9d5 c10034        	cp	a,_Pending_netmask3
3774  c9d8 2610          	jrne	L1012
3776  c9da c64020        	ld	a,_stored_netmask2
3777  c9dd c10033        	cp	a,_Pending_netmask2
3778  c9e0 2608          	jrne	L1012
3780  c9e2 c6401f        	ld	a,_stored_netmask1
3781  c9e5 c10032        	cp	a,_Pending_netmask1
3782  c9e8 2728          	jreq	L7702
3783  c9ea               L1012:
3784                     ; 600     stored_netmask4 = Pending_netmask4;
3786  c9ea c60035        	ld	a,_Pending_netmask4
3787  c9ed ae4022        	ldw	x,#_stored_netmask4
3788  c9f0 cddf1a        	call	c_eewrc
3790                     ; 601     stored_netmask3 = Pending_netmask3;
3792  c9f3 c60034        	ld	a,_Pending_netmask3
3793  c9f6 ae4021        	ldw	x,#_stored_netmask3
3794  c9f9 cddf1a        	call	c_eewrc
3796                     ; 602     stored_netmask2 = Pending_netmask2;
3798  c9fc c60033        	ld	a,_Pending_netmask2
3799  c9ff ae4020        	ldw	x,#_stored_netmask2
3800  ca02 cddf1a        	call	c_eewrc
3802                     ; 603     stored_netmask1 = Pending_netmask1;
3804  ca05 c60032        	ld	a,_Pending_netmask1
3805  ca08 ae401f        	ldw	x,#_stored_netmask1
3806  ca0b cddf1a        	call	c_eewrc
3808                     ; 605     submit_changes = 1;
3810  ca0e 35010023      	mov	_submit_changes,#1
3811  ca12               L7702:
3812                     ; 609   if (stored_port != Pending_port) {
3814  ca12 ce401d        	ldw	x,_stored_port
3815  ca15 c30030        	cpw	x,_Pending_port
3816  ca18 270f          	jreq	L7012
3817                     ; 611     stored_port = Pending_port;
3819  ca1a ce0030        	ldw	x,_Pending_port
3820  ca1d 89            	pushw	x
3821  ca1e ae401d        	ldw	x,#_stored_port
3822  ca21 cddf04        	call	c_eewrw
3824  ca24 35010023      	mov	_submit_changes,#1
3825  ca28 85            	popw	x
3826                     ; 613     submit_changes = 1;
3828  ca29               L7012:
3829                     ; 617   devicename_changed = 0;
3831  ca29 725f0022      	clr	_devicename_changed
3832                     ; 618   for(i=0; i<20; i++) {
3834  ca2d 4f            	clr	a
3835  ca2e 6b01          	ld	(OFST+0,sp),a
3837  ca30               L1112:
3838                     ; 619     if (stored_devicename[i] != ex_stored_devicename[i]) devicename_changed = 1;
3840  ca30 5f            	clrw	x
3841  ca31 97            	ld	xl,a
3842  ca32 905f          	clrw	y
3843  ca34 9097          	ld	yl,a
3844  ca36 90d64000      	ld	a,(_stored_devicename,y)
3845  ca3a d1003e        	cp	a,(_ex_stored_devicename,x)
3846  ca3d 2704          	jreq	L7112
3849  ca3f 35010022      	mov	_devicename_changed,#1
3850  ca43               L7112:
3851                     ; 618   for(i=0; i<20; i++) {
3853  ca43 0c01          	inc	(OFST+0,sp)
3857  ca45 7b01          	ld	a,(OFST+0,sp)
3858  ca47 a114          	cp	a,#20
3859  ca49 25e5          	jrult	L1112
3860                     ; 621   if (devicename_changed == 1) {
3862  ca4b c60022        	ld	a,_devicename_changed
3863  ca4e 4a            	dec	a
3864  ca4f 2612          	jrne	L1212
3865                     ; 623     for(i=0; i<20; i++) { stored_devicename[i] = ex_stored_devicename[i]; }
3867  ca51 6b01          	ld	(OFST+0,sp),a
3869  ca53               L3212:
3872  ca53 5f            	clrw	x
3873  ca54 97            	ld	xl,a
3874  ca55 d6003e        	ld	a,(_ex_stored_devicename,x)
3875  ca58 d74000        	ld	(_stored_devicename,x),a
3878  ca5b 0c01          	inc	(OFST+0,sp)
3882  ca5d 7b01          	ld	a,(OFST+0,sp)
3883  ca5f a114          	cp	a,#20
3884  ca61 25f0          	jrult	L3212
3885  ca63               L1212:
3886                     ; 627   if (stored_uip_ethaddr6 != Pending_uip_ethaddr6 ||
3886                     ; 628       stored_uip_ethaddr5 != Pending_uip_ethaddr5 ||
3886                     ; 629       stored_uip_ethaddr4 != Pending_uip_ethaddr4 ||
3886                     ; 630       stored_uip_ethaddr3 != Pending_uip_ethaddr3 ||
3886                     ; 631       stored_uip_ethaddr2 != Pending_uip_ethaddr2 ||
3886                     ; 632       stored_uip_ethaddr1 != Pending_uip_ethaddr1) {
3888  ca63 c64017        	ld	a,_stored_uip_ethaddr6
3889  ca66 c1002f        	cp	a,_Pending_uip_ethaddr6
3890  ca69 2628          	jrne	L3312
3892  ca6b c64018        	ld	a,_stored_uip_ethaddr5
3893  ca6e c1002e        	cp	a,_Pending_uip_ethaddr5
3894  ca71 2620          	jrne	L3312
3896  ca73 c64019        	ld	a,_stored_uip_ethaddr4
3897  ca76 c1002d        	cp	a,_Pending_uip_ethaddr4
3898  ca79 2618          	jrne	L3312
3900  ca7b c6401a        	ld	a,_stored_uip_ethaddr3
3901  ca7e c1002c        	cp	a,_Pending_uip_ethaddr3
3902  ca81 2610          	jrne	L3312
3904  ca83 c6401b        	ld	a,_stored_uip_ethaddr2
3905  ca86 c1002b        	cp	a,_Pending_uip_ethaddr2
3906  ca89 2608          	jrne	L3312
3908  ca8b c6401c        	ld	a,_stored_uip_ethaddr1
3909  ca8e c1002a        	cp	a,_Pending_uip_ethaddr1
3910  ca91 273a          	jreq	L1312
3911  ca93               L3312:
3912                     ; 634     stored_uip_ethaddr6 = Pending_uip_ethaddr6;
3914  ca93 c6002f        	ld	a,_Pending_uip_ethaddr6
3915  ca96 ae4017        	ldw	x,#_stored_uip_ethaddr6
3916  ca99 cddf1a        	call	c_eewrc
3918                     ; 635     stored_uip_ethaddr5 = Pending_uip_ethaddr5;
3920  ca9c c6002e        	ld	a,_Pending_uip_ethaddr5
3921  ca9f ae4018        	ldw	x,#_stored_uip_ethaddr5
3922  caa2 cddf1a        	call	c_eewrc
3924                     ; 636     stored_uip_ethaddr4 = Pending_uip_ethaddr4;
3926  caa5 c6002d        	ld	a,_Pending_uip_ethaddr4
3927  caa8 ae4019        	ldw	x,#_stored_uip_ethaddr4
3928  caab cddf1a        	call	c_eewrc
3930                     ; 637     stored_uip_ethaddr3 = Pending_uip_ethaddr3;
3932  caae c6002c        	ld	a,_Pending_uip_ethaddr3
3933  cab1 ae401a        	ldw	x,#_stored_uip_ethaddr3
3934  cab4 cddf1a        	call	c_eewrc
3936                     ; 638     stored_uip_ethaddr2 = Pending_uip_ethaddr2;
3938  cab7 c6002b        	ld	a,_Pending_uip_ethaddr2
3939  caba ae401b        	ldw	x,#_stored_uip_ethaddr2
3940  cabd cddf1a        	call	c_eewrc
3942                     ; 639     stored_uip_ethaddr1 = Pending_uip_ethaddr1;
3944  cac0 c6002a        	ld	a,_Pending_uip_ethaddr1
3945  cac3 ae401c        	ldw	x,#_stored_uip_ethaddr1
3946  cac6 cddf1a        	call	c_eewrc
3948                     ; 641     submit_changes = 1;
3950  cac9 35010023      	mov	_submit_changes,#1
3951  cacd               L1312:
3952                     ; 644   if (submit_changes == 1) {
3954  cacd c60023        	ld	a,_submit_changes
3955  cad0 a101          	cp	a,#1
3956  cad2 2613          	jrne	L5412
3957                     ; 651     check_eeprom_settings(); // Verify EEPROM up to date
3959  cad4 cdc5b7        	call	_check_eeprom_settings
3961                     ; 652     Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
3963  cad7 cdade7        	call	_Enc28j60Init
3965                     ; 653     uip_arp_init();          // Initialize the ARP module
3967  cada cddaf3        	call	_uip_arp_init
3969                     ; 654     uip_init();              // Initialize uIP
3971  cadd cdd0b2        	call	_uip_init
3973                     ; 655     HttpDInit();             // Initialize httpd; sets up listening ports
3975  cae0 cdbb6f        	call	_HttpDInit
3977                     ; 656     submit_changes = 0;
3979  cae3 4f            	clr	a
3980  cae4 c70023        	ld	_submit_changes,a
3981  cae7               L5412:
3982                     ; 659   if (submit_changes == 2) {
3984  cae7 a102          	cp	a,#2
3985  cae9 2622          	jrne	L7412
3986                     ; 662     LEDcontrol(0);  // turn LED off
3988  caeb 4f            	clr	a
3989  caec cdb05c        	call	_LEDcontrol
3991                     ; 664     WWDG_WR = (uint8_t)0x7f;     // Window register reset
3993  caef 357f50d2      	mov	_WWDG_WR,#127
3994                     ; 665     WWDG_CR = (uint8_t)0xff;     // Set watchdog to timeout in 49ms
3996  caf3 35ff50d1      	mov	_WWDG_CR,#255
3997                     ; 666     WWDG_WR = (uint8_t)0x60;     // Window register value - doesn't matter
3999  caf7 356050d2      	mov	_WWDG_WR,#96
4000                     ; 669     wait_timer((uint16_t)50000); // Wait for watchdog to generate reset
4002  cafb aec350        	ldw	x,#50000
4003  cafe cdcf6b        	call	_wait_timer
4005                     ; 670     wait_timer((uint16_t)50000);
4007  cb01 aec350        	ldw	x,#50000
4008  cb04 cdcf6b        	call	_wait_timer
4010                     ; 671     wait_timer((uint16_t)50000);
4012  cb07 aec350        	ldw	x,#50000
4013  cb0a cdcf6b        	call	_wait_timer
4015  cb0d               L7412:
4016                     ; 673 }
4019  cb0d 84            	pop	a
4020  cb0e 81            	ret	
4051                     ; 676 void read_input_registers(void)
4051                     ; 677 {
4052                     	switch	.text
4053  cb0f               _read_input_registers:
4057                     ; 705   if (PC_IDR & (uint8_t)0x40) IO_16to9 |= 0x80; // PC bit 6 = 1, Input 16 = 1
4059  cb0f 720d500b06    	btjf	_PC_IDR,#6,L1612
4062  cb14 721e0054      	bset	_IO_16to9,#7
4064  cb18 2004          	jra	L3612
4065  cb1a               L1612:
4066                     ; 706   else IO_16to9 &= (uint8_t)(~0x80);
4068  cb1a 721f0054      	bres	_IO_16to9,#7
4069  cb1e               L3612:
4070                     ; 707   if (PG_IDR & (uint8_t)0x01) IO_16to9 |= 0x40; // PG bit 0 = 1, Input 15 = 1
4072  cb1e 7201501f06    	btjf	_PG_IDR,#0,L5612
4075  cb23 721c0054      	bset	_IO_16to9,#6
4077  cb27 2004          	jra	L7612
4078  cb29               L5612:
4079                     ; 708   else IO_16to9 &= (uint8_t)(~0x40);
4081  cb29 721d0054      	bres	_IO_16to9,#6
4082  cb2d               L7612:
4083                     ; 709   if (PE_IDR & (uint8_t)0x08) IO_16to9 |= 0x20; // PE bit 3 = 1, Input 14 = 1
4085  cb2d 7207501506    	btjf	_PE_IDR,#3,L1712
4088  cb32 721a0054      	bset	_IO_16to9,#5
4090  cb36 2004          	jra	L3712
4091  cb38               L1712:
4092                     ; 710   else IO_16to9 &= (uint8_t)(~0x20);
4094  cb38 721b0054      	bres	_IO_16to9,#5
4095  cb3c               L3712:
4096                     ; 711   if (PD_IDR & (uint8_t)0x01) IO_16to9 |= 0x10; // PD bit 0 = 1, Input 13 = 1
4098  cb3c 7201501006    	btjf	_PD_IDR,#0,L5712
4101  cb41 72180054      	bset	_IO_16to9,#4
4103  cb45 2004          	jra	L7712
4104  cb47               L5712:
4105                     ; 712   else IO_16to9 &= (uint8_t)(~0x10);
4107  cb47 72190054      	bres	_IO_16to9,#4
4108  cb4b               L7712:
4109                     ; 713   if (PD_IDR & (uint8_t)0x08) IO_16to9 |= 0x08; // PD bit 3 = 1, Input 12 = 1
4111  cb4b 7207501006    	btjf	_PD_IDR,#3,L1022
4114  cb50 72160054      	bset	_IO_16to9,#3
4116  cb54 2004          	jra	L3022
4117  cb56               L1022:
4118                     ; 714   else IO_16to9 &= (uint8_t)(~0x08);
4120  cb56 72170054      	bres	_IO_16to9,#3
4121  cb5a               L3022:
4122                     ; 715   if (PD_IDR & (uint8_t)0x20) IO_16to9 |= 0x04; // PD bit 5 = 1, Input 11 = 1
4124  cb5a 720b501006    	btjf	_PD_IDR,#5,L5022
4127  cb5f 72140054      	bset	_IO_16to9,#2
4129  cb63 2004          	jra	L7022
4130  cb65               L5022:
4131                     ; 716   else IO_16to9 &= (uint8_t)(~0x04);
4133  cb65 72150054      	bres	_IO_16to9,#2
4134  cb69               L7022:
4135                     ; 717   if (PD_IDR & (uint8_t)0x80) IO_16to9 |= 0x02; // PD bit 7 = 1, Input 10 = 1
4137  cb69 720f501006    	btjf	_PD_IDR,#7,L1122
4140  cb6e 72120054      	bset	_IO_16to9,#1
4142  cb72 2004          	jra	L3122
4143  cb74               L1122:
4144                     ; 718   else IO_16to9 &= (uint8_t)(~0x02);
4146  cb74 72130054      	bres	_IO_16to9,#1
4147  cb78               L3122:
4148                     ; 719   if (PA_IDR & (uint8_t)0x10) IO_16to9 |= 0x01; // PA bit 4 = 1, Input 9 = 1
4150  cb78 7209500106    	btjf	_PA_IDR,#4,L5122
4153  cb7d 72100054      	bset	_IO_16to9,#0
4155  cb81 2004          	jra	L7122
4156  cb83               L5122:
4157                     ; 720   else IO_16to9 &= (uint8_t)(~0x01);
4159  cb83 72110054      	bres	_IO_16to9,#0
4160  cb87               L7122:
4161                     ; 722   if (PC_IDR & (uint8_t)0x80) IO_8to1 |= 0x80;  // PC bit 7 = 1, Input 8 = 1
4163  cb87 720f500b06    	btjf	_PC_IDR,#7,L1222
4166  cb8c 721e0053      	bset	_IO_8to1,#7
4168  cb90 2004          	jra	L3222
4169  cb92               L1222:
4170                     ; 723   else IO_8to1 &= (uint8_t)(~0x80);
4172  cb92 721f0053      	bres	_IO_8to1,#7
4173  cb96               L3222:
4174                     ; 724   if (PG_IDR & (uint8_t)0x02) IO_8to1 |= 0x40;  // PG bit 1 = 1, Input 7 = 1
4176  cb96 7203501f06    	btjf	_PG_IDR,#1,L5222
4179  cb9b 721c0053      	bset	_IO_8to1,#6
4181  cb9f 2004          	jra	L7222
4182  cba1               L5222:
4183                     ; 725   else IO_8to1 &= (uint8_t)(~0x40);
4185  cba1 721d0053      	bres	_IO_8to1,#6
4186  cba5               L7222:
4187                     ; 726   if (PE_IDR & (uint8_t)0x01) IO_8to1 |= 0x20;  // PE bit 0 = 1, Input 6 = 1
4189  cba5 7201501506    	btjf	_PE_IDR,#0,L1322
4192  cbaa 721a0053      	bset	_IO_8to1,#5
4194  cbae 2004          	jra	L3322
4195  cbb0               L1322:
4196                     ; 727   else IO_8to1 &= (uint8_t)(~0x20);
4198  cbb0 721b0053      	bres	_IO_8to1,#5
4199  cbb4               L3322:
4200                     ; 728   if (PD_IDR & (uint8_t)0x04) IO_8to1 |= 0x10;  // PD bit 2 = 1, Input 5 = 1
4202  cbb4 7205501006    	btjf	_PD_IDR,#2,L5322
4205  cbb9 72180053      	bset	_IO_8to1,#4
4207  cbbd 2004          	jra	L7322
4208  cbbf               L5322:
4209                     ; 729   else IO_8to1 &= (uint8_t)(~0x10);
4211  cbbf 72190053      	bres	_IO_8to1,#4
4212  cbc3               L7322:
4213                     ; 730   if (PD_IDR & (uint8_t)0x10) IO_8to1 |= 0x08;  // PD bit 4 = 1, Input 4 = 1
4215  cbc3 7209501006    	btjf	_PD_IDR,#4,L1422
4218  cbc8 72160053      	bset	_IO_8to1,#3
4220  cbcc 2004          	jra	L3422
4221  cbce               L1422:
4222                     ; 731   else IO_8to1 &= (uint8_t)(~0x08);
4224  cbce 72170053      	bres	_IO_8to1,#3
4225  cbd2               L3422:
4226                     ; 732   if (PD_IDR & (uint8_t)0x40) IO_8to1 |= 0x04;  // PD bit 6 = 1, Input 3 = 1
4228  cbd2 720d501006    	btjf	_PD_IDR,#6,L5422
4231  cbd7 72140053      	bset	_IO_8to1,#2
4233  cbdb 2004          	jra	L7422
4234  cbdd               L5422:
4235                     ; 733   else IO_8to1 &= (uint8_t)(~0x04);
4237  cbdd 72150053      	bres	_IO_8to1,#2
4238  cbe1               L7422:
4239                     ; 734   if (PA_IDR & (uint8_t)0x20) IO_8to1 |= 0x02;  // PA bit 5 = 1, Input 2 = 1
4241  cbe1 720b500106    	btjf	_PA_IDR,#5,L1522
4244  cbe6 72120053      	bset	_IO_8to1,#1
4246  cbea 2004          	jra	L3522
4247  cbec               L1522:
4248                     ; 735   else IO_8to1 &= (uint8_t)(~0x02);
4250  cbec 72130053      	bres	_IO_8to1,#1
4251  cbf0               L3522:
4252                     ; 736   if (PA_IDR & (uint8_t)0x08) IO_8to1 |= 0x01;  // PA bit 3 = 1, Input 1 = 1
4254  cbf0 7207500105    	btjf	_PA_IDR,#3,L5522
4257  cbf5 72100053      	bset	_IO_8to1,#0
4260  cbf9 81            	ret	
4261  cbfa               L5522:
4262                     ; 737   else IO_8to1 &= (uint8_t)(~0x01);
4264  cbfa 72110053      	bres	_IO_8to1,#0
4265                     ; 739 }
4268  cbfe 81            	ret	
4292                     ; 742 void write_output_registers(void)
4292                     ; 743 {
4293                     	switch	.text
4294  cbff               _write_output_registers:
4298                     ; 877 }
4301  cbff 81            	ret	
4365                     ; 880 void check_reset_button(void)
4365                     ; 881 {
4366                     	switch	.text
4367  cc00               _check_reset_button:
4369  cc00 88            	push	a
4370       00000001      OFST:	set	1
4373                     ; 886   if ((PA_IDR & 0x02) == 0) {
4375  cc01 7203500103cc  	btjt	_PA_IDR,#1,L5032
4376                     ; 888     for (i=0; i<100; i++) {
4378  cc09 0f01          	clr	(OFST+0,sp)
4380  cc0b               L7032:
4381                     ; 889       wait_timer(50000); // wait 50ms
4383  cc0b aec350        	ldw	x,#50000
4384  cc0e cdcf6b        	call	_wait_timer
4386                     ; 890       if ((PA_IDR & 0x02) == 1) { // check Reset Button again. If released
4388  cc11 c65001        	ld	a,_PA_IDR
4389  cc14 a402          	and	a,#2
4390  cc16 4a            	dec	a
4391  cc17 2602          	jrne	L5132
4392                     ; 892         return;
4395  cc19 84            	pop	a
4396  cc1a 81            	ret	
4397  cc1b               L5132:
4398                     ; 888     for (i=0; i<100; i++) {
4400  cc1b 0c01          	inc	(OFST+0,sp)
4404  cc1d 7b01          	ld	a,(OFST+0,sp)
4405  cc1f a164          	cp	a,#100
4406  cc21 25e8          	jrult	L7032
4407                     ; 897     LEDcontrol(0);  // turn LED off
4409  cc23 4f            	clr	a
4410  cc24 cdb05c        	call	_LEDcontrol
4413  cc27               L1232:
4414                     ; 898     while((PA_IDR & 0x02) == 0) {  // Wait for button release
4416  cc27 72035001fb    	btjf	_PA_IDR,#1,L1232
4417                     ; 901     magic4 = 0x00;		   // MSB Magic Number stored in EEPROM
4419  cc2c 4f            	clr	a
4420  cc2d ae402e        	ldw	x,#_magic4
4421  cc30 cddf1a        	call	c_eewrc
4423                     ; 902     magic3 = 0x00;		   //
4425  cc33 4f            	clr	a
4426  cc34 ae402d        	ldw	x,#_magic3
4427  cc37 cddf1a        	call	c_eewrc
4429                     ; 903     magic2 = 0x00;		   //
4431  cc3a 4f            	clr	a
4432  cc3b ae402c        	ldw	x,#_magic2
4433  cc3e cddf1a        	call	c_eewrc
4435                     ; 904     magic1 = 0x00;		   // LSB Magic Number
4437  cc41 4f            	clr	a
4438  cc42 ae402b        	ldw	x,#_magic1
4439  cc45 cddf1a        	call	c_eewrc
4441                     ; 906     stored_hostaddr4 = 0x00;	   // MSB hostaddr stored in EEPROM
4443  cc48 4f            	clr	a
4444  cc49 ae402a        	ldw	x,#_stored_hostaddr4
4445  cc4c cddf1a        	call	c_eewrc
4447                     ; 907     stored_hostaddr3 = 0x00;	   //
4449  cc4f 4f            	clr	a
4450  cc50 ae4029        	ldw	x,#_stored_hostaddr3
4451  cc53 cddf1a        	call	c_eewrc
4453                     ; 908     stored_hostaddr2 = 0x00;	   //
4455  cc56 4f            	clr	a
4456  cc57 ae4028        	ldw	x,#_stored_hostaddr2
4457  cc5a cddf1a        	call	c_eewrc
4459                     ; 909     stored_hostaddr1 = 0x00;	   // LSB hostaddr
4461  cc5d 4f            	clr	a
4462  cc5e ae4027        	ldw	x,#_stored_hostaddr1
4463  cc61 cddf1a        	call	c_eewrc
4465                     ; 911     stored_draddr4 = 0x00;	   // MSB draddr stored in EEPROM
4467  cc64 4f            	clr	a
4468  cc65 ae4026        	ldw	x,#_stored_draddr4
4469  cc68 cddf1a        	call	c_eewrc
4471                     ; 912     stored_draddr3 = 0x00;	   //
4473  cc6b 4f            	clr	a
4474  cc6c ae4025        	ldw	x,#_stored_draddr3
4475  cc6f cddf1a        	call	c_eewrc
4477                     ; 913     stored_draddr2 = 0x00;	   //
4479  cc72 4f            	clr	a
4480  cc73 ae4024        	ldw	x,#_stored_draddr2
4481  cc76 cddf1a        	call	c_eewrc
4483                     ; 914     stored_draddr1 = 0x00;	   // LSB draddr
4485  cc79 4f            	clr	a
4486  cc7a ae4023        	ldw	x,#_stored_draddr1
4487  cc7d cddf1a        	call	c_eewrc
4489                     ; 916     stored_netmask4 = 0x00;	   // MSB netmask stored in EEPROM
4491  cc80 4f            	clr	a
4492  cc81 ae4022        	ldw	x,#_stored_netmask4
4493  cc84 cddf1a        	call	c_eewrc
4495                     ; 917     stored_netmask3 = 0x00;	   //
4497  cc87 4f            	clr	a
4498  cc88 ae4021        	ldw	x,#_stored_netmask3
4499  cc8b cddf1a        	call	c_eewrc
4501                     ; 918     stored_netmask2 = 0x00;	   //
4503  cc8e 4f            	clr	a
4504  cc8f ae4020        	ldw	x,#_stored_netmask2
4505  cc92 cddf1a        	call	c_eewrc
4507                     ; 919     stored_netmask1 = 0x00;	   // LSB netmask
4509  cc95 4f            	clr	a
4510  cc96 ae401f        	ldw	x,#_stored_netmask1
4511  cc99 cddf1a        	call	c_eewrc
4513                     ; 921     stored_port = 0x0000;	   // Port stored in EEPROM
4515  cc9c 5f            	clrw	x
4516  cc9d 89            	pushw	x
4517  cc9e ae401d        	ldw	x,#_stored_port
4518  cca1 cddf04        	call	c_eewrw
4520  cca4 4f            	clr	a
4521  cca5 85            	popw	x
4522                     ; 923     stored_uip_ethaddr1 = 0x00;	   // MAC MSB
4524  cca6 ae401c        	ldw	x,#_stored_uip_ethaddr1
4525  cca9 cddf1a        	call	c_eewrc
4527                     ; 924     stored_uip_ethaddr2 = 0x00;	   //
4529  ccac 4f            	clr	a
4530  ccad ae401b        	ldw	x,#_stored_uip_ethaddr2
4531  ccb0 cddf1a        	call	c_eewrc
4533                     ; 925     stored_uip_ethaddr3 = 0x00;	   //
4535  ccb3 4f            	clr	a
4536  ccb4 ae401a        	ldw	x,#_stored_uip_ethaddr3
4537  ccb7 cddf1a        	call	c_eewrc
4539                     ; 926     stored_uip_ethaddr4 = 0x00;	   //
4541  ccba 4f            	clr	a
4542  ccbb ae4019        	ldw	x,#_stored_uip_ethaddr4
4543  ccbe cddf1a        	call	c_eewrc
4545                     ; 927     stored_uip_ethaddr5 = 0x00;	   //
4547  ccc1 4f            	clr	a
4548  ccc2 ae4018        	ldw	x,#_stored_uip_ethaddr5
4549  ccc5 cddf1a        	call	c_eewrc
4551                     ; 928     stored_uip_ethaddr6 = 0x00;	   // MAC LSB stored in EEPROM
4553  ccc8 4f            	clr	a
4554  ccc9 ae4017        	ldw	x,#_stored_uip_ethaddr6
4555  cccc cddf1a        	call	c_eewrc
4557                     ; 930     stored_IO_16to9 = 0x00;        // IO States 16 to 9
4559  cccf 4f            	clr	a
4560  ccd0 ae4016        	ldw	x,#_stored_IO_16to9
4561  ccd3 cddf1a        	call	c_eewrc
4563                     ; 931     stored_IO_8to1 = 0x00;         // IO States 8 to 1
4565  ccd6 4f            	clr	a
4566  ccd7 ae4015        	ldw	x,#_stored_IO_8to1
4567  ccda cddf1a        	call	c_eewrc
4569                     ; 932     stored_invert_output = 0x00;   // Relay state inversion control
4571  ccdd 4f            	clr	a
4572  ccde ae4014        	ldw	x,#_stored_invert_output
4573  cce1 cddf1a        	call	c_eewrc
4575                     ; 934     stored_devicename[0] = 0x00;   // Device name
4577  cce4 4f            	clr	a
4578  cce5 ae4000        	ldw	x,#_stored_devicename
4579  cce8 cddf1a        	call	c_eewrc
4581                     ; 935     stored_devicename[1] = 0x00;   // Device name
4583  cceb 4f            	clr	a
4584  ccec ae4001        	ldw	x,#_stored_devicename+1
4585  ccef cddf1a        	call	c_eewrc
4587                     ; 936     stored_devicename[2] = 0x00;   // Device name
4589  ccf2 4f            	clr	a
4590  ccf3 ae4002        	ldw	x,#_stored_devicename+2
4591  ccf6 cddf1a        	call	c_eewrc
4593                     ; 937     stored_devicename[3] = 0x00;   // Device name
4595  ccf9 4f            	clr	a
4596  ccfa ae4003        	ldw	x,#_stored_devicename+3
4597  ccfd cddf1a        	call	c_eewrc
4599                     ; 938     stored_devicename[4] = 0x00;   // Device name
4601  cd00 4f            	clr	a
4602  cd01 ae4004        	ldw	x,#_stored_devicename+4
4603  cd04 cddf1a        	call	c_eewrc
4605                     ; 939     stored_devicename[5] = 0x00;   // Device name
4607  cd07 4f            	clr	a
4608  cd08 ae4005        	ldw	x,#_stored_devicename+5
4609  cd0b cddf1a        	call	c_eewrc
4611                     ; 940     stored_devicename[6] = 0x00;   // Device name
4613  cd0e 4f            	clr	a
4614  cd0f ae4006        	ldw	x,#_stored_devicename+6
4615  cd12 cddf1a        	call	c_eewrc
4617                     ; 941     stored_devicename[7] = 0x00;   // Device name
4619  cd15 4f            	clr	a
4620  cd16 ae4007        	ldw	x,#_stored_devicename+7
4621  cd19 cddf1a        	call	c_eewrc
4623                     ; 942     stored_devicename[8] = 0x00;   // Device name
4625  cd1c 4f            	clr	a
4626  cd1d ae4008        	ldw	x,#_stored_devicename+8
4627  cd20 cddf1a        	call	c_eewrc
4629                     ; 943     stored_devicename[9] = 0x00;   // Device name
4631  cd23 4f            	clr	a
4632  cd24 ae4009        	ldw	x,#_stored_devicename+9
4633  cd27 cddf1a        	call	c_eewrc
4635                     ; 944     stored_devicename[10] = 0x00;  // Device name
4637  cd2a 4f            	clr	a
4638  cd2b ae400a        	ldw	x,#_stored_devicename+10
4639  cd2e cddf1a        	call	c_eewrc
4641                     ; 945     stored_devicename[11] = 0x00;  // Device name
4643  cd31 4f            	clr	a
4644  cd32 ae400b        	ldw	x,#_stored_devicename+11
4645  cd35 cddf1a        	call	c_eewrc
4647                     ; 946     stored_devicename[12] = 0x00;  // Device name
4649  cd38 4f            	clr	a
4650  cd39 ae400c        	ldw	x,#_stored_devicename+12
4651  cd3c cddf1a        	call	c_eewrc
4653                     ; 947     stored_devicename[13] = 0x00;  // Device name
4655  cd3f 4f            	clr	a
4656  cd40 ae400d        	ldw	x,#_stored_devicename+13
4657  cd43 cddf1a        	call	c_eewrc
4659                     ; 948     stored_devicename[14] = 0x00;  // Device name
4661  cd46 4f            	clr	a
4662  cd47 ae400e        	ldw	x,#_stored_devicename+14
4663  cd4a cddf1a        	call	c_eewrc
4665                     ; 949     stored_devicename[15] = 0x00;  // Device name
4667  cd4d 4f            	clr	a
4668  cd4e ae400f        	ldw	x,#_stored_devicename+15
4669  cd51 cddf1a        	call	c_eewrc
4671                     ; 950     stored_devicename[16] = 0x00;  // Device name
4673  cd54 4f            	clr	a
4674  cd55 ae4010        	ldw	x,#_stored_devicename+16
4675  cd58 cddf1a        	call	c_eewrc
4677                     ; 951     stored_devicename[17] = 0x00;  // Device name
4679  cd5b 4f            	clr	a
4680  cd5c ae4011        	ldw	x,#_stored_devicename+17
4681  cd5f cddf1a        	call	c_eewrc
4683                     ; 952     stored_devicename[18] = 0x00;  // Device name
4685  cd62 4f            	clr	a
4686  cd63 ae4012        	ldw	x,#_stored_devicename+18
4687  cd66 cddf1a        	call	c_eewrc
4689                     ; 953     stored_devicename[19] = 0x00;  // Device name
4691  cd69 4f            	clr	a
4692  cd6a ae4013        	ldw	x,#_stored_devicename+19
4693  cd6d cddf1a        	call	c_eewrc
4695                     ; 955     WWDG_WR = (uint8_t)0x7f;       // Window register reset
4697  cd70 357f50d2      	mov	_WWDG_WR,#127
4698                     ; 956     WWDG_CR = (uint8_t)0xff;       // Set watchdog to timeout in 49ms
4700  cd74 35ff50d1      	mov	_WWDG_CR,#255
4701                     ; 957     WWDG_WR = (uint8_t)0x60;       // Window register value - doesn't matter
4703  cd78 356050d2      	mov	_WWDG_WR,#96
4704                     ; 960     wait_timer((uint16_t)50000);   // Wait for watchdog to generate reset
4706  cd7c aec350        	ldw	x,#50000
4707  cd7f cdcf6b        	call	_wait_timer
4709                     ; 961     wait_timer((uint16_t)50000);
4711  cd82 aec350        	ldw	x,#50000
4712  cd85 cdcf6b        	call	_wait_timer
4714                     ; 962     wait_timer((uint16_t)50000);
4716  cd88 aec350        	ldw	x,#50000
4717  cd8b cdcf6b        	call	_wait_timer
4719  cd8e               L5032:
4720                     ; 964 }
4723  cd8e 84            	pop	a
4724  cd8f 81            	ret	
4758                     ; 967 void debugflash(void)
4758                     ; 968 {
4759                     	switch	.text
4760  cd90               _debugflash:
4762  cd90 88            	push	a
4763       00000001      OFST:	set	1
4766                     ; 983   LEDcontrol(0);     // turn LED off
4768  cd91 4f            	clr	a
4769  cd92 cdb05c        	call	_LEDcontrol
4771                     ; 984   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
4773  cd95 0f01          	clr	(OFST+0,sp)
4775  cd97               L1432:
4778  cd97 aec350        	ldw	x,#50000
4779  cd9a cdcf6b        	call	_wait_timer
4783  cd9d 0c01          	inc	(OFST+0,sp)
4787  cd9f 7b01          	ld	a,(OFST+0,sp)
4788  cda1 a10a          	cp	a,#10
4789  cda3 25f2          	jrult	L1432
4790                     ; 986   LEDcontrol(1);     // turn LED on
4792  cda5 a601          	ld	a,#1
4793  cda7 cdb05c        	call	_LEDcontrol
4795                     ; 987   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
4797  cdaa 0f01          	clr	(OFST+0,sp)
4799  cdac               L7432:
4802  cdac aec350        	ldw	x,#50000
4803  cdaf cdcf6b        	call	_wait_timer
4807  cdb2 0c01          	inc	(OFST+0,sp)
4811  cdb4 7b01          	ld	a,(OFST+0,sp)
4812  cdb6 a10a          	cp	a,#10
4813  cdb8 25f2          	jrult	L7432
4814                     ; 988 }
4817  cdba 84            	pop	a
4818  cdbb 81            	ret	
5423                     	switch	.bss
5424  001c               _IpAddr:
5425  001c 00000000      	ds.b	4
5426                     	xdef	_IpAddr
5427  0020               _Port_Httpd:
5428  0020 0000          	ds.b	2
5429                     	xdef	_Port_Httpd
5430  0022               _devicename_changed:
5431  0022 00            	ds.b	1
5432                     	xdef	_devicename_changed
5433  0023               _submit_changes:
5434  0023 00            	ds.b	1
5435                     	xdef	_submit_changes
5436  0024               _uip_ethaddr1:
5437  0024 00            	ds.b	1
5438                     	xdef	_uip_ethaddr1
5439  0025               _uip_ethaddr2:
5440  0025 00            	ds.b	1
5441                     	xdef	_uip_ethaddr2
5442  0026               _uip_ethaddr3:
5443  0026 00            	ds.b	1
5444                     	xdef	_uip_ethaddr3
5445  0027               _uip_ethaddr4:
5446  0027 00            	ds.b	1
5447                     	xdef	_uip_ethaddr4
5448  0028               _uip_ethaddr5:
5449  0028 00            	ds.b	1
5450                     	xdef	_uip_ethaddr5
5451  0029               _uip_ethaddr6:
5452  0029 00            	ds.b	1
5453                     	xdef	_uip_ethaddr6
5454  002a               _Pending_uip_ethaddr1:
5455  002a 00            	ds.b	1
5456                     	xdef	_Pending_uip_ethaddr1
5457  002b               _Pending_uip_ethaddr2:
5458  002b 00            	ds.b	1
5459                     	xdef	_Pending_uip_ethaddr2
5460  002c               _Pending_uip_ethaddr3:
5461  002c 00            	ds.b	1
5462                     	xdef	_Pending_uip_ethaddr3
5463  002d               _Pending_uip_ethaddr4:
5464  002d 00            	ds.b	1
5465                     	xdef	_Pending_uip_ethaddr4
5466  002e               _Pending_uip_ethaddr5:
5467  002e 00            	ds.b	1
5468                     	xdef	_Pending_uip_ethaddr5
5469  002f               _Pending_uip_ethaddr6:
5470  002f 00            	ds.b	1
5471                     	xdef	_Pending_uip_ethaddr6
5472  0030               _Pending_port:
5473  0030 0000          	ds.b	2
5474                     	xdef	_Pending_port
5475  0032               _Pending_netmask1:
5476  0032 00            	ds.b	1
5477                     	xdef	_Pending_netmask1
5478  0033               _Pending_netmask2:
5479  0033 00            	ds.b	1
5480                     	xdef	_Pending_netmask2
5481  0034               _Pending_netmask3:
5482  0034 00            	ds.b	1
5483                     	xdef	_Pending_netmask3
5484  0035               _Pending_netmask4:
5485  0035 00            	ds.b	1
5486                     	xdef	_Pending_netmask4
5487  0036               _Pending_draddr1:
5488  0036 00            	ds.b	1
5489                     	xdef	_Pending_draddr1
5490  0037               _Pending_draddr2:
5491  0037 00            	ds.b	1
5492                     	xdef	_Pending_draddr2
5493  0038               _Pending_draddr3:
5494  0038 00            	ds.b	1
5495                     	xdef	_Pending_draddr3
5496  0039               _Pending_draddr4:
5497  0039 00            	ds.b	1
5498                     	xdef	_Pending_draddr4
5499  003a               _Pending_hostaddr1:
5500  003a 00            	ds.b	1
5501                     	xdef	_Pending_hostaddr1
5502  003b               _Pending_hostaddr2:
5503  003b 00            	ds.b	1
5504                     	xdef	_Pending_hostaddr2
5505  003c               _Pending_hostaddr3:
5506  003c 00            	ds.b	1
5507                     	xdef	_Pending_hostaddr3
5508  003d               _Pending_hostaddr4:
5509  003d 00            	ds.b	1
5510                     	xdef	_Pending_hostaddr4
5511  003e               _ex_stored_devicename:
5512  003e 000000000000  	ds.b	20
5513                     	xdef	_ex_stored_devicename
5514  0052               _invert_output:
5515  0052 00            	ds.b	1
5516                     	xdef	_invert_output
5517  0053               _IO_8to1:
5518  0053 00            	ds.b	1
5519                     	xdef	_IO_8to1
5520  0054               _IO_16to9:
5521  0054 00            	ds.b	1
5522                     	xdef	_IO_16to9
5523  0055               _ex_stored_port:
5524  0055 0000          	ds.b	2
5525                     	xdef	_ex_stored_port
5526  0057               _ex_stored_netmask1:
5527  0057 00            	ds.b	1
5528                     	xdef	_ex_stored_netmask1
5529  0058               _ex_stored_netmask2:
5530  0058 00            	ds.b	1
5531                     	xdef	_ex_stored_netmask2
5532  0059               _ex_stored_netmask3:
5533  0059 00            	ds.b	1
5534                     	xdef	_ex_stored_netmask3
5535  005a               _ex_stored_netmask4:
5536  005a 00            	ds.b	1
5537                     	xdef	_ex_stored_netmask4
5538  005b               _ex_stored_draddr1:
5539  005b 00            	ds.b	1
5540                     	xdef	_ex_stored_draddr1
5541  005c               _ex_stored_draddr2:
5542  005c 00            	ds.b	1
5543                     	xdef	_ex_stored_draddr2
5544  005d               _ex_stored_draddr3:
5545  005d 00            	ds.b	1
5546                     	xdef	_ex_stored_draddr3
5547  005e               _ex_stored_draddr4:
5548  005e 00            	ds.b	1
5549                     	xdef	_ex_stored_draddr4
5550  005f               _ex_stored_hostaddr1:
5551  005f 00            	ds.b	1
5552                     	xdef	_ex_stored_hostaddr1
5553  0060               _ex_stored_hostaddr2:
5554  0060 00            	ds.b	1
5555                     	xdef	_ex_stored_hostaddr2
5556  0061               _ex_stored_hostaddr3:
5557  0061 00            	ds.b	1
5558                     	xdef	_ex_stored_hostaddr3
5559  0062               _ex_stored_hostaddr4:
5560  0062 00            	ds.b	1
5561                     	xdef	_ex_stored_hostaddr4
5562                     .eeprom:	section	.data
5563  4000               _stored_devicename:
5564  4000 000000000000  	ds.b	20
5565                     	xdef	_stored_devicename
5566  4014               _stored_invert_output:
5567  4014 00            	ds.b	1
5568                     	xdef	_stored_invert_output
5569  4015               _stored_IO_8to1:
5570  4015 00            	ds.b	1
5571                     	xdef	_stored_IO_8to1
5572  4016               _stored_IO_16to9:
5573  4016 00            	ds.b	1
5574                     	xdef	_stored_IO_16to9
5575  4017               _stored_uip_ethaddr6:
5576  4017 00            	ds.b	1
5577                     	xdef	_stored_uip_ethaddr6
5578  4018               _stored_uip_ethaddr5:
5579  4018 00            	ds.b	1
5580                     	xdef	_stored_uip_ethaddr5
5581  4019               _stored_uip_ethaddr4:
5582  4019 00            	ds.b	1
5583                     	xdef	_stored_uip_ethaddr4
5584  401a               _stored_uip_ethaddr3:
5585  401a 00            	ds.b	1
5586                     	xdef	_stored_uip_ethaddr3
5587  401b               _stored_uip_ethaddr2:
5588  401b 00            	ds.b	1
5589                     	xdef	_stored_uip_ethaddr2
5590  401c               _stored_uip_ethaddr1:
5591  401c 00            	ds.b	1
5592                     	xdef	_stored_uip_ethaddr1
5593  401d               _stored_port:
5594  401d 0000          	ds.b	2
5595                     	xdef	_stored_port
5596  401f               _stored_netmask1:
5597  401f 00            	ds.b	1
5598                     	xdef	_stored_netmask1
5599  4020               _stored_netmask2:
5600  4020 00            	ds.b	1
5601                     	xdef	_stored_netmask2
5602  4021               _stored_netmask3:
5603  4021 00            	ds.b	1
5604                     	xdef	_stored_netmask3
5605  4022               _stored_netmask4:
5606  4022 00            	ds.b	1
5607                     	xdef	_stored_netmask4
5608  4023               _stored_draddr1:
5609  4023 00            	ds.b	1
5610                     	xdef	_stored_draddr1
5611  4024               _stored_draddr2:
5612  4024 00            	ds.b	1
5613                     	xdef	_stored_draddr2
5614  4025               _stored_draddr3:
5615  4025 00            	ds.b	1
5616                     	xdef	_stored_draddr3
5617  4026               _stored_draddr4:
5618  4026 00            	ds.b	1
5619                     	xdef	_stored_draddr4
5620  4027               _stored_hostaddr1:
5621  4027 00            	ds.b	1
5622                     	xdef	_stored_hostaddr1
5623  4028               _stored_hostaddr2:
5624  4028 00            	ds.b	1
5625                     	xdef	_stored_hostaddr2
5626  4029               _stored_hostaddr3:
5627  4029 00            	ds.b	1
5628                     	xdef	_stored_hostaddr3
5629  402a               _stored_hostaddr4:
5630  402a 00            	ds.b	1
5631                     	xdef	_stored_hostaddr4
5632  402b               _magic1:
5633  402b 00            	ds.b	1
5634                     	xdef	_magic1
5635  402c               _magic2:
5636  402c 00            	ds.b	1
5637                     	xdef	_magic2
5638  402d               _magic3:
5639  402d 00            	ds.b	1
5640                     	xdef	_magic3
5641  402e               _magic4:
5642  402e 00            	ds.b	1
5643                     	xdef	_magic4
5644                     	xref	_wait_timer
5645                     	xref	_arp_timer_expired
5646                     	xref	_periodic_timer_expired
5647                     	xref	_clock_init
5648                     	xref	_LEDcontrol
5649                     	xref	_gpio_init
5650                     	xref	_uip_arp_timer
5651                     	xref	_uip_arp_out
5652                     	xref	_uip_arp_arpin
5653                     	xref	_uip_arp_init
5654                     	xref	_uip_ethaddr
5655                     	xref	_uip_draddr
5656                     	xref	_uip_netmask
5657                     	xref	_uip_hostaddr
5658                     	xref	_uip_process
5659                     	xref	_uip_conns
5660                     	xref	_uip_conn
5661                     	xref	_uip_len
5662                     	xref	_htons
5663                     	xref	_uip_buf
5664                     	xref	_uip_init
5665                     	xref	_HttpDInit
5666                     	xref	_Enc28j60Send
5667                     	xref	_Enc28j60CopyPacket
5668                     	xref	_Enc28j60Receive
5669                     	xref	_Enc28j60Init
5670                     	xref	_spi_init
5671                     	xdef	_debugflash
5672                     	xdef	_check_reset_button
5673                     	xdef	_write_output_registers
5674                     	xdef	_read_input_registers
5675                     	xdef	_check_runtime_changes
5676                     	xdef	_check_eeprom_settings
5677                     	xdef	_unlock_eeprom
5678                     	xdef	_main
5679                     	xref.b	c_x
5699                     	xref	c_eewrw
5700                     	xref	c_eewrc
5701                     	xref	c_bmulx
5702                     	end
