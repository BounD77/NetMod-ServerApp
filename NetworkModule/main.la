   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2581                     ; 156 main(void)
2581                     ; 157 {
2583                     	switch	.text
2584  d875               _main:
2586  d875 89            	pushw	x
2587       00000002      OFST:	set	2
2590                     ; 161   devicename_changed = 0;
2592  d876 725f001c      	clr	_devicename_changed
2593                     ; 162   submit_changes = 0;
2595  d87a 725f001d      	clr	_submit_changes
2596                     ; 164   clock_init();            // Initialize and enable clocks and timers
2598  d87e cde388        	call	_clock_init
2600                     ; 166   gpio_init();             // Initialize and enable gpio pins
2602  d881 cdc19a        	call	_gpio_init
2604                     ; 168   spi_init();              // Initialize the SPI bit bang interface to the
2606  d884 cde290        	call	_spi_init
2608                     ; 171   LEDcontrol(1);           // turn LED on
2610  d887 a601          	ld	a,#1
2611  d889 cdc1df        	call	_LEDcontrol
2613                     ; 173   unlock_eeprom();         // unlock the EEPROM so writes can be performed
2615  d88c cdd92f        	call	_unlock_eeprom
2617                     ; 175   check_eeprom_settings(); // Check the EEPROM for previously stored Address
2619  d88f cdd93f        	call	_check_eeprom_settings
2621                     ; 179   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
2623  d892 cdbf6e        	call	_Enc28j60Init
2625                     ; 181   uip_arp_init();          // Initialize the ARP module
2627  d895 cdefc7        	call	_uip_arp_init
2629                     ; 183   uip_init();              // Initialize uIP
2631  d898 cde586        	call	_uip_init
2633                     ; 185   HttpDInit();             // Initialize httpd; sets up listening ports
2635  d89b cdccf2        	call	_HttpDInit
2637  d89e               L1561:
2638                     ; 188     uip_len = Enc28j60Receive(uip_buf);
2640  d89e ae01db        	ldw	x,#_uip_buf
2641  d8a1 cdc087        	call	_Enc28j60Receive
2643  d8a4 cf01d7        	ldw	_uip_len,x
2644                     ; 190     if (uip_len> 0) {
2646  d8a7 273b          	jreq	L5561
2647                     ; 191       if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_IP)) {
2649  d8a9 ae0800        	ldw	x,#2048
2650  d8ac cdefa2        	call	_htons
2652  d8af c301e7        	cpw	x,_uip_buf+12
2653  d8b2 2612          	jrne	L7561
2654                     ; 193 	uip_input(); // calls uip_process(UIP_DATA)
2656  d8b4 a601          	ld	a,#1
2657  d8b6 cde6a9        	call	_uip_process
2659                     ; 197         if (uip_len> 0) {
2661  d8b9 ce01d7        	ldw	x,_uip_len
2662  d8bc 2726          	jreq	L5561
2663                     ; 198           uip_arp_out();
2665  d8be cdf1f0        	call	_uip_arp_out
2667                     ; 202           Enc28j60CopyPacket(uip_buf, uip_len);
2669  d8c1 ce01d7        	ldw	x,_uip_len
2671                     ; 203           Enc28j60Send();
2673  d8c4 2013          	jp	LC001
2674  d8c6               L7561:
2675                     ; 206       else if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_ARP)) {
2677  d8c6 ae0806        	ldw	x,#2054
2678  d8c9 cdefa2        	call	_htons
2680  d8cc c301e7        	cpw	x,_uip_buf+12
2681  d8cf 2613          	jrne	L5561
2682                     ; 207         uip_arp_arpin();
2684  d8d1 cdf141        	call	_uip_arp_arpin
2686                     ; 211         if (uip_len> 0) {
2688  d8d4 ce01d7        	ldw	x,_uip_len
2689  d8d7 270b          	jreq	L5561
2690                     ; 215           Enc28j60CopyPacket(uip_buf, uip_len);
2693                     ; 216           Enc28j60Send();
2695  d8d9               LC001:
2696  d8d9 89            	pushw	x
2697  d8da ae01db        	ldw	x,#_uip_buf
2698  d8dd cdc123        	call	_Enc28j60CopyPacket
2699  d8e0 85            	popw	x
2701  d8e1 cdc188        	call	_Enc28j60Send
2703  d8e4               L5561:
2704                     ; 221     if (periodic_timer_expired()) {
2706  d8e4 cde40f        	call	_periodic_timer_expired
2708  d8e7 4d            	tnz	a
2709  d8e8 2733          	jreq	L1761
2710                     ; 222       for(i = 0; i < UIP_CONNS; i++) {
2712  d8ea 5f            	clrw	x
2713  d8eb 1f01          	ldw	(OFST-1,sp),x
2715  d8ed               L1071:
2716                     ; 223 	uip_periodic(i);
2718  d8ed a628          	ld	a,#40
2719  d8ef cdf3ca        	call	c_bmulx
2721  d8f2 1c00e5        	addw	x,#_uip_conns
2722  d8f5 cf01d5        	ldw	_uip_conn,x
2725  d8f8 a602          	ld	a,#2
2726  d8fa cde6a9        	call	_uip_process
2728                     ; 227 	if (uip_len > 0) {
2730  d8fd ce01d7        	ldw	x,_uip_len
2731  d900 2711          	jreq	L5071
2732                     ; 228 	  uip_arp_out();
2734  d902 cdf1f0        	call	_uip_arp_out
2736                     ; 232           Enc28j60CopyPacket(uip_buf, uip_len);
2738  d905 ce01d7        	ldw	x,_uip_len
2739  d908 89            	pushw	x
2740  d909 ae01db        	ldw	x,#_uip_buf
2741  d90c cdc123        	call	_Enc28j60CopyPacket
2743  d90f 85            	popw	x
2744                     ; 233           Enc28j60Send();
2746  d910 cdc188        	call	_Enc28j60Send
2748  d913               L5071:
2749                     ; 222       for(i = 0; i < UIP_CONNS; i++) {
2751  d913 1e01          	ldw	x,(OFST-1,sp)
2752  d915 5c            	incw	x
2753  d916 1f01          	ldw	(OFST-1,sp),x
2757  d918 a30006        	cpw	x,#6
2758  d91b 2fd0          	jrslt	L1071
2759  d91d               L1761:
2760                     ; 239     if (arp_timer_expired()) {
2762  d91d cde42f        	call	_arp_timer_expired
2764  d920 4d            	tnz	a
2765  d921 2703          	jreq	L7071
2766                     ; 240       uip_arp_timer();
2768  d923 cdefea        	call	_uip_arp_timer
2770  d926               L7071:
2771                     ; 245     check_runtime_changes();
2773  d926 cddcde        	call	_check_runtime_changes
2775                     ; 248     check_reset_button();
2777  d929 cde0d4        	call	_check_reset_button
2780  d92c ccd89e        	jra	L1561
2805                     ; 273 void unlock_eeprom(void)
2805                     ; 274 {
2806                     	switch	.text
2807  d92f               _unlock_eeprom:
2811  d92f 2008          	jra	L3271
2812  d931               L1271:
2813                     ; 282     FLASH_DUKR = 0xAE; // MASS key 1
2815  d931 35ae5064      	mov	_FLASH_DUKR,#174
2816                     ; 283     FLASH_DUKR = 0x56; // MASS key 2
2818  d935 35565064      	mov	_FLASH_DUKR,#86
2819  d939               L3271:
2820                     ; 281   while (!(FLASH_IAPSR & 0x08)) {  // Check DUL bit, 0=Protected
2822  d939 7207505ff3    	btjf	_FLASH_IAPSR,#3,L1271
2823                     ; 285 }
2826  d93e 81            	ret	
2935                     ; 288 void check_eeprom_settings(void)
2935                     ; 289 {
2936                     	switch	.text
2937  d93f               _check_eeprom_settings:
2939  d93f 88            	push	a
2940       00000001      OFST:	set	1
2943                     ; 299   if ((magic4 == 0x55) && 
2943                     ; 300       (magic3 == 0xee) && 
2943                     ; 301       (magic2 == 0x0f) && 
2943                     ; 302       (magic1 == 0xf0) == 1) {
2945  d940 c6402e        	ld	a,_magic4
2946  d943 a155          	cp	a,#85
2947  d945 2703ccda2f    	jrne	L5002
2949  d94a c6402d        	ld	a,_magic3
2950  d94d a1ee          	cp	a,#238
2951  d94f 26f6          	jrne	L5002
2953  d951 c6402c        	ld	a,_magic2
2954  d954 a10f          	cp	a,#15
2955  d956 26ef          	jrne	L5002
2957  d958 c6402b        	ld	a,_magic1
2958  d95b a1f0          	cp	a,#240
2959  d95d 26e8          	jrne	L5002
2960                     ; 306     uip_ipaddr(IpAddr, stored_hostaddr4, stored_hostaddr3, stored_hostaddr2, stored_hostaddr1);
2962  d95f c6402a        	ld	a,_stored_hostaddr4
2963  d962 97            	ld	xl,a
2964  d963 c64029        	ld	a,_stored_hostaddr3
2965  d966 02            	rlwa	x,a
2966  d967 cf005a        	ldw	_IpAddr,x
2969  d96a c64028        	ld	a,_stored_hostaddr2
2970  d96d 97            	ld	xl,a
2971  d96e c64027        	ld	a,_stored_hostaddr1
2972  d971 02            	rlwa	x,a
2973  d972 cf005c        	ldw	_IpAddr+2,x
2974                     ; 307     uip_sethostaddr(IpAddr);
2976  d975 ce005a        	ldw	x,_IpAddr
2977  d978 cf0084        	ldw	_uip_hostaddr,x
2980  d97b ce005c        	ldw	x,_IpAddr+2
2981  d97e cf0086        	ldw	_uip_hostaddr+2,x
2982                     ; 309     uip_ipaddr(IpAddr, stored_draddr4, stored_draddr3, stored_draddr2, stored_draddr1);
2984  d981 c64026        	ld	a,_stored_draddr4
2985  d984 97            	ld	xl,a
2986  d985 c64025        	ld	a,_stored_draddr3
2987  d988 02            	rlwa	x,a
2988  d989 cf005a        	ldw	_IpAddr,x
2991  d98c c64024        	ld	a,_stored_draddr2
2992  d98f 97            	ld	xl,a
2993  d990 c64023        	ld	a,_stored_draddr1
2994  d993 02            	rlwa	x,a
2995  d994 cf005c        	ldw	_IpAddr+2,x
2996                     ; 310     uip_setdraddr(IpAddr);
2998  d997 ce005a        	ldw	x,_IpAddr
2999  d99a cf007c        	ldw	_uip_draddr,x
3002  d99d ce005c        	ldw	x,_IpAddr+2
3003  d9a0 cf007e        	ldw	_uip_draddr+2,x
3004                     ; 312     uip_ipaddr(IpAddr, stored_netmask4, stored_netmask3, stored_netmask2, stored_netmask1);
3006  d9a3 c64022        	ld	a,_stored_netmask4
3007  d9a6 97            	ld	xl,a
3008  d9a7 c64021        	ld	a,_stored_netmask3
3009  d9aa 02            	rlwa	x,a
3010  d9ab cf005a        	ldw	_IpAddr,x
3013  d9ae c64020        	ld	a,_stored_netmask2
3014  d9b1 97            	ld	xl,a
3015  d9b2 c6401f        	ld	a,_stored_netmask1
3016  d9b5 02            	rlwa	x,a
3017  d9b6 cf005c        	ldw	_IpAddr+2,x
3018                     ; 313     uip_setnetmask(IpAddr);
3020  d9b9 ce005a        	ldw	x,_IpAddr
3021  d9bc cf0080        	ldw	_uip_netmask,x
3024  d9bf ce005c        	ldw	x,_IpAddr+2
3025  d9c2 cf0082        	ldw	_uip_netmask+2,x
3026                     ; 315     Port_Httpd = stored_port;
3028  d9c5 ce401d        	ldw	x,_stored_port
3029  d9c8 cf0061        	ldw	_Port_Httpd,x
3030                     ; 317     uip_ethaddr6 = stored_uip_ethaddr6;
3032  d9cb 5540170023    	mov	_uip_ethaddr6,_stored_uip_ethaddr6
3033                     ; 318     uip_ethaddr5 = stored_uip_ethaddr5;
3035  d9d0 5540180022    	mov	_uip_ethaddr5,_stored_uip_ethaddr5
3036                     ; 319     uip_ethaddr4 = stored_uip_ethaddr4;
3038  d9d5 5540190021    	mov	_uip_ethaddr4,_stored_uip_ethaddr4
3039                     ; 320     uip_ethaddr3 = stored_uip_ethaddr3;
3041  d9da 55401a0020    	mov	_uip_ethaddr3,_stored_uip_ethaddr3
3042                     ; 321     uip_ethaddr2 = stored_uip_ethaddr2;
3044  d9df 55401b001f    	mov	_uip_ethaddr2,_stored_uip_ethaddr2
3045                     ; 322     uip_ethaddr1 = stored_uip_ethaddr1;
3047  d9e4 55401c001e    	mov	_uip_ethaddr1,_stored_uip_ethaddr1
3048                     ; 324     uip_ethaddr.addr[0] = uip_ethaddr1;
3050  d9e9 55001e000a    	mov	_uip_ethaddr,_uip_ethaddr1
3051                     ; 325     uip_ethaddr.addr[1] = uip_ethaddr2;
3053  d9ee 55001f000b    	mov	_uip_ethaddr+1,_uip_ethaddr2
3054                     ; 326     uip_ethaddr.addr[2] = uip_ethaddr3;
3056  d9f3 550020000c    	mov	_uip_ethaddr+2,_uip_ethaddr3
3057                     ; 327     uip_ethaddr.addr[3] = uip_ethaddr4;
3059  d9f8 550021000d    	mov	_uip_ethaddr+3,_uip_ethaddr4
3060                     ; 328     uip_ethaddr.addr[4] = uip_ethaddr5;
3062  d9fd 550022000e    	mov	_uip_ethaddr+4,_uip_ethaddr5
3063                     ; 329     uip_ethaddr.addr[5] = uip_ethaddr6;
3065                     ; 331     for(i=0; i<20; i++) { ex_stored_devicename[i] = stored_devicename[i]; }
3067  da02 4f            	clr	a
3068  da03 550023000f    	mov	_uip_ethaddr+5,_uip_ethaddr6
3069  da08 6b01          	ld	(OFST+0,sp),a
3071  da0a               L5771:
3074  da0a 5f            	clrw	x
3075  da0b 97            	ld	xl,a
3076  da0c d64000        	ld	a,(_stored_devicename,x)
3077  da0f d70038        	ld	(_ex_stored_devicename,x),a
3080  da12 0c01          	inc	(OFST+0,sp)
3084  da14 7b01          	ld	a,(OFST+0,sp)
3085  da16 a114          	cp	a,#20
3086  da18 25f0          	jrult	L5771
3087                     ; 335     invert_output = stored_invert_output;
3089  da1a 554014005e    	mov	_invert_output,_stored_invert_output
3090                     ; 336     Relays_16to9 = stored_Relays_16to9;
3092  da1f 5540160060    	mov	_Relays_16to9,_stored_Relays_16to9
3093                     ; 337     Relays_8to1 = stored_Relays_8to1;
3095  da24 554015005f    	mov	_Relays_8to1,_stored_Relays_8to1
3096                     ; 339     update_relay_control_registers();
3098  da29 cddeea        	call	_update_relay_control_registers
3101  da2c ccdc2a        	jra	L3002
3102  da2f               L5002:
3103                     ; 348     uip_ipaddr(IpAddr, 192,168,1,4);
3105  da2f aec0a8        	ldw	x,#49320
3106  da32 cf005a        	ldw	_IpAddr,x
3109  da35 ae0104        	ldw	x,#260
3110  da38 cf005c        	ldw	_IpAddr+2,x
3111                     ; 349     uip_sethostaddr(IpAddr);
3113  da3b ce005a        	ldw	x,_IpAddr
3114  da3e cf0084        	ldw	_uip_hostaddr,x
3117  da41 ce005c        	ldw	x,_IpAddr+2
3118  da44 cf0086        	ldw	_uip_hostaddr+2,x
3119                     ; 351     stored_hostaddr4 = 192;	// MSB
3121  da47 a6c0          	ld	a,#192
3122  da49 ae402a        	ldw	x,#_stored_hostaddr4
3123  da4c cdf3ee        	call	c_eewrc
3125                     ; 352     stored_hostaddr3 = 168;	//
3127  da4f a6a8          	ld	a,#168
3128  da51 ae4029        	ldw	x,#_stored_hostaddr3
3129  da54 cdf3ee        	call	c_eewrc
3131                     ; 353     stored_hostaddr2 = 1;	//
3133  da57 a601          	ld	a,#1
3134  da59 ae4028        	ldw	x,#_stored_hostaddr2
3135  da5c cdf3ee        	call	c_eewrc
3137                     ; 354     stored_hostaddr1 = 4;	// LSB
3139  da5f a604          	ld	a,#4
3140  da61 ae4027        	ldw	x,#_stored_hostaddr1
3141  da64 cdf3ee        	call	c_eewrc
3143                     ; 357     uip_ipaddr(IpAddr, 192,168,1,1);
3145  da67 aec0a8        	ldw	x,#49320
3146  da6a cf005a        	ldw	_IpAddr,x
3149  da6d ae0101        	ldw	x,#257
3150  da70 cf005c        	ldw	_IpAddr+2,x
3151                     ; 358     uip_setdraddr(IpAddr);
3153  da73 ce005a        	ldw	x,_IpAddr
3154  da76 cf007c        	ldw	_uip_draddr,x
3157  da79 ce005c        	ldw	x,_IpAddr+2
3158  da7c cf007e        	ldw	_uip_draddr+2,x
3159                     ; 360     stored_draddr4 = 192;	// MSB
3161  da7f a6c0          	ld	a,#192
3162  da81 ae4026        	ldw	x,#_stored_draddr4
3163  da84 cdf3ee        	call	c_eewrc
3165                     ; 361     stored_draddr3 = 168;	//
3167  da87 a6a8          	ld	a,#168
3168  da89 ae4025        	ldw	x,#_stored_draddr3
3169  da8c cdf3ee        	call	c_eewrc
3171                     ; 362     stored_draddr2 = 1;		//
3173  da8f a601          	ld	a,#1
3174  da91 ae4024        	ldw	x,#_stored_draddr2
3175  da94 cdf3ee        	call	c_eewrc
3177                     ; 363     stored_draddr1 = 1;		// LSB
3179  da97 a601          	ld	a,#1
3180  da99 ae4023        	ldw	x,#_stored_draddr1
3181  da9c cdf3ee        	call	c_eewrc
3183                     ; 366     uip_ipaddr(IpAddr, 255,255,255,0);
3185  da9f aeffff        	ldw	x,#65535
3186  daa2 cf005a        	ldw	_IpAddr,x
3189  daa5 aeff00        	ldw	x,#65280
3190  daa8 cf005c        	ldw	_IpAddr+2,x
3191                     ; 367     uip_setnetmask(IpAddr);
3193  daab ce005a        	ldw	x,_IpAddr
3194  daae cf0080        	ldw	_uip_netmask,x
3197  dab1 ce005c        	ldw	x,_IpAddr+2
3198  dab4 cf0082        	ldw	_uip_netmask+2,x
3199                     ; 369     stored_netmask4 = 255;	// MSB
3201  dab7 a6ff          	ld	a,#255
3202  dab9 ae4022        	ldw	x,#_stored_netmask4
3203  dabc cdf3ee        	call	c_eewrc
3205                     ; 370     stored_netmask3 = 255;	//
3207  dabf a6ff          	ld	a,#255
3208  dac1 ae4021        	ldw	x,#_stored_netmask3
3209  dac4 cdf3ee        	call	c_eewrc
3211                     ; 371     stored_netmask2 = 255;	//
3213  dac7 a6ff          	ld	a,#255
3214  dac9 ae4020        	ldw	x,#_stored_netmask2
3215  dacc cdf3ee        	call	c_eewrc
3217                     ; 372     stored_netmask1 = 0;	// LSB
3219  dacf 4f            	clr	a
3220  dad0 ae401f        	ldw	x,#_stored_netmask1
3221  dad3 cdf3ee        	call	c_eewrc
3223                     ; 375     stored_port = 8080;		// Port
3225  dad6 ae1f90        	ldw	x,#8080
3226  dad9 89            	pushw	x
3227  dada ae401d        	ldw	x,#_stored_port
3228  dadd cdf3d8        	call	c_eewrw
3230  dae0 85            	popw	x
3231                     ; 377     Port_Httpd = 8080;
3233  dae1 ae1f90        	ldw	x,#8080
3234  dae4 cf0061        	ldw	_Port_Httpd,x
3235                     ; 389     stored_uip_ethaddr1 = 0xc2;	//MAC MSB
3237  dae7 a6c2          	ld	a,#194
3238  dae9 ae401c        	ldw	x,#_stored_uip_ethaddr1
3239  daec cdf3ee        	call	c_eewrc
3241                     ; 390     stored_uip_ethaddr2 = 0x4d;
3243  daef a64d          	ld	a,#77
3244  daf1 ae401b        	ldw	x,#_stored_uip_ethaddr2
3245  daf4 cdf3ee        	call	c_eewrc
3247                     ; 391     stored_uip_ethaddr3 = 0x69;
3249  daf7 a669          	ld	a,#105
3250  daf9 ae401a        	ldw	x,#_stored_uip_ethaddr3
3251  dafc cdf3ee        	call	c_eewrc
3253                     ; 392     stored_uip_ethaddr4 = 0x6b;
3255  daff a66b          	ld	a,#107
3256  db01 ae4019        	ldw	x,#_stored_uip_ethaddr4
3257  db04 cdf3ee        	call	c_eewrc
3259                     ; 393     stored_uip_ethaddr5 = 0x65;
3261  db07 a665          	ld	a,#101
3262  db09 ae4018        	ldw	x,#_stored_uip_ethaddr5
3263  db0c cdf3ee        	call	c_eewrc
3265                     ; 394     stored_uip_ethaddr6 = 0x00;	//MAC LSB
3267  db0f 4f            	clr	a
3268  db10 ae4017        	ldw	x,#_stored_uip_ethaddr6
3269  db13 cdf3ee        	call	c_eewrc
3271                     ; 396     uip_ethaddr1 = stored_uip_ethaddr1;	//MAC MSB
3273  db16 35c2001e      	mov	_uip_ethaddr1,#194
3274                     ; 397     uip_ethaddr2 = stored_uip_ethaddr2;
3276  db1a 354d001f      	mov	_uip_ethaddr2,#77
3277                     ; 398     uip_ethaddr3 = stored_uip_ethaddr3;
3279  db1e 35690020      	mov	_uip_ethaddr3,#105
3280                     ; 399     uip_ethaddr4 = stored_uip_ethaddr4;
3282  db22 356b0021      	mov	_uip_ethaddr4,#107
3283                     ; 400     uip_ethaddr5 = stored_uip_ethaddr5;
3285  db26 35650022      	mov	_uip_ethaddr5,#101
3286                     ; 401     uip_ethaddr6 = stored_uip_ethaddr6;	//MAC LSB
3288  db2a 725f0023      	clr	_uip_ethaddr6
3289                     ; 403     uip_ethaddr.addr[0] = uip_ethaddr1;
3291  db2e 35c2000a      	mov	_uip_ethaddr,#194
3292                     ; 404     uip_ethaddr.addr[1] = uip_ethaddr2;
3294  db32 354d000b      	mov	_uip_ethaddr+1,#77
3295                     ; 405     uip_ethaddr.addr[2] = uip_ethaddr3;
3297  db36 3569000c      	mov	_uip_ethaddr+2,#105
3298                     ; 406     uip_ethaddr.addr[3] = uip_ethaddr4;
3300  db3a 356b000d      	mov	_uip_ethaddr+3,#107
3301                     ; 407     uip_ethaddr.addr[4] = uip_ethaddr5;
3303  db3e 3565000e      	mov	_uip_ethaddr+4,#101
3304                     ; 408     uip_ethaddr.addr[5] = uip_ethaddr6;
3306  db42 725f000f      	clr	_uip_ethaddr+5
3307                     ; 410     stored_devicename[0] = 'N' ; // Device name first character
3309  db46 a64e          	ld	a,#78
3310  db48 ae4000        	ldw	x,#_stored_devicename
3311  db4b cdf3ee        	call	c_eewrc
3313                     ; 411     stored_devicename[1] = 'e' ; //
3315  db4e a665          	ld	a,#101
3316  db50 ae4001        	ldw	x,#_stored_devicename+1
3317  db53 cdf3ee        	call	c_eewrc
3319                     ; 412     stored_devicename[2] = 'w' ; //
3321  db56 a677          	ld	a,#119
3322  db58 ae4002        	ldw	x,#_stored_devicename+2
3323  db5b cdf3ee        	call	c_eewrc
3325                     ; 413     stored_devicename[3] = 'D' ; //
3327  db5e a644          	ld	a,#68
3328  db60 ae4003        	ldw	x,#_stored_devicename+3
3329  db63 cdf3ee        	call	c_eewrc
3331                     ; 414     stored_devicename[4] = 'e' ; //
3333  db66 a665          	ld	a,#101
3334  db68 ae4004        	ldw	x,#_stored_devicename+4
3335  db6b cdf3ee        	call	c_eewrc
3337                     ; 415     stored_devicename[5] = 'v' ; //
3339  db6e a676          	ld	a,#118
3340  db70 ae4005        	ldw	x,#_stored_devicename+5
3341  db73 cdf3ee        	call	c_eewrc
3343                     ; 416     stored_devicename[6] = 'i' ; //
3345  db76 a669          	ld	a,#105
3346  db78 ae4006        	ldw	x,#_stored_devicename+6
3347  db7b cdf3ee        	call	c_eewrc
3349                     ; 417     stored_devicename[7] = 'c' ; //
3351  db7e a663          	ld	a,#99
3352  db80 ae4007        	ldw	x,#_stored_devicename+7
3353  db83 cdf3ee        	call	c_eewrc
3355                     ; 418     stored_devicename[8] = 'e' ; //
3357  db86 a665          	ld	a,#101
3358  db88 ae4008        	ldw	x,#_stored_devicename+8
3359  db8b cdf3ee        	call	c_eewrc
3361                     ; 419     stored_devicename[9] = '0' ; //
3363  db8e a630          	ld	a,#48
3364  db90 ae4009        	ldw	x,#_stored_devicename+9
3365  db93 cdf3ee        	call	c_eewrc
3367                     ; 420     stored_devicename[10] = '0' ; //
3369  db96 a630          	ld	a,#48
3370  db98 ae400a        	ldw	x,#_stored_devicename+10
3371  db9b cdf3ee        	call	c_eewrc
3373                     ; 421     stored_devicename[11] = '0' ; //
3375  db9e a630          	ld	a,#48
3376  dba0 ae400b        	ldw	x,#_stored_devicename+11
3377  dba3 cdf3ee        	call	c_eewrc
3379                     ; 422     stored_devicename[12] = ' ' ; //
3381  dba6 a620          	ld	a,#32
3382  dba8 ae400c        	ldw	x,#_stored_devicename+12
3383  dbab cdf3ee        	call	c_eewrc
3385                     ; 423     stored_devicename[13] = ' ' ; //
3387  dbae a620          	ld	a,#32
3388  dbb0 ae400d        	ldw	x,#_stored_devicename+13
3389  dbb3 cdf3ee        	call	c_eewrc
3391                     ; 424     stored_devicename[14] = ' ' ; //
3393  dbb6 a620          	ld	a,#32
3394  dbb8 ae400e        	ldw	x,#_stored_devicename+14
3395  dbbb cdf3ee        	call	c_eewrc
3397                     ; 425     stored_devicename[15] = ' ' ; //
3399  dbbe a620          	ld	a,#32
3400  dbc0 ae400f        	ldw	x,#_stored_devicename+15
3401  dbc3 cdf3ee        	call	c_eewrc
3403                     ; 426     stored_devicename[16] = ' ' ; //
3405  dbc6 a620          	ld	a,#32
3406  dbc8 ae4010        	ldw	x,#_stored_devicename+16
3407  dbcb cdf3ee        	call	c_eewrc
3409                     ; 427     stored_devicename[17] = ' ' ; //
3411  dbce a620          	ld	a,#32
3412  dbd0 ae4011        	ldw	x,#_stored_devicename+17
3413  dbd3 cdf3ee        	call	c_eewrc
3415                     ; 428     stored_devicename[18] = ' ' ; //
3417  dbd6 a620          	ld	a,#32
3418  dbd8 ae4012        	ldw	x,#_stored_devicename+18
3419  dbdb cdf3ee        	call	c_eewrc
3421                     ; 429     stored_devicename[19] = ' ' ; // Device name last character
3423  dbde a620          	ld	a,#32
3424  dbe0 ae4013        	ldw	x,#_stored_devicename+19
3425  dbe3 cdf3ee        	call	c_eewrc
3427                     ; 432     invert_output = 0;                  // Turn off output invert bit
3429  dbe6 725f005e      	clr	_invert_output
3430                     ; 433     stored_invert_output = 0;           // Store in EEPROM
3432  dbea 4f            	clr	a
3433  dbeb ae4014        	ldw	x,#_stored_invert_output
3434  dbee cdf3ee        	call	c_eewrc
3436                     ; 434     Relays_16to9 = (uint8_t)0x00;       // Turn off Relays 16 to 9
3438  dbf1 725f0060      	clr	_Relays_16to9
3439                     ; 435     Relays_8to1  = (uint8_t)0x00;       // Turn off Relays 8 to 1
3441  dbf5 725f005f      	clr	_Relays_8to1
3442                     ; 436     stored_Relays_16to9 = Relays_16to9; // Store in EEPROM
3444  dbf9 4f            	clr	a
3445  dbfa ae4016        	ldw	x,#_stored_Relays_16to9
3446  dbfd cdf3ee        	call	c_eewrc
3448                     ; 437     stored_Relays_8to1 = Relays_8to1;   // Store in EEPROM
3450  dc00 4f            	clr	a
3451  dc01 ae4015        	ldw	x,#_stored_Relays_8to1
3452  dc04 cdf3ee        	call	c_eewrc
3454                     ; 438     update_relay_control_registers();   // Set Relay Control outputs
3456  dc07 cddeea        	call	_update_relay_control_registers
3458                     ; 441     magic4 = 0x55;		// MSB
3460  dc0a a655          	ld	a,#85
3461  dc0c ae402e        	ldw	x,#_magic4
3462  dc0f cdf3ee        	call	c_eewrc
3464                     ; 442     magic3 = 0xee;		//
3466  dc12 a6ee          	ld	a,#238
3467  dc14 ae402d        	ldw	x,#_magic3
3468  dc17 cdf3ee        	call	c_eewrc
3470                     ; 443     magic2 = 0x0f;		//
3472  dc1a a60f          	ld	a,#15
3473  dc1c ae402c        	ldw	x,#_magic2
3474  dc1f cdf3ee        	call	c_eewrc
3476                     ; 444     magic1 = 0xf0;		// LSB
3478  dc22 a6f0          	ld	a,#240
3479  dc24 ae402b        	ldw	x,#_magic1
3480  dc27 cdf3ee        	call	c_eewrc
3482  dc2a               L3002:
3483                     ; 449   Pending_hostaddr4 = stored_hostaddr4;
3485  dc2a 55402a0037    	mov	_Pending_hostaddr4,_stored_hostaddr4
3486                     ; 450   Pending_hostaddr3 = stored_hostaddr3;
3488  dc2f 5540290036    	mov	_Pending_hostaddr3,_stored_hostaddr3
3489                     ; 451   Pending_hostaddr2 = stored_hostaddr2;
3491  dc34 5540280035    	mov	_Pending_hostaddr2,_stored_hostaddr2
3492                     ; 452   Pending_hostaddr1 = stored_hostaddr1;
3494  dc39 5540270034    	mov	_Pending_hostaddr1,_stored_hostaddr1
3495                     ; 454   Pending_draddr4 = stored_draddr4;
3497  dc3e 5540260033    	mov	_Pending_draddr4,_stored_draddr4
3498                     ; 455   Pending_draddr3 = stored_draddr3;
3500  dc43 5540250032    	mov	_Pending_draddr3,_stored_draddr3
3501                     ; 456   Pending_draddr2 = stored_draddr2;
3503  dc48 5540240031    	mov	_Pending_draddr2,_stored_draddr2
3504                     ; 457   Pending_draddr1 = stored_draddr1;
3506  dc4d 5540230030    	mov	_Pending_draddr1,_stored_draddr1
3507                     ; 459   Pending_netmask4 = stored_netmask4;
3509  dc52 554022002f    	mov	_Pending_netmask4,_stored_netmask4
3510                     ; 460   Pending_netmask3 = stored_netmask3;
3512  dc57 554021002e    	mov	_Pending_netmask3,_stored_netmask3
3513                     ; 461   Pending_netmask2 = stored_netmask2;
3515  dc5c 554020002d    	mov	_Pending_netmask2,_stored_netmask2
3516                     ; 462   Pending_netmask1 = stored_netmask1;
3518  dc61 55401f002c    	mov	_Pending_netmask1,_stored_netmask1
3519                     ; 464   Pending_port = stored_port;
3521  dc66 ce401d        	ldw	x,_stored_port
3522  dc69 cf002a        	ldw	_Pending_port,x
3523                     ; 466   Pending_uip_ethaddr6 = stored_uip_ethaddr6;
3525  dc6c 5540170029    	mov	_Pending_uip_ethaddr6,_stored_uip_ethaddr6
3526                     ; 467   Pending_uip_ethaddr5 = stored_uip_ethaddr5;
3528  dc71 5540180028    	mov	_Pending_uip_ethaddr5,_stored_uip_ethaddr5
3529                     ; 468   Pending_uip_ethaddr4 = stored_uip_ethaddr4;
3531  dc76 5540190027    	mov	_Pending_uip_ethaddr4,_stored_uip_ethaddr4
3532                     ; 469   Pending_uip_ethaddr3 = stored_uip_ethaddr3;
3534  dc7b 55401a0026    	mov	_Pending_uip_ethaddr3,_stored_uip_ethaddr3
3535                     ; 470   Pending_uip_ethaddr2 = stored_uip_ethaddr2;
3537  dc80 55401b0025    	mov	_Pending_uip_ethaddr2,_stored_uip_ethaddr2
3538                     ; 471   Pending_uip_ethaddr1 = stored_uip_ethaddr1;
3540  dc85 55401c0024    	mov	_Pending_uip_ethaddr1,_stored_uip_ethaddr1
3541                     ; 474   ex_stored_hostaddr4 = stored_hostaddr4;
3543  dc8a 55402a0059    	mov	_ex_stored_hostaddr4,_stored_hostaddr4
3544                     ; 475   ex_stored_hostaddr3 = stored_hostaddr3;
3546  dc8f 5540290058    	mov	_ex_stored_hostaddr3,_stored_hostaddr3
3547                     ; 476   ex_stored_hostaddr2 = stored_hostaddr2;
3549  dc94 5540280057    	mov	_ex_stored_hostaddr2,_stored_hostaddr2
3550                     ; 477   ex_stored_hostaddr1 = stored_hostaddr1;
3552  dc99 5540270056    	mov	_ex_stored_hostaddr1,_stored_hostaddr1
3553                     ; 479   ex_stored_draddr4 = stored_draddr4;
3555  dc9e 5540260055    	mov	_ex_stored_draddr4,_stored_draddr4
3556                     ; 480   ex_stored_draddr3 = stored_draddr3;
3558  dca3 5540250054    	mov	_ex_stored_draddr3,_stored_draddr3
3559                     ; 481   ex_stored_draddr2 = stored_draddr2;
3561  dca8 5540240053    	mov	_ex_stored_draddr2,_stored_draddr2
3562                     ; 482   ex_stored_draddr1 = stored_draddr1;
3564  dcad 5540230052    	mov	_ex_stored_draddr1,_stored_draddr1
3565                     ; 484   ex_stored_netmask4 = stored_netmask4;
3567  dcb2 5540220051    	mov	_ex_stored_netmask4,_stored_netmask4
3568                     ; 485   ex_stored_netmask3 = stored_netmask3;
3570  dcb7 5540210050    	mov	_ex_stored_netmask3,_stored_netmask3
3571                     ; 486   ex_stored_netmask2 = stored_netmask2;
3573  dcbc 554020004f    	mov	_ex_stored_netmask2,_stored_netmask2
3574                     ; 487   ex_stored_netmask1 = stored_netmask1;
3576  dcc1 55401f004e    	mov	_ex_stored_netmask1,_stored_netmask1
3577                     ; 489   ex_stored_port = stored_port;
3579  dcc6 cf004c        	ldw	_ex_stored_port,x
3580                     ; 491   for(i=0; i<20; i++) { ex_stored_devicename[i] = stored_devicename[i]; }
3582  dcc9 4f            	clr	a
3583  dcca 6b01          	ld	(OFST+0,sp),a
3585  dccc               L5302:
3588  dccc 5f            	clrw	x
3589  dccd 97            	ld	xl,a
3590  dcce d64000        	ld	a,(_stored_devicename,x)
3591  dcd1 d70038        	ld	(_ex_stored_devicename,x),a
3594  dcd4 0c01          	inc	(OFST+0,sp)
3598  dcd6 7b01          	ld	a,(OFST+0,sp)
3599  dcd8 a114          	cp	a,#20
3600  dcda 25f0          	jrult	L5302
3601                     ; 493 }
3604  dcdc 84            	pop	a
3605  dcdd 81            	ret	
3696                     ; 496 void check_runtime_changes(void)
3696                     ; 497 {
3697                     	switch	.text
3698  dcde               _check_runtime_changes:
3700  dcde 88            	push	a
3701       00000001      OFST:	set	1
3704                     ; 505   if ((invert_output != stored_invert_output)
3704                     ; 506    || (stored_Relays_16to9 != Relays_16to9)
3704                     ; 507    || (stored_Relays_8to1 != Relays_8to1)) {
3706  dcdf c6005e        	ld	a,_invert_output
3707  dce2 c14014        	cp	a,_stored_invert_output
3708  dce5 2610          	jrne	L1602
3710  dce7 c64016        	ld	a,_stored_Relays_16to9
3711  dcea c10060        	cp	a,_Relays_16to9
3712  dced 2608          	jrne	L1602
3714  dcef c64015        	ld	a,_stored_Relays_8to1
3715  dcf2 c1005f        	cp	a,_Relays_8to1
3716  dcf5 271e          	jreq	L7502
3717  dcf7               L1602:
3718                     ; 509     stored_invert_output = invert_output;
3720  dcf7 c6005e        	ld	a,_invert_output
3721  dcfa ae4014        	ldw	x,#_stored_invert_output
3722  dcfd cdf3ee        	call	c_eewrc
3724                     ; 511     stored_Relays_16to9 = Relays_16to9;
3726  dd00 c60060        	ld	a,_Relays_16to9
3727  dd03 ae4016        	ldw	x,#_stored_Relays_16to9
3728  dd06 cdf3ee        	call	c_eewrc
3730                     ; 512     stored_Relays_8to1 = Relays_8to1;
3732  dd09 c6005f        	ld	a,_Relays_8to1
3733  dd0c ae4015        	ldw	x,#_stored_Relays_8to1
3734  dd0f cdf3ee        	call	c_eewrc
3736                     ; 514     update_relay_control_registers();
3738  dd12 cddeea        	call	_update_relay_control_registers
3740  dd15               L7502:
3741                     ; 518   if (stored_hostaddr4 != Pending_hostaddr4 ||
3741                     ; 519       stored_hostaddr3 != Pending_hostaddr3 ||
3741                     ; 520       stored_hostaddr2 != Pending_hostaddr2 ||
3741                     ; 521       stored_hostaddr1 != Pending_hostaddr1) {
3743  dd15 c6402a        	ld	a,_stored_hostaddr4
3744  dd18 c10037        	cp	a,_Pending_hostaddr4
3745  dd1b 2618          	jrne	L7602
3747  dd1d c64029        	ld	a,_stored_hostaddr3
3748  dd20 c10036        	cp	a,_Pending_hostaddr3
3749  dd23 2610          	jrne	L7602
3751  dd25 c64028        	ld	a,_stored_hostaddr2
3752  dd28 c10035        	cp	a,_Pending_hostaddr2
3753  dd2b 2608          	jrne	L7602
3755  dd2d c64027        	ld	a,_stored_hostaddr1
3756  dd30 c10034        	cp	a,_Pending_hostaddr1
3757  dd33 2728          	jreq	L5602
3758  dd35               L7602:
3759                     ; 523     stored_hostaddr4 = Pending_hostaddr4;
3761  dd35 c60037        	ld	a,_Pending_hostaddr4
3762  dd38 ae402a        	ldw	x,#_stored_hostaddr4
3763  dd3b cdf3ee        	call	c_eewrc
3765                     ; 524     stored_hostaddr3 = Pending_hostaddr3;
3767  dd3e c60036        	ld	a,_Pending_hostaddr3
3768  dd41 ae4029        	ldw	x,#_stored_hostaddr3
3769  dd44 cdf3ee        	call	c_eewrc
3771                     ; 525     stored_hostaddr2 = Pending_hostaddr2;
3773  dd47 c60035        	ld	a,_Pending_hostaddr2
3774  dd4a ae4028        	ldw	x,#_stored_hostaddr2
3775  dd4d cdf3ee        	call	c_eewrc
3777                     ; 526     stored_hostaddr1 = Pending_hostaddr1;
3779  dd50 c60034        	ld	a,_Pending_hostaddr1
3780  dd53 ae4027        	ldw	x,#_stored_hostaddr1
3781  dd56 cdf3ee        	call	c_eewrc
3783                     ; 528     submit_changes = 1;
3785  dd59 3501001d      	mov	_submit_changes,#1
3786  dd5d               L5602:
3787                     ; 532   if (stored_draddr4 != Pending_draddr4 ||
3787                     ; 533       stored_draddr3 != Pending_draddr3 ||
3787                     ; 534       stored_draddr2 != Pending_draddr2 ||
3787                     ; 535       stored_draddr1 != Pending_draddr1) {
3789  dd5d c64026        	ld	a,_stored_draddr4
3790  dd60 c10033        	cp	a,_Pending_draddr4
3791  dd63 2618          	jrne	L7702
3793  dd65 c64025        	ld	a,_stored_draddr3
3794  dd68 c10032        	cp	a,_Pending_draddr3
3795  dd6b 2610          	jrne	L7702
3797  dd6d c64024        	ld	a,_stored_draddr2
3798  dd70 c10031        	cp	a,_Pending_draddr2
3799  dd73 2608          	jrne	L7702
3801  dd75 c64023        	ld	a,_stored_draddr1
3802  dd78 c10030        	cp	a,_Pending_draddr1
3803  dd7b 2728          	jreq	L5702
3804  dd7d               L7702:
3805                     ; 537     stored_draddr4 = Pending_draddr4;
3807  dd7d c60033        	ld	a,_Pending_draddr4
3808  dd80 ae4026        	ldw	x,#_stored_draddr4
3809  dd83 cdf3ee        	call	c_eewrc
3811                     ; 538     stored_draddr3 = Pending_draddr3;
3813  dd86 c60032        	ld	a,_Pending_draddr3
3814  dd89 ae4025        	ldw	x,#_stored_draddr3
3815  dd8c cdf3ee        	call	c_eewrc
3817                     ; 539     stored_draddr2 = Pending_draddr2;
3819  dd8f c60031        	ld	a,_Pending_draddr2
3820  dd92 ae4024        	ldw	x,#_stored_draddr2
3821  dd95 cdf3ee        	call	c_eewrc
3823                     ; 540     stored_draddr1 = Pending_draddr1;
3825  dd98 c60030        	ld	a,_Pending_draddr1
3826  dd9b ae4023        	ldw	x,#_stored_draddr1
3827  dd9e cdf3ee        	call	c_eewrc
3829                     ; 542     submit_changes = 1;
3831  dda1 3501001d      	mov	_submit_changes,#1
3832  dda5               L5702:
3833                     ; 546   if (stored_netmask4 != Pending_netmask4 ||
3833                     ; 547       stored_netmask3 != Pending_netmask3 ||
3833                     ; 548       stored_netmask2 != Pending_netmask2 ||
3833                     ; 549       stored_netmask1 != Pending_netmask1) {
3835  dda5 c64022        	ld	a,_stored_netmask4
3836  dda8 c1002f        	cp	a,_Pending_netmask4
3837  ddab 2618          	jrne	L7012
3839  ddad c64021        	ld	a,_stored_netmask3
3840  ddb0 c1002e        	cp	a,_Pending_netmask3
3841  ddb3 2610          	jrne	L7012
3843  ddb5 c64020        	ld	a,_stored_netmask2
3844  ddb8 c1002d        	cp	a,_Pending_netmask2
3845  ddbb 2608          	jrne	L7012
3847  ddbd c6401f        	ld	a,_stored_netmask1
3848  ddc0 c1002c        	cp	a,_Pending_netmask1
3849  ddc3 2728          	jreq	L5012
3850  ddc5               L7012:
3851                     ; 551     stored_netmask4 = Pending_netmask4;
3853  ddc5 c6002f        	ld	a,_Pending_netmask4
3854  ddc8 ae4022        	ldw	x,#_stored_netmask4
3855  ddcb cdf3ee        	call	c_eewrc
3857                     ; 552     stored_netmask3 = Pending_netmask3;
3859  ddce c6002e        	ld	a,_Pending_netmask3
3860  ddd1 ae4021        	ldw	x,#_stored_netmask3
3861  ddd4 cdf3ee        	call	c_eewrc
3863                     ; 553     stored_netmask2 = Pending_netmask2;
3865  ddd7 c6002d        	ld	a,_Pending_netmask2
3866  ddda ae4020        	ldw	x,#_stored_netmask2
3867  dddd cdf3ee        	call	c_eewrc
3869                     ; 554     stored_netmask1 = Pending_netmask1;
3871  dde0 c6002c        	ld	a,_Pending_netmask1
3872  dde3 ae401f        	ldw	x,#_stored_netmask1
3873  dde6 cdf3ee        	call	c_eewrc
3875                     ; 556     submit_changes = 1;
3877  dde9 3501001d      	mov	_submit_changes,#1
3878  dded               L5012:
3879                     ; 560   if (stored_port != Pending_port) {
3881  dded ce401d        	ldw	x,_stored_port
3882  ddf0 c3002a        	cpw	x,_Pending_port
3883  ddf3 270f          	jreq	L5112
3884                     ; 562     stored_port = Pending_port;
3886  ddf5 ce002a        	ldw	x,_Pending_port
3887  ddf8 89            	pushw	x
3888  ddf9 ae401d        	ldw	x,#_stored_port
3889  ddfc cdf3d8        	call	c_eewrw
3891  ddff 3501001d      	mov	_submit_changes,#1
3892  de03 85            	popw	x
3893                     ; 564     submit_changes = 1;
3895  de04               L5112:
3896                     ; 568   devicename_changed = 0;
3898  de04 725f001c      	clr	_devicename_changed
3899                     ; 569   for(i=0; i<20; i++) {
3901  de08 4f            	clr	a
3902  de09 6b01          	ld	(OFST+0,sp),a
3904  de0b               L7112:
3905                     ; 570     if (stored_devicename[i] != ex_stored_devicename[i]) devicename_changed = 1;
3907  de0b 5f            	clrw	x
3908  de0c 97            	ld	xl,a
3909  de0d 905f          	clrw	y
3910  de0f 9097          	ld	yl,a
3911  de11 90d64000      	ld	a,(_stored_devicename,y)
3912  de15 d10038        	cp	a,(_ex_stored_devicename,x)
3913  de18 2704          	jreq	L5212
3916  de1a 3501001c      	mov	_devicename_changed,#1
3917  de1e               L5212:
3918                     ; 569   for(i=0; i<20; i++) {
3920  de1e 0c01          	inc	(OFST+0,sp)
3924  de20 7b01          	ld	a,(OFST+0,sp)
3925  de22 a114          	cp	a,#20
3926  de24 25e5          	jrult	L7112
3927                     ; 572   if (devicename_changed == 1) {
3929  de26 c6001c        	ld	a,_devicename_changed
3930  de29 4a            	dec	a
3931  de2a 2612          	jrne	L7212
3932                     ; 574     for(i=0; i<20; i++) { stored_devicename[i] = ex_stored_devicename[i]; }
3934  de2c 6b01          	ld	(OFST+0,sp),a
3936  de2e               L1312:
3939  de2e 5f            	clrw	x
3940  de2f 97            	ld	xl,a
3941  de30 d60038        	ld	a,(_ex_stored_devicename,x)
3942  de33 d74000        	ld	(_stored_devicename,x),a
3945  de36 0c01          	inc	(OFST+0,sp)
3949  de38 7b01          	ld	a,(OFST+0,sp)
3950  de3a a114          	cp	a,#20
3951  de3c 25f0          	jrult	L1312
3952  de3e               L7212:
3953                     ; 578   if (stored_uip_ethaddr6 != Pending_uip_ethaddr6 ||
3953                     ; 579       stored_uip_ethaddr5 != Pending_uip_ethaddr5 ||
3953                     ; 580       stored_uip_ethaddr4 != Pending_uip_ethaddr4 ||
3953                     ; 581       stored_uip_ethaddr3 != Pending_uip_ethaddr3 ||
3953                     ; 582       stored_uip_ethaddr2 != Pending_uip_ethaddr2 ||
3953                     ; 583       stored_uip_ethaddr1 != Pending_uip_ethaddr1) {
3955  de3e c64017        	ld	a,_stored_uip_ethaddr6
3956  de41 c10029        	cp	a,_Pending_uip_ethaddr6
3957  de44 2628          	jrne	L1412
3959  de46 c64018        	ld	a,_stored_uip_ethaddr5
3960  de49 c10028        	cp	a,_Pending_uip_ethaddr5
3961  de4c 2620          	jrne	L1412
3963  de4e c64019        	ld	a,_stored_uip_ethaddr4
3964  de51 c10027        	cp	a,_Pending_uip_ethaddr4
3965  de54 2618          	jrne	L1412
3967  de56 c6401a        	ld	a,_stored_uip_ethaddr3
3968  de59 c10026        	cp	a,_Pending_uip_ethaddr3
3969  de5c 2610          	jrne	L1412
3971  de5e c6401b        	ld	a,_stored_uip_ethaddr2
3972  de61 c10025        	cp	a,_Pending_uip_ethaddr2
3973  de64 2608          	jrne	L1412
3975  de66 c6401c        	ld	a,_stored_uip_ethaddr1
3976  de69 c10024        	cp	a,_Pending_uip_ethaddr1
3977  de6c 273a          	jreq	L7312
3978  de6e               L1412:
3979                     ; 585     stored_uip_ethaddr6 = Pending_uip_ethaddr6;
3981  de6e c60029        	ld	a,_Pending_uip_ethaddr6
3982  de71 ae4017        	ldw	x,#_stored_uip_ethaddr6
3983  de74 cdf3ee        	call	c_eewrc
3985                     ; 586     stored_uip_ethaddr5 = Pending_uip_ethaddr5;
3987  de77 c60028        	ld	a,_Pending_uip_ethaddr5
3988  de7a ae4018        	ldw	x,#_stored_uip_ethaddr5
3989  de7d cdf3ee        	call	c_eewrc
3991                     ; 587     stored_uip_ethaddr4 = Pending_uip_ethaddr4;
3993  de80 c60027        	ld	a,_Pending_uip_ethaddr4
3994  de83 ae4019        	ldw	x,#_stored_uip_ethaddr4
3995  de86 cdf3ee        	call	c_eewrc
3997                     ; 588     stored_uip_ethaddr3 = Pending_uip_ethaddr3;
3999  de89 c60026        	ld	a,_Pending_uip_ethaddr3
4000  de8c ae401a        	ldw	x,#_stored_uip_ethaddr3
4001  de8f cdf3ee        	call	c_eewrc
4003                     ; 589     stored_uip_ethaddr2 = Pending_uip_ethaddr2;
4005  de92 c60025        	ld	a,_Pending_uip_ethaddr2
4006  de95 ae401b        	ldw	x,#_stored_uip_ethaddr2
4007  de98 cdf3ee        	call	c_eewrc
4009                     ; 590     stored_uip_ethaddr1 = Pending_uip_ethaddr1;
4011  de9b c60024        	ld	a,_Pending_uip_ethaddr1
4012  de9e ae401c        	ldw	x,#_stored_uip_ethaddr1
4013  dea1 cdf3ee        	call	c_eewrc
4015                     ; 592     submit_changes = 1;
4017  dea4 3501001d      	mov	_submit_changes,#1
4018  dea8               L7312:
4019                     ; 595   if (submit_changes == 1) {
4021  dea8 c6001d        	ld	a,_submit_changes
4022  deab a101          	cp	a,#1
4023  dead 2613          	jrne	L3512
4024                     ; 602     check_eeprom_settings(); // Verify EEPROM up to date
4026  deaf cdd93f        	call	_check_eeprom_settings
4028                     ; 603     Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
4030  deb2 cdbf6e        	call	_Enc28j60Init
4032                     ; 604     uip_arp_init();          // Initialize the ARP module
4034  deb5 cdefc7        	call	_uip_arp_init
4036                     ; 605     uip_init();              // Initialize uIP
4038  deb8 cde586        	call	_uip_init
4040                     ; 606     HttpDInit();             // Initialize httpd; sets up listening ports
4042  debb cdccf2        	call	_HttpDInit
4044                     ; 607     submit_changes = 0;
4046  debe 4f            	clr	a
4047  debf c7001d        	ld	_submit_changes,a
4048  dec2               L3512:
4049                     ; 610   if (submit_changes == 2) {
4051  dec2 a102          	cp	a,#2
4052  dec4 2622          	jrne	L5512
4053                     ; 613     LEDcontrol(0);  // turn LED off
4055  dec6 4f            	clr	a
4056  dec7 cdc1df        	call	_LEDcontrol
4058                     ; 615     WWDG_WR = (uint8_t)0x7f;     // Window register reset
4060  deca 357f50d2      	mov	_WWDG_WR,#127
4061                     ; 616     WWDG_CR = (uint8_t)0xff;     // Set watchdog to timeout in 49ms
4063  dece 35ff50d1      	mov	_WWDG_CR,#255
4064                     ; 617     WWDG_WR = (uint8_t)0x60;     // Window register value - doesn't matter
4066  ded2 356050d2      	mov	_WWDG_WR,#96
4067                     ; 620     wait_timer((uint16_t)50000); // Wait for watchdog to generate reset
4069  ded6 aec350        	ldw	x,#50000
4070  ded9 cde43f        	call	_wait_timer
4072                     ; 621     wait_timer((uint16_t)50000);
4074  dedc aec350        	ldw	x,#50000
4075  dedf cde43f        	call	_wait_timer
4077                     ; 622     wait_timer((uint16_t)50000);
4079  dee2 aec350        	ldw	x,#50000
4080  dee5 cde43f        	call	_wait_timer
4082  dee8               L5512:
4083                     ; 624 }
4086  dee8 84            	pop	a
4087  dee9 81            	ret	
4119                     ; 627 void update_relay_control_registers(void)
4119                     ; 628 {
4120                     	switch	.text
4121  deea               _update_relay_control_registers:
4125                     ; 634   if (invert_output == 0) {
4127  deea c6005e        	ld	a,_invert_output
4128  deed 2703ccdfe0    	jrne	L7612
4129                     ; 635     if (Relays_16to9 & 0x80) PC_ODR |= (uint8_t)0x40; // Relay 16 on, PC bit 6 = 1
4131  def2 720f006006    	btjf	_Relays_16to9,#7,L1712
4134  def7 721c500a      	bset	_PC_ODR,#6
4136  defb 2004          	jra	L3712
4137  defd               L1712:
4138                     ; 636     else PC_ODR &= (uint8_t)(~0x40);
4140  defd 721d500a      	bres	_PC_ODR,#6
4141  df01               L3712:
4142                     ; 637     if (Relays_16to9 & 0x40) PG_ODR |= (uint8_t)0x01; // Relay 15 on, PG bit 0 = 1
4144  df01 720d006006    	btjf	_Relays_16to9,#6,L5712
4147  df06 7210501e      	bset	_PG_ODR,#0
4149  df0a 2004          	jra	L7712
4150  df0c               L5712:
4151                     ; 638     else PG_ODR &= (uint8_t)(~0x01);
4153  df0c 7211501e      	bres	_PG_ODR,#0
4154  df10               L7712:
4155                     ; 639     if (Relays_16to9 & 0x20) PE_ODR |= (uint8_t)0x08; // Relay 14 on, PE bit 3 = 1
4157  df10 720b006006    	btjf	_Relays_16to9,#5,L1022
4160  df15 72165014      	bset	_PE_ODR,#3
4162  df19 2004          	jra	L3022
4163  df1b               L1022:
4164                     ; 640     else PE_ODR &= (uint8_t)(~0x08);
4166  df1b 72175014      	bres	_PE_ODR,#3
4167  df1f               L3022:
4168                     ; 641     if (Relays_16to9 & 0x10) PD_ODR |= (uint8_t)0x01; // Relay 13 on, PD bit 0 = 1
4170  df1f 7209006006    	btjf	_Relays_16to9,#4,L5022
4173  df24 7210500f      	bset	_PD_ODR,#0
4175  df28 2004          	jra	L7022
4176  df2a               L5022:
4177                     ; 642     else PD_ODR &= (uint8_t)(~0x01);
4179  df2a 7211500f      	bres	_PD_ODR,#0
4180  df2e               L7022:
4181                     ; 643     if (Relays_16to9 & 0x08) PD_ODR |= (uint8_t)0x08; // Relay 12 on, PD bit 3 = 1
4183  df2e 7207006006    	btjf	_Relays_16to9,#3,L1122
4186  df33 7216500f      	bset	_PD_ODR,#3
4188  df37 2004          	jra	L3122
4189  df39               L1122:
4190                     ; 644     else PD_ODR &= (uint8_t)(~0x08);
4192  df39 7217500f      	bres	_PD_ODR,#3
4193  df3d               L3122:
4194                     ; 645     if (Relays_16to9 & 0x04) PD_ODR |= (uint8_t)0x20; // Relay 11 on, PD bit 5 = 1
4196  df3d 7205006006    	btjf	_Relays_16to9,#2,L5122
4199  df42 721a500f      	bset	_PD_ODR,#5
4201  df46 2004          	jra	L7122
4202  df48               L5122:
4203                     ; 646     else PD_ODR &= (uint8_t)(~0x20);
4205  df48 721b500f      	bres	_PD_ODR,#5
4206  df4c               L7122:
4207                     ; 647     if (Relays_16to9 & 0x02) PD_ODR |= (uint8_t)0x80; // Relay 10 on, PD bit 7 = 1
4209  df4c 7203006006    	btjf	_Relays_16to9,#1,L1222
4212  df51 721e500f      	bset	_PD_ODR,#7
4214  df55 2004          	jra	L3222
4215  df57               L1222:
4216                     ; 648     else PD_ODR &= (uint8_t)(~0x80);
4218  df57 721f500f      	bres	_PD_ODR,#7
4219  df5b               L3222:
4220                     ; 649     if (Relays_16to9 & 0x01) PA_ODR |= (uint8_t)0x10; // Relay  9 on, PA bit 4 = 1
4222  df5b 7201006006    	btjf	_Relays_16to9,#0,L5222
4225  df60 72185000      	bset	_PA_ODR,#4
4227  df64 2004          	jra	L7222
4228  df66               L5222:
4229                     ; 650     else PA_ODR &= (uint8_t)(~0x10);
4231  df66 72195000      	bres	_PA_ODR,#4
4232  df6a               L7222:
4233                     ; 654     if (Relays_8to1 & 0x80) PC_ODR |= (uint8_t)0x80; // Relay  8 on, PC bit 7 = 1
4235  df6a 720f005f06    	btjf	_Relays_8to1,#7,L1322
4238  df6f 721e500a      	bset	_PC_ODR,#7
4240  df73 2004          	jra	L3322
4241  df75               L1322:
4242                     ; 655     else PC_ODR &= (uint8_t)(~0x80);
4244  df75 721f500a      	bres	_PC_ODR,#7
4245  df79               L3322:
4246                     ; 656     if (Relays_8to1 & 0x40) PG_ODR |= (uint8_t)0x02; // Relay  7 on, PG bit 1 = 1
4248  df79 720d005f06    	btjf	_Relays_8to1,#6,L5322
4251  df7e 7212501e      	bset	_PG_ODR,#1
4253  df82 2004          	jra	L7322
4254  df84               L5322:
4255                     ; 657     else PG_ODR &= (uint8_t)(~0x02);
4257  df84 7213501e      	bres	_PG_ODR,#1
4258  df88               L7322:
4259                     ; 658     if (Relays_8to1 & 0x20) PE_ODR |= (uint8_t)0x01; // Relay  6 on, PE bit 0 = 1
4261  df88 720b005f06    	btjf	_Relays_8to1,#5,L1422
4264  df8d 72105014      	bset	_PE_ODR,#0
4266  df91 2004          	jra	L3422
4267  df93               L1422:
4268                     ; 659     else PE_ODR &= (uint8_t)(~0x01);
4270  df93 72115014      	bres	_PE_ODR,#0
4271  df97               L3422:
4272                     ; 660     if (Relays_8to1 & 0x10) PD_ODR |= (uint8_t)0x04; // Relay  5 on, PD bit 2 = 1
4274  df97 7209005f06    	btjf	_Relays_8to1,#4,L5422
4277  df9c 7214500f      	bset	_PD_ODR,#2
4279  dfa0 2004          	jra	L7422
4280  dfa2               L5422:
4281                     ; 661     else PD_ODR &= (uint8_t)(~0x04);
4283  dfa2 7215500f      	bres	_PD_ODR,#2
4284  dfa6               L7422:
4285                     ; 662     if (Relays_8to1 & 0x08) PD_ODR |= (uint8_t)0x10; // Relay  4 on, PD bit 4 = 1
4287  dfa6 7207005f06    	btjf	_Relays_8to1,#3,L1522
4290  dfab 7218500f      	bset	_PD_ODR,#4
4292  dfaf 2004          	jra	L3522
4293  dfb1               L1522:
4294                     ; 663     else PD_ODR &= (uint8_t)(~0x10);
4296  dfb1 7219500f      	bres	_PD_ODR,#4
4297  dfb5               L3522:
4298                     ; 664     if (Relays_8to1 & 0x04) PD_ODR |= (uint8_t)0x40; // Relay  3 on, PD bit 6 = 1
4300  dfb5 7205005f06    	btjf	_Relays_8to1,#2,L5522
4303  dfba 721c500f      	bset	_PD_ODR,#6
4305  dfbe 2004          	jra	L7522
4306  dfc0               L5522:
4307                     ; 665     else PD_ODR &= (uint8_t)(~0x40);
4309  dfc0 721d500f      	bres	_PD_ODR,#6
4310  dfc4               L7522:
4311                     ; 666     if (Relays_8to1 & 0x02) PA_ODR |= (uint8_t)0x20; // Relay  2 on, PA bit 5 = 1
4313  dfc4 7203005f06    	btjf	_Relays_8to1,#1,L1622
4316  dfc9 721a5000      	bset	_PA_ODR,#5
4318  dfcd 2004          	jra	L3622
4319  dfcf               L1622:
4320                     ; 667     else PA_ODR &= (uint8_t)(~0x20);
4322  dfcf 721b5000      	bres	_PA_ODR,#5
4323  dfd3               L3622:
4324                     ; 668     if (Relays_8to1 & 0x01) PA_ODR |= (uint8_t)0x08; // Relay  1 on, PA bit 3 = 1
4326  dfd3 7201005f03    	btjf	_Relays_8to1,#0,L5622
4329  dfd8 cce0cf        	jp	L1732
4330  dfdb               L5622:
4331                     ; 669     else PA_ODR &= (uint8_t)(~0x08);
4334  dfdb 72175000      	bres	_PA_ODR,#3
4336  dfdf 81            	ret	
4337  dfe0               L7612:
4338                     ; 672   else if (invert_output == 1) {
4340  dfe0 4a            	dec	a
4341  dfe1 2703cce0d3    	jrne	L1722
4342                     ; 673     if (Relays_16to9 & 0x80) PC_ODR &= (uint8_t)(~0x40); // Relay 16 off, PC bit 6 = 0
4344  dfe6 720f006006    	btjf	_Relays_16to9,#7,L5722
4347  dfeb 721d500a      	bres	_PC_ODR,#6
4349  dfef 2004          	jra	L7722
4350  dff1               L5722:
4351                     ; 674     else PC_ODR |= (uint8_t)0x40;
4353  dff1 721c500a      	bset	_PC_ODR,#6
4354  dff5               L7722:
4355                     ; 675     if (Relays_16to9 & 0x40) PG_ODR &= (uint8_t)(~0x01); // Relay 15 off, PG bit 0 = 0
4357  dff5 720d006006    	btjf	_Relays_16to9,#6,L1032
4360  dffa 7211501e      	bres	_PG_ODR,#0
4362  dffe 2004          	jra	L3032
4363  e000               L1032:
4364                     ; 676     else PG_ODR |= (uint8_t)0x01;
4366  e000 7210501e      	bset	_PG_ODR,#0
4367  e004               L3032:
4368                     ; 677     if (Relays_16to9 & 0x20) PE_ODR &= (uint8_t)(~0x08); // Relay 14 off, PE bit 3 = 0
4370  e004 720b006006    	btjf	_Relays_16to9,#5,L5032
4373  e009 72175014      	bres	_PE_ODR,#3
4375  e00d 2004          	jra	L7032
4376  e00f               L5032:
4377                     ; 678     else PE_ODR |= (uint8_t)0x08;
4379  e00f 72165014      	bset	_PE_ODR,#3
4380  e013               L7032:
4381                     ; 679     if (Relays_16to9 & 0x10) PD_ODR &= (uint8_t)(~0x01); // Relay 13 off, PD bit 0 = 0
4383  e013 7209006006    	btjf	_Relays_16to9,#4,L1132
4386  e018 7211500f      	bres	_PD_ODR,#0
4388  e01c 2004          	jra	L3132
4389  e01e               L1132:
4390                     ; 680     else PD_ODR |= (uint8_t)0x01;
4392  e01e 7210500f      	bset	_PD_ODR,#0
4393  e022               L3132:
4394                     ; 681     if (Relays_16to9 & 0x08) PD_ODR &= (uint8_t)(~0x08); // Relay 12 off, PD bit 3 = 0
4396  e022 7207006006    	btjf	_Relays_16to9,#3,L5132
4399  e027 7217500f      	bres	_PD_ODR,#3
4401  e02b 2004          	jra	L7132
4402  e02d               L5132:
4403                     ; 682     else PD_ODR |= (uint8_t)0x08;
4405  e02d 7216500f      	bset	_PD_ODR,#3
4406  e031               L7132:
4407                     ; 683     if (Relays_16to9 & 0x04) PD_ODR &= (uint8_t)(~0x20); // Relay 11 off, PD bit 5 = 0
4409  e031 7205006006    	btjf	_Relays_16to9,#2,L1232
4412  e036 721b500f      	bres	_PD_ODR,#5
4414  e03a 2004          	jra	L3232
4415  e03c               L1232:
4416                     ; 684     else PD_ODR |= (uint8_t)0x20;
4418  e03c 721a500f      	bset	_PD_ODR,#5
4419  e040               L3232:
4420                     ; 685     if (Relays_16to9 & 0x02) PD_ODR &= (uint8_t)(~0x80); // Relay 10 off, PD bit 7 = 0
4422  e040 7203006006    	btjf	_Relays_16to9,#1,L5232
4425  e045 721f500f      	bres	_PD_ODR,#7
4427  e049 2004          	jra	L7232
4428  e04b               L5232:
4429                     ; 686     else PD_ODR |= (uint8_t)0x80;
4431  e04b 721e500f      	bset	_PD_ODR,#7
4432  e04f               L7232:
4433                     ; 687     if (Relays_16to9 & 0x01) PA_ODR &= (uint8_t)(~0x10); // Relay  9 off, PA bit 4 = 0
4435  e04f 7201006006    	btjf	_Relays_16to9,#0,L1332
4438  e054 72195000      	bres	_PA_ODR,#4
4440  e058 2004          	jra	L3332
4441  e05a               L1332:
4442                     ; 688     else PA_ODR |= (uint8_t)0x10;
4444  e05a 72185000      	bset	_PA_ODR,#4
4445  e05e               L3332:
4446                     ; 692     if (Relays_8to1 & 0x80) PC_ODR &= (uint8_t)(~0x80); // Relay  8 off, PC bit 7 = 0
4448  e05e 720f005f06    	btjf	_Relays_8to1,#7,L5332
4451  e063 721f500a      	bres	_PC_ODR,#7
4453  e067 2004          	jra	L7332
4454  e069               L5332:
4455                     ; 693     else PC_ODR |= (uint8_t)0x80;
4457  e069 721e500a      	bset	_PC_ODR,#7
4458  e06d               L7332:
4459                     ; 694     if (Relays_8to1 & 0x40) PG_ODR &= (uint8_t)(~0x02); // Relay  7 off, PG bit 1 = 0
4461  e06d 720d005f06    	btjf	_Relays_8to1,#6,L1432
4464  e072 7213501e      	bres	_PG_ODR,#1
4466  e076 2004          	jra	L3432
4467  e078               L1432:
4468                     ; 695     else PG_ODR |= (uint8_t)0x02;
4470  e078 7212501e      	bset	_PG_ODR,#1
4471  e07c               L3432:
4472                     ; 696     if (Relays_8to1 & 0x20) PE_ODR &= (uint8_t)(~0x01); // Relay  6 off, PE bit 0 = 0
4474  e07c 720b005f06    	btjf	_Relays_8to1,#5,L5432
4477  e081 72115014      	bres	_PE_ODR,#0
4479  e085 2004          	jra	L7432
4480  e087               L5432:
4481                     ; 697     else PE_ODR |= (uint8_t)0x01;
4483  e087 72105014      	bset	_PE_ODR,#0
4484  e08b               L7432:
4485                     ; 698     if (Relays_8to1 & 0x10) PD_ODR &= (uint8_t)(~0x04); // Relay  5 off, PD bit 2 = 0
4487  e08b 7209005f06    	btjf	_Relays_8to1,#4,L1532
4490  e090 7215500f      	bres	_PD_ODR,#2
4492  e094 2004          	jra	L3532
4493  e096               L1532:
4494                     ; 699     else PD_ODR |= (uint8_t)0x04;
4496  e096 7214500f      	bset	_PD_ODR,#2
4497  e09a               L3532:
4498                     ; 700     if (Relays_8to1 & 0x08) PD_ODR &= (uint8_t)(~0x10); // Relay  4 off, PD bit 4 = 0
4500  e09a 7207005f06    	btjf	_Relays_8to1,#3,L5532
4503  e09f 7219500f      	bres	_PD_ODR,#4
4505  e0a3 2004          	jra	L7532
4506  e0a5               L5532:
4507                     ; 701     else PD_ODR |= (uint8_t)0x10;
4509  e0a5 7218500f      	bset	_PD_ODR,#4
4510  e0a9               L7532:
4511                     ; 702     if (Relays_8to1 & 0x04) PD_ODR &= (uint8_t)(~0x40); // Relay  3 off, PD bit 6 = 0
4513  e0a9 7205005f06    	btjf	_Relays_8to1,#2,L1632
4516  e0ae 721d500f      	bres	_PD_ODR,#6
4518  e0b2 2004          	jra	L3632
4519  e0b4               L1632:
4520                     ; 703     else PD_ODR |= (uint8_t)0x40;
4522  e0b4 721c500f      	bset	_PD_ODR,#6
4523  e0b8               L3632:
4524                     ; 704     if (Relays_8to1 & 0x02) PA_ODR &= (uint8_t)(~0x20); // Relay  2 off, PA bit 5 = 0
4526  e0b8 7203005f06    	btjf	_Relays_8to1,#1,L5632
4529  e0bd 721b5000      	bres	_PA_ODR,#5
4531  e0c1 2004          	jra	L7632
4532  e0c3               L5632:
4533                     ; 705     else PA_ODR |= (uint8_t)0x20;
4535  e0c3 721a5000      	bset	_PA_ODR,#5
4536  e0c7               L7632:
4537                     ; 706     if (Relays_8to1 & 0x01) PA_ODR &= (uint8_t)(~0x08); // Relay  1 off, PA bit 3 = 0
4539  e0c7 7201005f03    	btjf	_Relays_8to1,#0,L1732
4542  e0cc ccdfdb        	jp	L5622
4543  e0cf               L1732:
4544                     ; 707     else PA_ODR |= (uint8_t)0x08;
4547  e0cf 72165000      	bset	_PA_ODR,#3
4548  e0d3               L1722:
4549                     ; 709 }
4552  e0d3 81            	ret	
4616                     ; 711 void check_reset_button(void)
4616                     ; 712 {
4617                     	switch	.text
4618  e0d4               _check_reset_button:
4620  e0d4 88            	push	a
4621       00000001      OFST:	set	1
4624                     ; 717   if ((PA_IDR & 0x02) == 0) {
4626  e0d5 7203500103cc  	btjt	_PA_IDR,#1,L1142
4627                     ; 719     for (i=0; i<100; i++) {
4629  e0dd 0f01          	clr	(OFST+0,sp)
4631  e0df               L3142:
4632                     ; 720       wait_timer(50000); // wait 50ms
4634  e0df aec350        	ldw	x,#50000
4635  e0e2 cde43f        	call	_wait_timer
4637                     ; 721       if ((PA_IDR & 0x02) == 1) {  // check Reset Button again. If released
4639  e0e5 c65001        	ld	a,_PA_IDR
4640  e0e8 a402          	and	a,#2
4641  e0ea 4a            	dec	a
4642  e0eb 2602          	jrne	L1242
4643                     ; 723         return;
4646  e0ed 84            	pop	a
4647  e0ee 81            	ret	
4648  e0ef               L1242:
4649                     ; 719     for (i=0; i<100; i++) {
4651  e0ef 0c01          	inc	(OFST+0,sp)
4655  e0f1 7b01          	ld	a,(OFST+0,sp)
4656  e0f3 a164          	cp	a,#100
4657  e0f5 25e8          	jrult	L3142
4658                     ; 728     LEDcontrol(0);  // turn LED off
4660  e0f7 4f            	clr	a
4661  e0f8 cdc1df        	call	_LEDcontrol
4664  e0fb               L5242:
4665                     ; 729     while((PA_IDR & 0x02) == 0) {  // Wait for button release
4667  e0fb 72035001fb    	btjf	_PA_IDR,#1,L5242
4668                     ; 732     magic4 = 0x00;		   // MSB Magic Number stored in EEPROM
4670  e100 4f            	clr	a
4671  e101 ae402e        	ldw	x,#_magic4
4672  e104 cdf3ee        	call	c_eewrc
4674                     ; 733     magic3 = 0x00;		   //
4676  e107 4f            	clr	a
4677  e108 ae402d        	ldw	x,#_magic3
4678  e10b cdf3ee        	call	c_eewrc
4680                     ; 734     magic2 = 0x00;		   //
4682  e10e 4f            	clr	a
4683  e10f ae402c        	ldw	x,#_magic2
4684  e112 cdf3ee        	call	c_eewrc
4686                     ; 735     magic1 = 0x00;		   // LSB Magic Number
4688  e115 4f            	clr	a
4689  e116 ae402b        	ldw	x,#_magic1
4690  e119 cdf3ee        	call	c_eewrc
4692                     ; 736     stored_hostaddr4 = 0x00;	   // MSB hostaddr stored in EEPROM
4694  e11c 4f            	clr	a
4695  e11d ae402a        	ldw	x,#_stored_hostaddr4
4696  e120 cdf3ee        	call	c_eewrc
4698                     ; 737     stored_hostaddr3 = 0x00;	   //
4700  e123 4f            	clr	a
4701  e124 ae4029        	ldw	x,#_stored_hostaddr3
4702  e127 cdf3ee        	call	c_eewrc
4704                     ; 738     stored_hostaddr2 = 0x00;	   //
4706  e12a 4f            	clr	a
4707  e12b ae4028        	ldw	x,#_stored_hostaddr2
4708  e12e cdf3ee        	call	c_eewrc
4710                     ; 739     stored_hostaddr1 = 0x00;	   // LSB hostaddr
4712  e131 4f            	clr	a
4713  e132 ae4027        	ldw	x,#_stored_hostaddr1
4714  e135 cdf3ee        	call	c_eewrc
4716                     ; 740     stored_draddr4 = 0x00;	   // MSB draddr stored in EEPROM
4718  e138 4f            	clr	a
4719  e139 ae4026        	ldw	x,#_stored_draddr4
4720  e13c cdf3ee        	call	c_eewrc
4722                     ; 741     stored_draddr3 = 0x00;	   //
4724  e13f 4f            	clr	a
4725  e140 ae4025        	ldw	x,#_stored_draddr3
4726  e143 cdf3ee        	call	c_eewrc
4728                     ; 742     stored_draddr2 = 0x00;	   //
4730  e146 4f            	clr	a
4731  e147 ae4024        	ldw	x,#_stored_draddr2
4732  e14a cdf3ee        	call	c_eewrc
4734                     ; 743     stored_draddr1 = 0x00;	   // LSB draddr
4736  e14d 4f            	clr	a
4737  e14e ae4023        	ldw	x,#_stored_draddr1
4738  e151 cdf3ee        	call	c_eewrc
4740                     ; 744     stored_netmask4 = 0x00;	   // MSB netmask stored in EEPROM
4742  e154 4f            	clr	a
4743  e155 ae4022        	ldw	x,#_stored_netmask4
4744  e158 cdf3ee        	call	c_eewrc
4746                     ; 745     stored_netmask3 = 0x00;	   //
4748  e15b 4f            	clr	a
4749  e15c ae4021        	ldw	x,#_stored_netmask3
4750  e15f cdf3ee        	call	c_eewrc
4752                     ; 746     stored_netmask2 = 0x00;	   //
4754  e162 4f            	clr	a
4755  e163 ae4020        	ldw	x,#_stored_netmask2
4756  e166 cdf3ee        	call	c_eewrc
4758                     ; 747     stored_netmask1 = 0x00;	   // LSB netmask
4760  e169 4f            	clr	a
4761  e16a ae401f        	ldw	x,#_stored_netmask1
4762  e16d cdf3ee        	call	c_eewrc
4764                     ; 748     stored_port = 0x0000;	   // Port stored in EEPROM
4766  e170 5f            	clrw	x
4767  e171 89            	pushw	x
4768  e172 ae401d        	ldw	x,#_stored_port
4769  e175 cdf3d8        	call	c_eewrw
4771  e178 4f            	clr	a
4772  e179 85            	popw	x
4773                     ; 749     stored_uip_ethaddr1 = 0x00;	   // MAC MSB
4775  e17a ae401c        	ldw	x,#_stored_uip_ethaddr1
4776  e17d cdf3ee        	call	c_eewrc
4778                     ; 750     stored_uip_ethaddr2 = 0x00;	   //
4780  e180 4f            	clr	a
4781  e181 ae401b        	ldw	x,#_stored_uip_ethaddr2
4782  e184 cdf3ee        	call	c_eewrc
4784                     ; 751     stored_uip_ethaddr3 = 0x00;	   //
4786  e187 4f            	clr	a
4787  e188 ae401a        	ldw	x,#_stored_uip_ethaddr3
4788  e18b cdf3ee        	call	c_eewrc
4790                     ; 752     stored_uip_ethaddr4 = 0x00;	   //
4792  e18e 4f            	clr	a
4793  e18f ae4019        	ldw	x,#_stored_uip_ethaddr4
4794  e192 cdf3ee        	call	c_eewrc
4796                     ; 753     stored_uip_ethaddr5 = 0x00;	   //
4798  e195 4f            	clr	a
4799  e196 ae4018        	ldw	x,#_stored_uip_ethaddr5
4800  e199 cdf3ee        	call	c_eewrc
4802                     ; 754     stored_uip_ethaddr6 = 0x00;	   // MAC LSB stored in EEPROM
4804  e19c 4f            	clr	a
4805  e19d ae4017        	ldw	x,#_stored_uip_ethaddr6
4806  e1a0 cdf3ee        	call	c_eewrc
4808                     ; 755     stored_Relays_16to9 = 0x00;    // Relay states for relays 16 to 9
4810  e1a3 4f            	clr	a
4811  e1a4 ae4016        	ldw	x,#_stored_Relays_16to9
4812  e1a7 cdf3ee        	call	c_eewrc
4814                     ; 756     stored_Relays_8to1 = 0x00;     // Relay states for relays 8 to 1
4816  e1aa 4f            	clr	a
4817  e1ab ae4015        	ldw	x,#_stored_Relays_8to1
4818  e1ae cdf3ee        	call	c_eewrc
4820                     ; 757     stored_invert_output = 0x00;   // Relay state inversion control
4822  e1b1 4f            	clr	a
4823  e1b2 ae4014        	ldw	x,#_stored_invert_output
4824  e1b5 cdf3ee        	call	c_eewrc
4826                     ; 758     stored_devicename[0] = 0x00;   // Device name
4828  e1b8 4f            	clr	a
4829  e1b9 ae4000        	ldw	x,#_stored_devicename
4830  e1bc cdf3ee        	call	c_eewrc
4832                     ; 759     stored_devicename[1] = 0x00;   // Device name
4834  e1bf 4f            	clr	a
4835  e1c0 ae4001        	ldw	x,#_stored_devicename+1
4836  e1c3 cdf3ee        	call	c_eewrc
4838                     ; 760     stored_devicename[2] = 0x00;   // Device name
4840  e1c6 4f            	clr	a
4841  e1c7 ae4002        	ldw	x,#_stored_devicename+2
4842  e1ca cdf3ee        	call	c_eewrc
4844                     ; 761     stored_devicename[3] = 0x00;   // Device name
4846  e1cd 4f            	clr	a
4847  e1ce ae4003        	ldw	x,#_stored_devicename+3
4848  e1d1 cdf3ee        	call	c_eewrc
4850                     ; 762     stored_devicename[4] = 0x00;   // Device name
4852  e1d4 4f            	clr	a
4853  e1d5 ae4004        	ldw	x,#_stored_devicename+4
4854  e1d8 cdf3ee        	call	c_eewrc
4856                     ; 763     stored_devicename[5] = 0x00;   // Device name
4858  e1db 4f            	clr	a
4859  e1dc ae4005        	ldw	x,#_stored_devicename+5
4860  e1df cdf3ee        	call	c_eewrc
4862                     ; 764     stored_devicename[6] = 0x00;   // Device name
4864  e1e2 4f            	clr	a
4865  e1e3 ae4006        	ldw	x,#_stored_devicename+6
4866  e1e6 cdf3ee        	call	c_eewrc
4868                     ; 765     stored_devicename[7] = 0x00;   // Device name
4870  e1e9 4f            	clr	a
4871  e1ea ae4007        	ldw	x,#_stored_devicename+7
4872  e1ed cdf3ee        	call	c_eewrc
4874                     ; 766     stored_devicename[8] = 0x00;   // Device name
4876  e1f0 4f            	clr	a
4877  e1f1 ae4008        	ldw	x,#_stored_devicename+8
4878  e1f4 cdf3ee        	call	c_eewrc
4880                     ; 767     stored_devicename[9] = 0x00;   // Device name
4882  e1f7 4f            	clr	a
4883  e1f8 ae4009        	ldw	x,#_stored_devicename+9
4884  e1fb cdf3ee        	call	c_eewrc
4886                     ; 768     stored_devicename[10] = 0x00;  // Device name
4888  e1fe 4f            	clr	a
4889  e1ff ae400a        	ldw	x,#_stored_devicename+10
4890  e202 cdf3ee        	call	c_eewrc
4892                     ; 769     stored_devicename[11] = 0x00;  // Device name
4894  e205 4f            	clr	a
4895  e206 ae400b        	ldw	x,#_stored_devicename+11
4896  e209 cdf3ee        	call	c_eewrc
4898                     ; 770     stored_devicename[12] = 0x00;  // Device name
4900  e20c 4f            	clr	a
4901  e20d ae400c        	ldw	x,#_stored_devicename+12
4902  e210 cdf3ee        	call	c_eewrc
4904                     ; 771     stored_devicename[13] = 0x00;  // Device name
4906  e213 4f            	clr	a
4907  e214 ae400d        	ldw	x,#_stored_devicename+13
4908  e217 cdf3ee        	call	c_eewrc
4910                     ; 772     stored_devicename[14] = 0x00;  // Device name
4912  e21a 4f            	clr	a
4913  e21b ae400e        	ldw	x,#_stored_devicename+14
4914  e21e cdf3ee        	call	c_eewrc
4916                     ; 773     stored_devicename[15] = 0x00;  // Device name
4918  e221 4f            	clr	a
4919  e222 ae400f        	ldw	x,#_stored_devicename+15
4920  e225 cdf3ee        	call	c_eewrc
4922                     ; 774     stored_devicename[16] = 0x00;  // Device name
4924  e228 4f            	clr	a
4925  e229 ae4010        	ldw	x,#_stored_devicename+16
4926  e22c cdf3ee        	call	c_eewrc
4928                     ; 775     stored_devicename[17] = 0x00;  // Device name
4930  e22f 4f            	clr	a
4931  e230 ae4011        	ldw	x,#_stored_devicename+17
4932  e233 cdf3ee        	call	c_eewrc
4934                     ; 776     stored_devicename[18] = 0x00;  // Device name
4936  e236 4f            	clr	a
4937  e237 ae4012        	ldw	x,#_stored_devicename+18
4938  e23a cdf3ee        	call	c_eewrc
4940                     ; 777     stored_devicename[19] = 0x00;  // Device name
4942  e23d 4f            	clr	a
4943  e23e ae4013        	ldw	x,#_stored_devicename+19
4944  e241 cdf3ee        	call	c_eewrc
4946                     ; 779     WWDG_WR = (uint8_t)0x7f;     // Window register reset
4948  e244 357f50d2      	mov	_WWDG_WR,#127
4949                     ; 780     WWDG_CR = (uint8_t)0xff;     // Set watchdog to timeout in 49ms
4951  e248 35ff50d1      	mov	_WWDG_CR,#255
4952                     ; 781     WWDG_WR = (uint8_t)0x60;     // Window register value - doesn't matter
4954  e24c 356050d2      	mov	_WWDG_WR,#96
4955                     ; 784     wait_timer((uint16_t)50000); // Wait for watchdog to generate reset
4957  e250 aec350        	ldw	x,#50000
4958  e253 cde43f        	call	_wait_timer
4960                     ; 785     wait_timer((uint16_t)50000);
4962  e256 aec350        	ldw	x,#50000
4963  e259 cde43f        	call	_wait_timer
4965                     ; 786     wait_timer((uint16_t)50000);
4967  e25c aec350        	ldw	x,#50000
4968  e25f cde43f        	call	_wait_timer
4970  e262               L1142:
4971                     ; 788 }
4974  e262 84            	pop	a
4975  e263 81            	ret	
5009                     ; 791 void debugflash(void)
5009                     ; 792 {
5010                     	switch	.text
5011  e264               _debugflash:
5013  e264 88            	push	a
5014       00000001      OFST:	set	1
5017                     ; 807   LEDcontrol(0);     // turn LED off
5019  e265 4f            	clr	a
5020  e266 cdc1df        	call	_LEDcontrol
5022                     ; 808   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
5024  e269 0f01          	clr	(OFST+0,sp)
5026  e26b               L5442:
5029  e26b aec350        	ldw	x,#50000
5030  e26e cde43f        	call	_wait_timer
5034  e271 0c01          	inc	(OFST+0,sp)
5038  e273 7b01          	ld	a,(OFST+0,sp)
5039  e275 a10a          	cp	a,#10
5040  e277 25f2          	jrult	L5442
5041                     ; 810   LEDcontrol(1);     // turn LED on
5043  e279 a601          	ld	a,#1
5044  e27b cdc1df        	call	_LEDcontrol
5046                     ; 811   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
5048  e27e 0f01          	clr	(OFST+0,sp)
5050  e280               L3542:
5053  e280 aec350        	ldw	x,#50000
5054  e283 cde43f        	call	_wait_timer
5058  e286 0c01          	inc	(OFST+0,sp)
5062  e288 7b01          	ld	a,(OFST+0,sp)
5063  e28a a10a          	cp	a,#10
5064  e28c 25f2          	jrult	L3542
5065                     ; 812 }
5068  e28e 84            	pop	a
5069  e28f 81            	ret	
5675                     	switch	.bss
5676  001c               _devicename_changed:
5677  001c 00            	ds.b	1
5678                     	xdef	_devicename_changed
5679  001d               _submit_changes:
5680  001d 00            	ds.b	1
5681                     	xdef	_submit_changes
5682  001e               _uip_ethaddr1:
5683  001e 00            	ds.b	1
5684                     	xdef	_uip_ethaddr1
5685  001f               _uip_ethaddr2:
5686  001f 00            	ds.b	1
5687                     	xdef	_uip_ethaddr2
5688  0020               _uip_ethaddr3:
5689  0020 00            	ds.b	1
5690                     	xdef	_uip_ethaddr3
5691  0021               _uip_ethaddr4:
5692  0021 00            	ds.b	1
5693                     	xdef	_uip_ethaddr4
5694  0022               _uip_ethaddr5:
5695  0022 00            	ds.b	1
5696                     	xdef	_uip_ethaddr5
5697  0023               _uip_ethaddr6:
5698  0023 00            	ds.b	1
5699                     	xdef	_uip_ethaddr6
5700  0024               _Pending_uip_ethaddr1:
5701  0024 00            	ds.b	1
5702                     	xdef	_Pending_uip_ethaddr1
5703  0025               _Pending_uip_ethaddr2:
5704  0025 00            	ds.b	1
5705                     	xdef	_Pending_uip_ethaddr2
5706  0026               _Pending_uip_ethaddr3:
5707  0026 00            	ds.b	1
5708                     	xdef	_Pending_uip_ethaddr3
5709  0027               _Pending_uip_ethaddr4:
5710  0027 00            	ds.b	1
5711                     	xdef	_Pending_uip_ethaddr4
5712  0028               _Pending_uip_ethaddr5:
5713  0028 00            	ds.b	1
5714                     	xdef	_Pending_uip_ethaddr5
5715  0029               _Pending_uip_ethaddr6:
5716  0029 00            	ds.b	1
5717                     	xdef	_Pending_uip_ethaddr6
5718  002a               _Pending_port:
5719  002a 0000          	ds.b	2
5720                     	xdef	_Pending_port
5721  002c               _Pending_netmask1:
5722  002c 00            	ds.b	1
5723                     	xdef	_Pending_netmask1
5724  002d               _Pending_netmask2:
5725  002d 00            	ds.b	1
5726                     	xdef	_Pending_netmask2
5727  002e               _Pending_netmask3:
5728  002e 00            	ds.b	1
5729                     	xdef	_Pending_netmask3
5730  002f               _Pending_netmask4:
5731  002f 00            	ds.b	1
5732                     	xdef	_Pending_netmask4
5733  0030               _Pending_draddr1:
5734  0030 00            	ds.b	1
5735                     	xdef	_Pending_draddr1
5736  0031               _Pending_draddr2:
5737  0031 00            	ds.b	1
5738                     	xdef	_Pending_draddr2
5739  0032               _Pending_draddr3:
5740  0032 00            	ds.b	1
5741                     	xdef	_Pending_draddr3
5742  0033               _Pending_draddr4:
5743  0033 00            	ds.b	1
5744                     	xdef	_Pending_draddr4
5745  0034               _Pending_hostaddr1:
5746  0034 00            	ds.b	1
5747                     	xdef	_Pending_hostaddr1
5748  0035               _Pending_hostaddr2:
5749  0035 00            	ds.b	1
5750                     	xdef	_Pending_hostaddr2
5751  0036               _Pending_hostaddr3:
5752  0036 00            	ds.b	1
5753                     	xdef	_Pending_hostaddr3
5754  0037               _Pending_hostaddr4:
5755  0037 00            	ds.b	1
5756                     	xdef	_Pending_hostaddr4
5757  0038               _ex_stored_devicename:
5758  0038 000000000000  	ds.b	20
5759                     	xdef	_ex_stored_devicename
5760  004c               _ex_stored_port:
5761  004c 0000          	ds.b	2
5762                     	xdef	_ex_stored_port
5763  004e               _ex_stored_netmask1:
5764  004e 00            	ds.b	1
5765                     	xdef	_ex_stored_netmask1
5766  004f               _ex_stored_netmask2:
5767  004f 00            	ds.b	1
5768                     	xdef	_ex_stored_netmask2
5769  0050               _ex_stored_netmask3:
5770  0050 00            	ds.b	1
5771                     	xdef	_ex_stored_netmask3
5772  0051               _ex_stored_netmask4:
5773  0051 00            	ds.b	1
5774                     	xdef	_ex_stored_netmask4
5775  0052               _ex_stored_draddr1:
5776  0052 00            	ds.b	1
5777                     	xdef	_ex_stored_draddr1
5778  0053               _ex_stored_draddr2:
5779  0053 00            	ds.b	1
5780                     	xdef	_ex_stored_draddr2
5781  0054               _ex_stored_draddr3:
5782  0054 00            	ds.b	1
5783                     	xdef	_ex_stored_draddr3
5784  0055               _ex_stored_draddr4:
5785  0055 00            	ds.b	1
5786                     	xdef	_ex_stored_draddr4
5787  0056               _ex_stored_hostaddr1:
5788  0056 00            	ds.b	1
5789                     	xdef	_ex_stored_hostaddr1
5790  0057               _ex_stored_hostaddr2:
5791  0057 00            	ds.b	1
5792                     	xdef	_ex_stored_hostaddr2
5793  0058               _ex_stored_hostaddr3:
5794  0058 00            	ds.b	1
5795                     	xdef	_ex_stored_hostaddr3
5796  0059               _ex_stored_hostaddr4:
5797  0059 00            	ds.b	1
5798                     	xdef	_ex_stored_hostaddr4
5799  005a               _IpAddr:
5800  005a 00000000      	ds.b	4
5801                     	xdef	_IpAddr
5802  005e               _invert_output:
5803  005e 00            	ds.b	1
5804                     	xdef	_invert_output
5805  005f               _Relays_8to1:
5806  005f 00            	ds.b	1
5807                     	xdef	_Relays_8to1
5808  0060               _Relays_16to9:
5809  0060 00            	ds.b	1
5810                     	xdef	_Relays_16to9
5811  0061               _Port_Httpd:
5812  0061 0000          	ds.b	2
5813                     	xdef	_Port_Httpd
5814                     .eeprom:	section	.data
5815  4000               _stored_devicename:
5816  4000 000000000000  	ds.b	20
5817                     	xdef	_stored_devicename
5818  4014               _stored_invert_output:
5819  4014 00            	ds.b	1
5820                     	xdef	_stored_invert_output
5821  4015               _stored_Relays_8to1:
5822  4015 00            	ds.b	1
5823                     	xdef	_stored_Relays_8to1
5824  4016               _stored_Relays_16to9:
5825  4016 00            	ds.b	1
5826                     	xdef	_stored_Relays_16to9
5827  4017               _stored_uip_ethaddr6:
5828  4017 00            	ds.b	1
5829                     	xdef	_stored_uip_ethaddr6
5830  4018               _stored_uip_ethaddr5:
5831  4018 00            	ds.b	1
5832                     	xdef	_stored_uip_ethaddr5
5833  4019               _stored_uip_ethaddr4:
5834  4019 00            	ds.b	1
5835                     	xdef	_stored_uip_ethaddr4
5836  401a               _stored_uip_ethaddr3:
5837  401a 00            	ds.b	1
5838                     	xdef	_stored_uip_ethaddr3
5839  401b               _stored_uip_ethaddr2:
5840  401b 00            	ds.b	1
5841                     	xdef	_stored_uip_ethaddr2
5842  401c               _stored_uip_ethaddr1:
5843  401c 00            	ds.b	1
5844                     	xdef	_stored_uip_ethaddr1
5845  401d               _stored_port:
5846  401d 0000          	ds.b	2
5847                     	xdef	_stored_port
5848  401f               _stored_netmask1:
5849  401f 00            	ds.b	1
5850                     	xdef	_stored_netmask1
5851  4020               _stored_netmask2:
5852  4020 00            	ds.b	1
5853                     	xdef	_stored_netmask2
5854  4021               _stored_netmask3:
5855  4021 00            	ds.b	1
5856                     	xdef	_stored_netmask3
5857  4022               _stored_netmask4:
5858  4022 00            	ds.b	1
5859                     	xdef	_stored_netmask4
5860  4023               _stored_draddr1:
5861  4023 00            	ds.b	1
5862                     	xdef	_stored_draddr1
5863  4024               _stored_draddr2:
5864  4024 00            	ds.b	1
5865                     	xdef	_stored_draddr2
5866  4025               _stored_draddr3:
5867  4025 00            	ds.b	1
5868                     	xdef	_stored_draddr3
5869  4026               _stored_draddr4:
5870  4026 00            	ds.b	1
5871                     	xdef	_stored_draddr4
5872  4027               _stored_hostaddr1:
5873  4027 00            	ds.b	1
5874                     	xdef	_stored_hostaddr1
5875  4028               _stored_hostaddr2:
5876  4028 00            	ds.b	1
5877                     	xdef	_stored_hostaddr2
5878  4029               _stored_hostaddr3:
5879  4029 00            	ds.b	1
5880                     	xdef	_stored_hostaddr3
5881  402a               _stored_hostaddr4:
5882  402a 00            	ds.b	1
5883                     	xdef	_stored_hostaddr4
5884  402b               _magic1:
5885  402b 00            	ds.b	1
5886                     	xdef	_magic1
5887  402c               _magic2:
5888  402c 00            	ds.b	1
5889                     	xdef	_magic2
5890  402d               _magic3:
5891  402d 00            	ds.b	1
5892                     	xdef	_magic3
5893  402e               _magic4:
5894  402e 00            	ds.b	1
5895                     	xdef	_magic4
5896                     	xref	_wait_timer
5897                     	xref	_arp_timer_expired
5898                     	xref	_periodic_timer_expired
5899                     	xref	_clock_init
5900                     	xref	_LEDcontrol
5901                     	xref	_gpio_init
5902                     	xref	_uip_arp_timer
5903                     	xref	_uip_arp_out
5904                     	xref	_uip_arp_arpin
5905                     	xref	_uip_arp_init
5906                     	xref	_uip_ethaddr
5907                     	xref	_uip_draddr
5908                     	xref	_uip_netmask
5909                     	xref	_uip_hostaddr
5910                     	xref	_uip_process
5911                     	xref	_uip_conns
5912                     	xref	_uip_conn
5913                     	xref	_uip_len
5914                     	xref	_htons
5915                     	xref	_uip_buf
5916                     	xref	_uip_init
5917                     	xref	_HttpDInit
5918                     	xref	_Enc28j60Send
5919                     	xref	_Enc28j60CopyPacket
5920                     	xref	_Enc28j60Receive
5921                     	xref	_Enc28j60Init
5922                     	xref	_spi_init
5923                     	xdef	_debugflash
5924                     	xdef	_check_reset_button
5925                     	xdef	_update_relay_control_registers
5926                     	xdef	_check_runtime_changes
5927                     	xdef	_check_eeprom_settings
5928                     	xdef	_unlock_eeprom
5929                     	xdef	_main
5930                     	xref.b	c_x
5950                     	xref	c_eewrw
5951                     	xref	c_eewrc
5952                     	xref	c_bmulx
5953                     	end
