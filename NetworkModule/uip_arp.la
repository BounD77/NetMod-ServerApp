   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  17                     .const:	section	.text
  18  c2ff               L31_broadcast_ethaddr:
  19  c2ff ff            	dc.b	255
  20  c300 ff            	dc.b	255
  21  c301 ff            	dc.b	255
  22  c302 ff            	dc.b	255
  23  c303 ff            	dc.b	255
  24  c304 ff            	dc.b	255
  25  c305               L51_broadcast_ipaddr:
  26  c305 ffff          	dc.w	-1
  27  c307 ffff          	dc.w	-1
  59                     ; 144 uip_arp_init(void)
  59                     ; 145 {
  61                     	switch	.text
  62  f523               _uip_arp_init:
  66                     ; 146   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
  68  f523 4f            	clr	a
  69  f524 c70438        	ld	L32_i,a
  70  f527               L15:
  71                     ; 147     memset(arp_table[i].ipaddr, 0, 4);
  73  f527 97            	ld	xl,a
  74  f528 a60b          	ld	a,#11
  75  f52a 42            	mul	x,a
  76  f52b 1c043d        	addw	x,#L71_arp_table
  77  f52e bf04          	ldw	c_x,x
  78  f530 ae0004        	ldw	x,#4
  79  f533               L6:
  80  f533 5a            	decw	x
  81  f534 926f04        	clr	([c_x.w],x)
  82  f537 5d            	tnzw	x
  83  f538 26f9          	jrne	L6
  84                     ; 146   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
  86  f53a 725c0438      	inc	L32_i
  89  f53e c60438        	ld	a,L32_i
  90  f541 a108          	cp	a,#8
  91  f543 25e2          	jrult	L15
  92                     ; 149 }
  95  f545 81            	ret	
 187                     ; 162 uip_arp_timer(void)
 187                     ; 163 {
 188                     	switch	.text
 189  f546               _uip_arp_timer:
 191  f546 89            	pushw	x
 192       00000002      OFST:	set	2
 195                     ; 166   ++arptime;
 197  f547 725c0436      	inc	L72_arptime
 198                     ; 167   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 200  f54b 4f            	clr	a
 201  f54c c70438        	ld	L32_i,a
 202  f54f               L521:
 203                     ; 168     tabptr = &arp_table[i];
 205  f54f 97            	ld	xl,a
 206  f550 a60b          	ld	a,#11
 207  f552 42            	mul	x,a
 208  f553 1c043d        	addw	x,#L71_arp_table
 209  f556 1f01          	ldw	(OFST-1,sp),x
 211                     ; 169     if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 211                     ; 170        arptime - tabptr->time >= UIP_ARP_MAXAGE) {
 213  f558 1601          	ldw	y,(OFST-1,sp)
 214  f55a ee02          	ldw	x,(2,x)
 215  f55c 01            	rrwa	x,a
 216  f55d 90ea01        	or	a,(1,y)
 217  f560 01            	rrwa	x,a
 218  f561 90fa          	or	a,(y)
 219  f563 01            	rrwa	x,a
 220  f564 5d            	tnzw	x
 221  f565 271e          	jreq	L331
 223  f567 c60436        	ld	a,L72_arptime
 224  f56a 5f            	clrw	x
 225  f56b 90e00a        	sub	a,(10,y)
 226  f56e 2401          	jrnc	L21
 227  f570 5a            	decw	x
 228  f571               L21:
 229  f571 02            	rlwa	x,a
 230  f572 a30078        	cpw	x,#120
 231  f575 2f0e          	jrslt	L331
 232                     ; 171       memset(tabptr->ipaddr, 0, 4);
 234  f577 1e01          	ldw	x,(OFST-1,sp)
 235  f579 bf04          	ldw	c_x,x
 236  f57b ae0004        	ldw	x,#4
 237  f57e               L41:
 238  f57e 5a            	decw	x
 239  f57f 926f04        	clr	([c_x.w],x)
 240  f582 5d            	tnzw	x
 241  f583 26f9          	jrne	L41
 242  f585               L331:
 243                     ; 167   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 245  f585 725c0438      	inc	L32_i
 248  f589 c60438        	ld	a,L32_i
 249  f58c a108          	cp	a,#8
 250  f58e 25bf          	jrult	L521
 251                     ; 175 }
 254  f590 85            	popw	x
 255  f591 81            	ret	
 320                     ; 179 uip_arp_update(uint16_t *ipaddr, struct uip_eth_addr *ethaddr)
 320                     ; 180 {
 321                     	switch	.text
 322  f592               L531_uip_arp_update:
 324  f592 89            	pushw	x
 325  f593 5204          	subw	sp,#4
 326       00000004      OFST:	set	4
 329                     ; 185   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 331  f595 4f            	clr	a
 332  f596 c70438        	ld	L32_i,a
 333  f599               L171:
 334                     ; 187     tabptr = &arp_table[i];
 336  f599 97            	ld	xl,a
 337  f59a a60b          	ld	a,#11
 338  f59c 42            	mul	x,a
 339  f59d 1c043d        	addw	x,#L71_arp_table
 340  f5a0 1f03          	ldw	(OFST-1,sp),x
 342                     ; 189     if(tabptr->ipaddr[0] != 0 &&
 342                     ; 190        tabptr->ipaddr[1] != 0) {
 344  f5a2 e601          	ld	a,(1,x)
 345  f5a4 fa            	or	a,(x)
 346  f5a5 2733          	jreq	L771
 348  f5a7 e603          	ld	a,(3,x)
 349  f5a9 ea02          	or	a,(2,x)
 350  f5ab 272d          	jreq	L771
 351                     ; 194       if(ipaddr[0] == tabptr->ipaddr[0] &&
 351                     ; 195 	 ipaddr[1] == tabptr->ipaddr[1]) {
 353  f5ad 1e05          	ldw	x,(OFST+1,sp)
 354  f5af 1603          	ldw	y,(OFST-1,sp)
 355  f5b1 fe            	ldw	x,(x)
 356  f5b2 90f3          	cpw	x,(y)
 357  f5b4 2624          	jrne	L771
 359  f5b6 1e05          	ldw	x,(OFST+1,sp)
 360  f5b8 ee02          	ldw	x,(2,x)
 361  f5ba 90e302        	cpw	x,(2,y)
 362  f5bd 261b          	jrne	L771
 363                     ; 198 	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 365  f5bf 93            	ldw	x,y
 366  f5c0 1c0004        	addw	x,#4
 367  f5c3 bf04          	ldw	c_x,x
 368  f5c5 1609          	ldw	y,(OFST+5,sp)
 369  f5c7 90bf07        	ldw	c_y,y
 370  f5ca ae0006        	ldw	x,#6
 371  f5cd               L02:
 372  f5cd 5a            	decw	x
 373  f5ce 92d607        	ld	a,([c_y.w],x)
 374  f5d1 92d704        	ld	([c_x.w],x),a
 375  f5d4 5d            	tnzw	x
 376  f5d5 26f6          	jrne	L02
 377                     ; 199 	tabptr->time = arptime;
 378                     ; 201 	return;
 380  f5d7 ccf693        	jra	L03
 381  f5da               L771:
 382                     ; 185   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 384  f5da 725c0438      	inc	L32_i
 387  f5de c60438        	ld	a,L32_i
 388  f5e1 a108          	cp	a,#8
 389  f5e3 25b4          	jrult	L171
 390                     ; 210   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 392  f5e5 4f            	clr	a
 393  f5e6 c70438        	ld	L32_i,a
 394  f5e9               L302:
 395                     ; 211     tabptr = &arp_table[i];
 397  f5e9 97            	ld	xl,a
 398  f5ea a60b          	ld	a,#11
 399  f5ec 42            	mul	x,a
 400  f5ed 1c043d        	addw	x,#L71_arp_table
 401  f5f0 1f03          	ldw	(OFST-1,sp),x
 403                     ; 212     if(tabptr->ipaddr[0] == 0 &&
 403                     ; 213        tabptr->ipaddr[1] == 0) {
 405  f5f2 e601          	ld	a,(1,x)
 406  f5f4 fa            	or	a,(x)
 407  f5f5 2606          	jrne	L112
 409  f5f7 e603          	ld	a,(3,x)
 410  f5f9 ea02          	or	a,(2,x)
 411  f5fb 270b          	jreq	L702
 412                     ; 214       break;
 414  f5fd               L112:
 415                     ; 210   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 417  f5fd 725c0438      	inc	L32_i
 420  f601 c60438        	ld	a,L32_i
 421  f604 a108          	cp	a,#8
 422  f606 25e1          	jrult	L302
 423  f608               L702:
 424                     ; 220   if(i == UIP_ARPTAB_SIZE) {
 426  f608 c60438        	ld	a,L32_i
 427  f60b a108          	cp	a,#8
 428  f60d 2657          	jrne	L312
 429                     ; 221     tmpage = 0;
 431  f60f 725f0435      	clr	L13_tmpage
 432                     ; 222     c = 0;
 434  f613 725f0437      	clr	L52_c
 435                     ; 223     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 437  f617 4f            	clr	a
 438  f618 c70438        	ld	L32_i,a
 439  f61b               L512:
 440                     ; 224       tabptr = &arp_table[i];
 442  f61b 97            	ld	xl,a
 443  f61c a60b          	ld	a,#11
 444  f61e 42            	mul	x,a
 445  f61f 1c043d        	addw	x,#L71_arp_table
 446  f622 1f03          	ldw	(OFST-1,sp),x
 448                     ; 225       if(arptime - tabptr->time > tmpage) {
 450  f624 5f            	clrw	x
 451  f625 c60435        	ld	a,L13_tmpage
 452  f628 97            	ld	xl,a
 453  f629 1f01          	ldw	(OFST-3,sp),x
 455  f62b 5f            	clrw	x
 456  f62c 1603          	ldw	y,(OFST-1,sp)
 457  f62e c60436        	ld	a,L72_arptime
 458  f631 90e00a        	sub	a,(10,y)
 459  f634 2401          	jrnc	L22
 460  f636 5a            	decw	x
 461  f637               L22:
 462  f637 02            	rlwa	x,a
 463  f638 1301          	cpw	x,(OFST-3,sp)
 464  f63a 2d10          	jrsle	L322
 465                     ; 226 	tmpage = (uint8_t)(arptime - tabptr->time);
 467  f63c 1e03          	ldw	x,(OFST-1,sp)
 468  f63e e60a          	ld	a,(10,x)
 469  f640 c00436        	sub	a,L72_arptime
 470  f643 40            	neg	a
 471  f644 c70435        	ld	L13_tmpage,a
 472                     ; 227 	c = i;
 474  f647 5504380437    	mov	L52_c,L32_i
 475  f64c               L322:
 476                     ; 223     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 478  f64c 725c0438      	inc	L32_i
 481  f650 c60438        	ld	a,L32_i
 482  f653 a108          	cp	a,#8
 483  f655 25c4          	jrult	L512
 484                     ; 230     i = c;
 486  f657 c60437        	ld	a,L52_c
 487  f65a c70438        	ld	L32_i,a
 488                     ; 231     tabptr = &arp_table[i];
 490  f65d 97            	ld	xl,a
 491  f65e a60b          	ld	a,#11
 492  f660 42            	mul	x,a
 493  f661 1c043d        	addw	x,#L71_arp_table
 494  f664 1f03          	ldw	(OFST-1,sp),x
 496  f666               L312:
 497                     ; 236   memcpy(tabptr->ipaddr, ipaddr, 4);
 499  f666 bf04          	ldw	c_x,x
 500  f668 1605          	ldw	y,(OFST+1,sp)
 501  f66a 90bf07        	ldw	c_y,y
 502  f66d ae0004        	ldw	x,#4
 503  f670               L42:
 504  f670 5a            	decw	x
 505  f671 92d607        	ld	a,([c_y.w],x)
 506  f674 92d704        	ld	([c_x.w],x),a
 507  f677 5d            	tnzw	x
 508  f678 26f6          	jrne	L42
 509                     ; 237   memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 511  f67a 1e03          	ldw	x,(OFST-1,sp)
 512  f67c 1c0004        	addw	x,#4
 513  f67f bf04          	ldw	c_x,x
 514  f681 1609          	ldw	y,(OFST+5,sp)
 515  f683 90bf07        	ldw	c_y,y
 516  f686 ae0006        	ldw	x,#6
 517  f689               L62:
 518  f689 5a            	decw	x
 519  f68a 92d607        	ld	a,([c_y.w],x)
 520  f68d 92d704        	ld	([c_x.w],x),a
 521  f690 5d            	tnzw	x
 522  f691 26f6          	jrne	L62
 523                     ; 238   tabptr->time = arptime;
 525                     ; 239 }
 526  f693               L03:
 528  f693 1e03          	ldw	x,(OFST-1,sp)
 529  f695 c60436        	ld	a,L72_arptime
 530  f698 e70a          	ld	(10,x),a
 533  f69a 5b06          	addw	sp,#6
 534  f69c 81            	ret	
 563                     ; 266 uip_arp_arpin(void)
 563                     ; 267 {
 564                     	switch	.text
 565  f69d               _uip_arp_arpin:
 569                     ; 268   if(uip_len < sizeof(struct arp_hdr)) {
 571  f69d ce01d7        	ldw	x,_uip_len
 572  f6a0 a3002a        	cpw	x,#42
 573  f6a3 5f            	clrw	x
 574  f6a4 2404          	jruge	L142
 575                     ; 269     uip_len = 0;
 577  f6a6 cf01d7        	ldw	_uip_len,x
 578                     ; 270     return;
 581  f6a9 81            	ret	
 582  f6aa               L142:
 583                     ; 272   uip_len = 0;
 585  f6aa cf01d7        	ldw	_uip_len,x
 586                     ; 274   switch(BUF->opcode) {
 588  f6ad ce01ef        	ldw	x,_uip_buf+20
 590                     ; 307     break;
 591  f6b0 5a            	decw	x
 592  f6b1 2704          	jreq	L522
 593  f6b3 5a            	decw	x
 594  f6b4 277a          	jreq	L722
 596  f6b6 81            	ret	
 597  f6b7               L522:
 598                     ; 275   case HTONS(ARP_REQUEST):
 598                     ; 276     /* ARP request. If it asked for our address, we send out a
 598                     ; 277        reply. */
 598                     ; 278     if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 600  f6b7 ce0201        	ldw	x,_uip_buf+38
 601  f6ba c30084        	cpw	x,_uip_hostaddr
 602  f6bd 2703ccf74b    	jrne	L542
 604  f6c2 ce0203        	ldw	x,_uip_buf+40
 605  f6c5 c30086        	cpw	x,_uip_hostaddr+2
 606  f6c8 26f5          	jrne	L542
 607                     ; 282       uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 609  f6ca ae01f1        	ldw	x,#_uip_buf+22
 610  f6cd 89            	pushw	x
 611  f6ce ae01f7        	ldw	x,#_uip_buf+28
 612  f6d1 cdf592        	call	L531_uip_arp_update
 614  f6d4 85            	popw	x
 615                     ; 285       BUF->opcode = HTONS(2);
 617  f6d5 ae0002        	ldw	x,#2
 618  f6d8 cf01ef        	ldw	_uip_buf+20,x
 619                     ; 287       memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 621  f6db ae0006        	ldw	x,#6
 622  f6de               L63:
 623  f6de d601f0        	ld	a,(_uip_buf+21,x)
 624  f6e1 d701fa        	ld	(_uip_buf+31,x),a
 625  f6e4 5a            	decw	x
 626  f6e5 26f7          	jrne	L63
 627                     ; 288       memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 629  f6e7 ae0006        	ldw	x,#6
 630  f6ea               L04:
 631  f6ea d60009        	ld	a,(_uip_ethaddr-1,x)
 632  f6ed d701f0        	ld	(_uip_buf+21,x),a
 633  f6f0 5a            	decw	x
 634  f6f1 26f7          	jrne	L04
 635                     ; 289       memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 637  f6f3 ae0006        	ldw	x,#6
 638  f6f6               L24:
 639  f6f6 d60009        	ld	a,(_uip_ethaddr-1,x)
 640  f6f9 d701e0        	ld	(_uip_buf+5,x),a
 641  f6fc 5a            	decw	x
 642  f6fd 26f7          	jrne	L24
 643                     ; 290       memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 645  f6ff ae0006        	ldw	x,#6
 646  f702               L44:
 647  f702 d601fa        	ld	a,(_uip_buf+31,x)
 648  f705 d701da        	ld	(_uip_buf-1,x),a
 649  f708 5a            	decw	x
 650  f709 26f7          	jrne	L44
 651                     ; 292       BUF->dipaddr[0] = BUF->sipaddr[0];
 653  f70b ce01f7        	ldw	x,_uip_buf+28
 654  f70e cf0201        	ldw	_uip_buf+38,x
 655                     ; 293       BUF->dipaddr[1] = BUF->sipaddr[1];
 657  f711 ce01f9        	ldw	x,_uip_buf+30
 658  f714 cf0203        	ldw	_uip_buf+40,x
 659                     ; 294       BUF->sipaddr[0] = uip_hostaddr[0];
 661  f717 ce0084        	ldw	x,_uip_hostaddr
 662  f71a cf01f7        	ldw	_uip_buf+28,x
 663                     ; 295       BUF->sipaddr[1] = uip_hostaddr[1];
 665  f71d ce0086        	ldw	x,_uip_hostaddr+2
 666  f720 cf01f9        	ldw	_uip_buf+30,x
 667                     ; 297       BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 669  f723 ae0806        	ldw	x,#2054
 670  f726 cf01e7        	ldw	_uip_buf+12,x
 671                     ; 298       uip_len = sizeof(struct arp_hdr);
 673  f729 ae002a        	ldw	x,#42
 674  f72c cf01d7        	ldw	_uip_len,x
 676  f72f 81            	ret	
 677  f730               L722:
 678                     ; 301   case HTONS(ARP_REPLY):
 678                     ; 302     /* ARP reply. We insert or update the ARP table if it was meant
 678                     ; 303        for us. */
 678                     ; 304     if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 680  f730 ce0201        	ldw	x,_uip_buf+38
 681  f733 c30084        	cpw	x,_uip_hostaddr
 682  f736 2613          	jrne	L542
 684  f738 ce0203        	ldw	x,_uip_buf+40
 685  f73b c30086        	cpw	x,_uip_hostaddr+2
 686  f73e 260b          	jrne	L542
 687                     ; 305       uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 689  f740 ae01f1        	ldw	x,#_uip_buf+22
 690  f743 89            	pushw	x
 691  f744 ae01f7        	ldw	x,#_uip_buf+28
 692  f747 cdf592        	call	L531_uip_arp_update
 694  f74a 85            	popw	x
 695  f74b               L542:
 696                     ; 310   return;
 699  f74b 81            	ret	
 750                     ; 343 uip_arp_out(void)
 750                     ; 344 {
 751                     	switch	.text
 752  f74c               _uip_arp_out:
 754       00000002      OFST:	set	2
 757                     ; 355   if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
 759  f74c ce01f9        	ldw	x,_uip_buf+30
 760  f74f c3c305        	cpw	x,L51_broadcast_ipaddr
 761  f752 2617          	jrne	L372
 763  f754 ce01fb        	ldw	x,_uip_buf+32
 764  f757 c3c307        	cpw	x,L51_broadcast_ipaddr+2
 765  f75a 260f          	jrne	L372
 766                     ; 356     memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
 768  f75c ae0006        	ldw	x,#6
 769  f75f               L25:
 770  f75f d6c2fe        	ld	a,(L31_broadcast_ethaddr-1,x)
 771  f762 d701da        	ld	(_uip_buf-1,x),a
 772  f765 5a            	decw	x
 773  f766 26f7          	jrne	L25
 775  f768 ccf87b        	jra	L572
 776  f76b               L372:
 777                     ; 360     if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
 779  f76b ce01f9        	ldw	x,_uip_buf+30
 780  f76e 01            	rrwa	x,a
 781  f76f c40081        	and	a,_uip_netmask+1
 782  f772 01            	rrwa	x,a
 783  f773 c40080        	and	a,_uip_netmask
 784  f776 01            	rrwa	x,a
 785  f777 90ce0084      	ldw	y,_uip_hostaddr
 786  f77b 9001          	rrwa	y,a
 787  f77d c40081        	and	a,_uip_netmask+1
 788  f780 9001          	rrwa	y,a
 789  f782 c40080        	and	a,_uip_netmask
 790  f785 9001          	rrwa	y,a
 791  f787 90bf07        	ldw	c_y,y
 792  f78a b307          	cpw	x,c_y
 793  f78c 2623          	jrne	L303
 795  f78e ce01fb        	ldw	x,_uip_buf+32
 796  f791 01            	rrwa	x,a
 797  f792 c40083        	and	a,_uip_netmask+3
 798  f795 01            	rrwa	x,a
 799  f796 c40082        	and	a,_uip_netmask+2
 800  f799 01            	rrwa	x,a
 801  f79a 90ce0086      	ldw	y,_uip_hostaddr+2
 802  f79e 9001          	rrwa	y,a
 803  f7a0 c40083        	and	a,_uip_netmask+3
 804  f7a3 9001          	rrwa	y,a
 805  f7a5 c40082        	and	a,_uip_netmask+2
 806  f7a8 9001          	rrwa	y,a
 807  f7aa 90bf07        	ldw	c_y,y
 808  f7ad b307          	cpw	x,c_y
 809  f7af 2731          	jreq	L113
 810  f7b1               L303:
 811                     ; 364       uip_ipaddr_copy(ipaddr, uip_draddr);
 813  f7b1 ce007c        	ldw	x,_uip_draddr
 814  f7b4 cf0439        	ldw	L12_ipaddr,x
 817  f7b7 ce007e        	ldw	x,_uip_draddr+2
 819  f7ba               L703:
 820  f7ba cf043b        	ldw	L12_ipaddr+2,x
 821                     ; 371     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 823  f7bd 4f            	clr	a
 824  f7be c70438        	ld	L32_i,a
 825  f7c1               L513:
 826                     ; 372       tabptr = &arp_table[i];
 828  f7c1 97            	ld	xl,a
 829  f7c2 a60b          	ld	a,#11
 830  f7c4 42            	mul	x,a
 831  f7c5 1c043d        	addw	x,#L71_arp_table
 833                     ; 373       if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
 835  f7c8 9093          	ldw	y,x
 836  f7ca 90fe          	ldw	y,(y)
 837  f7cc 90c30439      	cpw	y,L12_ipaddr
 838  f7d0 261b          	jrne	L323
 840  f7d2 9093          	ldw	y,x
 841  f7d4 90ee02        	ldw	y,(2,y)
 842  f7d7 90c3043b      	cpw	y,L12_ipaddr+2
 843  f7db 2610          	jrne	L323
 844                     ; 374 	break;
 846  f7dd c60438        	ld	a,L32_i
 847  f7e0 2016          	jra	L123
 848  f7e2               L113:
 849                     ; 368       uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
 851  f7e2 ce01f9        	ldw	x,_uip_buf+30
 852  f7e5 cf0439        	ldw	L12_ipaddr,x
 855  f7e8 ce01fb        	ldw	x,_uip_buf+32
 856  f7eb 20cd          	jra	L703
 857  f7ed               L323:
 858                     ; 371     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 860  f7ed 725c0438      	inc	L32_i
 863  f7f1 c60438        	ld	a,L32_i
 864  f7f4 a108          	cp	a,#8
 865  f7f6 25c9          	jrult	L513
 866  f7f8               L123:
 867                     ; 378     if(i == UIP_ARPTAB_SIZE) {
 869  f7f8 a108          	cp	a,#8
 870  f7fa 266d          	jrne	L523
 871                     ; 382       memset(BUF->ethhdr.dest.addr, 0xff, 6);
 873  f7fc a6ff          	ld	a,#255
 874  f7fe ae0006        	ldw	x,#6
 875  f801               L45:
 876  f801 d701da        	ld	(_uip_buf-1,x),a
 877  f804 5a            	decw	x
 878  f805 26fa          	jrne	L45
 879                     ; 383       memset(BUF->dhwaddr.addr, 0x00, 6);
 881  f807 ae0006        	ldw	x,#6
 882  f80a               L65:
 883  f80a 724f01fa      	clr	(_uip_buf+31,x)
 884  f80e 5a            	decw	x
 885  f80f 26f9          	jrne	L65
 886                     ; 384       memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 888  f811 ae0006        	ldw	x,#6
 889  f814               L06:
 890  f814 d60009        	ld	a,(_uip_ethaddr-1,x)
 891  f817 d701e0        	ld	(_uip_buf+5,x),a
 892  f81a 5a            	decw	x
 893  f81b 26f7          	jrne	L06
 894                     ; 385       memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 896  f81d ae0006        	ldw	x,#6
 897  f820               L26:
 898  f820 d60009        	ld	a,(_uip_ethaddr-1,x)
 899  f823 d701f0        	ld	(_uip_buf+21,x),a
 900  f826 5a            	decw	x
 901  f827 26f7          	jrne	L26
 902                     ; 387       uip_ipaddr_copy(BUF->dipaddr, ipaddr);
 904  f829 ce0439        	ldw	x,L12_ipaddr
 905  f82c cf0201        	ldw	_uip_buf+38,x
 908  f82f ce043b        	ldw	x,L12_ipaddr+2
 909  f832 cf0203        	ldw	_uip_buf+40,x
 910                     ; 388       uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
 912  f835 ce0084        	ldw	x,_uip_hostaddr
 913  f838 cf01f7        	ldw	_uip_buf+28,x
 916  f83b ce0086        	ldw	x,_uip_hostaddr+2
 917  f83e cf01f9        	ldw	_uip_buf+30,x
 918                     ; 389       BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 920  f841 ae0001        	ldw	x,#1
 921  f844 cf01ef        	ldw	_uip_buf+20,x
 922                     ; 390       BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 924  f847 cf01e9        	ldw	_uip_buf+14,x
 925                     ; 391       BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 927  f84a ae0800        	ldw	x,#2048
 928  f84d cf01eb        	ldw	_uip_buf+16,x
 929                     ; 392       BUF->hwlen = 6;
 931  f850 350601ed      	mov	_uip_buf+18,#6
 932                     ; 393       BUF->protolen = 4;
 934  f854 350401ee      	mov	_uip_buf+19,#4
 935                     ; 394       BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 937  f858 ae0806        	ldw	x,#2054
 938  f85b cf01e7        	ldw	_uip_buf+12,x
 939                     ; 396       uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 941  f85e ae0211        	ldw	x,#_uip_buf+54
 942  f861 cf01d9        	ldw	_uip_appdata,x
 943                     ; 398       uip_len = sizeof(struct arp_hdr);
 945  f864 ae002a        	ldw	x,#42
 946                     ; 399       return;
 948  f867 202a          	jra	L07
 949  f869               L523:
 950                     ; 403     memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 952  f869 1c0004        	addw	x,#4
 953  f86c bf04          	ldw	c_x,x
 954  f86e ae0006        	ldw	x,#6
 955  f871               L46:
 956  f871 5a            	decw	x
 957  f872 92d604        	ld	a,([c_x.w],x)
 958  f875 d701db        	ld	(_uip_buf,x),a
 959  f878 5d            	tnzw	x
 960  f879 26f6          	jrne	L46
 961  f87b               L572:
 962                     ; 405   memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 964  f87b ae0006        	ldw	x,#6
 965  f87e               L66:
 966  f87e d60009        	ld	a,(_uip_ethaddr-1,x)
 967  f881 d701e0        	ld	(_uip_buf+5,x),a
 968  f884 5a            	decw	x
 969  f885 26f7          	jrne	L66
 970                     ; 407   IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 972  f887 ae0800        	ldw	x,#2048
 973  f88a cf01e7        	ldw	_uip_buf+12,x
 974                     ; 409   uip_len += sizeof(struct uip_eth_hdr);
 976  f88d ce01d7        	ldw	x,_uip_len
 977  f890 1c000e        	addw	x,#14
 978                     ; 410 }
 979  f893               L07:
 980  f893 cf01d7        	ldw	_uip_len,x
 983  f896 81            	ret	
1068                     	switch	.bss
1069  0435               L13_tmpage:
1070  0435 00            	ds.b	1
1071  0436               L72_arptime:
1072  0436 00            	ds.b	1
1073  0437               L52_c:
1074  0437 00            	ds.b	1
1075  0438               L32_i:
1076  0438 00            	ds.b	1
1077  0439               L12_ipaddr:
1078  0439 00000000      	ds.b	4
1079  043d               L71_arp_table:
1080  043d 000000000000  	ds.b	88
1081                     	xdef	_uip_arp_timer
1082                     	xdef	_uip_arp_out
1083                     	xdef	_uip_arp_arpin
1084                     	xdef	_uip_arp_init
1085                     	xref	_uip_ethaddr
1086                     	xref	_uip_draddr
1087                     	xref	_uip_netmask
1088                     	xref	_uip_hostaddr
1089                     	xref	_uip_len
1090                     	xref	_uip_appdata
1091                     	xref	_uip_buf
1092                     	xref.b	c_x
1093                     	xref.b	c_y
1113                     	end
